<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:st="http://www.srcML.org/srcML/stereotype" revision="1.0.0">

<unit xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C++" filename="AxisModelLog.hpp" hash="7a3fb9b55553e091478cd8882a98f5bed7ac411b"><comment type="block">/* -*- mode: c++ -*- */</comment>

<comment type="block" format="doxygen">/** @file

AxisModelLog class interface

Copyright (C) 2000-2004   The Board of Trustees of The Leland
Stanford Junior University.  All Rights Reserved.

$Id: AxisModelLog.h,v 1.53 2004/05/02 17:18:34 pfkeb Exp $ 

*/</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>_AxisModelLog_H_</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_AxisModelLog_H_</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"AxisModelBase.h"</cpp:file></cpp:include>

<comment type="block" format="doxygen">/** Given a range, calculates a model for an axis with a log scale.

    @author Stephane Bonneaud &lt;gandalf@slac.stanford.edu&gt; 
    @author Paul F. Kunz &lt;Paul_Kunz@slac.stanford.edu&gt; 
    @author Oded Wurman &lt;owurman@stanford.edu&gt;
*/</comment>
<class st:stereotype="entity command boundary">class <macro><name>MDL_HIPPOPLOT_API</name></macro> <name>AxisModelLog</name> <super_list>: <super><specifier>public</specifier> <name>AxisModelBase</name></super></super_list>
<block>{<private type="default">

  <comment type="block" format="doxygen">/** Sets the tick step, and the magnitude power magnitude (the
      greatest magnitude that either the maximum or minimum reaches,
      as well as the magnitude in the range length. */</comment>
  <function_decl><type><specifier>virtual</specifier> <name>void</name></type> <name>setTickStep</name><parameter_list>()</parameter_list>;</function_decl>

 </private><public>public:

  <comment type="block" format="doxygen">/** The constructor sets the location of the ticks, labels, and
      scale. */</comment>
  <constructor_decl><name>AxisModelLog</name> <parameter_list>( <parameter><decl><type><name>AxisLoc</name></type> <name>label</name></decl></parameter>, <parameter><decl><type><name>AxisLoc</name></type> <name>scale</name></decl></parameter> )</parameter_list>;</constructor_decl>

  <comment type="block" format="doxygen">/** The copy-like constructor allows conversion from the linear axis
      model. */</comment>
  <constructor_decl><name>AxisModelLog</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>AxisModelBase</name> <modifier>&amp;</modifier></type> <name>axis_model</name></decl></parameter> )</parameter_list>;</constructor_decl>

  <comment type="block" format="doxygen">/** The destructor. */</comment>
  <destructor_decl><name>~AxisModelLog</name><parameter_list>()</parameter_list>;</destructor_decl>

  <comment type="block" format="doxygen">/** The clone function returns an object of its own kind which
      is a copy of this object at this moment. */</comment>
  <function_decl><type><specifier>virtual</specifier> <name>AxisModelBase</name> <modifier>*</modifier></type> <name>clone</name><parameter_list>()</parameter_list> <specifier>const</specifier>;</function_decl>

  <comment type="block" format="doxygen">/** Returns true because this class represents a log scale. */</comment>
  <function_decl><type><name>bool</name></type> <name>isLog</name><parameter_list>()</parameter_list> <specifier>const</specifier>;</function_decl>

  <function_decl><type><specifier>virtual</specifier> <specifier>const</specifier> <name>Range</name> <modifier>&amp;</modifier></type> <name>adjustValues</name> <parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>Range</name> <modifier>&amp;</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

  <comment type="block" format="doxygen">/** This function makes log values logical on a logarithmic scale. */</comment>
  <function_decl><type><specifier>virtual</specifier> <specifier>const</specifier> <name>Range</name> <modifier>&amp;</modifier></type> <name>adjustLogValues</name><parameter_list>()</parameter_list>;</function_decl>

  <comment type="block" format="doxygen">/** This returns the next step for the ticks. */</comment>
  <function_decl><type><name>double</name></type> <name>nextStep</name><parameter_list>( <parameter><decl><type><name>double</name></type> <name>cur</name></decl></parameter> )</parameter_list>;</function_decl>

  <comment type="block" format="doxygen">/** This returns the previous step for the ticks. */</comment>
  <function_decl><type><name>double</name></type> <name>prevStep</name><parameter_list>( <parameter><decl><type><name>double</name></type> <name>cur</name></decl></parameter> )</parameter_list>;</function_decl>

  <function_decl><type><specifier>virtual</specifier> <name>Range</name></type> <name>calcLow</name>  <parameter_list>( <parameter><decl><type><name>int</name></type> <name>parm</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>dragging</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl></parameter> )</parameter_list>;</function_decl>
  <function_decl><type><specifier>virtual</specifier> <name>Range</name></type> <name>calcHigh</name> <parameter_list>( <parameter><decl><type><name>int</name></type> <name>parm</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>dragging</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl></parameter> )</parameter_list>;</function_decl>

</public>}</block>;</class>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="line">// _AxisModelLog_H_</comment>
</unit>

<unit xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C++" filename="AxisModelLog.cxx" hash="92c117c6b63a76477bcbb7b14242b89f7f662d15"><comment type="block" format="doxygen">/** @file

AxisModelLog class implementation

Originally from C code written at SLAC by Jonas Karlsson in
August 1990. Modified substantially since August 1990 by Gravina, 
Kunz, Pavel, Rensing, and Oded Wurman.

Copyright (C) 2000-2004  The Board of Trustees of The Leland * Stanford
Junior University.  All Rights Reserved.

$Id: AxisModelLog.cxx,v 1.102 2004/05/02 17:18:34 pfkeb Exp $
*/</comment>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>_MSC_VER</name></cpp:ifdef>
<comment type="line">// Includes max() and min() missing from MicroSoft Visual C++.</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"msdevstudio/MSconfig.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="line">//_MSC_VER</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"AxisModelLog.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"AxisTick.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;algorithm&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cassert&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cmath&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstdio&gt;</cpp:file></cpp:include>

<using>using <name><name>std</name><operator>::</operator><name>abs</name></name>;</using>
<using>using <name><name>std</name><operator>::</operator><name>max</name></name>;</using>
<using>using <name><name>std</name><operator>::</operator><name>min</name></name>;</using>
<using>using <name><name>std</name><operator>::</operator><name>string</name></name>;</using>
<using>using <name><name>std</name><operator>::</operator><name>vector</name></name>;</using>

<constructor><name><name>AxisModelLog</name><operator>::</operator><name>AxisModelLog</name></name> <parameter_list>( <parameter><decl><type><name>AxisLoc</name></type> <name>label_loc</name></decl></parameter>, 
			     <parameter><decl><type><name>AxisLoc</name></type> <name>scale_loc</name></decl></parameter> )</parameter_list>
  <member_init_list>: <call><name>AxisModelBase</name> <argument_list>( <argument><expr><name>label_loc</name></expr></argument>, <argument><expr><name>scale_loc</name></expr></argument> )</argument_list></call>
</member_init_list><block>{<block_content>    
</block_content>}</block></constructor>

<constructor><name><name>AxisModelLog</name><operator>::</operator><name>AxisModelLog</name></name> <parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>AxisModelBase</name> <modifier>&amp;</modifier></type> <name>axis_model</name></decl></parameter> )</parameter_list>
  <member_init_list>: <call><name>AxisModelBase</name> <argument_list>( <argument><expr><name>axis_model</name></expr></argument> )</argument_list></call>
</member_init_list><block>{<block_content>
  <comment type="line">// We just changed to log.  Therefore assure positive minimum.</comment>
  <expr_stmt><expr><call><name>adjustLogValues</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></constructor>

<destructor><name><name>AxisModelLog</name><operator>::</operator><name>~AxisModelLog</name></name><parameter_list>()</parameter_list>
<block>{<block_content>
</block_content>}</block></destructor>

<comment type="block">/* virtual */</comment>
<function st:stereotype="factory collaborator wrapper"><type><name>AxisModelBase</name> <modifier>*</modifier></type> <name><name>AxisModelLog</name><operator>::</operator><name>clone</name></name><parameter_list>()</parameter_list> <specifier>const</specifier>
<block>{<block_content>
  <return>return <expr><operator>new</operator> <call><name>AxisModelLog</name><argument_list>( <argument><expr><operator>*</operator><name>this</name></expr></argument> )</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function st:stereotype="non-void-command"><type><specifier>inline</specifier> <name>double</name></type> <name>FLT_EQUAL</name><parameter_list>( <parameter><decl><type><name>double</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>y</name></decl></parameter> )</parameter_list>
<block>{<block_content>
  <return>return <expr><operator>(</operator> <operator>(</operator><name>double</name><operator>)</operator><call><name>fabs</name><argument_list>( <argument><expr><name>x</name> <operator>-</operator> <name>y</name></expr></argument> )</argument_list></call> <operator>&lt;=</operator> <literal type="number">2.0</literal> <operator>*</operator> <operator>(</operator> <name>y</name> <operator>*</operator> <name>FLT_EPSILON</name> <operator>+</operator> <name>FLT_MIN</name> <operator>)</operator> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function st:stereotype="predicate collaborator stateless"><type><name>bool</name></type> <name><name>AxisModelLog</name><operator>::</operator><name>isLog</name></name><parameter_list>()</parameter_list> <specifier>const</specifier> 
<block>{<block_content> 
  <return>return <expr><literal type="boolean">true</literal></expr>;</return> 
</block_content>}</block></function>

<function st:stereotype="command collaborator"><type><name>void</name></type> <name><name>AxisModelLog</name><operator>::</operator><name>setTickStep</name></name><parameter_list>()</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><specifier>const</specifier> <name>Range</name> <modifier>&amp;</modifier></type> <name>range</name> <init>= <expr><call><name>getRange</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>double</name></type> <name>low</name> <init>= <expr><call><name><name>range</name><operator>.</operator><name>low</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>double</name></type> <name>high</name> <init>= <expr><call><name><name>range</name><operator>.</operator><name>high</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>double</name></type> <name>rangeMag</name> <init>= <expr><name>high</name> <operator>/</operator> <name>low</name></expr></init></decl>;</decl_stmt>
  
  <comment type="line">// The following algorithm determines the magnitude of the range.</comment>
  <expr_stmt><expr><name>m_rmag</name> <operator>=</operator> <call><name>floor</name><argument_list>( <argument><expr><call><name>log10</name><argument_list>( <argument><expr><name>rangeMag</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// This is used to determine the first tick.</comment>
  <expr_stmt><expr><name>m_pmag</name> <operator>=</operator> <call><name>ceil</name><argument_list>( <argument><expr><call><name>log10</name><argument_list>( <argument><expr><name>low</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// Now we find the magnitude between ticks, getting the minimum</comment>
  <comment type="line">// number of ticks without going below 4.</comment>
  <decl_stmt><decl><type><name>double</name></type> <name>m_tmag</name> <init>= <expr><call><name>floor</name><argument_list>( <argument><expr><name>m_rmag</name> <operator>/</operator> <literal type="number">3.0</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name>m_tick_step</name> <operator>=</operator> <call><name>pow</name><argument_list>( <argument><expr><literal type="number">10.0</literal></expr></argument>, <argument><expr><name>m_tmag</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function st:stereotype="non-void-command collaborator"><type><specifier>const</specifier> <name>Range</name> <modifier>&amp;</modifier></type> 
<name><name>AxisModelLog</name><operator>::</operator><name>adjustValues</name></name> <parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>Range</name> <modifier>&amp;</modifier></type> <name>limit</name></decl></parameter> )</parameter_list>
<block>{<block_content>

  <comment type="line">//Because the low value, the high value, and the length value of the</comment>
  <comment type="line">//range were so frequently used, I added those three fields. There </comment>
  <comment type="line">//should be an improvement in performance.</comment>
  
  <decl_stmt><decl><type><name>double</name></type> <name>mylow</name></decl>, <decl><type ref="prev"/><name>myhigh</name></decl>;</decl_stmt>

  <comment type="line">// We want to make sure that this is autoscaled. Therefore, to </comment>
  <comment type="line">// be on the safe side we set the minimum range to 0, so that </comment>
  <comment type="line">// the minimum positive value is used.</comment>
  <comment type="line">//   Range log( 0.0, getRange().high(), getRange().pos() );</comment>
  <comment type="line">//   setRange( log );</comment>
  
  <expr_stmt><expr><call><name>adjustLogValues</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>setTickStep</name><argument_list>()</argument_list></call></expr>;</expr_stmt> <comment type="line">// Needed for nextStep() and prevStep().</comment>

  <decl_stmt><decl><type><specifier>const</specifier> <name>Range</name> <modifier>&amp;</modifier></type> <name>init_range</name> <init>= <expr><call><name>getRange</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>double</name></type> <name>low</name> <init>= <expr><call><name><name>init_range</name><operator>.</operator><name>low</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>double</name></type> <name>high</name> <init>= <expr><call><name><name>init_range</name><operator>.</operator><name>high</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name>myhigh</name> <operator>=</operator> <name>mylow</name> <operator>=</operator> <call><name>pow</name><argument_list>( <argument><expr><literal type="number">10.0</literal></expr></argument>, <argument><expr><name>m_pmag</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// This decreases mylow so that "myrange" covers the whole range</comment>
  <comment type="line">// and then some.</comment>
  <while>while<condition>( <expr><name>mylow</name> <operator>&gt;=</operator> <name>low</name> <operator>*</operator> <name>m_scale_factor</name></expr> )</condition> <block>{<block_content>
    <expr_stmt><expr><name>mylow</name> <operator>=</operator> <call><name>prevStep</name><argument_list>( <argument><expr><name>mylow</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></while>
  
  <comment type="line">// This increases myhigh so that "myrange" covers the whole range</comment>
  <comment type="line">// and then some.</comment>
  <while>while<condition>( <expr><name>myhigh</name> <operator>&lt;=</operator> <name>high</name> <operator>*</operator> <name>m_scale_factor</name></expr> )</condition> <block>{<block_content>
    <expr_stmt><expr><name>myhigh</name> <operator>=</operator> <call><name>nextStep</name><argument_list>( <argument><expr><name>myhigh</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></while>
  
  <comment type="line">// If the range has a magnitude &lt; 10.0, reduce the minimum of the</comment>
  <comment type="line">// range by one tick mark.</comment>
  <if_stmt><if>if<condition>( <expr><name>myhigh</name> <operator>/</operator> <name>mylow</name> <operator>&lt;</operator> <literal type="number">10.0</literal></expr> )</condition> <block>{<block_content>
    <expr_stmt><expr><name>mylow</name> <operator>=</operator> <call><name>prevStep</name><argument_list>( <argument><expr><name>mylow</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  
  <comment type="line">// If the range still has a magnitude &lt; 10.0, increase the maximum</comment>
  <comment type="line">// of the range by one tick mark until the magnitude is 10.0.</comment>
  <while>while<condition>( <expr><name>myhigh</name> <operator>/</operator> <name>mylow</name> <operator>&lt;</operator> <literal type="number">10.0</literal></expr> )</condition> <block>{<block_content>
    <expr_stmt><expr><name>myhigh</name> <operator>=</operator> <call><name>nextStep</name><argument_list>( <argument><expr><name>myhigh</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></while>

  <expr_stmt><expr><name>myhigh</name> <operator>/=</operator> <name>m_scale_factor</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>mylow</name>  <operator>/=</operator> <name>m_scale_factor</name></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>Range</name></type> <name>new_range</name> <argument_list>( <argument><expr><name>mylow</name></expr></argument>, <argument><expr><name>myhigh</name></expr></argument>, <argument><expr><call><name><name>init_range</name><operator>.</operator><name>pos</name></name><argument_list>()</argument_list></call></expr></argument> )</argument_list></decl>;</decl_stmt>
  
  <comment type="line">// Compare the newrange with init_range. If new range is too wide</comment>
  <comment type="line">// compared to init_range, then do not set newrange.</comment>

  <decl_stmt><decl><type><name>double</name></type> <name>new_width</name> <init>= <expr><call><name><name>new_range</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>double</name></type> <name>init_width</name> <init>= <expr><call><name><name>init_range</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  
  <if_stmt><if>if <condition>( <expr><name>new_width</name> <operator>&gt;</operator> <name>init_width</name> <operator>*</operator> <literal type="number">10</literal></expr> )</condition><block>{<block_content>  <comment type="line">// This 10 is a hack. Could be any</comment>
                                       <comment type="line">// decent number.</comment>
    <if_stmt><if>if <condition>( <expr><name>low</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> )</condition> <block>{<block_content>
      <expr_stmt><expr><name>low</name> <operator>*=</operator> <literal type="number">1.05</literal></expr>;</expr_stmt>    <comment type="line">// This 5% is also a hack.</comment>
    </block_content>}</block></if>
    <else>else<block>{<block_content>
      <expr_stmt><expr><name>low</name> <operator>*=</operator> <literal type="number">0.95</literal></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    
    <if_stmt><if>if <condition>( <expr><name>high</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><name>high</name> <operator>*=</operator> <literal type="number">0.95</literal></expr>;</expr_stmt>
    </block_content>}</block></if>
    <else>else<block>{<block_content>
      <expr_stmt><expr><name>high</name> <operator>*=</operator> <literal type="number">1.05</literal></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    
    <decl_stmt><decl><type><name>Range</name></type> <name>newRange</name> <argument_list>( <argument><expr><name>low</name></expr></argument>, <argument><expr><name>high</name></expr></argument>, <argument><expr><call><name><name>init_range</name><operator>.</operator><name>pos</name></name><argument_list>()</argument_list></call></expr></argument> )</argument_list></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>setIntersectRange</name> <argument_list>( <argument><expr><name>newRange</name></expr></argument>, <argument><expr><name>limit</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>m_range</name></expr>;</return>
  
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>setIntersectRange</name> <argument_list>( <argument><expr><name>new_range</name></expr></argument>, <argument><expr><name>limit</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>m_range</name></expr>;</return>
  
  <comment type="line">//  // The following sets the range too wide.  Oded, what did you have</comment>
  <comment type="line">//  // in mind with this?</comment>
  <comment type="line">//  mylow = getRange(false).low() * sqrt( getRange(false).low() / </comment>
  <comment type="line">//					  getRange(false).high()     );</comment>
  <comment type="line">//  myhigh = getRange(false).high() * sqrt( getRange(false).high() / </comment>
  <comment type="line">//					    getRange(false).low()    );</comment>
  <comment type="line">//  Range range(mylow, myhigh, getRange(false).pos());</comment>
  <comment type="line">//  setIntersectRange ( range, limit );</comment>
  <comment type="line">//  return m_range;</comment>

</block_content>}</block></function>

<function st:stereotype="non-void-command collaborator"><type><specifier>const</specifier> <name>Range</name> <modifier>&amp;</modifier></type> 
<name><name>AxisModelLog</name><operator>::</operator><name>adjustLogValues</name></name> <parameter_list>()</parameter_list>
<block>{<block_content>

  <decl_stmt><decl><type><specifier>const</specifier> <name>Range</name> <modifier>&amp;</modifier></type> <name>r</name> <init>= <expr><call><name>getRange</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>double</name></type> <name>low</name> <init>= <expr><call><name><name>r</name><operator>.</operator><name>low</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>double</name></type> <name>high</name> <init>= <expr><call><name><name>r</name><operator>.</operator><name>high</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>double</name></type> <name>pos</name> <init>= <expr><call><name><name>r</name><operator>.</operator><name>pos</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  
  <if_stmt><if>if<condition>( <expr><name>low</name> <operator>&gt;</operator> <literal type="number">0.0</literal></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><name>r</name></expr>;</return></block_content></block></if></if_stmt>

  <if_stmt><if>if<condition>( <expr><name>pos</name> <operator>==</operator> <name>high</name></expr> )</condition> <block>{<block_content> <comment type="line">// Will give no range</comment>
<comment type="line">//     setRange ( pos / 10.0, pos * 10.0, pos );</comment>
    <decl_stmt><decl><type><name>double</name></type> <name>l</name> <init>= <expr><name>pos</name> <operator>/</operator> <literal type="number">10.0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>double</name></type> <name>h</name> <init>= <expr><name>pos</name> <operator>*</operator> <literal type="number">10.0</literal></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>setRange</name> <argument_list>( <argument><expr><name>l</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>pos</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>m_range</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if<condition>( <expr><name>pos</name> <operator>==</operator> <name>DBL_MAX</name> <operator>||</operator> <name>pos</name> <operator>&lt;=</operator> <literal type="number">0.0</literal></expr> )</condition> <block>{<block_content> <comment type="line">// No positive values!!!</comment>
    <expr_stmt><expr><call><name>setRange</name> <argument_list>( <argument><expr><literal type="number">0.01</literal></expr></argument>, <argument><expr><literal type="number">100.0</literal></expr></argument>, <argument><expr><literal type="number">1.0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>m_range</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>setRange</name> <argument_list>( <argument><expr><name>pos</name></expr></argument>, <argument><expr><name>high</name></expr></argument>, <argument><expr><name>pos</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>m_range</name></expr>;</return>
</block_content>}</block></function>

<function st:stereotype="non-void-command"><type><name>double</name></type> <name><name>AxisModelLog</name><operator>::</operator><name>nextStep</name></name> <parameter_list>( <parameter><decl><type><name>double</name></type> <name>current</name></decl></parameter> )</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>double</name></type> <name>tick_step</name> <init>= <expr><call><name>getTickStep</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="line">// Must already be called</comment>
  <if_stmt><if>if<condition>( <expr><name>tick_step</name> <operator>==</operator> <literal type="number">1.0</literal></expr> )</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>base</name> <init>= <expr><cast type="static">static_cast<argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list><argument_list>( <argument><expr><name>current</name> <operator>/</operator>
				 <call><name>pow</name><argument_list>( <argument><expr><literal type="number">10.0</literal></expr></argument>, <argument><expr><call><name>floor</name><argument_list>( <argument><expr><call><name>log10</name><argument_list>( <argument><expr><name>current</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr></argument> )</argument_list></cast></expr></init></decl>;</decl_stmt>
    <comment type="line">// Look! I used a switch statement in C++!!!!!  What this does</comment>
    <comment type="line">// is go through and add the intermediate 2 and 5 ticks if the</comment>
    <comment type="line">// powers of 10 alone would not have given the minimum number of</comment>
    <comment type="line">// ticks.  m_tick_step is completely ignored if the flag is</comment>
    <comment type="line">// true, since it is assumed to be 0.</comment>
    
    <comment type="block" format="doxygen">/** @todo: Change this to an array of good ticks rather than
	hardcoded in here. */</comment>
    <switch>switch<condition>( <expr><name>base</name></expr> )</condition> <block>{<block_content>
    <case>case <expr><literal type="number">1</literal></expr>:</case>
      <expr_stmt><expr><name>current</name> <operator>*=</operator> <literal type="number">2.0</literal></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><literal type="number">2</literal></expr>:</case>
      <expr_stmt><expr><name>current</name> <operator>/=</operator> <literal type="number">2.0</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name>current</name> <operator>*=</operator> <literal type="number">5.0</literal></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><literal type="number">3</literal></expr>:</case>
      <expr_stmt><expr><name>current</name> <operator>/=</operator> <literal type="number">4.0</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name>current</name> <operator>*=</operator> <literal type="number">5.0</literal></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><literal type="number">4</literal></expr>:</case> <comment type="line">// a 5 becomes a 4 sometimes because of round of error</comment>
    <case>case <expr><literal type="number">5</literal></expr>:</case>
      <expr_stmt><expr><name>current</name> <operator>*=</operator> <literal type="number">2.0</literal></expr>;</expr_stmt>
      <break>break;</break>
    <default>default:</default>
      <expr_stmt><expr><call><name>assert</name> <argument_list>( <argument><expr><literal type="boolean">false</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></switch>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name>current</name> <operator>*=</operator> <name>tick_step</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <return>return <expr><name>current</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/** @todo Change this to an array of good ticks rather than hardcoded
    in here.  */</comment>
<function st:stereotype="non-void-command"><type><name>double</name></type> <name><name>AxisModelLog</name><operator>::</operator><name>prevStep</name></name> <parameter_list>( <parameter><decl><type><name>double</name></type> <name>current</name></decl></parameter> )</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>double</name></type> <name>tick_step</name> <init>= <expr><call><name>getTickStep</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="line">// It must already be called.</comment>
  <if_stmt><if>if<condition>( <expr><name>tick_step</name> <operator>==</operator> <literal type="number">1.0</literal></expr> )</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>base</name> <init>= <expr><cast type="static">static_cast<argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list><argument_list>( <argument><expr><name>current</name> <operator>/</operator>
				 <call><name>pow</name><argument_list>( <argument><expr><literal type="number">10.0</literal></expr></argument>, <argument><expr><call><name>floor</name><argument_list>( <argument><expr><call><name>log10</name><argument_list>( <argument><expr><name>current</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr></argument> )</argument_list></cast></expr></init></decl>;</decl_stmt>
    <comment type="line">// Look! I used a switch statement in C++!!!!!  What this does</comment>
    <comment type="line">// is go through and add the intermediate 2 and 5 ticks if the</comment>
    <comment type="line">// powers of 10 alone would not have given the minimum number of</comment>
    <comment type="line">// ticks.  m_tick_step is completely ignored if the flag is</comment>
    <comment type="line">// true, since it is assumed to be 0.</comment>
    
    <switch>switch<condition>( <expr><name>base</name></expr> )</condition> <block>{<block_content>
    <case>case <expr><literal type="number">1</literal></expr>:</case>
      <expr_stmt><expr><name>current</name> <operator>/=</operator> <literal type="number">2.0</literal></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><literal type="number">2</literal></expr>:</case>
      <expr_stmt><expr><name>current</name> <operator>/=</operator> <literal type="number">2.0</literal></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><literal type="number">4</literal></expr>:</case>
      <expr_stmt><expr><name>current</name> <operator>/=</operator> <literal type="number">5.0</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name>current</name> <operator>*=</operator> <literal type="number">2.0</literal></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><literal type="number">5</literal></expr>:</case>
      <expr_stmt><expr><name>current</name> <operator>/=</operator> <literal type="number">5.0</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name>current</name> <operator>*=</operator> <literal type="number">2.0</literal></expr>;</expr_stmt>
      <break>break;</break>
    <default>default:</default>
      <expr_stmt><expr><call><name>assert</name> <argument_list>( <argument><expr><literal type="boolean">false</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></switch>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name>current</name> <operator>/=</operator> <name>tick_step</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <return>return <expr><name>current</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/** @todo Check is in place to keep it from length of 0,
	but it's fairly hacked (length &gt; 0.0001).  This whole
	topic needs discussion. */</comment>
<function st:stereotype="non-void-command collaborator"><type><name>Range</name></type> <name><name>AxisModelLog</name><operator>::</operator><name>calcLow</name></name> <parameter_list>( <parameter><decl><type><name>int</name></type> <name>parm</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>dragging</name></decl></parameter> )</parameter_list>
<block>{<block_content>
  <expr_stmt><expr><call><name>startDragging</name> <argument_list>( <argument><expr><name>dragging</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>double</name></type> <name>low</name> <init>= <expr><call><name><name>m_start_range</name><operator>.</operator><name>low</name></name> <argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>double</name></type> <name>high</name> <init>= <expr><call><name><name>m_start_range</name><operator>.</operator><name>high</name></name> <argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>double</name></type> <name>k</name> <init>= <expr><call><name>log10</name> <argument_list>( <argument><expr><name>high</name> <operator>/</operator> <name>low</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>double</name></type> <name>x</name> <init>= <expr><operator>(</operator> <name>parm</name> <operator>-</operator> <literal type="number">50</literal> <operator>)</operator> <operator>/</operator> <literal type="number">50.0</literal></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>double</name></type> <name>new_low</name> <init>= <expr><name>low</name> <operator>*</operator> <call><name>pow</name> <argument_list>( <argument><expr><literal type="number">10.0</literal></expr></argument>, <argument><expr><name>k</name> <operator>*</operator> <name>x</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name>new_low</name> <operator>=</operator> <call><name>max</name> <argument_list>( <argument><expr><name>new_low</name></expr></argument>, <argument><expr><literal type="number">10.0</literal> <operator>*</operator> <name>DBL_EPSILON</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>new_low</name> <operator>=</operator> <call><name>min</name> <argument_list>( <argument><expr><name>new_low</name></expr></argument>,  <argument><expr><name>high</name> <operator>-</operator> <literal type="number">100.0</literal> <operator>*</operator> <name>DBL_EPSILON</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if<condition>( <expr><call><name>abs</name><argument_list>( <argument><expr><name>new_low</name> <operator>-</operator> <call><name><name>m_range</name><operator>.</operator><name>high</name></name><argument_list>()</argument_list></call></expr></argument> )</argument_list></call> <operator>&lt;</operator> <literal type="number">0.0001</literal></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><name>m_range</name></expr>;</return></block_content></block></if></if_stmt>

  <return>return <expr><call><name>Range</name> <argument_list>( <argument><expr><name>new_low</name></expr></argument>, <argument><expr><name>high</name></expr></argument>, <argument><expr><call><name><name>m_range</name><operator>.</operator><name>pos</name></name><argument_list>()</argument_list></call></expr></argument> )</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/** @todo Check is in place to keep it from length of 0,
	but it's fairly hacked (length &gt; 0.0001).  This whole
	topic needs discussion. */</comment>
<function st:stereotype="non-void-command collaborator"><type><name>Range</name></type> <name><name>AxisModelLog</name><operator>::</operator><name>calcHigh</name></name> <parameter_list>( <parameter><decl><type><name>int</name></type> <name>parm</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>dragging</name></decl></parameter> )</parameter_list>
<block>{<block_content>
  <expr_stmt><expr><call><name>startDragging</name> <argument_list>( <argument><expr><name>dragging</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>double</name></type> <name>low</name> <init>= <expr><call><name><name>m_start_range</name><operator>.</operator><name>low</name></name> <argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>double</name></type> <name>high</name> <init>= <expr><call><name><name>m_start_range</name><operator>.</operator><name>high</name></name> <argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>double</name></type> <name>k</name> <init>= <expr><call><name>log10</name> <argument_list>( <argument><expr><name>high</name> <operator>/</operator> <name>low</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>double</name></type> <name>multiplier</name> <init>= <expr><operator>(</operator> <name>parm</name> <operator>-</operator> <literal type="number">50</literal> <operator>)</operator> <operator>/</operator> <literal type="number">50.0</literal></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>double</name></type> <name>new_high</name> <init>= <expr><name>high</name> <operator>*</operator> <call><name>pow</name> <argument_list>( <argument><expr><literal type="number">10.0</literal></expr></argument>, <argument><expr><name>k</name> <operator>*</operator> <name>multiplier</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if<condition>( <expr><call><name>abs</name><argument_list>( <argument><expr><name>new_high</name> <operator>-</operator> <call><name><name>m_range</name><operator>.</operator><name>low</name></name><argument_list>()</argument_list></call></expr></argument> )</argument_list></call> <operator>&lt;</operator> <literal type="number">0.0001</literal></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><name>m_range</name></expr>;</return></block_content></block></if></if_stmt>

  <return>return <expr><call><name>Range</name> <argument_list>( <argument><expr><name>low</name></expr></argument>, <argument><expr><name>new_high</name></expr></argument>, <argument><expr><call><name><name>m_range</name><operator>.</operator><name>pos</name></name><argument_list>()</argument_list></call></expr></argument> )</argument_list></call></expr>;</return>
</block_content>}</block></function>
</unit>

</unit>
