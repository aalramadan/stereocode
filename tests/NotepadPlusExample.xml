<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0">

<unit xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C++" filename="Notepad_plus_Window.h" hash="af85e524cc2ae3e3b35bb4866f8f90432c962cdd"><comment type="line">// This file is part of Notepad++ project</comment>
<comment type="line">// Copyright (C)2021 Don HO &lt;don.h@free.fr&gt;</comment>

<comment type="line">// This program is free software: you can redistribute it and/or modify</comment>
<comment type="line">// it under the terms of the GNU General Public License as published by</comment>
<comment type="line">// the Free Software Foundation, either version 3 of the License, or</comment>
<comment type="line">// at your option any later version.</comment>
<comment type="line">//</comment>
<comment type="line">// This program is distributed in the hope that it will be useful,</comment>
<comment type="line">// but WITHOUT ANY WARRANTY; without even the implied warranty of</comment>
<comment type="line">// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the</comment>
<comment type="line">// GNU General Public License for more details.</comment>
<comment type="line">//</comment>
<comment type="line">// You should have received a copy of the GNU General Public License</comment>
<comment type="line">// along with this program.  If not, see &lt;https://www.gnu.org/licenses/&gt;.</comment>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>once</name></cpp:pragma>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"Notepad_plus.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>splitterSize</name> <init>= <expr><literal type="number">8</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>TCHAR</name></type> <name><name>COMMAND_ARG_HELP</name><index>[]</index></name> <init>= <expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"Usage :\r\
\r\
notepad++ [--help] [-multiInst] [-noPlugin] [-lLanguage] [-udl=\"My UDL Name\"] [-LlangCode] [-nLineNumber] [-cColumnNumber] [-pPosition] [-xLeftPos] [-yTopPos] [-monitor] [-nosession] [-notabbar] [-ro] [-systemtray] [-loadingTime] [-alwaysOnTop] [-openSession] [-r] [-qn=\"Easter egg name\" | -qt=\"a text to display.\" | -qf=\"D:\\my quote.txt\"] [-qSpeed1|2|3] [-quickPrint] [-settingsDir=\"d:\\your settings dir\\\"] [-openFoldersAsWorkspace]  [-titleAdd=\"additional title bar text\"][filePath]\r\
\r\
--help : This help message\r\
-multiInst : Launch another Notepad++ instance\r\
-noPlugin : Launch Notepad++ without loading any plugin\r\
-l : Open file or Ghost type with syntax highlighting of choice\r\
-udl=\"My UDL Name\": Open file by applying User Defined Language\r\
-L : Apply indicated localization, langCode is browser language code\r\
-n : Scroll to indicated line on filePath\r\
-c : Scroll to indicated column on filePath\r\
-p : Scroll to indicated position on filePath\r\
-x : Move Notepad++ to indicated left side position on the screen\r\
-y : Move Notepad++ to indicated top position on the screen\r\
-monitor: Open file with file monitoring enabled\r\
-nosession : Launch Notepad++ without previous session\r\
-notabbar : Launch Notepad++ without tabbar\r\
-ro : Make the filePath read only\r\
-systemtray : Launch Notepad++ directly in system tray\r\
-loadingTime : Display Notepad++ loading time\r\
-alwaysOnTop : Make Notepad++ always on top\r\
-openSession : Open a session. filePath must be a session file\r\
-r : Open files recursively. This argument will be ignored\r\
     if filePath contain no wildcard character\r\
-qn=\"Easter egg name\": Ghost type easter egg via its name\r\
-qt=\"text to display.\": Ghost type the given text\r\
-qf=\"D:\\my quote.txt\": Ghost type a file content via the file path\r\
-qSpeed : Ghost typing speed. Value from 1 to 3 for slow, fast and fastest\r\
-quickPrint : Print the file given as argument then quit Notepad++\r\
-settingsDir=\"d:\\your settings dir\\\": Override the default settings dir\r\
-openFoldersAsWorkspace: open filePath of folder(s) as workspace\r\
-titleAdd=\"string\": add string to Notepad++ title bar\r\
filePath : file or folder name to open (absolute or relative path name)\r\
"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>


<class>class <name>Notepad_plus_Window</name> <super_list>: <super><specifier>public</specifier> <name>Window</name></super></super_list>
<block>{<private type="default">
</private><public>public:
	<function_decl><type><name>void</name></type> <name>init</name><parameter_list>(<parameter><decl><type><name>HINSTANCE</name></type></decl></parameter>, <parameter><decl><type><name>HWND</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>TCHAR</name> <modifier>*</modifier></type><name>cmdLine</name></decl></parameter>, <parameter><decl><type><name>CmdLineParams</name> <modifier>*</modifier></type><name>cmdLineParams</name></decl></parameter>)</parameter_list>;</function_decl>

	<function_decl><type><name>bool</name></type> <name>isDlgsMsg</name><parameter_list>(<parameter><decl><type><name>MSG</name> <modifier>*</modifier></type><name>msg</name></decl></parameter>)</parameter_list> <specifier>const</specifier>;</function_decl>

	<function><type><name>HACCEL</name></type> <name>getAccTable</name><parameter_list>()</parameter_list> <specifier>const</specifier> <block>{<block_content>
		<return>return <expr><call><name><name>_notepad_plus_plus_core</name><operator>.</operator><name>getAccTable</name></name><argument_list>()</argument_list></call></expr>;</return>
	</block_content>}</block></function><empty_stmt>;</empty_stmt>

	<function><type><name>bool</name></type> <name>emergency</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>generic_string</name><modifier>&amp;</modifier></type> <name>emergencySavedDir</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<return>return <expr><call><name><name>_notepad_plus_plus_core</name><operator>.</operator><name>emergency</name></name><argument_list>(<argument><expr><name>emergencySavedDir</name></expr></argument>)</argument_list></call></expr>;</return>
	</block_content>}</block></function><empty_stmt>;</empty_stmt>

	<function><type><name>bool</name></type> <name>isPrelaunch</name><parameter_list>()</parameter_list> <specifier>const</specifier> <block>{<block_content>
		<return>return <expr><name>_isPrelaunch</name></expr>;</return>
	</block_content>}</block></function><empty_stmt>;</empty_stmt>

	<function><type><name>void</name></type> <name>setIsPrelaunch</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>val</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<expr_stmt><expr><name>_isPrelaunch</name> <operator>=</operator> <name>val</name></expr>;</expr_stmt>
	</block_content>}</block></function><empty_stmt>;</empty_stmt>

	<function><type><name>generic_string</name></type> <name>getPluginListVerStr</name><parameter_list>()</parameter_list> <specifier>const</specifier> <block>{<block_content>
		<return>return <expr><call><name><name>_notepad_plus_plus_core</name><operator>.</operator><name>getPluginListVerStr</name></name><argument_list>()</argument_list></call></expr>;</return>
	</block_content>}</block></function><empty_stmt>;</empty_stmt>

	<function><type><specifier>virtual</specifier> <name>void</name></type> <name>destroy</name><parameter_list>()</parameter_list> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>_hIconAbsent</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name><operator>::</operator><name>DestroyIcon</name></name><argument_list>(<argument><expr><name>_hIconAbsent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<expr_stmt><expr><call><name><operator>::</operator><name>DestroyWindow</name></name><argument_list>(<argument><expr><name>_hSelf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></function><empty_stmt>;</empty_stmt>

	<function><type><specifier>static</specifier> <specifier>const</specifier> <name>TCHAR</name> <modifier>*</modifier></type> <name>getClassName</name><parameter_list>()</parameter_list> <block>{<block_content>
		<return>return <expr><name>_className</name></expr>;</return>
	</block_content>}</block></function><empty_stmt>;</empty_stmt>

	<function><type><name>HICON</name></type> <name>getAbsentIcoHandle</name><parameter_list>()</parameter_list> <block>{<block_content>
		<return>return <expr><name>_hIconAbsent</name></expr>;</return>
	</block_content>}</block></function><empty_stmt>;</empty_stmt>

	<decl_stmt><decl><type><specifier>static</specifier> <name>HWND</name></type> <name>gNppHWND</name></decl>;</decl_stmt>	<comment type="line">//static handle to Notepad++ window, NULL if non-existant</comment>

	<function_decl><type><name>void</name></type> <name>setStartupBgColor</name><parameter_list>(<parameter><decl><type><name>COLORREF</name></type> <name>BgColor</name></decl></parameter>)</parameter_list>;</function_decl>

	<function><type><specifier>static</specifier> <name>void</name></type> <name>loadIcon</name><parameter_list>(<parameter><decl><type><name>HINSTANCE</name></type> <name>hinst</name></decl></parameter>, <parameter><decl><type><name>wchar_t</name><modifier>*</modifier></type> <name>pszName</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>cx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>cy</name></decl></parameter>, <parameter><decl><type><name>HICON</name><modifier>*</modifier></type> <name>icon</name></decl></parameter>)</parameter_list>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><call><name><operator>::</operator><name>LoadIconWithScaleDown</name></name><argument_list>(<argument><expr><name>hinst</name></expr></argument>, <argument><expr><name>pszName</name></expr></argument>, <argument><expr><name>cx</name></expr></argument>, <argument><expr><name>cy</name></expr></argument>, <argument><expr><name>icon</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>S_OK</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><operator>*</operator><name>icon</name> <operator>=</operator> <cast type="static">static_cast<argument_list type="generic">&lt;<argument><expr><name>HICON</name></expr></argument>&gt;</argument_list><argument_list>(<argument><expr><call><name><operator>::</operator><name>LoadImage</name></name><argument_list>(<argument><expr><name>hinst</name></expr></argument>, <argument><expr><name>pszName</name></expr></argument>, <argument><expr><name>IMAGE_ICON</name></expr></argument>, <argument><expr><name>cx</name></expr></argument>, <argument><expr><name>cy</name></expr></argument>, <argument><expr><name>LR_DEFAULTCOLOR</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></cast></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></function>

	<function><type><specifier>static</specifier> <name>void</name></type> <name>loadTrayIcon</name><parameter_list>(<parameter><decl><type><name>HINSTANCE</name></type> <name>hinst</name></decl></parameter>, <parameter><decl><type><name>HICON</name><modifier>*</modifier></type> <name>icon</name></decl></parameter>)</parameter_list>
	<block>{<block_content>
		<expr_stmt><expr><call><name>loadIcon</name><argument_list>(<argument><expr><name>hinst</name></expr></argument>, <argument><expr><call><name>MAKEINTRESOURCE</name><argument_list>(<argument><expr><name>IDI_M30ICON</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><operator>::</operator><name>GetSystemMetrics</name></name><argument_list>(<argument><expr><name>SM_CXSMICON</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><operator>::</operator><name>GetSystemMetrics</name></name><argument_list>(<argument><expr><name>SM_CYSMICON</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>icon</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></function>

</public><private>private:
	<decl_stmt><decl><type><name>Notepad_plus</name></type> <name>_notepad_plus_plus_core</name></decl>;</decl_stmt>
	<function_decl><type><specifier>static</specifier> <name>LRESULT</name> <name>CALLBACK</name></type> <name>Notepad_plus_Proc</name><parameter_list>(<parameter><decl><type><name>HWND</name></type> <name>hwnd</name></decl></parameter>, <parameter><decl><type><name>UINT</name></type> <name>Message</name></decl></parameter>, <parameter><decl><type><name>WPARAM</name></type> <name>wParam</name></decl></parameter>, <parameter><decl><type><name>LPARAM</name></type> <name>lParam</name></decl></parameter>)</parameter_list>;</function_decl>
	<function_decl><type><name>LRESULT</name></type> <name>runProc</name><parameter_list>(<parameter><decl><type><name>HWND</name></type> <name>hwnd</name></decl></parameter>, <parameter><decl><type><name>UINT</name></type> <name>Message</name></decl></parameter>, <parameter><decl><type><name>WPARAM</name></type> <name>wParam</name></decl></parameter>, <parameter><decl><type><name>LPARAM</name></type> <name>lParam</name></decl></parameter>)</parameter_list>;</function_decl>

	<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>TCHAR</name></type> <name><name>_className</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name>_isPrelaunch</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name>_disablePluginsManager</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>QuoteParams</name></type> <name>_quoteParams</name></decl>;</decl_stmt> <comment type="line">// keep the availability of quote parameters for thread using</comment>
	<decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>wstring</name></name></type> <name>_userQuote</name></decl>;</decl_stmt> <comment type="line">// keep the availability of this string for thread using</comment>

	<decl_stmt><decl><type><name>HICON</name></type> <name>_hIconAbsent</name> <init>= <expr><literal type="null">nullptr</literal></expr></init></decl>;</decl_stmt>
</private>}</block>;</class>
</unit>

<unit xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C++" filename="Notepad_plus_Window.cpp" hash="5cfea69b85e7303440c03b6534681943bd7b33ed"><comment type="line">// This file is part of Notepad++ project</comment>
<comment type="line">// Copyright (C)2021 Don HO &lt;don.h@free.fr&gt;</comment>

<comment type="line">// This program is free software: you can redistribute it and/or modify</comment>
<comment type="line">// it under the terms of the GNU General Public License as published by</comment>
<comment type="line">// the Free Software Foundation, either version 3 of the License, or</comment>
<comment type="line">// at your option any later version.</comment>
<comment type="line">//</comment>
<comment type="line">// This program is distributed in the hope that it will be useful,</comment>
<comment type="line">// but WITHOUT ANY WARRANTY; without even the implied warranty of</comment>
<comment type="line">// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the</comment>
<comment type="line">// GNU General Public License for more details.</comment>
<comment type="line">//</comment>
<comment type="line">// You should have received a copy of the GNU General Public License</comment>
<comment type="line">// along with this program.  If not, see &lt;https://www.gnu.org/licenses/&gt;.</comment>


<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;time.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;shlwapi.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"Notepad_plus_Window.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>const</specifier> <name>TCHAR</name></type> <name><name>Notepad_plus_Window</name><operator>::</operator><name>_className</name><index>[<expr><literal type="number">32</literal></expr>]</index></name> <init>= <expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"Notepad++"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HWND</name></type> <name><name>Notepad_plus_Window</name><operator>::</operator><name>gNppHWND</name></name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>



<namespace>namespace <comment type="line">// anonymous</comment>
<block>{

	<struct>struct <name>PaintLocker</name> <specifier>final</specifier>
	<block>{<public type="default">
		<constructor><specifier>explicit</specifier> <name>PaintLocker</name><parameter_list>(<parameter><decl><type><name>HWND</name></type> <name>handle</name></decl></parameter>)</parameter_list>
			<member_init_list>: <call><name>handle</name><argument_list>(<argument><expr><name>handle</name></expr></argument>)</argument_list></call>
		</member_init_list><block>{<block_content>
			<comment type="line">// disallow drawing on the window</comment>
			<expr_stmt><expr><call><name>LockWindowUpdate</name><argument_list>(<argument><expr><name>handle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></constructor>

		<destructor><name>~PaintLocker</name><parameter_list>()</parameter_list>
		<block>{<block_content>
			<comment type="line">// re-allow drawing for the window</comment>
			<expr_stmt><expr><call><name>LockWindowUpdate</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<comment type="line">// force re-draw</comment>
			<expr_stmt><expr><call><name>InvalidateRect</name><argument_list>(<argument><expr><name>handle</name></expr></argument>, <argument><expr><literal type="null">nullptr</literal></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>RedrawWindow</name><argument_list>(<argument><expr><name>handle</name></expr></argument>, <argument><expr><literal type="null">nullptr</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>RDW_ERASE</name> <operator>|</operator> <name>RDW_ALLCHILDREN</name> <operator>|</operator> <name>RDW_FRAME</name> <operator>|</operator> <name>RDW_INVALIDATE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></destructor>

		<decl_stmt><decl><type><name>HWND</name></type> <name>handle</name></decl>;</decl_stmt>
	</public>}</block>;</struct>

}</block></namespace> <comment type="line">// anonymous namespace</comment>


<function><type><name>void</name></type> <name><name>Notepad_plus_Window</name><operator>::</operator><name>setStartupBgColor</name></name><parameter_list>(<parameter><decl><type><name>COLORREF</name></type> <name>BgColor</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>RECT</name></type> <name>windowClientArea</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>HDC</name></type> <name>hdc</name> <init>= <expr><call><name>GetDCEx</name><argument_list>(<argument><expr><name>_hSelf</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>DCX_CACHE</name> <operator>|</operator> <name>DCX_LOCKWINDOWUPDATE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="line">//lock window update flag due to PaintLocker</comment>
	<expr_stmt><expr><call><name>GetClientRect</name><argument_list>(<argument><expr><name>_hSelf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>windowClientArea</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>FillRect</name><argument_list>(<argument><expr><name>hdc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>windowClientArea</name></expr></argument>, <argument><expr><call><name>CreateSolidBrush</name><argument_list>(<argument><expr><name>BgColor</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ReleaseDC</name><argument_list>(<argument><expr><name>_hSelf</name></expr></argument>, <argument><expr><name>hdc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>



<function><type><name>void</name></type> <name><name>Notepad_plus_Window</name><operator>::</operator><name>init</name></name><parameter_list>(<parameter><decl><type><name>HINSTANCE</name></type> <name>hInst</name></decl></parameter>, <parameter><decl><type><name>HWND</name></type> <name>parent</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>TCHAR</name> <modifier>*</modifier></type><name>cmdLine</name></decl></parameter>, <parameter><decl><type><name>CmdLineParams</name> <modifier>*</modifier></type><name>cmdLineParams</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>time_t</name></type> <name>timestampBegin</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>cmdLineParams</name><operator>-&gt;</operator><name>_showLoadingTime</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>timestampBegin</name> <operator>=</operator> <call><name>time</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name><name>Window</name><operator>::</operator><name>init</name></name><argument_list>(<argument><expr><name>hInst</name></expr></argument>, <argument><expr><name>parent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>WNDCLASS</name></type> <name>nppClass</name><argument_list>{}</argument_list></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>nppClass</name><operator>.</operator><name>style</name></name> <operator>=</operator> <name>CS_BYTEALIGNWINDOW</name> <operator>|</operator> <name>CS_DBLCLKS</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>nppClass</name><operator>.</operator><name>lpfnWndProc</name></name> <operator>=</operator> <name>Notepad_plus_Proc</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>nppClass</name><operator>.</operator><name>cbClsExtra</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>nppClass</name><operator>.</operator><name>cbWndExtra</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>nppClass</name><operator>.</operator><name>hInstance</name></name> <operator>=</operator> <name>_hInst</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>nppClass</name><operator>.</operator><name>hIcon</name></name> <operator>=</operator> <call><name><operator>::</operator><name>LoadIcon</name></name><argument_list>(<argument><expr><name>hInst</name></expr></argument>, <argument><expr><call><name>MAKEINTRESOURCE</name><argument_list>(<argument><expr><name>IDI_M30ICON</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>nppClass</name><operator>.</operator><name>hCursor</name></name> <operator>=</operator> <call><name><operator>::</operator><name>LoadCursor</name></name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>IDC_ARROW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>nppClass</name><operator>.</operator><name>hbrBackground</name></name> <operator>=</operator> <call><name><operator>::</operator><name>CreateSolidBrush</name></name><argument_list>(<argument><expr><call><name><operator>::</operator><name>GetSysColor</name></name><argument_list>(<argument><expr><name>COLOR_MENU</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>nppClass</name><operator>.</operator><name>lpszMenuName</name></name> <operator>=</operator> <call><name>MAKEINTRESOURCE</name><argument_list>(<argument><expr><name>IDR_M30_MENU</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>nppClass</name><operator>.</operator><name>lpszClassName</name></name> <operator>=</operator> <name>_className</name></expr>;</expr_stmt>

	<expr_stmt><expr><name>_isPrelaunch</name> <operator>=</operator> <name><name>cmdLineParams</name><operator>-&gt;</operator><name>_isPreLaunch</name></name></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><operator>::</operator><name>RegisterClass</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>nppClass</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<throw>throw <expr><call><name><name>std</name><operator>::</operator><name>runtime_error</name></name><argument_list>(<argument><expr><literal type="string">"Notepad_plus_Window::init : RegisterClass() function failed"</literal></expr></argument>)</argument_list></call></expr>;</throw>
	</block_content>}</block></if></if_stmt>

	<decl_stmt><decl><type><name>NppParameters</name><modifier>&amp;</modifier></type> <name>nppParams</name> <init>= <expr><call><name><name>NppParameters</name><operator>::</operator><name>getInstance</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>NppGUI</name> <modifier>&amp;</modifier></type> <name>nppGUI</name> <init>= <expr><call><name><name>nppParams</name><operator>.</operator><name>getNppGUI</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>cmdLineParams</name><operator>-&gt;</operator><name>_isNoPlugin</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name><name>_notepad_plus_plus_core</name><operator>.</operator><name>_pluginsManager</name><operator>.</operator><name>disable</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><name><name>nppGUI</name><operator>.</operator><name>_isCmdlineNosessionActivated</name></name> <operator>=</operator> <name><name>cmdLineParams</name><operator>-&gt;</operator><name>_isNoSession</name></name></expr>;</expr_stmt>

	<expr_stmt><expr><name>_hIconAbsent</name> <operator>=</operator> <call><name><operator>::</operator><name>LoadIcon</name></name><argument_list>(<argument><expr><name>hInst</name></expr></argument>, <argument><expr><call><name>MAKEINTRESOURCE</name><argument_list>(<argument><expr><name>IDI_ICONABSENT</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>_hSelf</name> <operator>=</operator> <call><name><operator>::</operator><name>CreateWindowEx</name></name><argument_list>(
		<argument><expr><name>WS_EX_ACCEPTFILES</name> <operator>|</operator> <operator>(</operator><ternary><condition><expr><call><name><name>_notepad_plus_plus_core</name><operator>.</operator><name>_nativeLangSpeaker</name><operator>.</operator><name>isRTL</name></name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><name>WS_EX_LAYOUTRTL</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr></argument>,
		<argument><expr><name>_className</name></expr></argument>,
		<argument><expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"Notepad++"</literal></expr></argument>)</argument_list></call></expr></argument>,
		<argument><expr><operator>(</operator><name>WS_OVERLAPPEDWINDOW</name> <operator>|</operator> <name>WS_CLIPCHILDREN</name><operator>)</operator></expr></argument>,
		<comment type="line">// CreateWindowEx bug : set all 0 to walk around the pb</comment>
		<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
		<argument><expr><name>_hParent</name></expr></argument>, <argument><expr><literal type="null">nullptr</literal></expr></argument>, <argument><expr><name>_hInst</name></expr></argument>,
		<argument><expr><operator>(</operator><name>LPVOID</name><operator>)</operator> <name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// pass the ptr of this instantiated object</comment>
        <comment type="line">// for retrieve it in Notepad_plus_Proc from</comment>
        <comment type="line">// the CREATESTRUCT.lpCreateParams afterward.</comment>

	<if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>_hSelf</name></expr>)</condition><block type="pseudo"><block_content>
		<throw>throw <expr><call><name><name>std</name><operator>::</operator><name>runtime_error</name></name><argument_list>(<argument><expr><literal type="string">"Notepad_plus_Window::init : CreateWindowEx() function return null"</literal></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>


	<decl_stmt><decl><type><name>PaintLocker</name></type> <name>paintLocker</name><argument_list>{<argument><expr><name>_hSelf</name></expr></argument>}</argument_list></decl>;</decl_stmt>

	<expr_stmt><expr><call><name><name>_notepad_plus_plus_core</name><operator>.</operator><name>staticCheckMenuAndTB</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>gNppHWND</name> <operator>=</operator> <name>_hSelf</name></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><call><name><name>cmdLineParams</name><operator>-&gt;</operator><name>isPointValid</name></name><argument_list>()</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name><operator>::</operator><name>MoveWindow</name></name><argument_list>(<argument><expr><name>_hSelf</name></expr></argument>, <argument><expr><name><name>cmdLineParams</name><operator>-&gt;</operator><name>_point</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>cmdLineParams</name><operator>-&gt;</operator><name>_point</name><operator>.</operator><name>y</name></name></expr></argument>, <argument><expr><name><name>nppGUI</name><operator>.</operator><name>_appPos</name><operator>.</operator><name>right</name></name></expr></argument>, <argument><expr><name><name>nppGUI</name><operator>.</operator><name>_appPos</name><operator>.</operator><name>bottom</name></name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<decl_stmt><decl><type><name>WINDOWPLACEMENT</name></type> <name>posInfo</name><argument_list>{}</argument_list></decl>;</decl_stmt>
		<expr_stmt><expr><name><name>posInfo</name><operator>.</operator><name>length</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>WINDOWPLACEMENT</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>posInfo</name><operator>.</operator><name>flags</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>_isPrelaunch</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name><name>posInfo</name><operator>.</operator><name>showCmd</name></name> <operator>=</operator> <name>SW_HIDE</name></expr>;</expr_stmt></block_content></block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><name><name>posInfo</name><operator>.</operator><name>showCmd</name></name> <operator>=</operator> <ternary><condition><expr><name><name>nppGUI</name><operator>.</operator><name>_isMaximized</name></name></expr> ?</condition><then> <expr><name>SW_SHOWMAXIMIZED</name></expr> </then><else>: <expr><name>SW_SHOWNORMAL</name></expr></else></ternary></expr>;</expr_stmt></block_content></block></else></if_stmt>

		<expr_stmt><expr><name><name>posInfo</name><operator>.</operator><name>ptMinPosition</name><operator>.</operator><name>x</name></name> <operator>=</operator> <operator>(</operator><name>LONG</name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>posInfo</name><operator>.</operator><name>ptMinPosition</name><operator>.</operator><name>y</name></name> <operator>=</operator> <operator>(</operator><name>LONG</name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>posInfo</name><operator>.</operator><name>ptMaxPosition</name><operator>.</operator><name>x</name></name> <operator>=</operator> <operator>(</operator><name>LONG</name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>posInfo</name><operator>.</operator><name>ptMaxPosition</name><operator>.</operator><name>y</name></name> <operator>=</operator> <operator>(</operator><name>LONG</name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>posInfo</name><operator>.</operator><name>rcNormalPosition</name><operator>.</operator><name>left</name></name>   <operator>=</operator> <name><name>nppGUI</name><operator>.</operator><name>_appPos</name><operator>.</operator><name>left</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>posInfo</name><operator>.</operator><name>rcNormalPosition</name><operator>.</operator><name>top</name></name>    <operator>=</operator> <name><name>nppGUI</name><operator>.</operator><name>_appPos</name><operator>.</operator><name>top</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>posInfo</name><operator>.</operator><name>rcNormalPosition</name><operator>.</operator><name>bottom</name></name> <operator>=</operator> <name><name>nppGUI</name><operator>.</operator><name>_appPos</name><operator>.</operator><name>top</name></name> <operator>+</operator> <name><name>nppGUI</name><operator>.</operator><name>_appPos</name><operator>.</operator><name>bottom</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>posInfo</name><operator>.</operator><name>rcNormalPosition</name><operator>.</operator><name>right</name></name>  <operator>=</operator> <name><name>nppGUI</name><operator>.</operator><name>_appPos</name><operator>.</operator><name>left</name></name> <operator>+</operator> <name><name>nppGUI</name><operator>.</operator><name>_appPos</name><operator>.</operator><name>right</name></name></expr>;</expr_stmt>

		<comment type="line">//SetWindowPlacement will take care of situations, where saved position was in no longer available monitor</comment>
		<expr_stmt><expr><call><name><operator>::</operator><name>SetWindowPlacement</name></name><argument_list>(<argument><expr><name>_hSelf</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>posInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<if_stmt><if>if <condition>(<expr><call><name><name>NppDarkMode</name><operator>::</operator><name>isEnabled</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>setStartupBgColor</name><argument_list>(<argument><expr><call><name><name>NppDarkMode</name><operator>::</operator><name>getBackgroundColor</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt> <comment type="line">//draw dark background when opening Npp without position data</comment>
	</block_content>}</block></else></if_stmt>

	<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>nppGUI</name><operator>.</operator><name>_tabStatus</name></name> <operator>&amp;</operator> <name>TAB_MULTILINE</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name><operator>::</operator><name>SendMessage</name></name><argument_list>(<argument><expr><name>_hSelf</name></expr></argument>, <argument><expr><name>WM_COMMAND</name></expr></argument>, <argument><expr><name>IDM_VIEW_DRAWTABBAR_MULTILINE</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>nppGUI</name><operator>.</operator><name>_menuBarShow</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name><operator>::</operator><name>SetMenu</name></name><argument_list>(<argument><expr><name>_hSelf</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>cmdLineParams</name><operator>-&gt;</operator><name>_isNoTab</name></name> <operator>||</operator> <operator>(</operator><name><name>nppGUI</name><operator>.</operator><name>_tabStatus</name></name> <operator>&amp;</operator> <name>TAB_HIDE</name><operator>)</operator></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>tabStatusOld</name> <init>= <expr><name><name>nppGUI</name><operator>.</operator><name>_tabStatus</name></name></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><operator>::</operator><name>SendMessage</name></name><argument_list>(<argument><expr><name>_hSelf</name></expr></argument>, <argument><expr><name>NPPM_HIDETABBAR</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>cmdLineParams</name><operator>-&gt;</operator><name>_isNoTab</name></name></expr>)</condition>
		<block>{<block_content>
			<comment type="line">// Restore old settings when tab bar has been hidden from tab bar.</comment>
			<expr_stmt><expr><name><name>nppGUI</name><operator>.</operator><name>_tabStatus</name></name> <operator>=</operator> <name>tabStatusOld</name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>cmdLineParams</name><operator>-&gt;</operator><name>_alwaysOnTop</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name><operator>::</operator><name>SendMessage</name></name><argument_list>(<argument><expr><name>_hSelf</name></expr></argument>, <argument><expr><name>WM_COMMAND</name></expr></argument>, <argument><expr><name>IDM_VIEW_ALWAYSONTOP</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>nppGUI</name><operator>.</operator><name>_rememberLastSession</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>nppGUI</name><operator>.</operator><name>_isCmdlineNosessionActivated</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name><name>_notepad_plus_plus_core</name><operator>.</operator><name>loadLastSession</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><call><name><name>nppParams</name><operator>.</operator><name>doFunctionListExport</name></name><argument_list>()</argument_list></call> <operator>||</operator> <call><name><name>nppParams</name><operator>.</operator><name>doPrintAndExit</name></name><argument_list>()</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name><operator>::</operator><name>ShowWindow</name></name><argument_list>(<argument><expr><name>_hSelf</name></expr></argument>, <argument><expr><name>SW_HIDE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><operator>!</operator><name><name>cmdLineParams</name><operator>-&gt;</operator><name>_isPreLaunch</name></name></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><call><name><name>cmdLineParams</name><operator>-&gt;</operator><name>isPointValid</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name><operator>::</operator><name>ShowWindow</name></name><argument_list>(<argument><expr><name>_hSelf</name></expr></argument>, <argument><expr><name>SW_SHOW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><call><name><operator>::</operator><name>ShowWindow</name></name><argument_list>(<argument><expr><name>_hSelf</name></expr></argument>, <argument><expr><ternary><condition><expr><name><name>nppGUI</name><operator>.</operator><name>_isMaximized</name></name></expr> ?</condition><then> <expr><name>SW_MAXIMIZE</name></expr> </then><else>: <expr><name>SW_SHOW</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<decl_stmt><decl><type><name>HICON</name></type> <name>icon</name> <init>= <expr><literal type="null">nullptr</literal></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>loadTrayIcon</name><argument_list>(<argument><expr><name>_hInst</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>icon</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>_notepad_plus_plus_core</name><operator>.</operator><name>_pTrayIco</name></name> <operator>=</operator> <operator>new</operator> <call><name>trayIconControler</name><argument_list>(<argument><expr><name>_hSelf</name></expr></argument>, <argument><expr><name>IDI_M30ICON</name></expr></argument>, <argument><expr><name>NPPM_INTERNAL_MINIMIZED_TRAY</name></expr></argument>, <argument><expr><name>icon</name></expr></argument>, <argument><expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>_notepad_plus_plus_core</name><operator>.</operator><name>_pTrayIco</name><operator>-&gt;</operator><name>doTrayIcon</name></name><argument_list>(<argument><expr><name>ADD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<if_stmt><if>if<condition>(<expr><call><name><name>cmdLineParams</name><operator>-&gt;</operator><name>isPointValid</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>NppDarkMode</name><operator>::</operator><name>isEnabled</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>setStartupBgColor</name><argument_list>(<argument><expr><call><name><name>NppDarkMode</name><operator>::</operator><name>getBackgroundColor</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt> <comment type="line">//draw dark background when opening Npp through cmd with position data</comment>

	<decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>generic_string</name></expr></argument>&gt;</argument_list></name></type> <name>fileNames</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>generic_string</name></expr></argument>&gt;</argument_list></name></type> <name>patterns</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name><name>patterns</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"*.xml"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>generic_string</name></type> <name>nppDir</name> <init>= <expr><call><name><name>nppParams</name><operator>.</operator><name>getNppPath</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>LocalizationSwitcher</name> <modifier>&amp;</modifier></type> <name>localizationSwitcher</name> <init>= <expr><call><name><name>nppParams</name><operator>.</operator><name>getLocalizationSwitcher</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>wstring</name></name></type> <name>localizationDir</name> <init>= <expr><name>nppDir</name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>pathAppend</name><argument_list>(<argument><expr><name>localizationDir</name></expr></argument>, <argument><expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"localization\\"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name><name>_notepad_plus_plus_core</name><operator>.</operator><name>getMatchedFileNames</name></name><argument_list>(<argument><expr><call><name><name>localizationDir</name><operator>.</operator><name>c_str</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>patterns</name></expr></argument>, <argument><expr><name>fileNames</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>len</name> <init>= <expr><call><name><name>fileNames</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name><name>localizationSwitcher</name><operator>.</operator><name>addLanguageFromXml</name></name><argument_list>(<argument><expr><name><name>fileNames</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

	<expr_stmt><expr><call><name><name>fileNames</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>ThemeSwitcher</name> <modifier>&amp;</modifier></type> <name>themeSwitcher</name> <init>= <expr><call><name><name>nppParams</name><operator>.</operator><name>getThemeSwitcher</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

	<comment type="line">//  Get themes from both npp install themes dir and app data themes dir with the per user</comment>
	<comment type="line">//  overriding default themes of the same name.</comment>

	<decl_stmt><decl><type><name>generic_string</name></type> <name>appDataThemeDir</name> <init>= <expr><ternary><condition><expr><call><name><name>nppParams</name><operator>.</operator><name>isCloud</name></name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><call><name><name>nppParams</name><operator>.</operator><name>getUserPath</name></name><argument_list>()</argument_list></call></expr> </then><else>: <expr><call><name><name>nppParams</name><operator>.</operator><name>getAppDataNppDir</name></name><argument_list>()</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>appDataThemeDir</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>pathAppend</name><argument_list>(<argument><expr><name>appDataThemeDir</name></expr></argument>, <argument><expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"themes\\"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>_notepad_plus_plus_core</name><operator>.</operator><name>getMatchedFileNames</name></name><argument_list>(<argument><expr><call><name><name>appDataThemeDir</name><operator>.</operator><name>c_str</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>patterns</name></expr></argument>, <argument><expr><name>fileNames</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>len</name> <init>= <expr><call><name><name>fileNames</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></init></decl> ;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr> ;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
		<block>{<block_content>
			<expr_stmt><expr><call><name><name>themeSwitcher</name><operator>.</operator><name>addThemeFromXml</name></name><argument_list>(<argument><expr><name><name>fileNames</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></for>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name><name>fileNames</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>generic_string</name></type> <name>nppThemeDir</name> <init>= <expr><call><name><name>nppDir</name><operator>.</operator><name>c_str</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="line">// &lt;- should use the pointer to avoid the constructor of copy</comment>
	<expr_stmt><expr><call><name>pathAppend</name><argument_list>(<argument><expr><name>nppThemeDir</name></expr></argument>, <argument><expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"themes\\"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// Set theme directory to their installation directory</comment>
	<expr_stmt><expr><call><name><name>themeSwitcher</name><operator>.</operator><name>setThemeDirPath</name></name><argument_list>(<argument><expr><name>nppThemeDir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name><name>_notepad_plus_plus_core</name><operator>.</operator><name>getMatchedFileNames</name></name><argument_list>(<argument><expr><call><name><name>nppThemeDir</name><operator>.</operator><name>c_str</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>patterns</name></expr></argument>, <argument><expr><name>fileNames</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>len</name> <init>= <expr><call><name><name>fileNames</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr> ;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
	<block>{<block_content>
		<decl_stmt><decl><type><name>generic_string</name></type> <name>themeName</name><argument_list>( <argument><expr><call><name><name>themeSwitcher</name><operator>.</operator><name>getThemeFromXmlFileName</name></name><argument_list>(<argument><expr><name><name>fileNames</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>c_str</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument> )</argument_list></decl>;</decl_stmt>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>themeSwitcher</name><operator>.</operator><name>themeNameExists</name></name><argument_list>(<argument><expr><call><name><name>themeName</name><operator>.</operator><name>c_str</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name><name>themeSwitcher</name><operator>.</operator><name>addThemeFromXml</name></name><argument_list>(<argument><expr><name><name>fileNames</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			
			<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>appDataThemeDir</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>)</condition>
			<block>{<block_content>
				<decl_stmt><decl><type><name>generic_string</name></type> <name>appDataThemePath</name> <init>= <expr><name>appDataThemeDir</name></expr></init></decl>;</decl_stmt>

				<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><operator>::</operator><name>PathFileExists</name></name><argument_list>(<argument><expr><call><name><name>appDataThemePath</name><operator>.</operator><name>c_str</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition>
				<block>{<block_content>
					<expr_stmt><expr><call><name><operator>::</operator><name>CreateDirectory</name></name><argument_list>(<argument><expr><call><name><name>appDataThemePath</name><operator>.</operator><name>c_str</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block></if></if_stmt>

				<decl_stmt><decl><type><name>TCHAR</name><modifier>*</modifier></type> <name>fn</name> <init>= <expr><call><name>PathFindFileName</name><argument_list>(<argument><expr><name><name>fileNames</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>c_str</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<expr_stmt><expr><call><name>pathAppend</name><argument_list>(<argument><expr><name>appDataThemePath</name></expr></argument>, <argument><expr><name>fn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name>themeSwitcher</name><operator>.</operator><name>addThemeStylerSavePath</name></name><argument_list>(<argument><expr><name><name>fileNames</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>appDataThemePath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>

	<if_stmt><if>if <condition>(<expr><call><name><name>NppDarkMode</name><operator>::</operator><name>isWindowsModeEnabled</name></name><argument_list>()</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>generic_string</name></type> <name>themePath</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>generic_string</name></type> <name>xmlFileName</name> <init>= <expr><call><name><name>NppDarkMode</name><operator>::</operator><name>getThemeName</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>xmlFileName</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>)</condition>
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>nppParams</name><operator>.</operator><name>isLocal</name></name><argument_list>()</argument_list></call> <operator>||</operator> <call><name><name>nppParams</name><operator>.</operator><name>isCloud</name></name><argument_list>()</argument_list></call></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><name>themePath</name> <operator>=</operator> <call><name><name>nppParams</name><operator>.</operator><name>getUserPath</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>pathAppend</name><argument_list>(<argument><expr><name>themePath</name></expr></argument>, <argument><expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"themes\\"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>pathAppend</name><argument_list>(<argument><expr><name>themePath</name></expr></argument>, <argument><expr><name>xmlFileName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>

			<if_stmt><if>if <condition>(<expr><call><name><operator>::</operator><name>PathFileExists</name></name><argument_list>(<argument><expr><call><name><name>themePath</name><operator>.</operator><name>c_str</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <name>FALSE</name> <operator>||</operator> <call><name><name>themePath</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><name>themePath</name> <operator>=</operator> <call><name><name>themeSwitcher</name><operator>.</operator><name>getThemeDirPath</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>pathAppend</name><argument_list>(<argument><expr><name>themePath</name></expr></argument>, <argument><expr><name>xmlFileName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></if>
		<else>else
		<block>{<block_content>
			<expr_stmt><expr><name>auto</name><operator>&amp;</operator> <name>themeInfo</name> <operator>=</operator> <call><name><name>themeSwitcher</name><operator>.</operator><name>getElementFromIndex</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>themePath</name> <operator>=</operator> <name><name>themeInfo</name><operator>.</operator><name>second</name></name></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>

		<if_stmt><if>if <condition>(<expr><call><name><operator>::</operator><name>PathFileExists</name></name><argument_list>(<argument><expr><call><name><name>themePath</name><operator>.</operator><name>c_str</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name><name>nppGUI</name><operator>.</operator><name>_themeName</name><operator>.</operator><name>assign</name></name><argument_list>(<argument><expr><name>themePath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>nppParams</name><operator>.</operator><name>reloadStylers</name></name><argument_list>(<argument><expr><call><name><name>themePath</name><operator>.</operator><name>c_str</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><operator>::</operator><name>SendMessage</name></name><argument_list>(<argument><expr><name>_hSelf</name></expr></argument>, <argument><expr><name>WM_UPDATESCINTILLAS</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="line">// Restore all dockable panels from the last session</comment>
	<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>len</name> <init>= <expr><call><name><name>_notepad_plus_plus_core</name><operator>.</operator><name>_internalFuncIDs</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></init></decl> ;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr> ;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name><operator>::</operator><name>SendMessage</name></name><argument_list>(<argument><expr><name>_hSelf</name></expr></argument>, <argument><expr><name>WM_COMMAND</name></expr></argument>, <argument><expr><name><name>_notepad_plus_plus_core</name><operator>.</operator><name>_internalFuncIDs</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

	<decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>generic_string</name></expr></argument>&gt;</argument_list></name></type> <name>fns</name></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><name>cmdLine</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>fns</name> <operator>=</operator> <call><name><name>_notepad_plus_plus_core</name><operator>.</operator><name>loadCommandlineParams</name></name><argument_list>(<argument><expr><name>cmdLine</name></expr></argument>, <argument><expr><name>cmdLineParams</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="line">// Launch folder as workspace after all this dockable panel being restored from the last session</comment>
	<comment type="line">// To avoid dockable panel toggle problem.</comment>
	<if_stmt><if>if <condition>(<expr><name><name>cmdLineParams</name><operator>-&gt;</operator><name>_openFoldersAsWorkspace</name></name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>generic_string</name></type> <name>emptyStr</name></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>_notepad_plus_plus_core</name><operator>.</operator><name>launchFileBrowser</name></name><argument_list>(<argument><expr><name>fns</name></expr></argument>, <argument><expr><name>emptyStr</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name><operator>::</operator><name>SendMessage</name></name><argument_list>(<argument><expr><name>_hSelf</name></expr></argument>, <argument><expr><name>WM_ACTIVATE</name></expr></argument>, <argument><expr><name>WA_ACTIVE</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name><operator>::</operator><name>SendMessage</name></name><argument_list>(<argument><expr><name>_hSelf</name></expr></argument>, <argument><expr><name>NPPM_INTERNAL_CRLFFORMCHANGED</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name><operator>::</operator><name>SendMessage</name></name><argument_list>(<argument><expr><name>_hSelf</name></expr></argument>, <argument><expr><name>NPPM_INTERNAL_NPCFORMCHANGED</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name><operator>::</operator><name>SendMessage</name></name><argument_list>(<argument><expr><name>_hSelf</name></expr></argument>, <argument><expr><name>NPPM_INTERNAL_ENABLECHANGEHISTORY</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// Notify plugins that Notepad++ is ready</comment>
	<decl_stmt><decl><type><name>SCNotification</name></type> <name>scnN</name><argument_list>{}</argument_list></decl>;</decl_stmt>
	<expr_stmt><expr><name><name>scnN</name><operator>.</operator><name>nmhdr</name><operator>.</operator><name>code</name></name> <operator>=</operator> <name>NPPN_READY</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>scnN</name><operator>.</operator><name>nmhdr</name><operator>.</operator><name>hwndFrom</name></name> <operator>=</operator> <name>_hSelf</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>scnN</name><operator>.</operator><name>nmhdr</name><operator>.</operator><name>idFrom</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name>_notepad_plus_plus_core</name><operator>.</operator><name>_pluginsManager</name><operator>.</operator><name>notify</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>scnN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>cmdLineParams</name><operator>-&gt;</operator><name>_easterEggName</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>cmdLineParams</name><operator>-&gt;</operator><name>_quoteType</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <comment type="line">// Easter Egg Name</comment>
		<block>{<block_content>
			<decl_stmt><decl><type><name>int</name></type> <name>iQuote</name> <init>= <expr><call><name><name>_notepad_plus_plus_core</name><operator>.</operator><name>getQuoteIndexFrom</name></name><argument_list>(<argument><expr><call><name><name>cmdLineParams</name><operator>-&gt;</operator><name>_easterEggName</name><operator>.</operator><name>c_str</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<if_stmt><if>if <condition>(<expr><name>iQuote</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><call><name><name>_notepad_plus_plus_core</name><operator>.</operator><name>showQuoteFromIndex</name></name><argument_list>(<argument><expr><name>iQuote</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></if>
		<if type="elseif">else if <condition>(<expr><name><name>cmdLineParams</name><operator>-&gt;</operator><name>_quoteType</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <comment type="line">// command line quote</comment>
		<block>{<block_content>
			<expr_stmt><expr><name>_userQuote</name> <operator>=</operator> <name><name>cmdLineParams</name><operator>-&gt;</operator><name>_easterEggName</name></name></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>_quoteParams</name><operator>.</operator><name>reset</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>_quoteParams</name><operator>.</operator><name>_quote</name></name> <operator>=</operator> <call><name><name>_userQuote</name><operator>.</operator><name>c_str</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>_quoteParams</name><operator>.</operator><name>_quoter</name></name> <operator>=</operator> <call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"Anonymous #999"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>_quoteParams</name><operator>.</operator><name>_shouldBeTrolling</name></name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>_quoteParams</name><operator>.</operator><name>_lang</name></name> <operator>=</operator> <name><name>cmdLineParams</name><operator>-&gt;</operator><name>_langType</name></name></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name><name>cmdLineParams</name><operator>-&gt;</operator><name>_ghostTypingSpeed</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name><name>_quoteParams</name><operator>.</operator><name>_speed</name></name> <operator>=</operator> <name><name>QuoteParams</name><operator>::</operator><name>slow</name></name></expr>;</expr_stmt></block_content></block></if>
			<if type="elseif">else if <condition>(<expr><name><name>cmdLineParams</name><operator>-&gt;</operator><name>_ghostTypingSpeed</name></name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name><name>_quoteParams</name><operator>.</operator><name>_speed</name></name> <operator>=</operator> <name><name>QuoteParams</name><operator>::</operator><name>rapid</name></name></expr>;</expr_stmt></block_content></block></if>
			<if type="elseif">else if <condition>(<expr><name><name>cmdLineParams</name><operator>-&gt;</operator><name>_ghostTypingSpeed</name></name> <operator>==</operator> <literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name><name>_quoteParams</name><operator>.</operator><name>_speed</name></name> <operator>=</operator> <name><name>QuoteParams</name><operator>::</operator><name>speedOfLight</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

			<expr_stmt><expr><call><name><name>_notepad_plus_plus_core</name><operator>.</operator><name>showQuote</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>_quoteParams</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if>
		<if type="elseif">else if <condition>(<expr><name><name>cmdLineParams</name><operator>-&gt;</operator><name>_quoteType</name></name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <comment type="line">// content drom file</comment>
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><call><name><operator>::</operator><name>PathFileExists</name></name><argument_list>(<argument><expr><call><name><name>cmdLineParams</name><operator>-&gt;</operator><name>_easterEggName</name><operator>.</operator><name>c_str</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition>
			<block>{<block_content>
				<decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>string</name></name></type> <name>content</name> <init>= <expr><call><name>getFileContent</name><argument_list>(<argument><expr><call><name><name>cmdLineParams</name><operator>-&gt;</operator><name>_easterEggName</name><operator>.</operator><name>c_str</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>WcharMbcsConvertor</name><modifier>&amp;</modifier></type> <name>wmc</name> <init>= <expr><call><name><name>WcharMbcsConvertor</name><operator>::</operator><name>getInstance</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
				<expr_stmt><expr><name>_userQuote</name> <operator>=</operator> <call><name><name>wmc</name><operator>.</operator><name>char2wchar</name></name><argument_list>(<argument><expr><call><name><name>content</name><operator>.</operator><name>c_str</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>SC_CP_UTF8</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>_userQuote</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>)</condition>
				<block>{<block_content>
					<expr_stmt><expr><call><name><name>_quoteParams</name><operator>.</operator><name>reset</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name><name>_quoteParams</name><operator>.</operator><name>_quote</name></name> <operator>=</operator> <call><name><name>_userQuote</name><operator>.</operator><name>c_str</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name><name>_quoteParams</name><operator>.</operator><name>_quoter</name></name> <operator>=</operator> <call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"Anonymous #999"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name><name>_quoteParams</name><operator>.</operator><name>_shouldBeTrolling</name></name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
					<expr_stmt><expr><name><name>_quoteParams</name><operator>.</operator><name>_lang</name></name> <operator>=</operator> <name><name>cmdLineParams</name><operator>-&gt;</operator><name>_langType</name></name></expr>;</expr_stmt>
					<if_stmt><if>if <condition>(<expr><name><name>cmdLineParams</name><operator>-&gt;</operator><name>_ghostTypingSpeed</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
						<expr_stmt><expr><name><name>_quoteParams</name><operator>.</operator><name>_speed</name></name> <operator>=</operator> <name><name>QuoteParams</name><operator>::</operator><name>slow</name></name></expr>;</expr_stmt></block_content></block></if>
					<if type="elseif">else if <condition>(<expr><name><name>cmdLineParams</name><operator>-&gt;</operator><name>_ghostTypingSpeed</name></name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
						<expr_stmt><expr><name><name>_quoteParams</name><operator>.</operator><name>_speed</name></name> <operator>=</operator> <name><name>QuoteParams</name><operator>::</operator><name>rapid</name></name></expr>;</expr_stmt></block_content></block></if>
					<if type="elseif">else if <condition>(<expr><name><name>cmdLineParams</name><operator>-&gt;</operator><name>_ghostTypingSpeed</name></name> <operator>==</operator> <literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content>
						<expr_stmt><expr><name><name>_quoteParams</name><operator>.</operator><name>_speed</name></name> <operator>=</operator> <name><name>QuoteParams</name><operator>::</operator><name>speedOfLight</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

					<expr_stmt><expr><call><name><name>_notepad_plus_plus_core</name><operator>.</operator><name>showQuote</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>_quoteParams</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block></if></if_stmt>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>cmdLineParams</name><operator>-&gt;</operator><name>_showLoadingTime</name></name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>time_t</name></type> <name>timestampEnd</name> <init>= <expr><call><name>time</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>double</name></type> <name>loadTime</name> <init>= <expr><call><name>difftime</name><argument_list>(<argument><expr><name>timestampEnd</name></expr></argument>, <argument><expr><name>timestampBegin</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<decl_stmt><decl><type><name>char</name></type> <name><name>dest</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>dest</name></expr></argument>, <argument><expr><literal type="string">"Loading time : %.0lf seconds"</literal></expr></argument>, <argument><expr><name>loadTime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><operator>::</operator><name>MessageBoxA</name></name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>dest</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><name>MB_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<decl_stmt><decl><type><name>bool</name></type> <name>isSnapshotMode</name> <init>= <expr><call><name><name>nppGUI</name><operator>.</operator><name>isSnapshotMode</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><name>isSnapshotMode</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name><name>_notepad_plus_plus_core</name><operator>.</operator><name>checkModifiedDocument</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="line">// Lauch backup task</comment>
		<expr_stmt><expr><call><name><name>_notepad_plus_plus_core</name><operator>.</operator><name>launchDocumentBackupTask</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="line">// Make this call later to take effect</comment>
	<expr_stmt><expr><call><name><operator>::</operator><name>SendMessage</name></name><argument_list>(<argument><expr><name>_hSelf</name></expr></argument>, <argument><expr><name>NPPM_INTERNAL_SETWORDCHARS</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><operator>::</operator><name>SendMessage</name></name><argument_list>(<argument><expr><name>_hSelf</name></expr></argument>, <argument><expr><name>NPPM_INTERNAL_SETNPC</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><call><name><name>nppParams</name><operator>.</operator><name>doFunctionListExport</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name><operator>::</operator><name>SendMessage</name></name><argument_list>(<argument><expr><name>_hSelf</name></expr></argument>, <argument><expr><name>NPPM_INTERNAL_EXPORTFUNCLISTANDQUIT</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><call><name><name>nppParams</name><operator>.</operator><name>doPrintAndExit</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name><operator>::</operator><name>SendMessage</name></name><argument_list>(<argument><expr><name>_hSelf</name></expr></argument>, <argument><expr><name>NPPM_INTERNAL_PRNTANDQUIT</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>


<function><type><name>bool</name></type> <name><name>Notepad_plus_Window</name><operator>::</operator><name>isDlgsMsg</name></name><parameter_list>(<parameter><decl><type><name>MSG</name> <modifier>*</modifier></type><name>msg</name></decl></parameter>)</parameter_list> <specifier>const</specifier>
<block>{<block_content>
	<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>len</name> <init>= <expr><call><name><name>_notepad_plus_plus_core</name><operator>.</operator><name>_hModelessDlgs</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><call><name><name>_notepad_plus_plus_core</name><operator>.</operator><name>processIncrFindAccel</name></name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><literal type="boolean">true</literal></expr>;</return></block_content></block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><call><name><name>_notepad_plus_plus_core</name><operator>.</operator><name>processFindAccel</name></name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><literal type="boolean">true</literal></expr>;</return></block_content></block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><call><name><operator>::</operator><name>IsDialogMessageW</name></name><argument_list>(<argument><expr><name><name>_notepad_plus_plus_core</name><operator>.</operator><name>_hModelessDlgs</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><literal type="boolean">true</literal></expr>;</return></block_content></block></if></if_stmt>
	</block_content>}</block></for>
	<return>return <expr><literal type="boolean">false</literal></expr>;</return>
</block_content>}</block></function>
</unit>

<unit xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C++" filename="Notepad_plus.h" hash="f54dd906e83e2968e8934ef8dd14bdc36524aff7"><comment type="line">// This file is part of Notepad++ project</comment>
<comment type="line">// Copyright (C)2021 Don HO &lt;don.h@free.fr&gt;</comment>

<comment type="line">// This program is free software: you can redistribute it and/or modify</comment>
<comment type="line">// it under the terms of the GNU General Public License as published by</comment>
<comment type="line">// the Free Software Foundation, either version 3 of the License, or</comment>
<comment type="line">// at your option any later version.</comment>
<comment type="line">//</comment>
<comment type="line">// This program is distributed in the hope that it will be useful,</comment>
<comment type="line">// but WITHOUT ANY WARRANTY; without even the implied warranty of</comment>
<comment type="line">// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the</comment>
<comment type="line">// GNU General Public License for more details.</comment>
<comment type="line">//</comment>
<comment type="line">// You should have received a copy of the GNU General Public License</comment>
<comment type="line">// along with this program.  If not, see &lt;https://www.gnu.org/licenses/&gt;.</comment>

<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>once</name></cpp:pragma>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ScintillaEditView.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"DocTabView.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"SplitterContainer.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"FindReplaceDlg.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"AboutDlg.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"RunDlg.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"StatusBar.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lastRecentFileList.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GoToLineDlg.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"FindCharsInRange.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"columnEditor.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"WordStyleDlg.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"trayIconControler.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"PluginsManager.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"preferenceDlg.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"WindowsDlg.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"RunMacroDlg.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"DockingManager.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"Processus.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"AutoCompletion.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"SmartHighlighter.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ScintillaCtrls.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lesDlgs.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pluginsAdmin.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"localization.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"documentSnapshot.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"md5Dlgs.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iso646.h&gt;</cpp:file></cpp:include>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MENU</name></cpp:macro> <cpp:value>0x01</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TOOLBAR</name></cpp:macro> <cpp:value>0x02</cpp:value></cpp:define>

<enum>enum <name>FileTransferMode</name> <block>{
	<decl><name>TransferClone</name>		<init>= <expr><literal type="number">0x01</literal></expr></init></decl>,
	<decl><name>TransferMove</name>		<init>= <expr><literal type="number">0x02</literal></expr></init></decl>
}</block>;</enum>

<enum>enum <name>WindowStatus</name> <block>{	<comment type="line">//bitwise mask</comment>
	<decl><name>WindowMainActive</name>	<init>= <expr><literal type="number">0x01</literal></expr></init></decl>,
	<decl><name>WindowSubActive</name>		<init>= <expr><literal type="number">0x02</literal></expr></init></decl>,
	<decl><name>WindowBothActive</name>	<init>= <expr><literal type="number">0x03</literal></expr></init></decl>,	<comment type="line">//little helper shortcut</comment>
	<decl><name>WindowUserActive</name>	<init>= <expr><literal type="number">0x04</literal></expr></init></decl>,
	<decl><name>WindowMask</name>			<init>= <expr><literal type="number">0x07</literal></expr></init></decl>
}</block>;</enum>

<enum>enum <name>trimOp</name> <block>{
	<decl><name>lineHeader</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
	<decl><name>lineTail</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,
	<decl><name>lineBoth</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>,
	<decl><name>lineEol</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>
}</block>;</enum>

<enum>enum <name>spaceTab</name> <block>{
	<decl><name>tab2Space</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
	<decl><name>space2TabLeading</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,
	<decl><name>space2TabAll</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>
}</block>;</enum>

<struct_decl>struct <name>TaskListInfo</name>;</struct_decl>


<struct>struct <name>VisibleGUIConf</name> <specifier>final</specifier>
<block>{<public type="default">
	<decl_stmt><decl><type><name>bool</name></type> <name>_isPostIt</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name>_isFullScreen</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name>_isDistractionFree</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>

	<comment type="line">//Used by postit &amp; fullscreen</comment>
	<decl_stmt><decl><type><name>bool</name></type> <name>_isMenuShown</name> <init>= <expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>DWORD_PTR</name></type> <name>_preStyle</name> <init>= <expr><operator>(</operator><name>WS_OVERLAPPEDWINDOW</name> <operator>|</operator> <name>WS_CLIPCHILDREN</name><operator>)</operator></expr></init></decl>;</decl_stmt>

	<comment type="line">//used by postit</comment>
	<decl_stmt><decl><type><name>bool</name></type> <name>_isTabbarShown</name> <init>= <expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name>_isAlwaysOnTop</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name>_isStatusbarShown</name> <init>= <expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt>

	<comment type="line">//used by fullscreen</comment>
	<decl_stmt><decl><type><name>WINDOWPLACEMENT</name></type> <name>_winPlace</name> <init>= <expr><block>{}</block></expr></init></decl>;</decl_stmt>

	<comment type="line">//used by distractionFree</comment>
	<decl_stmt><decl><type><name>bool</name></type> <name>_was2ViewModeOn</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>DockingCont</name><modifier>*</modifier></expr></argument>&gt;</argument_list></name></type> <name>_pVisibleDockingContainers</name></decl>;</decl_stmt>
</public>}</block>;</struct>

<struct>struct <name>QuoteParams</name>
<block>{<public type="default">
	<enum>enum <name>Speed</name> <block>{ <decl><name>slow</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><name>rapid</name></decl>, <decl><name>speedOfLight</name></decl> }</block>;</enum>

	<constructor><name>QuoteParams</name><parameter_list>()</parameter_list> <block>{<block_content/>}</block></constructor><empty_stmt>;</empty_stmt>
	<constructor><name>QuoteParams</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>wchar_t</name><modifier>*</modifier></type> <name>quoter</name></decl></parameter>, <parameter><decl><type><name>Speed</name></type> <name>speed</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>shouldBeTrolling</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>encoding</name></decl></parameter>, <parameter><decl><type><name>LangType</name></type> <name>lang</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>wchar_t</name><modifier>*</modifier></type> <name>quote</name></decl></parameter>)</parameter_list> <member_init_list>:
		<call><name>_quoter</name><argument_list>(<argument><expr><name>quoter</name></expr></argument>)</argument_list></call>, <call><name>_speed</name><argument_list>(<argument><expr><name>speed</name></expr></argument>)</argument_list></call>, <call><name>_shouldBeTrolling</name><argument_list>(<argument><expr><name>shouldBeTrolling</name></expr></argument>)</argument_list></call>, <call><name>_encoding</name><argument_list>(<argument><expr><name>encoding</name></expr></argument>)</argument_list></call>, <call><name>_lang</name><argument_list>(<argument><expr><name>lang</name></expr></argument>)</argument_list></call>, <call><name>_quote</name><argument_list>(<argument><expr><name>quote</name></expr></argument>)</argument_list></call> </member_init_list><block>{<block_content/>}</block></constructor>

	<function><type><name>void</name></type> <name>reset</name><parameter_list>()</parameter_list> <block>{<block_content>
		<expr_stmt><expr><name>_quoter</name> <operator>=</operator> <literal type="null">nullptr</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>_speed</name> <operator>=</operator> <name>rapid</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>_shouldBeTrolling</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>_encoding</name> <operator>=</operator> <name>SC_CP_UTF8</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>_lang</name> <operator>=</operator> <name>L_TEXT</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>_quote</name> <operator>=</operator> <literal type="null">nullptr</literal></expr>;</expr_stmt>
	</block_content>}</block></function><empty_stmt>;</empty_stmt>

	<decl_stmt><decl><type><specifier>const</specifier> <name>wchar_t</name><modifier>*</modifier></type> <name>_quoter</name> <init>= <expr><literal type="null">nullptr</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Speed</name></type> <name>_speed</name> <init>= <expr><name>rapid</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name>_shouldBeTrolling</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>_encoding</name> <init>= <expr><name>SC_CP_UTF8</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>LangType</name></type> <name>_lang</name> <init>= <expr><name>L_TEXT</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>wchar_t</name><modifier>*</modifier></type> <name>_quote</name> <init>= <expr><literal type="null">nullptr</literal></expr></init></decl>;</decl_stmt>
</public>}</block>;</struct>

<class_decl>class <name>CustomFileDialog</name>;</class_decl>
<class_decl>class <name>Notepad_plus_Window</name>;</class_decl>
<class_decl>class <name>AnsiCharPanel</name>;</class_decl>
<class_decl>class <name>ClipboardHistoryPanel</name>;</class_decl>
<class_decl>class <name>VerticalFileSwitcher</name>;</class_decl>
<class_decl>class <name>ProjectPanel</name>;</class_decl>
<class_decl>class <name>DocumentMap</name>;</class_decl>
<class_decl>class <name>FunctionListPanel</name>;</class_decl>
<class_decl>class <name>FileBrowser</name>;</class_decl>
<struct_decl>struct <name>QuoteParams</name>;</struct_decl>

<class>class <name>Notepad_plus</name> <specifier>final</specifier>
<block>{<private type="default">
<friend>friend <class_decl>class <name>Notepad_plus_Window</name>;</class_decl></friend>
<friend>friend <class_decl>class <name>FileManager</name>;</class_decl></friend>

</private><public>public:
	<macro><name>Notepad_plus</name><argument_list>()</argument_list></macro><empty_stmt>;</empty_stmt>
	<destructor_decl><name>~Notepad_plus</name><parameter_list>()</parameter_list>;</destructor_decl>

	<function_decl><type><name>LRESULT</name></type> <name>init</name><parameter_list>(<parameter><decl><type><name>HWND</name></type> <name>hwnd</name></decl></parameter>)</parameter_list>;</function_decl>
	<function_decl><type><name>LRESULT</name></type> <name>process</name><parameter_list>(<parameter><decl><type><name>HWND</name></type> <name>hwnd</name></decl></parameter>, <parameter><decl><type><name>UINT</name></type> <name>Message</name></decl></parameter>, <parameter><decl><type><name>WPARAM</name></type> <name>wParam</name></decl></parameter>, <parameter><decl><type><name>LPARAM</name></type> <name>lParam</name></decl></parameter>)</parameter_list>;</function_decl>
	<function_decl><type><name>void</name></type> <name>killAllChildren</name><parameter_list>()</parameter_list>;</function_decl>

	<enum>enum <name>comment_mode</name> <block>{<decl><name>cm_comment</name></decl>, <decl><name>cm_uncomment</name></decl>, <decl><name>cm_toggle</name></decl>}</block>;</enum>

	<function_decl><type><name>void</name></type> <name>setTitle</name><parameter_list>()</parameter_list>;</function_decl>
	<function_decl><type><name>void</name></type> <name>getTaskListInfo</name><parameter_list>(<parameter><decl><type><name>TaskListInfo</name> <modifier>*</modifier></type><name>tli</name></decl></parameter>)</parameter_list>;</function_decl>
	<function_decl><type><name>size_t</name></type> <name>getNbDirtyBuffer</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>view</name></decl></parameter>)</parameter_list>;</function_decl>
	<comment type="line">// For filtering the modeless Dialog message</comment>

	<comment type="line" format="doxygen">//! \name File Operations</comment>
	<comment type="line">//@{</comment>
	<comment type="line">//The doXXX functions apply to a single buffer and dont need to worry about views, with the excpetion of doClose, since closing one view doesnt have to mean the document is gone</comment>
	<decl_stmt><decl><type><name>BufferID</name></type> <name>doOpen</name><argument_list>(<argument><expr><specifier>const</specifier> <name>generic_string</name><operator>&amp;</operator> <name>fileName</name></expr></argument>, <argument><expr><name>bool</name> <name>isRecursive</name> <operator>=</operator> <literal type="boolean">false</literal></expr></argument>, <argument><expr><name>bool</name> <name>isReadOnly</name> <operator>=</operator> <literal type="boolean">false</literal></expr></argument>, <argument><expr><name>int</name> <name>encoding</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><specifier>const</specifier> <name>TCHAR</name> <operator>*</operator><name>backupFileName</name> <operator>=</operator> <name>NULL</name></expr></argument>, <argument><expr><name>FILETIME</name> <name>fileNameTimestamp</name> <operator>=</operator> <block>{}</block></expr></argument>)</argument_list></decl>;</decl_stmt>
	<function_decl><type><name>bool</name></type> <name>doReload</name><parameter_list>(<parameter><decl><type><name>BufferID</name></type> <name>id</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>alert</name> <init>= <expr><literal type="boolean">true</literal></expr></init></decl></parameter>)</parameter_list>;</function_decl>
	<function_decl><type><name>bool</name></type> <name>doSave</name><parameter_list>(<parameter><decl><type><name>BufferID</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>TCHAR</name> <modifier>*</modifier></type> <name>filename</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>isSaveCopy</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl></parameter>)</parameter_list>;</function_decl>
	<function_decl><type><name>void</name></type> <name>doClose</name><parameter_list>(<parameter><decl><type><name>BufferID</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>whichOne</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>doDeleteBackup</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl></parameter>)</parameter_list>;</function_decl>
	<comment type="line">//bool doDelete(const TCHAR *fileName) const {return ::DeleteFile(fileName) != 0;};</comment>

	<function_decl><type><name>void</name></type> <name>fileOpen</name><parameter_list>()</parameter_list>;</function_decl>
	<function_decl><type><name>void</name></type> <name>fileNew</name><parameter_list>()</parameter_list>;</function_decl>
    <function_decl><type><name>bool</name></type> <name>fileReload</name><parameter_list>()</parameter_list>;</function_decl>
	<function_decl><type><name>bool</name></type> <name>fileClose</name><parameter_list>(<parameter><decl><type><name>BufferID</name></type> <name>id</name> <init>= <expr><name>BUFFER_INVALID</name></expr></init></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>curView</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl></parameter>)</parameter_list>;</function_decl>	<comment type="line">//use curView to override view to close from</comment>
	<function_decl><type><name>bool</name></type> <name>fileCloseAll</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>doDeleteBackup</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>isSnapshotMode</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl></parameter>)</parameter_list>;</function_decl>
	<function_decl><type><name>bool</name></type> <name>fileCloseAllButCurrent</name><parameter_list>()</parameter_list>;</function_decl>
	<function_decl><type><name>bool</name></type> <name>fileCloseAllGiven</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>krvecBufferIndexes</name></decl></parameter>)</parameter_list>;</function_decl>
	<function_decl><type><name>bool</name></type> <name>fileCloseAllToLeft</name><parameter_list>()</parameter_list>;</function_decl>
	<function_decl><type><name>bool</name></type> <name>fileCloseAllToRight</name><parameter_list>()</parameter_list>;</function_decl>
	<function_decl><type><name>bool</name></type> <name>fileCloseAllUnchanged</name><parameter_list>()</parameter_list>;</function_decl>
	<function_decl><type><name>bool</name></type> <name>fileSave</name><parameter_list>(<parameter><decl><type><name>BufferID</name></type> <name>id</name> <init>= <expr><name>BUFFER_INVALID</name></expr></init></decl></parameter>)</parameter_list>;</function_decl>
	<function_decl><type><name>bool</name></type> <name>fileSaveAllConfirm</name><parameter_list>()</parameter_list>;</function_decl>
	<function_decl><type><name>bool</name></type> <name>fileSaveAll</name><parameter_list>()</parameter_list>;</function_decl>
	<function_decl><type><name>bool</name></type> <name>fileSaveSpecific</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>generic_string</name><modifier>&amp;</modifier></type> <name>fileNameToSave</name></decl></parameter>)</parameter_list>;</function_decl>
	<function_decl><type><name>bool</name></type> <name>fileSaveAs</name><parameter_list>(<parameter><decl><type><name>BufferID</name></type> <name>id</name> <init>= <expr><name>BUFFER_INVALID</name></expr></init></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>isSaveCopy</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl></parameter>)</parameter_list>;</function_decl>
	<function_decl><type><name>bool</name></type> <name>fileDelete</name><parameter_list>(<parameter><decl><type><name>BufferID</name></type> <name>id</name> <init>= <expr><name>BUFFER_INVALID</name></expr></init></decl></parameter>)</parameter_list>;</function_decl>
	<function_decl><type><name>bool</name></type> <name>fileRename</name><parameter_list>(<parameter><decl><type><name>BufferID</name></type> <name>id</name> <init>= <expr><name>BUFFER_INVALID</name></expr></init></decl></parameter>)</parameter_list>;</function_decl>

	<function_decl><type><name>bool</name></type> <name>switchToFile</name><parameter_list>(<parameter><decl><type><name>BufferID</name></type> <name>buffer</name></decl></parameter>)</parameter_list>;</function_decl>			<comment type="line">//find buffer in active view then in other view.</comment>
	<comment type="line">//@}</comment>

	<function_decl><type><name>bool</name></type> <name>isFileSession</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>TCHAR</name> <modifier>*</modifier></type> <name>filename</name></decl></parameter>)</parameter_list>;</function_decl>
	<function_decl><type><name>bool</name></type> <name>isFileWorkspace</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>TCHAR</name> <modifier>*</modifier></type> <name>filename</name></decl></parameter>)</parameter_list>;</function_decl>
	<function_decl><type><name>void</name></type> <name>filePrint</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>showDialog</name></decl></parameter>)</parameter_list>;</function_decl>
	<function_decl><type><name>void</name></type> <name>saveScintillasZoom</name><parameter_list>()</parameter_list>;</function_decl>

	<function_decl><type><name>bool</name></type> <name>saveGUIParams</name><parameter_list>()</parameter_list>;</function_decl>
	<function_decl><type><name>bool</name></type> <name>saveProjectPanelsParams</name><parameter_list>()</parameter_list>;</function_decl>
	<function_decl><type><name>bool</name></type> <name>saveFileBrowserParam</name><parameter_list>()</parameter_list>;</function_decl>
	<function_decl><type><name>bool</name></type> <name>saveColumnEditorParams</name><parameter_list>()</parameter_list>;</function_decl>
	<function_decl><type><name>void</name></type> <name>saveDockingParams</name><parameter_list>()</parameter_list>;</function_decl>
    <function_decl><type><name>void</name></type> <name>saveUserDefineLangs</name><parameter_list>()</parameter_list>;</function_decl>
    <function_decl><type><name>void</name></type> <name>saveShortcuts</name><parameter_list>()</parameter_list>;</function_decl>
	<function_decl><type><name>void</name></type> <name>saveSession</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Session</name> <modifier>&amp;</modifier></type> <name>session</name></decl></parameter>)</parameter_list>;</function_decl>
	<function_decl><type><name>void</name></type> <name>saveCurrentSession</name><parameter_list>()</parameter_list>;</function_decl>
	<function_decl><type><name>void</name></type> <name>saveFindHistory</name><parameter_list>()</parameter_list>;</function_decl>

	<function_decl><type><name>void</name></type> <name>getCurrentOpenedFiles</name><parameter_list>(<parameter><decl><type><name>Session</name><modifier>&amp;</modifier></type> <name>session</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>includUntitledDoc</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl></parameter>)</parameter_list>;</function_decl>

	<function_decl><type><name>bool</name></type> <name>fileLoadSession</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>TCHAR</name><modifier>*</modifier></type> <name>fn</name> <init>= <expr><literal type="null">nullptr</literal></expr></init></decl></parameter>)</parameter_list>;</function_decl>
	<function_decl><type><specifier>const</specifier> <name>TCHAR</name> <modifier>*</modifier></type> <name>fileSaveSession</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>nbFile</name></decl></parameter>, <parameter><decl><type><name>TCHAR</name> <modifier>*</modifier><modifier>*</modifier></type> <name>fileNames</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>TCHAR</name> <modifier>*</modifier></type><name>sessionFile2save</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>includeFileBrowser</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl></parameter>)</parameter_list>;</function_decl>
	<function_decl><type><specifier>const</specifier> <name>TCHAR</name> <modifier>*</modifier></type> <name>fileSaveSession</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>nbFile</name> <init>= <expr><literal type="number">0</literal></expr></init></decl></parameter>, <parameter><decl><type><name>TCHAR</name><modifier>*</modifier><modifier>*</modifier></type> <name>fileNames</name> <init>= <expr><literal type="null">nullptr</literal></expr></init></decl></parameter>)</parameter_list>;</function_decl>

	<function_decl><type><name>bool</name></type> <name>doBlockComment</name><parameter_list>(<parameter><decl><type><name>comment_mode</name></type> <name>currCommentMode</name></decl></parameter>)</parameter_list>;</function_decl>
	<function_decl><type><name>bool</name></type> <name>doStreamComment</name><parameter_list>()</parameter_list>;</function_decl>
	<function_decl><type><name>bool</name></type> <name>undoStreamComment</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>tryBlockComment</name> <init>= <expr><literal type="boolean">true</literal></expr></init></decl></parameter>)</parameter_list>;</function_decl>

	<function_decl><type><name>bool</name></type> <name>addCurrentMacro</name><parameter_list>()</parameter_list>;</function_decl>
	<function_decl><type><name>void</name></type> <name>macroPlayback</name><parameter_list>(<parameter><decl><type><name>Macro</name></type></decl></parameter>)</parameter_list>;</function_decl>

    <function_decl><type><name>void</name></type> <name>loadLastSession</name><parameter_list>()</parameter_list>;</function_decl>
	<function_decl><type><name>bool</name></type> <name>loadSession</name><parameter_list>(<parameter><decl><type><name>Session</name> <modifier>&amp;</modifier></type> <name>session</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>isSnapshotMode</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>shouldLoadFileBrowser</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl></parameter>)</parameter_list>;</function_decl>

	<function_decl><type><name>void</name></type> <name>prepareBufferChangedDialog</name><parameter_list>(<parameter><decl><type><name>Buffer</name> <modifier>*</modifier></type> <name>buffer</name></decl></parameter>)</parameter_list>;</function_decl>
	<function_decl><type><name>void</name></type> <name>notifyBufferChanged</name><parameter_list>(<parameter><decl><type><name>Buffer</name> <modifier>*</modifier></type> <name>buffer</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mask</name></decl></parameter>)</parameter_list>;</function_decl>
	<function_decl><type><name>bool</name></type> <name>findInFinderFiles</name><parameter_list>(<parameter><decl><type><name>FindersInfo</name> <modifier>*</modifier></type><name>findInFolderInfo</name></decl></parameter>)</parameter_list>;</function_decl>

	<function_decl><type><name>bool</name></type> <name>createFilelistForFiles</name><parameter_list>(<parameter><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>generic_string</name></expr></argument>&gt;</argument_list></name> <modifier>&amp;</modifier></type> <name>fileNames</name></decl></parameter>)</parameter_list>;</function_decl>
	<function_decl><type><name>bool</name></type> <name>createFilelistForProjects</name><parameter_list>(<parameter><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>generic_string</name></expr></argument>&gt;</argument_list></name> <modifier>&amp;</modifier></type> <name>fileNames</name></decl></parameter>)</parameter_list>;</function_decl>
	<function_decl><type><name>bool</name></type> <name>findInFiles</name><parameter_list>()</parameter_list>;</function_decl>
	<function_decl><type><name>bool</name></type> <name>findInProjects</name><parameter_list>()</parameter_list>;</function_decl>
	<function_decl><type><name>bool</name></type> <name>findInFilelist</name><parameter_list>(<parameter><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>generic_string</name></expr></argument>&gt;</argument_list></name> <modifier>&amp;</modifier></type> <name>fileList</name></decl></parameter>)</parameter_list>;</function_decl>
	<function_decl><type><name>bool</name></type> <name>replaceInFiles</name><parameter_list>()</parameter_list>;</function_decl>
	<function_decl><type><name>bool</name></type> <name>replaceInProjects</name><parameter_list>()</parameter_list>;</function_decl>
	<function_decl><type><name>bool</name></type> <name>replaceInFilelist</name><parameter_list>(<parameter><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>generic_string</name></expr></argument>&gt;</argument_list></name> <modifier>&amp;</modifier></type> <name>fileList</name></decl></parameter>)</parameter_list>;</function_decl>

	<function_decl><type><name>void</name></type> <name>setFindReplaceFolderFilter</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>TCHAR</name> <modifier>*</modifier></type><name>dir</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>TCHAR</name> <modifier>*</modifier></type><name>filters</name></decl></parameter>)</parameter_list>;</function_decl>
	<function_decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>generic_string</name></expr></argument>&gt;</argument_list></name></type> <name>addNppComponents</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>TCHAR</name> <modifier>*</modifier></type><name>destDir</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>TCHAR</name> <modifier>*</modifier></type><name>extFilterName</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>TCHAR</name> <modifier>*</modifier></type><name>extFilter</name></decl></parameter>)</parameter_list>;</function_decl>
	<function_decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>generic_string</name></expr></argument>&gt;</argument_list></name></type> <name>addNppPlugins</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>TCHAR</name> <modifier>*</modifier></type><name>extFilterName</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>TCHAR</name> <modifier>*</modifier></type><name>extFilter</name></decl></parameter>)</parameter_list>;</function_decl>
    <function_decl><type><name>int</name></type> <name>getHtmlXmlEncoding</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>TCHAR</name> <modifier>*</modifier></type><name>fileName</name></decl></parameter>)</parameter_list> <specifier>const</specifier>;</function_decl>

	<function><type><name>HACCEL</name></type> <name>getAccTable</name><parameter_list>()</parameter_list> <specifier>const</specifier><block>{<block_content>
		<return>return <expr><call><name><name>_accelerator</name><operator>.</operator><name>getAccTable</name></name><argument_list>()</argument_list></call></expr>;</return>
	</block_content>}</block></function><empty_stmt>;</empty_stmt>

	<function_decl><type><name>bool</name></type> <name>emergency</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>generic_string</name><modifier>&amp;</modifier></type> <name>emergencySavedDir</name></decl></parameter>)</parameter_list>;</function_decl>

	<function><type><name>Buffer</name><modifier>*</modifier></type> <name>getCurrentBuffer</name><parameter_list>()</parameter_list>	<block>{<block_content>
		<return>return <expr><call><name><name>_pEditView</name><operator>-&gt;</operator><name>getCurrentBuffer</name></name><argument_list>()</argument_list></call></expr>;</return>
	</block_content>}</block></function><empty_stmt>;</empty_stmt>

	<function_decl><type><name>void</name></type> <name>launchDocumentBackupTask</name><parameter_list>()</parameter_list>;</function_decl>
	<function_decl><type><name>int</name></type> <name>getQuoteIndexFrom</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>wchar_t</name><modifier>*</modifier></type> <name>quoter</name></decl></parameter>)</parameter_list> <specifier>const</specifier>;</function_decl>
	<function_decl><type><name>void</name></type> <name>showQuoteFromIndex</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>index</name></decl></parameter>)</parameter_list> <specifier>const</specifier>;</function_decl>
	<function_decl><type><name>void</name></type> <name>showQuote</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>QuoteParams</name><modifier>*</modifier></type> <name>quote</name></decl></parameter>)</parameter_list> <specifier>const</specifier>;</function_decl>

	<function><type><name>generic_string</name></type> <name>getPluginListVerStr</name><parameter_list>()</parameter_list> <specifier>const</specifier> <block>{<block_content>
		<return>return <expr><call><name><name>_pluginsAdminDlg</name><operator>.</operator><name>getPluginListVerStr</name></name><argument_list>()</argument_list></call></expr>;</return>
	</block_content>}</block></function><empty_stmt>;</empty_stmt>

	<function_decl><type><name>void</name></type> <name>minimizeDialogs</name><parameter_list>()</parameter_list>;</function_decl>
	<function_decl><type><name>void</name></type> <name>restoreMinimizeDialogs</name><parameter_list>()</parameter_list>;</function_decl>

	<function_decl><type><name>void</name></type> <name>refreshDarkMode</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>resetStyle</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl></parameter>)</parameter_list>;</function_decl>

</public><private>private:
	<decl_stmt><decl><type><name>Notepad_plus_Window</name><modifier>*</modifier></type> <name>_pPublicInterface</name> <init>= <expr><literal type="null">nullptr</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Window</name><modifier>*</modifier></type> <name>_pMainWindow</name> <init>= <expr><literal type="null">nullptr</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>DockingManager</name></type> <name>_dockingManager</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>_internalFuncIDs</name></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>AutoCompletion</name></type> <name>_autoCompleteMain</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>AutoCompletion</name></type> <name>_autoCompleteSub</name></decl>;</decl_stmt> <comment type="line">// each Scintilla has its own autoComplete</comment>

	<decl_stmt><decl><type><name>SmartHighlighter</name></type> <name>_smartHighlighter</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>NativeLangSpeaker</name></type> <name>_nativeLangSpeaker</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>DocTabView</name></type> <name>_mainDocTab</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>DocTabView</name></type> <name>_subDocTab</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>DocTabView</name><modifier>*</modifier></type> <name>_pDocTab</name> <init>= <expr><literal type="null">nullptr</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>DocTabView</name><modifier>*</modifier></type> <name>_pNonDocTab</name> <init>= <expr><literal type="null">nullptr</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>ScintillaEditView</name></type> <name>_subEditView</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ScintillaEditView</name></type> <name>_mainEditView</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ScintillaEditView</name></type> <name>_invisibleEditView</name></decl>;</decl_stmt> <comment type="line">// for searches</comment>
	<decl_stmt><decl><type><name>ScintillaEditView</name></type> <name>_fileEditView</name></decl>;</decl_stmt>      <comment type="line">// for FileManager</comment>
    <decl_stmt><decl><type><name>ScintillaEditView</name><modifier>*</modifier></type> <name>_pEditView</name> <init>= <expr><literal type="null">nullptr</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ScintillaEditView</name><modifier>*</modifier></type> <name>_pNonEditView</name> <init>= <expr><literal type="null">nullptr</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>SplitterContainer</name><modifier>*</modifier></type> <name>_pMainSplitter</name> <init>= <expr><literal type="null">nullptr</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SplitterContainer</name></type> <name>_subSplitter</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>ContextMenu</name></type> <name>_tabPopupMenu</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ContextMenu</name></type> <name>_tabPopupDropMenu</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ContextMenu</name></type> <name>_fileSwitcherMultiFilePopupMenu</name></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>ToolBar</name></type>	<name>_toolBar</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>IconList</name></type> <name>_docTabIconList</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>IconList</name></type> <name>_docTabIconListAlt</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>IconList</name></type> <name>_docTabIconListDarkMode</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>StatusBar</name></type> <name>_statusBar</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name>_toReduceTabBar</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ReBar</name></type> <name>_rebarTop</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ReBar</name></type> <name>_rebarBottom</name></decl>;</decl_stmt>

	<comment type="line">// Dialog</comment>
	<decl_stmt><decl><type><name>FindReplaceDlg</name></type> <name>_findReplaceDlg</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>FindInFinderDlg</name></type> <name>_findInFinderDlg</name></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>FindIncrementDlg</name></type> <name>_incrementFindDlg</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>AboutDlg</name></type> <name>_aboutDlg</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>DebugInfoDlg</name></type> <name>_debugInfoDlg</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>RunDlg</name></type> <name>_runDlg</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>HashFromFilesDlg</name></type> <name>_md5FromFilesDlg</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>HashFromTextDlg</name></type> <name>_md5FromTextDlg</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>HashFromFilesDlg</name></type> <name>_sha2FromFilesDlg</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>HashFromTextDlg</name></type> <name>_sha2FromTextDlg</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>GoToLineDlg</name></type> <name>_goToLineDlg</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ColumnEditorDlg</name></type> <name>_colEditorDlg</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>WordStyleDlg</name></type> <name>_configStyleDlg</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>PreferenceDlg</name></type> <name>_preference</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>FindCharsInRangeDlg</name></type> <name>_findCharsInRangeDlg</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>PluginsAdminDlg</name></type> <name>_pluginsAdminDlg</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>DocumentPeeker</name></type> <name>_documentPeeker</name></decl>;</decl_stmt>

	<comment type="line">// a handle list of all the Notepad++ dialogs</comment>
	<decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>HWND</name></expr></argument>&gt;</argument_list></name></type> <name>_hModelessDlgs</name></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>LastRecentFileList</name></type> <name>_lastRecentFileList</name></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>WindowsMenu</name></type> <name>_windowsMenu</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>HMENU</name></type> <name>_mainMenuHandle</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>bool</name></type> <name>_sysMenuEntering</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>

	<comment type="line">// make sure we don't recursively call doClose when closing the last file with -quitOnEmpty</comment>
	<decl_stmt><decl><type><name>bool</name></type> <name>_isAttemptingCloseOnQuit</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>

	<comment type="line">// For FullScreen/PostIt/DistractionFree features</comment>
	<decl_stmt><decl><type><name>VisibleGUIConf</name></type>	<name>_beforeSpecialView</name></decl>;</decl_stmt>
	<function_decl><type><name>void</name></type> <name>fullScreenToggle</name><parameter_list>()</parameter_list>;</function_decl>
	<function_decl><type><name>void</name></type> <name>postItToggle</name><parameter_list>()</parameter_list>;</function_decl>
	<function_decl><type><name>void</name></type> <name>distractionFreeToggle</name><parameter_list>()</parameter_list>;</function_decl>

	<comment type="line">// Keystroke macro recording and playback</comment>
	<decl_stmt><decl><type><name>Macro</name></type> <name>_macro</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name>_recordingMacro</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name>_playingBackMacro</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name>_recordingSaved</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>RunMacroDlg</name></type> <name>_runMacroDlg</name></decl>;</decl_stmt>

	<comment type="line">// For conflict detection when saving Macros or RunCommands</comment>
	<decl_stmt><decl><type><name>ShortcutMapper</name><modifier>*</modifier></type> <name>_pShortcutMapper</name> <init>= <expr><literal type="null">nullptr</literal></expr></init></decl>;</decl_stmt>

	<comment type="line">// For hotspot</comment>
	<decl_stmt><decl><type><name>bool</name></type> <name>_linkTriggered</name> <init>= <expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name>_isFolding</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>

	<comment type="line">//For Dynamic selection highlight</comment>
	<decl_stmt><decl><type><name>Sci_CharacterRangeFull</name></type> <name>_prevSelectedRange</name></decl>;</decl_stmt>

	<comment type="line">//Synchronized Scolling</comment>
	<struct>struct <name>SyncInfo</name> <specifier>final</specifier>
	<block>{<public type="default">
		<decl_stmt><decl><type><name>intptr_t</name></type> <name>_line</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>intptr_t</name></type> <name>_column</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>bool</name></type> <name>_isSynScollV</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>bool</name></type> <name>_isSynScollH</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>

		<function><type><name>bool</name></type> <name>doSync</name><parameter_list>()</parameter_list> <specifier>const</specifier> <block>{<block_content><return>return <expr><operator>(</operator><name>_isSynScollV</name> <operator>||</operator> <name>_isSynScollH</name><operator>)</operator></expr>;</return> </block_content>}</block></function>
	</public>}</block>
	<decl><name>_syncInfo</name></decl>;</struct>

	<decl_stmt><decl><type><name>bool</name></type> <name>_isUDDocked</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>trayIconControler</name><modifier>*</modifier></type> <name>_pTrayIco</name> <init>= <expr><literal type="null">nullptr</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>intptr_t</name></type> <name>_zoomOriginalValue</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>Accelerator</name></type> <name>_accelerator</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ScintillaAccelerator</name></type> <name>_scintaccelerator</name></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>PluginsManager</name></type> <name>_pluginsManager</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ButtonDlg</name></type> <name>_restoreButton</name></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>bool</name></type> <name>_isFileOpening</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name>_isAdministrator</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>bool</name></type> <name>_isNppSessionSavedAtExit</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt> <comment type="line">// guard flag, it prevents emptying of the Notepad++ session.xml in case of multiple WM_ENDSESSION or WM_CLOSE messages</comment>

	<decl_stmt><decl><type><name>ScintillaCtrls</name></type> <name>_scintillaCtrls4Plugins</name></decl>;</decl_stmt>

	<decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>std</name><operator>::</operator><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name></type> <name>_hideLinesMarks</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>StyleArray</name></type> <name>_hotspotStyles</name></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>AnsiCharPanel</name><modifier>*</modifier></type> <name>_pAnsiCharPanel</name> <init>= <expr><literal type="null">nullptr</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ClipboardHistoryPanel</name><modifier>*</modifier></type> <name>_pClipboardHistoryPanel</name> <init>= <expr><literal type="null">nullptr</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>VerticalFileSwitcher</name><modifier>*</modifier></type> <name>_pDocumentListPanel</name> <init>= <expr><literal type="null">nullptr</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ProjectPanel</name><modifier>*</modifier></type> <name>_pProjectPanel_1</name> <init>= <expr><literal type="null">nullptr</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ProjectPanel</name><modifier>*</modifier></type> <name>_pProjectPanel_2</name> <init>= <expr><literal type="null">nullptr</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ProjectPanel</name><modifier>*</modifier></type> <name>_pProjectPanel_3</name> <init>= <expr><literal type="null">nullptr</literal></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>FileBrowser</name><modifier>*</modifier></type> <name>_pFileBrowser</name> <init>= <expr><literal type="null">nullptr</literal></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>DocumentMap</name><modifier>*</modifier></type> <name>_pDocMap</name> <init>= <expr><literal type="null">nullptr</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>FunctionListPanel</name><modifier>*</modifier></type> <name>_pFuncList</name> <init>= <expr><literal type="null">nullptr</literal></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>HWND</name></expr></argument>&gt;</argument_list></name></type> <name>_sysTrayHiddenHwnd</name></decl>;</decl_stmt>

	<function_decl><type><name>BOOL</name></type> <name>notify</name><parameter_list>(<parameter><decl><type><name>SCNotification</name> <modifier>*</modifier></type><name>notification</name></decl></parameter>)</parameter_list>;</function_decl>
	<function_decl><type><name>void</name></type> <name>command</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>id</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="line">//Document management</comment>
	<decl_stmt><decl><type><name>UCHAR</name></type> <name>_mainWindowStatus</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> <comment type="line">//For 2 views and user dialog if docked</comment>
	<decl_stmt><decl><type><name>int</name></type> <name>_activeView</name> <init>= <expr><name>MAIN_VIEW</name></expr></init></decl>;</decl_stmt>

	<comment type="line">//User dialog docking</comment>
	<function_decl><type><name>void</name></type> <name>dockUserDlg</name><parameter_list>()</parameter_list>;</function_decl>
    <function_decl><type><name>void</name></type> <name>undockUserDlg</name><parameter_list>()</parameter_list>;</function_decl>

	<comment type="line">//View visibility</comment>
	<function_decl><type><name>void</name></type> <name>showView</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>whichOne</name></decl></parameter>)</parameter_list>;</function_decl>
	<function_decl><type><name>bool</name></type> <name>viewVisible</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>whichOne</name></decl></parameter>)</parameter_list>;</function_decl>
	<function_decl><type><name>void</name></type> <name>hideView</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>whichOne</name></decl></parameter>)</parameter_list>;</function_decl>
	<function_decl><type><name>void</name></type> <name>hideCurrentView</name><parameter_list>()</parameter_list>;</function_decl>
	<function><type><name>bool</name></type> <name>bothActive</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><operator>(</operator><name>_mainWindowStatus</name> <operator>&amp;</operator> <name>WindowBothActive</name><operator>)</operator> <operator>==</operator> <name>WindowBothActive</name></expr>;</return> </block_content>}</block></function><empty_stmt>;</empty_stmt>
	<function_decl><type><name>bool</name></type> <name>reloadLang</name><parameter_list>()</parameter_list>;</function_decl>
	<function_decl><type><name>bool</name></type> <name>loadStyles</name><parameter_list>()</parameter_list>;</function_decl>

	<function><type><name>int</name></type> <name>currentView</name><parameter_list>()</parameter_list> <block>{<block_content>
		<return>return <expr><name>_activeView</name></expr>;</return>
	</block_content>}</block></function>

	<function><type><name>int</name></type> <name>otherView</name><parameter_list>()</parameter_list> <block>{<block_content>
		<return>return <expr><operator>(</operator><ternary><condition><expr><name>_activeView</name> <operator>==</operator> <name>MAIN_VIEW</name></expr>?</condition><then><expr><name>SUB_VIEW</name></expr></then><else>:<expr><name>MAIN_VIEW</name></expr></else></ternary><operator>)</operator></expr>;</return>
	</block_content>}</block></function>

	<function><type><name>int</name></type> <name>otherFromView</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>whichOne</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<return>return <expr><operator>(</operator><ternary><condition><expr><name>whichOne</name> <operator>==</operator> <name>MAIN_VIEW</name></expr>?</condition><then><expr><name>SUB_VIEW</name></expr></then><else>:<expr><name>MAIN_VIEW</name></expr></else></ternary><operator>)</operator></expr>;</return>
	</block_content>}</block></function>

	<function_decl><type><name>bool</name></type> <name>canHideView</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>whichOne</name></decl></parameter>)</parameter_list>;</function_decl>	<comment type="line">//true if view can safely be hidden (no open docs etc)</comment>

	<function_decl><type><name>bool</name></type> <name>isEmpty</name><parameter_list>()</parameter_list>;</function_decl> <comment type="line">// true if we have 1 view with 1 clean, untitled doc</comment>

	<function_decl><type><name>int</name></type> <name>switchEditViewTo</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>gid</name></decl></parameter>)</parameter_list>;</function_decl>	<comment type="line">//activate other view (set focus etc)</comment>

	<function_decl><type><name>void</name></type> <name>docGotoAnotherEditView</name><parameter_list>(<parameter><decl><type><name>FileTransferMode</name></type> <name>mode</name></decl></parameter>)</parameter_list>;</function_decl>	<comment type="line">//TransferMode</comment>
	<function_decl><type><name>void</name></type> <name>docOpenInNewInstance</name><parameter_list>(<parameter><decl><type><name>FileTransferMode</name></type> <name>mode</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x</name> <init>= <expr><literal type="number">0</literal></expr></init></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name> <init>= <expr><literal type="number">0</literal></expr></init></decl></parameter>)</parameter_list>;</function_decl>

	<function_decl><type><name>void</name></type> <name>loadBufferIntoView</name><parameter_list>(<parameter><decl><type><name>BufferID</name></type> <name>id</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>whichOne</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>dontClose</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl></parameter>)</parameter_list>;</function_decl>		<comment type="line">//Doesnt _activate_ the buffer</comment>
	<function_decl><type><name>bool</name></type> <name>removeBufferFromView</name><parameter_list>(<parameter><decl><type><name>BufferID</name></type> <name>id</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>whichOne</name></decl></parameter>)</parameter_list>;</function_decl>	<comment type="line">//Activates alternative of possible, or creates clean document if not clean already</comment>

	<function_decl><type><name>bool</name></type> <name>activateBuffer</name><parameter_list>(<parameter><decl><type><name>BufferID</name></type> <name>id</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>whichOne</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>forceApplyHilite</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl></parameter>)</parameter_list>;</function_decl>			<comment type="line">//activate buffer in that view if found</comment>
	<function_decl><type><name>void</name></type> <name>notifyBufferActivated</name><parameter_list>(<parameter><decl><type><name>BufferID</name></type> <name>bufid</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>view</name></decl></parameter>)</parameter_list>;</function_decl>
	<function_decl><type><name>void</name></type> <name>performPostReload</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>whichOne</name></decl></parameter>)</parameter_list>;</function_decl>
<comment type="line">//END: Document management</comment>

	<function_decl><type><name>int</name></type> <name>doSaveOrNot</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>TCHAR</name> <modifier>*</modifier></type><name>fn</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>isMulti</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl></parameter>)</parameter_list>;</function_decl>
	<function_decl><type><name>int</name></type> <name>doReloadOrNot</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>TCHAR</name> <modifier>*</modifier></type><name>fn</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>dirty</name></decl></parameter>)</parameter_list>;</function_decl>
	<function_decl><type><name>int</name></type> <name>doCloseOrNot</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>TCHAR</name> <modifier>*</modifier></type><name>fn</name></decl></parameter>)</parameter_list>;</function_decl>
	<function_decl><type><name>int</name></type> <name>doDeleteOrNot</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>TCHAR</name> <modifier>*</modifier></type><name>fn</name></decl></parameter>)</parameter_list>;</function_decl>
	<function_decl><type><name>int</name></type> <name>doSaveAll</name><parameter_list>()</parameter_list>;</function_decl>

	<function_decl><type><name>void</name></type> <name>enableMenu</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>cmdID</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>doEnable</name></decl></parameter>)</parameter_list> <specifier>const</specifier>;</function_decl>
	<function_decl><type><name>void</name></type> <name>enableCommand</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>cmdID</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>doEnable</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>which</name></decl></parameter>)</parameter_list> <specifier>const</specifier>;</function_decl>
	<function_decl><type><name>void</name></type> <name>checkClipboard</name><parameter_list>()</parameter_list>;</function_decl>
	<function_decl><type><name>void</name></type> <name>checkDocState</name><parameter_list>()</parameter_list>;</function_decl>
	<function_decl><type><name>void</name></type> <name>checkUndoState</name><parameter_list>()</parameter_list>;</function_decl>
	<function_decl><type><name>void</name></type> <name>checkMacroState</name><parameter_list>()</parameter_list>;</function_decl>
	<function_decl><type><name>void</name></type> <name>checkSyncState</name><parameter_list>()</parameter_list>;</function_decl>
	<function_decl><type><name>void</name></type> <name>setupColorSampleBitmapsOnMainMenuItems</name><parameter_list>()</parameter_list>;</function_decl>
	<function_decl><type><name>void</name></type> <name>dropFiles</name><parameter_list>(<parameter><decl><type><name>HDROP</name></type> <name>hdrop</name></decl></parameter>)</parameter_list>;</function_decl>
	<function_decl><type><name>void</name></type> <name>checkModifiedDocument</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>bCheckOnlyCurrentBuffer</name></decl></parameter>)</parameter_list>;</function_decl>

    <function_decl><type><name>void</name></type> <name>getMainClientRect</name><parameter_list>(<parameter><decl><type><name>RECT</name> <modifier>&amp;</modifier></type> <name>rc</name></decl></parameter>)</parameter_list> <specifier>const</specifier>;</function_decl>
	<function_decl><type><name>void</name></type> <name>staticCheckMenuAndTB</name><parameter_list>()</parameter_list> <specifier>const</specifier>;</function_decl>
	<function_decl><type><name>void</name></type> <name>dynamicCheckMenuAndTB</name><parameter_list>()</parameter_list> <specifier>const</specifier>;</function_decl>
	<function_decl><type><name>void</name></type> <name>enableConvertMenuItems</name><parameter_list>(<parameter><decl><type><name>EolType</name></type> <name>f</name></decl></parameter>)</parameter_list> <specifier>const</specifier>;</function_decl>
	<function_decl><type><name>void</name></type> <name>checkUnicodeMenuItems</name><parameter_list>()</parameter_list> <specifier>const</specifier>;</function_decl>

	<function_decl><type><name>generic_string</name></type> <name>getLangDesc</name><parameter_list>(<parameter><decl><type><name>LangType</name></type> <name>langType</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>getName</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl></parameter>)</parameter_list>;</function_decl>

	<function_decl><type><name>void</name></type> <name>setLangStatus</name><parameter_list>(<parameter><decl><type><name>LangType</name></type> <name>langType</name></decl></parameter>)</parameter_list>;</function_decl>

	<function_decl><type><name>void</name></type> <name>setDisplayFormat</name><parameter_list>(<parameter><decl><type><name>EolType</name></type> <name>f</name></decl></parameter>)</parameter_list>;</function_decl>
	<function_decl><type><name>void</name></type> <name>setUniModeText</name><parameter_list>()</parameter_list>;</function_decl>
	<function_decl><type><name>void</name></type> <name>checkLangsMenu</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>id</name></decl></parameter>)</parameter_list> <specifier>const</specifier> ;</function_decl>
    <function_decl><type><name>void</name></type> <name>setLanguage</name><parameter_list>(<parameter><decl><type><name>LangType</name></type> <name>langType</name></decl></parameter>)</parameter_list>;</function_decl>
	<function_decl><type><name>LangType</name></type> <name>menuID2LangType</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>cmdID</name></decl></parameter>)</parameter_list>;</function_decl>

	<function_decl><type><name>BOOL</name></type> <name>processIncrFindAccel</name><parameter_list>(<parameter><decl><type><name>MSG</name> <modifier>*</modifier></type><name>msg</name></decl></parameter>)</parameter_list> <specifier>const</specifier>;</function_decl>
	<function_decl><type><name>BOOL</name></type> <name>processFindAccel</name><parameter_list>(<parameter><decl><type><name>MSG</name> <modifier>*</modifier></type><name>msg</name></decl></parameter>)</parameter_list> <specifier>const</specifier>;</function_decl>

	<function><type><name>void</name></type> <name>checkMenuItem</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>itemID</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>willBeChecked</name></decl></parameter>)</parameter_list> <specifier>const</specifier> <block>{<block_content>
		<expr_stmt><expr><call><name><operator>::</operator><name>CheckMenuItem</name></name><argument_list>(<argument><expr><name>_mainMenuHandle</name></expr></argument>, <argument><expr><name>itemID</name></expr></argument>, <argument><expr><name>MF_BYCOMMAND</name> <operator>|</operator> <operator>(</operator><ternary><condition><expr><name>willBeChecked</name></expr>?</condition><then><expr><name>MF_CHECKED</name></expr></then><else>:<expr><name>MF_UNCHECKED</name></expr></else></ternary><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></function>

	<function_decl><type><name>bool</name></type> <name>isConditionExprLine</name><parameter_list>(<parameter><decl><type><name>intptr_t</name></type> <name>lineNumber</name></decl></parameter>)</parameter_list>;</function_decl>
	<function_decl><type><name>intptr_t</name></type> <name>findMachedBracePos</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>startPos</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>endPos</name></decl></parameter>, <parameter><decl><type><name>char</name></type> <name>targetSymbol</name></decl></parameter>, <parameter><decl><type><name>char</name></type> <name>matchedSymbol</name></decl></parameter>)</parameter_list>;</function_decl>
	<function_decl><type><name>void</name></type> <name>maintainIndentation</name><parameter_list>(<parameter><decl><type><name>TCHAR</name></type> <name>ch</name></decl></parameter>)</parameter_list>;</function_decl>

	<function_decl><type><name>void</name></type> <name>addHotSpot</name><parameter_list>(<parameter><decl><type><name>ScintillaEditView</name><modifier>*</modifier></type> <name>view</name> <init>= <expr><literal type="null">nullptr</literal></expr></init></decl></parameter>)</parameter_list>;</function_decl>

    <function><type><name>void</name></type> <name>bookmarkAdd</name><parameter_list>(<parameter><decl><type><name>intptr_t</name></type> <name>lineno</name></decl></parameter>)</parameter_list> <specifier>const</specifier> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>lineno</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>lineno</name> <operator>=</operator> <call><name><name>_pEditView</name><operator>-&gt;</operator><name>getCurrentLineNumber</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>bookmarkPresent</name><argument_list>(<argument><expr><name>lineno</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name><name>_pEditView</name><operator>-&gt;</operator><name>execute</name></name><argument_list>(<argument><expr><name>SCI_MARKERADD</name></expr></argument>, <argument><expr><name>lineno</name></expr></argument>, <argument><expr><name>MARK_BOOKMARK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></function>

    <function><type><name>void</name></type> <name>bookmarkDelete</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>lineno</name></decl></parameter>)</parameter_list> <specifier>const</specifier> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>lineno</name> <operator>==</operator> <cast type="static">static_cast<argument_list type="generic">&lt;<argument><expr><name>size_t</name></expr></argument>&gt;</argument_list><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></cast></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>lineno</name> <operator>=</operator> <call><name><name>_pEditView</name><operator>-&gt;</operator><name>getCurrentLineNumber</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<while>while <condition>(<expr><call><name>bookmarkPresent</name><argument_list>(<argument><expr><name>lineno</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name><name>_pEditView</name><operator>-&gt;</operator><name>execute</name></name><argument_list>(<argument><expr><name>SCI_MARKERDELETE</name></expr></argument>, <argument><expr><name>lineno</name></expr></argument>, <argument><expr><name>MARK_BOOKMARK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>
	</block_content>}</block></function>

    <function><type><name>bool</name></type> <name>bookmarkPresent</name><parameter_list>(<parameter><decl><type><name>intptr_t</name></type> <name>lineno</name></decl></parameter>)</parameter_list> <specifier>const</specifier> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>lineno</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>lineno</name> <operator>=</operator> <call><name><name>_pEditView</name><operator>-&gt;</operator><name>getCurrentLineNumber</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<decl_stmt><decl><type><name>LRESULT</name></type> <name>state</name> <init>= <expr><call><name><name>_pEditView</name><operator>-&gt;</operator><name>execute</name></name><argument_list>(<argument><expr><name>SCI_MARKERGET</name></expr></argument>, <argument><expr><name>lineno</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<return>return <expr><operator>(</operator><operator>(</operator><name>state</name> <operator>&amp;</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>MARK_BOOKMARK</name><operator>)</operator><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr>;</return>
	</block_content>}</block></function>

    <function><type><name>void</name></type> <name>bookmarkToggle</name><parameter_list>(<parameter><decl><type><name>intptr_t</name></type> <name>lineno</name></decl></parameter>)</parameter_list> <specifier>const</specifier> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>lineno</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>lineno</name> <operator>=</operator> <call><name><name>_pEditView</name><operator>-&gt;</operator><name>getCurrentLineNumber</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><call><name>bookmarkPresent</name><argument_list>(<argument><expr><name>lineno</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>bookmarkDelete</name><argument_list>(<argument><expr><name>lineno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>bookmarkAdd</name><argument_list>(<argument><expr><name>lineno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
	</block_content>}</block></function>

    <function_decl><type><name>void</name></type> <name>bookmarkNext</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>forwardScan</name></decl></parameter>)</parameter_list>;</function_decl>
	<function><type><name>void</name></type> <name>bookmarkClearAll</name><parameter_list>()</parameter_list> <specifier>const</specifier> <block>{<block_content>
		<expr_stmt><expr><call><name><name>_pEditView</name><operator>-&gt;</operator><name>execute</name></name><argument_list>(<argument><expr><name>SCI_MARKERDELETEALL</name></expr></argument>, <argument><expr><name>MARK_BOOKMARK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></function>

	<function_decl><type><name>void</name></type> <name>copyMarkedLines</name><parameter_list>()</parameter_list>;</function_decl>
	<function_decl><type><name>void</name></type> <name>cutMarkedLines</name><parameter_list>()</parameter_list>;</function_decl>
	<function_decl><type><name>void</name></type> <name>deleteMarkedLines</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>isMarked</name></decl></parameter>)</parameter_list>;</function_decl>
	<function_decl><type><name>void</name></type> <name>pasteToMarkedLines</name><parameter_list>()</parameter_list>;</function_decl>
	<function_decl><type><name>void</name></type> <name>deleteMarkedline</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>ln</name></decl></parameter>)</parameter_list>;</function_decl>
	<function_decl><type><name>void</name></type> <name>inverseMarks</name><parameter_list>()</parameter_list>;</function_decl>
	<function_decl><type><name>void</name></type> <name>replaceMarkedline</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>ln</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>TCHAR</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list>;</function_decl>
	<function_decl><type><name>generic_string</name></type> <name>getMarkedLine</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>ln</name></decl></parameter>)</parameter_list>;</function_decl>
    <function_decl><type><name>void</name></type> <name>findMatchingBracePos</name><parameter_list>(<parameter><decl><type><name>intptr_t</name><modifier>&amp;</modifier></type> <name>braceAtCaret</name></decl></parameter>, <parameter><decl><type><name>intptr_t</name><modifier>&amp;</modifier></type> <name>braceOpposite</name></decl></parameter>)</parameter_list>;</function_decl>
    <function_decl><type><name>bool</name></type> <name>braceMatch</name><parameter_list>()</parameter_list>;</function_decl>

    <function_decl><type><name>void</name></type> <name>activateNextDoc</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>direction</name></decl></parameter>)</parameter_list>;</function_decl>
	<function_decl><type><name>void</name></type> <name>activateDoc</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>pos</name></decl></parameter>)</parameter_list>;</function_decl>

	<function_decl><type><name>void</name></type> <name>updateStatusBar</name><parameter_list>()</parameter_list>;</function_decl>
	<function_decl><type><name>size_t</name></type> <name>getSelectedCharNumber</name><parameter_list>(<parameter><decl><type><name>UniMode</name></type></decl></parameter>)</parameter_list>;</function_decl>
	<function_decl><type><name>size_t</name></type> <name>getCurrentDocCharCount</name><parameter_list>(<parameter><decl><type><name>UniMode</name></type> <name>u</name></decl></parameter>)</parameter_list>;</function_decl>
	<function_decl><type><name>size_t</name></type> <name>getSelectedAreas</name><parameter_list>()</parameter_list>;</function_decl>
	<function_decl><type><name>size_t</name></type> <name>getSelectedBytes</name><parameter_list>()</parameter_list>;</function_decl>
	<function_decl><type><name>bool</name></type> <name>isFormatUnicode</name><parameter_list>(<parameter><decl><type><name>UniMode</name></type></decl></parameter>)</parameter_list>;</function_decl>
	<function_decl><type><name>int</name></type> <name>getBOMSize</name><parameter_list>(<parameter><decl><type><name>UniMode</name></type></decl></parameter>)</parameter_list>;</function_decl>

	<function_decl><type><name>void</name></type> <name>showAutoComp</name><parameter_list>()</parameter_list>;</function_decl>
	<function_decl><type><name>void</name></type> <name>autoCompFromCurrentFile</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>autoInsert</name> <init>= <expr><literal type="boolean">true</literal></expr></init></decl></parameter>)</parameter_list>;</function_decl>
	<function_decl><type><name>void</name></type> <name>showFunctionComp</name><parameter_list>()</parameter_list>;</function_decl>
	<function_decl><type><name>void</name></type> <name>showPathCompletion</name><parameter_list>()</parameter_list>;</function_decl>
	<function_decl><type><name>void</name></type> <name>showFunctionNextHint</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>isNext</name> <init>= <expr><literal type="boolean">true</literal></expr></init></decl></parameter>)</parameter_list>;</function_decl>

	<comment type="line">//void changeStyleCtrlsLang(HWND hDlg, int *idArray, const char **translatedText);</comment>
	<function_decl><type><name>void</name></type> <name>setCodePageForInvisibleView</name><parameter_list>(<parameter><decl><type><name>Buffer</name> <specifier>const</specifier><modifier>*</modifier></type> <name>pBuffer</name></decl></parameter>)</parameter_list>;</function_decl>
	<function_decl><type><name>bool</name></type> <name>replaceInOpenedFiles</name><parameter_list>()</parameter_list>;</function_decl>
	<function_decl><type><name>bool</name></type> <name>findInOpenedFiles</name><parameter_list>()</parameter_list>;</function_decl>
	<function_decl><type><name>bool</name></type> <name>findInCurrentFile</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>isEntireDoc</name></decl></parameter>)</parameter_list>;</function_decl>

	<function_decl><type><name>void</name></type> <name>getMatchedFileNames</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>TCHAR</name> <modifier>*</modifier></type><name>dir</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>level</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>generic_string</name></expr></argument>&gt;</argument_list></name> <modifier>&amp;</modifier></type> <name>patterns</name></decl></parameter>, <parameter><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>generic_string</name></expr></argument>&gt;</argument_list></name> <modifier>&amp;</modifier></type> <name>fileNames</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>isRecursive</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>isInHiddenDir</name></decl></parameter>)</parameter_list>;</function_decl>
	<function_decl><type><name>void</name></type> <name>doSynScorll</name><parameter_list>(<parameter><decl><type><name>HWND</name></type> <name>hW</name></decl></parameter>)</parameter_list>;</function_decl>
	<function_decl><type><name>void</name></type> <name>setWorkingDir</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>TCHAR</name> <modifier>*</modifier></type><name>dir</name></decl></parameter>)</parameter_list>;</function_decl>
	<function_decl><type><name>bool</name></type> <name>str2Cliboard</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>generic_string</name> <modifier>&amp;</modifier></type> <name>str2cpy</name></decl></parameter>)</parameter_list>;</function_decl>

	<function_decl><type><name>bool</name></type> <name>getIntegralDockingData</name><parameter_list>(<parameter><decl><type><name>tTbData</name> <modifier>&amp;</modifier></type> <name>dockData</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>&amp;</modifier></type> <name>iCont</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>&amp;</modifier></type> <name>isVisible</name></decl></parameter>)</parameter_list>;</function_decl>
	<function_decl><type><name>int</name></type> <name>getLangFromMenuName</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>TCHAR</name> <modifier>*</modifier></type> <name>langName</name></decl></parameter>)</parameter_list>;</function_decl>
	<function_decl><type><name>generic_string</name></type> <name>getLangFromMenu</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Buffer</name> <modifier>*</modifier></type> <name>buf</name></decl></parameter>)</parameter_list>;</function_decl>

    <function_decl><type><name>generic_string</name></type> <name>exts2Filters</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>generic_string</name><modifier>&amp;</modifier></type> <name>exts</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>maxExtsLen</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl></parameter>)</parameter_list> <specifier>const</specifier>;</function_decl> <comment type="line">// maxExtsLen default value -1 makes no limit of whole exts length</comment>
	<function_decl><type><name>int</name></type> <name>setFileOpenSaveDlgFilters</name><parameter_list>(<parameter><decl><type><name>CustomFileDialog</name> <modifier>&amp;</modifier></type> <name>fDlg</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>showAllExt</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>langType</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl></parameter>)</parameter_list>;</function_decl> <comment type="line">// showAllExt should be true if it's used for open file dialog - all set exts should be used for filtering files</comment>
	<function_decl><type><name>Style</name> <modifier>*</modifier></type> <name>getStyleFromName</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>TCHAR</name> <modifier>*</modifier></type><name>styleName</name></decl></parameter>)</parameter_list>;</function_decl>
	<function_decl><type><name>bool</name></type> <name>dumpFiles</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>TCHAR</name> <modifier>*</modifier></type> <name>outdir</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>TCHAR</name> <modifier>*</modifier></type> <name>fileprefix</name> <init>= <expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr></init></decl></parameter>)</parameter_list>;</function_decl>	<comment type="line">//helper func</comment>
	<function_decl><type><name>void</name></type> <name>drawTabbarColoursFromStylerArray</name><parameter_list>()</parameter_list>;</function_decl>
	<function_decl><type><name>void</name></type> <name>drawAutocompleteColoursFromTheme</name><parameter_list>(<parameter><decl><type><name>COLORREF</name></type> <name>fgColor</name></decl></parameter>, <parameter><decl><type><name>COLORREF</name></type> <name>bgColor</name></decl></parameter>)</parameter_list>;</function_decl>
	<function_decl><type><name>void</name></type> <name>drawDocumentMapColoursFromStylerArray</name><parameter_list>()</parameter_list>;</function_decl>

	<function><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>generic_string</name></expr></argument>&gt;</argument_list></name></type> <name>loadCommandlineParams</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>TCHAR</name> <modifier>*</modifier></type> <name>commandLine</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>CmdLineParams</name> <modifier>*</modifier></type> <name>pCmdParams</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<decl_stmt><decl><type><specifier>const</specifier> <name>CmdLineParamsDTO</name></type> <name>dto</name> <init>= <expr><call><name><name>CmdLineParamsDTO</name><operator>::</operator><name>FromCmdLineParams</name></name><argument_list>(<argument><expr><operator>*</operator><name>pCmdParams</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<return>return <expr><call><name>loadCommandlineParams</name><argument_list>(<argument><expr><name>commandLine</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dto</name></expr></argument>)</argument_list></call></expr>;</return>
	</block_content>}</block></function>
	<function_decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>generic_string</name></expr></argument>&gt;</argument_list></name></type> <name>loadCommandlineParams</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>TCHAR</name> <modifier>*</modifier></type> <name>commandLine</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>CmdLineParamsDTO</name> <modifier>*</modifier></type> <name>pCmdParams</name></decl></parameter>)</parameter_list>;</function_decl>
	<function_decl><type><name>bool</name></type> <name>noOpenedDoc</name><parameter_list>()</parameter_list> <specifier>const</specifier>;</function_decl>
	<function_decl><type><name>bool</name></type> <name>goToPreviousIndicator</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>indicID2Search</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>isWrap</name> <init>= <expr><literal type="boolean">true</literal></expr></init></decl></parameter>)</parameter_list> <specifier>const</specifier>;</function_decl>
	<function_decl><type><name>bool</name></type> <name>goToNextIndicator</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>indicID2Search</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>isWrap</name> <init>= <expr><literal type="boolean">true</literal></expr></init></decl></parameter>)</parameter_list> <specifier>const</specifier>;</function_decl>
	<function_decl><type><name>int</name></type> <name>wordCount</name><parameter_list>()</parameter_list>;</function_decl>

	<function_decl><type><name>void</name></type> <name>wsTabConvert</name><parameter_list>(<parameter><decl><type><name>spaceTab</name></type> <name>whichWay</name></decl></parameter>)</parameter_list>;</function_decl>
	<function_decl><type><name>void</name></type> <name>doTrim</name><parameter_list>(<parameter><decl><type><name>trimOp</name></type> <name>whichPart</name></decl></parameter>)</parameter_list>;</function_decl>
	<function_decl><type><name>void</name></type> <name>eol2ws</name><parameter_list>()</parameter_list>;</function_decl>
	<function_decl><type><name>void</name></type> <name>removeEmptyLine</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>isBlankContained</name></decl></parameter>)</parameter_list>;</function_decl>
	<function_decl><type><name>void</name></type> <name>removeDuplicateLines</name><parameter_list>()</parameter_list>;</function_decl>
	<function_decl><type><name>void</name></type> <name>launchAnsiCharPanel</name><parameter_list>()</parameter_list>;</function_decl>
	<function_decl><type><name>void</name></type> <name>launchClipboardHistoryPanel</name><parameter_list>()</parameter_list>;</function_decl>
	<function_decl><type><name>void</name></type> <name>launchDocumentListPanel</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>changeFromBtnCmd</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl></parameter>)</parameter_list>;</function_decl>
	<function_decl><type><name>void</name></type> <name>checkProjectMenuItem</name><parameter_list>()</parameter_list>;</function_decl>
	<function_decl><type><name>void</name></type> <name>launchProjectPanel</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>cmdID</name></decl></parameter>, <parameter><decl><type><name>ProjectPanel</name> <modifier>*</modifier><modifier>*</modifier></type> <name>pProjPanel</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>panelID</name></decl></parameter>)</parameter_list>;</function_decl>
	<function_decl><type><name>void</name></type> <name>launchDocMap</name><parameter_list>()</parameter_list>;</function_decl>
	<function_decl><type><name>void</name></type> <name>launchFunctionList</name><parameter_list>()</parameter_list>;</function_decl>
	<function_decl><type><name>void</name></type> <name>launchFileBrowser</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>generic_string</name></expr></argument>&gt;</argument_list></name> <modifier>&amp;</modifier></type> <name>folders</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>generic_string</name><modifier>&amp;</modifier></type> <name>selectedItemPath</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>fromScratch</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl></parameter>)</parameter_list>;</function_decl>
	<function_decl><type><name>void</name></type> <name>showAllQuotes</name><parameter_list>()</parameter_list> <specifier>const</specifier>;</function_decl>
	<function_decl><type><specifier>static</specifier> <name>DWORD</name> <name>WINAPI</name></type> <name>threadTextPlayer</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>text2display</name></decl></parameter>)</parameter_list>;</function_decl>
	<function_decl><type><specifier>static</specifier> <name>DWORD</name> <name>WINAPI</name></type> <name>threadTextTroller</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>params</name></decl></parameter>)</parameter_list>;</function_decl>
	<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>getRandomAction</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>ranNum</name></decl></parameter>)</parameter_list>;</function_decl>
	<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>deleteBack</name><parameter_list>(<parameter><decl><type><name>ScintillaEditView</name> <modifier>*</modifier></type><name>pCurrentView</name></decl></parameter>, <parameter><decl><type><name>BufferID</name></type> <name>targetBufID</name></decl></parameter>)</parameter_list>;</function_decl>
	<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>deleteForward</name><parameter_list>(<parameter><decl><type><name>ScintillaEditView</name> <modifier>*</modifier></type><name>pCurrentView</name></decl></parameter>, <parameter><decl><type><name>BufferID</name></type> <name>targetBufID</name></decl></parameter>)</parameter_list>;</function_decl>
	<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>selectBack</name><parameter_list>(<parameter><decl><type><name>ScintillaEditView</name> <modifier>*</modifier></type><name>pCurrentView</name></decl></parameter>, <parameter><decl><type><name>BufferID</name></type> <name>targetBufID</name></decl></parameter>)</parameter_list>;</function_decl>

	<function><type><specifier>static</specifier> <name>int</name></type> <name>getRandomNumber</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>rangeMax</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl></parameter>)</parameter_list> <block>{<block_content>
		<decl_stmt><decl><type><name>int</name></type> <name>randomNumber</name> <init>= <expr><call><name>rand</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if <condition>(<expr><name>rangeMax</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><name>randomNumber</name></expr>;</return></block_content></block></if></if_stmt>
		<return>return <expr><operator>(</operator><call><name>rand</name><argument_list>()</argument_list></call> <operator>%</operator> <name>rangeMax</name><operator>)</operator></expr>;</return>
	</block_content>}</block></function>

	<function_decl><type><specifier>static</specifier> <name>DWORD</name> <name>WINAPI</name></type> <name>backupDocument</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>params</name></decl></parameter>)</parameter_list>;</function_decl>

	<function_decl><type><specifier>static</specifier> <name>DWORD</name> <name>WINAPI</name></type> <name>monitorFileOnChange</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type> <name>params</name></decl></parameter>)</parameter_list>;</function_decl>
	<struct>struct <name>MonitorInfo</name> <specifier>final</specifier> <block>{<public type="default">
		<constructor><name>MonitorInfo</name><parameter_list>(<parameter><decl><type><name>Buffer</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>HWND</name></type> <name>nppHandle</name></decl></parameter>)</parameter_list> <member_init_list>:
			<call><name>_buffer</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call>, <call><name>_nppHandle</name><argument_list>(<argument><expr><name>nppHandle</name></expr></argument>)</argument_list></call> </member_init_list><block>{<block_content/>}</block></constructor><empty_stmt>;</empty_stmt>
		<decl_stmt><decl><type><name>Buffer</name> <modifier>*</modifier></type><name>_buffer</name> <init>= <expr><literal type="null">nullptr</literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>HWND</name></type> <name>_nppHandle</name> <init>= <expr><literal type="null">nullptr</literal></expr></init></decl>;</decl_stmt>
	</public>}</block>;</struct>

	<function_decl><type><name>void</name></type> <name>monitoringStartOrStopAndUpdateUI</name><parameter_list>(<parameter><decl><type><name>Buffer</name><modifier>*</modifier></type> <name>pBuf</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>isStarting</name></decl></parameter>)</parameter_list>;</function_decl>
	<function_decl><type><name>void</name></type> <name>createMonitoringThread</name><parameter_list>(<parameter><decl><type><name>Buffer</name><modifier>*</modifier></type> <name>pBuf</name></decl></parameter>)</parameter_list>;</function_decl>
	<function_decl><type><name>void</name></type> <name>updateCommandShortcuts</name><parameter_list>()</parameter_list>;</function_decl>

	<function_decl><type><name>HBITMAP</name></type> <name>generateSolidColourMenuItemIcon</name><parameter_list>(<parameter><decl><type><name>COLORREF</name></type> <name>colour</name></decl></parameter>)</parameter_list>;</function_decl>
</private>}</block>;</class>
</unit>

<unit xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:omp="http://www.srcML.org/srcML/openmp" revision="1.0.0" language="C++" filename="Notepad_plus.cpp" hash="d8462cbaf48f1f0c2f863f6712af04f03e96889d"><comment type="line">// This file is part of Notepad++ project</comment>
<comment type="line">// Copyright (C)2021 Don HO &lt;don.h@free.fr&gt;</comment>

<comment type="line">// This program is free software: you can redistribute it and/or modify</comment>
<comment type="line">// it under the terms of the GNU General Public License as published by</comment>
<comment type="line">// the Free Software Foundation, either version 3 of the License, or</comment>
<comment type="line">// at your option any later version.</comment>
<comment type="line">//</comment>
<comment type="line">// This program is distributed in the hope that it will be useful,</comment>
<comment type="line">// but WITHOUT ANY WARRANTY; without even the implied warranty of</comment>
<comment type="line">// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the</comment>
<comment type="line">// GNU General Public License for more details.</comment>
<comment type="line">//</comment>
<comment type="line">// You should have received a copy of the GNU General Public License</comment>
<comment type="line">// along with this program.  If not, see &lt;https://www.gnu.org/licenses/&gt;.</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;time.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;shlwapi.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;wininet.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"Notepad_plus.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"Notepad_plus_Window.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"CustomFileDialog.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"Printer.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"FileNameStringSplitter.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lesDlgs.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"Utf8_16.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"regExtDlg.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"RunDlg.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ShortcutMapper.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"preferenceDlg.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"TaskListDlg.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"xmlMatchedTagsHighlighter.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"EncodingMapper.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ansiCharPanel.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clipboardHistoryPanel.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"VerticalFileSwitcher.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ProjectPanel.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"documentMap.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"functionListPanel.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"fileBrowser.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"Common.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"NppDarkMode.h"</cpp:file></cpp:include>

<using>using <namespace>namespace <name>std</name>;</namespace></using>

<enum>enum <name>tb_stat</name> <block>{<decl><name>tb_saved</name></decl>, <decl><name>tb_unsaved</name></decl>, <decl><name>tb_ro</name></decl>, <decl><name>tb_monitored</name></decl>}</block>;</enum>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIR_LEFT</name></cpp:macro> <cpp:value>true</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIR_RIGHT</name></cpp:macro> <cpp:value>false</cpp:value></cpp:define>

<decl_stmt><decl><type><name>int</name></type> <name><name>docTabIconIDs</name><index>[]</index></name> <init>= <expr><block>{ <expr><name>IDI_SAVED_ICON</name></expr>,  <expr><name>IDI_UNSAVED_ICON</name></expr>,  <expr><name>IDI_READONLY_ICON</name></expr>,  <expr><name>IDI_MONITORING_ICON</name></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>docTabIconIDs_darkMode</name><index>[]</index></name> <init>= <expr><block>{ <expr><name>IDI_SAVED_DM_ICON</name></expr>,  <expr><name>IDI_UNSAVED_DM_ICON</name></expr>,  <expr><name>IDI_READONLY_DM_ICON</name></expr>,  <expr><name>IDI_MONITORING_DM_ICON</name></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>docTabIconIDs_alt</name><index>[]</index></name> <init>= <expr><block>{ <expr><name>IDI_SAVED_ALT_ICON</name></expr>, <expr><name>IDI_UNSAVED_ALT_ICON</name></expr>, <expr><name>IDI_READONLY_ALT_ICON</name></expr>, <expr><name>IDI_MONITORING_ICON</name></expr> }</block></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name>ToolBarButtonUnit</name></type> <name><name>toolBarIcons</name><index>[]</index></name> <init>= <expr><block>{
    <expr><block>{<expr><name>IDM_FILE_NEW</name></expr>,                     <expr><name>IDI_NEW_ICON</name></expr>,               <expr><name>IDI_NEW_ICON</name></expr>,                  <expr><name>IDI_NEW_ICON2</name></expr>,              <expr><name>IDI_NEW_ICON2</name></expr>,                 <expr><name>IDI_NEW_ICON_DM</name></expr>,               <expr><name>IDI_NEW_ICON_DM</name></expr>,                  <expr><name>IDI_NEW_ICON_DM2</name></expr>,              <expr><name>IDI_NEW_ICON_DM2</name></expr>,                 <expr><name>IDR_FILENEW</name></expr>}</block></expr>,
    <expr><block>{<expr><name>IDM_FILE_OPEN</name></expr>,                    <expr><name>IDI_OPEN_ICON</name></expr>,              <expr><name>IDI_OPEN_ICON</name></expr>,                 <expr><name>IDI_OPEN_ICON2</name></expr>,             <expr><name>IDI_OPEN_ICON2</name></expr>,                <expr><name>IDI_OPEN_ICON_DM</name></expr>,              <expr><name>IDI_OPEN_ICON_DM</name></expr>,                 <expr><name>IDI_OPEN_ICON_DM2</name></expr>,             <expr><name>IDI_OPEN_ICON_DM2</name></expr>,                <expr><name>IDR_FILEOPEN</name></expr>}</block></expr>,
    <expr><block>{<expr><name>IDM_FILE_SAVE</name></expr>,                    <expr><name>IDI_SAVE_ICON</name></expr>,              <expr><name>IDI_SAVE_DISABLE_ICON</name></expr>,         <expr><name>IDI_SAVE_ICON2</name></expr>,             <expr><name>IDI_SAVE_DISABLE_ICON2</name></expr>,        <expr><name>IDI_SAVE_ICON_DM</name></expr>,              <expr><name>IDI_SAVE_DISABLE_ICON_DM</name></expr>,         <expr><name>IDI_SAVE_ICON_DM2</name></expr>,             <expr><name>IDI_SAVE_DISABLE_ICON_DM2</name></expr>,        <expr><name>IDR_FILESAVE</name></expr>}</block></expr>,
    <expr><block>{<expr><name>IDM_FILE_SAVEALL</name></expr>,                 <expr><name>IDI_SAVEALL_ICON</name></expr>,           <expr><name>IDI_SAVEALL_DISABLE_ICON</name></expr>,      <expr><name>IDI_SAVEALL_ICON2</name></expr>,          <expr><name>IDI_SAVEALL_DISABLE_ICON2</name></expr>,     <expr><name>IDI_SAVEALL_ICON_DM</name></expr>,           <expr><name>IDI_SAVEALL_DISABLE_ICON_DM</name></expr>,      <expr><name>IDI_SAVEALL_ICON_DM2</name></expr>,          <expr><name>IDI_SAVEALL_DISABLE_ICON_DM2</name></expr>,     <expr><name>IDR_SAVEALL</name></expr>}</block></expr>,
    <expr><block>{<expr><name>IDM_FILE_CLOSE</name></expr>,                   <expr><name>IDI_CLOSE_ICON</name></expr>,             <expr><name>IDI_CLOSE_ICON</name></expr>,                <expr><name>IDI_CLOSE_ICON2</name></expr>,            <expr><name>IDI_CLOSE_ICON2</name></expr>,               <expr><name>IDI_CLOSE_ICON_DM</name></expr>,             <expr><name>IDI_CLOSE_ICON_DM</name></expr>,                <expr><name>IDI_CLOSE_ICON_DM2</name></expr>,            <expr><name>IDI_CLOSE_ICON_DM2</name></expr>,               <expr><name>IDR_CLOSEFILE</name></expr>}</block></expr>,
    <expr><block>{<expr><name>IDM_FILE_CLOSEALL</name></expr>,                <expr><name>IDI_CLOSEALL_ICON</name></expr>,          <expr><name>IDI_CLOSEALL_ICON</name></expr>,             <expr><name>IDI_CLOSEALL_ICON2</name></expr>,         <expr><name>IDI_CLOSEALL_ICON2</name></expr>,            <expr><name>IDI_CLOSEALL_ICON_DM</name></expr>,          <expr><name>IDI_CLOSEALL_ICON_DM</name></expr>,             <expr><name>IDI_CLOSEALL_ICON_DM2</name></expr>,         <expr><name>IDI_CLOSEALL_ICON_DM2</name></expr>,            <expr><name>IDR_CLOSEALL</name></expr>}</block></expr>,
    <expr><block>{<expr><name>IDM_FILE_PRINT</name></expr>,                   <expr><name>IDI_PRINT_ICON</name></expr>,             <expr><name>IDI_PRINT_ICON</name></expr>,                <expr><name>IDI_PRINT_ICON2</name></expr>,            <expr><name>IDI_PRINT_ICON2</name></expr>,               <expr><name>IDI_PRINT_ICON_DM</name></expr>,             <expr><name>IDI_PRINT_ICON_DM</name></expr>,                <expr><name>IDI_PRINT_ICON_DM2</name></expr>,            <expr><name>IDI_PRINT_ICON_DM2</name></expr>,               <expr><name>IDR_PRINT</name></expr>}</block></expr>,

    <comment type="line">//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//</comment>
    <expr><block>{<expr><literal type="number">0</literal></expr>,                                <expr><name>IDI_SEPARATOR_ICON</name></expr>,         <expr><name>IDI_SEPARATOR_ICON</name></expr>,            <expr><name>IDI_SEPARATOR_ICON</name></expr>,         <expr><name>IDI_SEPARATOR_ICON</name></expr>,            <expr><name>IDI_SEPARATOR_ICON</name></expr>,            <expr><name>IDI_SEPARATOR_ICON</name></expr>,               <expr><name>IDI_SEPARATOR_ICON</name></expr>,            <expr><name>IDI_SEPARATOR_ICON</name></expr>,            <expr><name>IDI_SEPARATOR_ICON</name></expr>}</block></expr>,
    <comment type="line">//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//</comment>

    <expr><block>{<expr><name>IDM_EDIT_CUT</name></expr>,                     <expr><name>IDI_CUT_ICON</name></expr>,               <expr><name>IDI_CUT_DISABLE_ICON</name></expr>,          <expr><name>IDI_CUT_ICON2</name></expr>,              <expr><name>IDI_CUT_DISABLE_ICON2</name></expr>,         <expr><name>IDI_CUT_ICON_DM</name></expr>,               <expr><name>IDI_CUT_DISABLE_ICON_DM</name></expr>,          <expr><name>IDI_CUT_ICON_DM2</name></expr>,              <expr><name>IDI_CUT_DISABLE_ICON_DM2</name></expr>,         <expr><name>IDR_CUT</name></expr>}</block></expr>,
    <expr><block>{<expr><name>IDM_EDIT_COPY</name></expr>,                    <expr><name>IDI_COPY_ICON</name></expr>,              <expr><name>IDI_COPY_DISABLE_ICON</name></expr>,         <expr><name>IDI_COPY_ICON2</name></expr>,             <expr><name>IDI_COPY_DISABLE_ICON2</name></expr>,        <expr><name>IDI_COPY_ICON_DM</name></expr>,              <expr><name>IDI_COPY_DISABLE_ICON_DM</name></expr>,         <expr><name>IDI_COPY_ICON_DM2</name></expr>,             <expr><name>IDI_COPY_DISABLE_ICON_DM2</name></expr>,        <expr><name>IDR_COPY</name></expr>}</block></expr>,
    <expr><block>{<expr><name>IDM_EDIT_PASTE</name></expr>,                   <expr><name>IDI_PASTE_ICON</name></expr>,             <expr><name>IDI_PASTE_DISABLE_ICON</name></expr>,        <expr><name>IDI_PASTE_ICON2</name></expr>,            <expr><name>IDI_PASTE_DISABLE_ICON2</name></expr>,       <expr><name>IDI_PASTE_ICON_DM</name></expr>,             <expr><name>IDI_PASTE_DISABLE_ICON_DM</name></expr>,        <expr><name>IDI_PASTE_ICON_DM2</name></expr>,            <expr><name>IDI_PASTE_DISABLE_ICON_DM2</name></expr>,       <expr><name>IDR_PASTE</name></expr>}</block></expr>,

    <comment type="line">//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//</comment>
    <expr><block>{<expr><literal type="number">0</literal></expr>,                                <expr><name>IDI_SEPARATOR_ICON</name></expr>,         <expr><name>IDI_SEPARATOR_ICON</name></expr>,            <expr><name>IDI_SEPARATOR_ICON</name></expr>,         <expr><name>IDI_SEPARATOR_ICON</name></expr>,            <expr><name>IDI_SEPARATOR_ICON</name></expr>,            <expr><name>IDI_SEPARATOR_ICON</name></expr>,               <expr><name>IDI_SEPARATOR_ICON</name></expr>,            <expr><name>IDI_SEPARATOR_ICON</name></expr>,            <expr><name>IDI_SEPARATOR_ICON</name></expr>}</block></expr>,
    <comment type="line">//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//</comment>

    <expr><block>{<expr><name>IDM_EDIT_UNDO</name></expr>,                    <expr><name>IDI_UNDO_ICON</name></expr>,              <expr><name>IDI_UNDO_DISABLE_ICON</name></expr>,         <expr><name>IDI_UNDO_ICON2</name></expr>,             <expr><name>IDI_UNDO_DISABLE_ICON2</name></expr>,        <expr><name>IDI_UNDO_ICON_DM</name></expr>,              <expr><name>IDI_UNDO_DISABLE_ICON_DM</name></expr>,         <expr><name>IDI_UNDO_ICON_DM2</name></expr>,             <expr><name>IDI_UNDO_DISABLE_ICON_DM2</name></expr>,        <expr><name>IDR_UNDO</name></expr>}</block></expr>,
    <expr><block>{<expr><name>IDM_EDIT_REDO</name></expr>,                    <expr><name>IDI_REDO_ICON</name></expr>,              <expr><name>IDI_REDO_DISABLE_ICON</name></expr>,         <expr><name>IDI_REDO_ICON2</name></expr>,             <expr><name>IDI_REDO_DISABLE_ICON2</name></expr>,        <expr><name>IDI_REDO_ICON_DM</name></expr>,              <expr><name>IDI_REDO_DISABLE_ICON_DM</name></expr>,         <expr><name>IDI_REDO_ICON_DM2</name></expr>,             <expr><name>IDI_REDO_DISABLE_ICON_DM2</name></expr>,        <expr><name>IDR_REDO</name></expr>}</block></expr>,
    <comment type="line">//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//</comment>
    <expr><block>{<expr><literal type="number">0</literal></expr>,                                <expr><name>IDI_SEPARATOR_ICON</name></expr>,         <expr><name>IDI_SEPARATOR_ICON</name></expr>,            <expr><name>IDI_SEPARATOR_ICON</name></expr>,         <expr><name>IDI_SEPARATOR_ICON</name></expr>,            <expr><name>IDI_SEPARATOR_ICON</name></expr>,            <expr><name>IDI_SEPARATOR_ICON</name></expr>,               <expr><name>IDI_SEPARATOR_ICON</name></expr>,            <expr><name>IDI_SEPARATOR_ICON</name></expr>,            <expr><name>IDI_SEPARATOR_ICON</name></expr>}</block></expr>,
    <comment type="line">//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//</comment>

    <expr><block>{<expr><name>IDM_SEARCH_FIND</name></expr>,                  <expr><name>IDI_FIND_ICON</name></expr>,              <expr><name>IDI_FIND_ICON</name></expr>,                 <expr><name>IDI_FIND_ICON2</name></expr>,             <expr><name>IDI_FIND_ICON2</name></expr>,                <expr><name>IDI_FIND_ICON_DM</name></expr>,              <expr><name>IDI_FIND_ICON_DM</name></expr>,                 <expr><name>IDI_FIND_ICON_DM2</name></expr>,             <expr><name>IDI_FIND_ICON_DM2</name></expr>,                <expr><name>IDR_FIND</name></expr>}</block></expr>,
    <expr><block>{<expr><name>IDM_SEARCH_REPLACE</name></expr>,               <expr><name>IDI_REPLACE_ICON</name></expr>,           <expr><name>IDI_REPLACE_ICON</name></expr>,              <expr><name>IDI_REPLACE_ICON2</name></expr>,          <expr><name>IDI_REPLACE_ICON2</name></expr>,             <expr><name>IDI_REPLACE_ICON_DM</name></expr>,           <expr><name>IDI_REPLACE_ICON_DM</name></expr>,              <expr><name>IDI_REPLACE_ICON_DM2</name></expr>,          <expr><name>IDI_REPLACE_ICON_DM2</name></expr>,             <expr><name>IDR_REPLACE</name></expr>}</block></expr>,

    <comment type="line">//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//</comment>
    <expr><block>{<expr><literal type="number">0</literal></expr>,                                <expr><name>IDI_SEPARATOR_ICON</name></expr>,         <expr><name>IDI_SEPARATOR_ICON</name></expr>,            <expr><name>IDI_SEPARATOR_ICON</name></expr>,         <expr><name>IDI_SEPARATOR_ICON</name></expr>,            <expr><name>IDI_SEPARATOR_ICON</name></expr>,            <expr><name>IDI_SEPARATOR_ICON</name></expr>,               <expr><name>IDI_SEPARATOR_ICON</name></expr>,            <expr><name>IDI_SEPARATOR_ICON</name></expr>,            <expr><name>IDI_SEPARATOR_ICON</name></expr>}</block></expr>,
    <comment type="line">//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//</comment>
    <expr><block>{<expr><name>IDM_VIEW_ZOOMIN</name></expr>,                  <expr><name>IDI_ZOOMIN_ICON</name></expr>,            <expr><name>IDI_ZOOMIN_ICON</name></expr>,               <expr><name>IDI_ZOOMIN_ICON2</name></expr>,           <expr><name>IDI_ZOOMIN_ICON2</name></expr>,              <expr><name>IDI_ZOOMIN_ICON_DM</name></expr>,            <expr><name>IDI_ZOOMIN_ICON_DM</name></expr>,               <expr><name>IDI_ZOOMIN_ICON_DM2</name></expr>,           <expr><name>IDI_ZOOMIN_ICON_DM2</name></expr>,              <expr><name>IDR_ZOOMIN</name></expr>}</block></expr>,
    <expr><block>{<expr><name>IDM_VIEW_ZOOMOUT</name></expr>,                 <expr><name>IDI_ZOOMOUT_ICON</name></expr>,           <expr><name>IDI_ZOOMOUT_ICON</name></expr>,              <expr><name>IDI_ZOOMOUT_ICON2</name></expr>,          <expr><name>IDI_ZOOMOUT_ICON2</name></expr>,             <expr><name>IDI_ZOOMOUT_ICON_DM</name></expr>,           <expr><name>IDI_ZOOMOUT_ICON_DM</name></expr>,              <expr><name>IDI_ZOOMOUT_ICON_DM2</name></expr>,          <expr><name>IDI_ZOOMOUT_ICON_DM2</name></expr>,             <expr><name>IDR_ZOOMOUT</name></expr>}</block></expr>,

    <comment type="line">//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//</comment>
    <expr><block>{<expr><literal type="number">0</literal></expr>,                                <expr><name>IDI_SEPARATOR_ICON</name></expr>,         <expr><name>IDI_SEPARATOR_ICON</name></expr>,            <expr><name>IDI_SEPARATOR_ICON</name></expr>,         <expr><name>IDI_SEPARATOR_ICON</name></expr>,            <expr><name>IDI_SEPARATOR_ICON</name></expr>,            <expr><name>IDI_SEPARATOR_ICON</name></expr>,               <expr><name>IDI_SEPARATOR_ICON</name></expr>,            <expr><name>IDI_SEPARATOR_ICON</name></expr>,            <expr><name>IDI_SEPARATOR_ICON</name></expr>}</block></expr>,
    <comment type="line">//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//</comment>
    <expr><block>{<expr><name>IDM_VIEW_SYNSCROLLV</name></expr>,              <expr><name>IDI_SYNCV_ICON</name></expr>,             <expr><name>IDI_SYNCV_DISABLE_ICON</name></expr>,        <expr><name>IDI_SYNCV_ICON2</name></expr>,            <expr><name>IDI_SYNCV_DISABLE_ICON2</name></expr>,       <expr><name>IDI_SYNCV_ICON_DM</name></expr>,             <expr><name>IDI_SYNCV_DISABLE_ICON_DM</name></expr>,        <expr><name>IDI_SYNCV_ICON_DM2</name></expr>,            <expr><name>IDI_SYNCV_DISABLE_ICON_DM2</name></expr>,       <expr><name>IDR_SYNCV</name></expr>}</block></expr>,
    <expr><block>{<expr><name>IDM_VIEW_SYNSCROLLH</name></expr>,              <expr><name>IDI_SYNCH_ICON</name></expr>,             <expr><name>IDI_SYNCH_DISABLE_ICON</name></expr>,        <expr><name>IDI_SYNCH_ICON2</name></expr>,            <expr><name>IDI_SYNCH_DISABLE_ICON2</name></expr>,       <expr><name>IDI_SYNCH_ICON_DM</name></expr>,             <expr><name>IDI_SYNCH_DISABLE_ICON_DM</name></expr>,        <expr><name>IDI_SYNCH_ICON_DM2</name></expr>,            <expr><name>IDI_SYNCH_DISABLE_ICON_DM2</name></expr>,       <expr><name>IDR_SYNCH</name></expr>}</block></expr>,

    <comment type="line">//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//</comment>
    <expr><block>{<expr><literal type="number">0</literal></expr>,                                <expr><name>IDI_SEPARATOR_ICON</name></expr>,         <expr><name>IDI_SEPARATOR_ICON</name></expr>,            <expr><name>IDI_SEPARATOR_ICON</name></expr>,         <expr><name>IDI_SEPARATOR_ICON</name></expr>,            <expr><name>IDI_SEPARATOR_ICON</name></expr>,            <expr><name>IDI_SEPARATOR_ICON</name></expr>,               <expr><name>IDI_SEPARATOR_ICON</name></expr>,            <expr><name>IDI_SEPARATOR_ICON</name></expr>,            <expr><name>IDI_SEPARATOR_ICON</name></expr>}</block></expr>,
    <comment type="line">//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//</comment>
    <expr><block>{<expr><name>IDM_VIEW_WRAP</name></expr>,                    <expr><name>IDI_VIEW_WRAP_ICON</name></expr>,         <expr><name>IDI_VIEW_WRAP_ICON</name></expr>,            <expr><name>IDI_VIEW_WRAP_ICON2</name></expr>,        <expr><name>IDI_VIEW_WRAP_ICON2</name></expr>,           <expr><name>IDI_VIEW_WRAP_ICON_DM</name></expr>,         <expr><name>IDI_VIEW_WRAP_ICON_DM</name></expr>,            <expr><name>IDI_VIEW_WRAP_ICON_DM2</name></expr>,        <expr><name>IDI_VIEW_WRAP_ICON_DM2</name></expr>,           <expr><name>IDR_WRAP</name></expr>}</block></expr>,
    <expr><block>{<expr><name>IDM_VIEW_ALL_CHARACTERS</name></expr>,          <expr><name>IDI_VIEW_ALL_CHAR_ICON</name></expr>,     <expr><name>IDI_VIEW_ALL_CHAR_ICON</name></expr>,        <expr><name>IDI_VIEW_ALL_CHAR_ICON2</name></expr>,    <expr><name>IDI_VIEW_ALL_CHAR_ICON2</name></expr>,       <expr><name>IDI_VIEW_ALL_CHAR_ICON_DM</name></expr>,     <expr><name>IDI_VIEW_ALL_CHAR_ICON_DM</name></expr>,        <expr><name>IDI_VIEW_ALL_CHAR_ICON_DM2</name></expr>,    <expr><name>IDI_VIEW_ALL_CHAR_ICON_DM2</name></expr>,       <expr><name>IDR_INVISIBLECHAR</name></expr>}</block></expr>,
    <expr><block>{<expr><name>IDM_VIEW_INDENT_GUIDE</name></expr>,            <expr><name>IDI_VIEW_INDENT_ICON</name></expr>,       <expr><name>IDI_VIEW_INDENT_ICON</name></expr>,          <expr><name>IDI_VIEW_INDENT_ICON2</name></expr>,      <expr><name>IDI_VIEW_INDENT_ICON2</name></expr>,         <expr><name>IDI_VIEW_INDENT_ICON_DM</name></expr>,       <expr><name>IDI_VIEW_INDENT_ICON_DM</name></expr>,          <expr><name>IDI_VIEW_INDENT_ICON_DM2</name></expr>,      <expr><name>IDI_VIEW_INDENT_ICON_DM2</name></expr>,         <expr><name>IDR_INDENTGUIDE</name></expr>}</block></expr>,
    <expr><block>{<expr><name>IDM_LANG_USER_DLG</name></expr>,                <expr><name>IDI_VIEW_UD_DLG_ICON</name></expr>,       <expr><name>IDI_VIEW_UD_DLG_ICON</name></expr>,          <expr><name>IDI_VIEW_UD_DLG_ICON2</name></expr>,      <expr><name>IDI_VIEW_UD_DLG_ICON2</name></expr>,         <expr><name>IDI_VIEW_UD_DLG_ICON_DM</name></expr>,       <expr><name>IDI_VIEW_UD_DLG_ICON_DM</name></expr>,          <expr><name>IDI_VIEW_UD_DLG_ICON_DM2</name></expr>,      <expr><name>IDI_VIEW_UD_DLG_ICON_DM2</name></expr>,         <expr><name>IDR_SHOWPANNEL</name></expr>}</block></expr>,
    <expr><block>{<expr><name>IDM_VIEW_DOC_MAP</name></expr>,                 <expr><name>IDI_VIEW_DOC_MAP_ICON</name></expr>,      <expr><name>IDI_VIEW_DOC_MAP_ICON</name></expr>,         <expr><name>IDI_VIEW_DOC_MAP_ICON2</name></expr>,     <expr><name>IDI_VIEW_DOC_MAP_ICON2</name></expr>,        <expr><name>IDI_VIEW_DOC_MAP_ICON_DM</name></expr>,      <expr><name>IDI_VIEW_DOC_MAP_ICON_DM</name></expr>,         <expr><name>IDI_VIEW_DOC_MAP_ICON_DM2</name></expr>,     <expr><name>IDI_VIEW_DOC_MAP_ICON_DM2</name></expr>,        <expr><name>IDR_DOCMAP</name></expr>}</block></expr>,
    <expr><block>{<expr><name>IDM_VIEW_DOCLIST</name></expr>,                 <expr><name>IDI_VIEW_DOCLIST_ICON</name></expr>,      <expr><name>IDI_VIEW_DOCLIST_ICON</name></expr>,         <expr><name>IDI_VIEW_DOCLIST_ICON2</name></expr>,     <expr><name>IDI_VIEW_DOCLIST_ICON2</name></expr>,        <expr><name>IDI_VIEW_DOCLIST_ICON_DM</name></expr>,      <expr><name>IDI_VIEW_DOCLIST_ICON_DM</name></expr>,         <expr><name>IDI_VIEW_DOCLIST_ICON_DM2</name></expr>,     <expr><name>IDI_VIEW_DOCLIST_ICON_DM2</name></expr>,        <expr><name>IDR_DOCLIST</name></expr>}</block></expr>,
    <expr><block>{<expr><name>IDM_VIEW_FUNC_LIST</name></expr>,               <expr><name>IDI_VIEW_FUNCLIST_ICON</name></expr>,     <expr><name>IDI_VIEW_FUNCLIST_ICON</name></expr>,        <expr><name>IDI_VIEW_FUNCLIST_ICON2</name></expr>,    <expr><name>IDI_VIEW_FUNCLIST_ICON2</name></expr>,       <expr><name>IDI_VIEW_FUNCLIST_ICON_DM</name></expr>,     <expr><name>IDI_VIEW_FUNCLIST_ICON_DM</name></expr>,        <expr><name>IDI_VIEW_FUNCLIST_ICON_DM2</name></expr>,    <expr><name>IDI_VIEW_FUNCLIST_ICON_DM2</name></expr>,       <expr><name>IDR_FUNC_LIST</name></expr>}</block></expr>,
    <expr><block>{<expr><name>IDM_VIEW_FILEBROWSER</name></expr>,             <expr><name>IDI_VIEW_FILEBROWSER_ICON</name></expr>,  <expr><name>IDI_VIEW_FILEBROWSER_ICON</name></expr>,     <expr><name>IDI_VIEW_FILEBROWSER_ICON2</name></expr>, <expr><name>IDI_VIEW_FILEBROWSER_ICON2</name></expr>,    <expr><name>IDI_VIEW_FILEBROWSER_ICON_DM</name></expr>,  <expr><name>IDI_VIEW_FILEBROWSER_ICON_DM</name></expr>,     <expr><name>IDI_VIEW_FILEBROWSER_ICON_DM2</name></expr>, <expr><name>IDI_VIEW_FILEBROWSER_ICON_DM2</name></expr>,    <expr><name>IDR_FILEBROWSER</name></expr>}</block></expr>,
    <expr><block>{<expr><name>IDM_VIEW_MONITORING</name></expr>,              <expr><name>IDI_VIEW_MONITORING_ICON</name></expr>,   <expr><name>IDI_VIEW_MONITORING_ICON</name></expr>,      <expr><name>IDI_VIEW_MONITORING_ICON2</name></expr>,  <expr><name>IDI_VIEW_MONITORING_ICON2</name></expr>,     <expr><name>IDI_VIEW_MONITORING_ICON_DM</name></expr>,   <expr><name>IDI_VIEW_MONITORING_ICON_DM</name></expr>,      <expr><name>IDI_VIEW_MONITORING_ICON_DM2</name></expr>,  <expr><name>IDI_VIEW_MONITORING_ICON_DM2</name></expr>,     <expr><name>IDR_FILEMONITORING</name></expr>}</block></expr>,

    <comment type="line">//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//</comment>
    <expr><block>{<expr><literal type="number">0</literal></expr>,                                <expr><name>IDI_SEPARATOR_ICON</name></expr>,         <expr><name>IDI_SEPARATOR_ICON</name></expr>,            <expr><name>IDI_SEPARATOR_ICON</name></expr>,         <expr><name>IDI_SEPARATOR_ICON</name></expr>,            <expr><name>IDI_SEPARATOR_ICON</name></expr>,            <expr><name>IDI_SEPARATOR_ICON</name></expr>,               <expr><name>IDI_SEPARATOR_ICON</name></expr>,            <expr><name>IDI_SEPARATOR_ICON</name></expr>,            <expr><name>IDI_SEPARATOR_ICON</name></expr>}</block></expr>,
    <comment type="line">//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//</comment>

    <expr><block>{<expr><name>IDM_MACRO_STARTRECORDINGMACRO</name></expr>,    <expr><name>IDI_STARTRECORD_ICON</name></expr>,       <expr><name>IDI_STARTRECORD_DISABLE_ICON</name></expr>,  <expr><name>IDI_STARTRECORD_ICON2</name></expr>,      <expr><name>IDI_STARTRECORD_DISABLE_ICON2</name></expr>, <expr><name>IDI_STARTRECORD_ICON_DM</name></expr>,       <expr><name>IDI_STARTRECORD_DISABLE_ICON_DM</name></expr>,  <expr><name>IDI_STARTRECORD_ICON_DM2</name></expr>,      <expr><name>IDI_STARTRECORD_DISABLE_ICON_DM2</name></expr>, <expr><name>IDR_STARTRECORD</name></expr>}</block></expr>,
    <expr><block>{<expr><name>IDM_MACRO_STOPRECORDINGMACRO</name></expr>,     <expr><name>IDI_STOPRECORD_ICON</name></expr>,        <expr><name>IDI_STOPRECORD_DISABLE_ICON</name></expr>,   <expr><name>IDI_STOPRECORD_ICON2</name></expr>,       <expr><name>IDI_STOPRECORD_DISABLE_ICON2</name></expr>,  <expr><name>IDI_STOPRECORD_ICON_DM</name></expr>,        <expr><name>IDI_STOPRECORD_DISABLE_ICON_DM</name></expr>,   <expr><name>IDI_STOPRECORD_ICON_DM2</name></expr>,       <expr><name>IDI_STOPRECORD_DISABLE_ICON_DM2</name></expr>,  <expr><name>IDR_STOPRECORD</name></expr>}</block></expr>,
    <expr><block>{<expr><name>IDM_MACRO_PLAYBACKRECORDEDMACRO</name></expr>,  <expr><name>IDI_PLAYRECORD_ICON</name></expr>,        <expr><name>IDI_PLAYRECORD_DISABLE_ICON</name></expr>,   <expr><name>IDI_PLAYRECORD_ICON2</name></expr>,       <expr><name>IDI_PLAYRECORD_DISABLE_ICON2</name></expr>,  <expr><name>IDI_PLAYRECORD_ICON_DM</name></expr>,        <expr><name>IDI_PLAYRECORD_DISABLE_ICON_DM</name></expr>,   <expr><name>IDI_PLAYRECORD_ICON_DM2</name></expr>,       <expr><name>IDI_PLAYRECORD_DISABLE_ICON_DM2</name></expr>,  <expr><name>IDR_PLAYRECORD</name></expr>}</block></expr>,
    <expr><block>{<expr><name>IDM_MACRO_RUNMULTIMACRODLG</name></expr>,       <expr><name>IDI_MMPLAY_ICON</name></expr>,            <expr><name>IDI_MMPLAY_DIS_ICON</name></expr>,           <expr><name>IDI_MMPLAY_ICON2</name></expr>,           <expr><name>IDI_MMPLAY_DIS_ICON2</name></expr>,          <expr><name>IDI_MMPLAY_ICON_DM</name></expr>,            <expr><name>IDI_MMPLAY_DIS_ICON_DM</name></expr>,           <expr><name>IDI_MMPLAY_ICON_DM2</name></expr>,           <expr><name>IDI_MMPLAY_DIS_ICON_DM2</name></expr>,          <expr><name>IDR_M_PLAYRECORD</name></expr>}</block></expr>,
    <expr><block>{<expr><name>IDM_MACRO_SAVECURRENTMACRO</name></expr>,       <expr><name>IDI_SAVERECORD_ICON</name></expr>,        <expr><name>IDI_SAVERECORD_DISABLE_ICON</name></expr>,   <expr><name>IDI_SAVERECORD_ICON2</name></expr>,       <expr><name>IDI_SAVERECORD_DISABLE_ICON2</name></expr>,  <expr><name>IDI_SAVERECORD_ICON_DM</name></expr>,        <expr><name>IDI_SAVERECORD_DISABLE_ICON_DM</name></expr>,   <expr><name>IDI_SAVERECORD_ICON_DM2</name></expr>,       <expr><name>IDI_SAVERECORD_DISABLE_ICON_DM2</name></expr>,  <expr><name>IDR_SAVERECORD</name></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>



<constructor><name><name>Notepad_plus</name><operator>::</operator><name>Notepad_plus</name></name><parameter_list>()</parameter_list>
	<member_init_list>: <call><name>_autoCompleteMain</name><argument_list>(<argument><expr><operator>&amp;</operator><name>_mainEditView</name></expr></argument>)</argument_list></call>
	, <call><name>_autoCompleteSub</name><argument_list>(<argument><expr><operator>&amp;</operator><name>_subEditView</name></expr></argument>)</argument_list></call>
	, <call><name>_smartHighlighter</name><argument_list>(<argument><expr><operator>&amp;</operator><name>_findReplaceDlg</name></expr></argument>)</argument_list></call>
</member_init_list><block>{<block_content>
	<expr_stmt><expr><call><name>ZeroMemory</name><argument_list>(<argument><expr><operator>&amp;</operator><name>_prevSelectedRange</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>_prevSelectedRange</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>NppParameters</name><modifier>&amp;</modifier></type> <name>nppParam</name> <init>= <expr><call><name><name>NppParameters</name><operator>::</operator><name>getInstance</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>TiXmlDocumentA</name> <modifier>*</modifier></type><name>nativeLangDocRootA</name> <init>= <expr><call><name><name>nppParam</name><operator>.</operator><name>getNativeLangA</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>_nativeLangSpeaker</name><operator>.</operator><name>init</name></name><argument_list>(<argument><expr><name>nativeLangDocRootA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>LocalizationSwitcher</name> <modifier>&amp;</modifier></type> <name>localizationSwitcher</name> <init>= <expr><call><name><name>nppParam</name><operator>.</operator><name>getLocalizationSwitcher</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fn</name> <init>= <expr><call><name><name>_nativeLangSpeaker</name><operator>.</operator><name>getFileName</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>fn</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name><name>localizationSwitcher</name><operator>.</operator><name>setFileName</name></name><argument_list>(<argument><expr><name>fn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name><name>nppParam</name><operator>.</operator><name>setNativeLangSpeaker</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>_nativeLangSpeaker</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>TiXmlDocument</name> <modifier>*</modifier></type><name>toolIconsDocRoot</name> <init>= <expr><call><name><name>nppParam</name><operator>.</operator><name>getCustomizedToolIcons</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>toolIconsDocRoot</name></expr>)</condition>
	<block>{<block_content>
        <expr_stmt><expr><call><name><name>_toolBar</name><operator>.</operator><name>initTheme</name></name><argument_list>(<argument><expr><name>toolIconsDocRoot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

	<comment type="line">// Determine if user is administrator.</comment>
	<decl_stmt><decl><type><name>BOOL</name></type> <name>is_admin</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>winVer</name></type> <name>ver</name> <init>= <expr><call><name><name>nppParam</name><operator>.</operator><name>getWinVersion</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><name>ver</name> <operator>&gt;=</operator> <name>WV_VISTA</name> <operator>||</operator> <name>ver</name> <operator>==</operator> <name>WV_UNKNOWN</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>SID_IDENTIFIER_AUTHORITY</name></type> <name>NtAuthority</name> <init>= <expr><name>SECURITY_NT_AUTHORITY</name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>PSID</name></type> <name>AdministratorsGroup</name></decl>;</decl_stmt>
		<expr_stmt><expr><name>is_admin</name> <operator>=</operator> <call><name>AllocateAndInitializeSid</name><argument_list>(<argument><expr><operator>&amp;</operator><name>NtAuthority</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>SECURITY_BUILTIN_DOMAIN_RID</name></expr></argument>, <argument><expr><name>DOMAIN_ALIAS_RID_ADMINS</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>AdministratorsGroup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>is_admin</name></expr>)</condition>
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>CheckTokenMembership</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AdministratorsGroup</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>is_admin</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name>is_admin</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<expr_stmt><expr><call><name>FreeSid</name><argument_list>(<argument><expr><name>AdministratorsGroup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><name>is_admin</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<expr_stmt><expr><call><name><name>nppParam</name><operator>.</operator><name>setAdminMode</name></name><argument_list>(<argument><expr><name>is_admin</name> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_isAdministrator</name> <operator>=</operator> <ternary><condition><expr><name>is_admin</name></expr> ?</condition><then> <expr><literal type="boolean">true</literal></expr> </then><else>: <expr><literal type="boolean">false</literal></expr></else></ternary></expr>;</expr_stmt>
</block_content>}</block></constructor>

<destructor><name><name>Notepad_plus</name><operator>::</operator><name>~Notepad_plus</name></name><parameter_list>()</parameter_list>
<block>{<block_content>
	<comment type="line">// ATTENTION : the order of the destruction is very important</comment>
	<comment type="line">// because if the parent's window handle is destroyed before</comment>
	<comment type="line">// the destruction of its children windows' handles,</comment>
	<comment type="line">// its children windows' handles will be destroyed automatically!</comment>

	<expr_stmt><expr><operator>(</operator><call><name><name>NppParameters</name><operator>::</operator><name>getInstance</name></name><argument_list>()</argument_list></call><operator>)</operator><operator>.</operator><call><name>destroyInstance</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><operator>delete</operator> <name>_pTrayIco</name></expr>;</expr_stmt>
	<expr_stmt><expr><operator>delete</operator> <name>_pAnsiCharPanel</name></expr>;</expr_stmt>
	<expr_stmt><expr><operator>delete</operator> <name>_pClipboardHistoryPanel</name></expr>;</expr_stmt>
	<expr_stmt><expr><operator>delete</operator> <name>_pDocumentListPanel</name></expr>;</expr_stmt>
	<expr_stmt><expr><operator>delete</operator> <name>_pProjectPanel_1</name></expr>;</expr_stmt>
	<expr_stmt><expr><operator>delete</operator> <name>_pProjectPanel_2</name></expr>;</expr_stmt>
	<expr_stmt><expr><operator>delete</operator> <name>_pProjectPanel_3</name></expr>;</expr_stmt>
	<expr_stmt><expr><operator>delete</operator> <name>_pDocMap</name></expr>;</expr_stmt>
	<expr_stmt><expr><operator>delete</operator> <name>_pFuncList</name></expr>;</expr_stmt>
	<expr_stmt><expr><operator>delete</operator> <name>_pFileBrowser</name></expr>;</expr_stmt>
</block_content>}</block></destructor>



<function><type><name>LRESULT</name></type> <name><name>Notepad_plus</name><operator>::</operator><name>init</name></name><parameter_list>(<parameter><decl><type><name>HWND</name></type> <name>hwnd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>NppParameters</name><modifier>&amp;</modifier></type> <name>nppParam</name> <init>= <expr><call><name><name>NppParameters</name><operator>::</operator><name>getInstance</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>NppGUI</name> <modifier>&amp;</modifier></type> <name>nppGUI</name> <init>= <expr><call><name><name>nppParam</name><operator>.</operator><name>getNppGUI</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

	<comment type="line">// Menu</comment>
	<expr_stmt><expr><name>_mainMenuHandle</name> <operator>=</operator> <call><name><operator>::</operator><name>GetMenu</name></name><argument_list>(<argument><expr><name>hwnd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>langPos2BeRemoved</name> <init>= <expr><name>MENUINDEX_LANGUAGE</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>nppGUI</name><operator>.</operator><name>_isLangMenuCompact</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>langPos2BeRemoved</name> <operator>=</operator> <name>MENUINDEX_LANGUAGE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<expr_stmt><expr><call><name><operator>::</operator><name>RemoveMenu</name></name><argument_list>(<argument><expr><name>_mainMenuHandle</name></expr></argument>, <argument><expr><name>langPos2BeRemoved</name></expr></argument>, <argument><expr><name>MF_BYPOSITION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">//Views</comment>
	<expr_stmt><expr><name>_pDocTab</name> <operator>=</operator> <operator>&amp;</operator><name>_mainDocTab</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>_pEditView</name> <operator>=</operator> <operator>&amp;</operator><name>_mainEditView</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>_pNonDocTab</name> <operator>=</operator> <operator>&amp;</operator><name>_subDocTab</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>_pNonEditView</name> <operator>=</operator> <operator>&amp;</operator><name>_subEditView</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name><name>_mainEditView</name><operator>.</operator><name>init</name></name><argument_list>(<argument><expr><call><name><name>_pPublicInterface</name><operator>-&gt;</operator><name>getHinst</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>hwnd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name>_subEditView</name><operator>.</operator><name>init</name></name><argument_list>(<argument><expr><call><name><name>_pPublicInterface</name><operator>-&gt;</operator><name>getHinst</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>hwnd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name><name>_fileEditView</name><operator>.</operator><name>init</name></name><argument_list>(<argument><expr><call><name><name>_pPublicInterface</name><operator>-&gt;</operator><name>getHinst</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>hwnd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name>MainFileManager</name><operator>.</operator><name>init</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>_fileEditView</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">//get it up and running asap.</comment>

	<expr_stmt><expr><call><name><name>nppParam</name><operator>.</operator><name>setFontList</name></name><argument_list>(<argument><expr><name>hwnd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


	<expr_stmt><expr><name>_mainWindowStatus</name> <operator>=</operator> <name>WindowMainActive</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>_activeView</name> <operator>=</operator> <name>MAIN_VIEW</name></expr>;</expr_stmt>

	<decl_stmt><decl><type><specifier>const</specifier> <name>ScintillaViewParams</name> <modifier>&amp;</modifier></type> <name>svp</name> <init>= <expr><call><name><name>nppParam</name><operator>.</operator><name>getSVP</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>int</name></type> <name>tabBarStatus</name> <init>= <expr><name><name>nppGUI</name><operator>.</operator><name>_tabStatus</name></name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name>_toReduceTabBar</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>tabBarStatus</name> <operator>&amp;</operator> <name>TAB_REDUCE</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>iconDpiDynamicalSize</name> <init>= <expr><call><name><name>nppParam</name><operator>.</operator><name>_dpiManager</name><operator>.</operator><name>scaleX</name></name><argument_list>(<argument><expr><name>g_TabIconSize</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name><name>_docTabIconList</name><operator>.</operator><name>create</name></name><argument_list>(<argument><expr><name>iconDpiDynamicalSize</name></expr></argument>, <argument><expr><call><name><name>_pPublicInterface</name><operator>-&gt;</operator><name>getHinst</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>docTabIconIDs</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>docTabIconIDs</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name>_docTabIconListAlt</name><operator>.</operator><name>create</name></name><argument_list>(<argument><expr><name>iconDpiDynamicalSize</name></expr></argument>, <argument><expr><call><name><name>_pPublicInterface</name><operator>-&gt;</operator><name>getHinst</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>docTabIconIDs_alt</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>docTabIconIDs_alt</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name>_docTabIconListDarkMode</name><operator>.</operator><name>create</name></name><argument_list>(<argument><expr><name>iconDpiDynamicalSize</name></expr></argument>, <argument><expr><call><name><name>_pPublicInterface</name><operator>-&gt;</operator><name>getHinst</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>docTabIconIDs_darkMode</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>docTabIconIDs_darkMode</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	
	<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>IconList</name> <modifier>*</modifier></expr></argument>&gt;</argument_list></name></type> <name>pIconListVector</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name><name>pIconListVector</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>_docTabIconList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>        <comment type="line">// 0</comment>
	<expr_stmt><expr><call><name><name>pIconListVector</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>_docTabIconListAlt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>     <comment type="line">// 1</comment>
	<expr_stmt><expr><call><name><name>pIconListVector</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>_docTabIconListDarkMode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><comment type="line">// 2</comment>

	<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>tabIconSet</name> <init>= <expr><call><name><name>NppDarkMode</name><operator>::</operator><name>getTabIconSet</name></name><argument_list>(<argument><expr><call><name><name>NppDarkMode</name><operator>::</operator><name>isEnabled</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>indexDocTabIcon</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<switch>switch <condition>(<expr><name>tabIconSet</name></expr>)</condition>
	<block>{<block_content>
		<case>case <expr><literal type="number">0</literal></expr>:</case>
		<block>{<block_content>
			<expr_stmt><expr><name><name>nppGUI</name><operator>.</operator><name>_tabStatus</name></name> <operator>&amp;=</operator> <operator>~</operator><name>TAB_ALTICONS</name></expr>;</expr_stmt>
			<break>break;</break>
		</block_content>}</block>
		<case>case <expr><literal type="number">1</literal></expr>:</case>
		<block>{<block_content>
			<expr_stmt><expr><name><name>nppGUI</name><operator>.</operator><name>_tabStatus</name></name> <operator>|=</operator> <name>TAB_ALTICONS</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>indexDocTabIcon</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
			<break>break;</break>
		</block_content>}</block>
		<case>case <expr><literal type="number">2</literal></expr>:</case>
		<block>{<block_content>
			<expr_stmt><expr><name><name>nppGUI</name><operator>.</operator><name>_tabStatus</name></name> <operator>&amp;=</operator> <operator>~</operator><name>TAB_ALTICONS</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>indexDocTabIcon</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
			<break>break;</break>
		</block_content>}</block>
		<comment type="line">//case -1:</comment>
		<default>default:</default>
		<block>{<block_content>
			<expr_stmt><expr><name>indexDocTabIcon</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><operator>(</operator><name>tabBarStatus</name> <operator>&amp;</operator> <name>TAB_ALTICONS</name><operator>)</operator> <operator>==</operator> <name>TAB_ALTICONS</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><operator>(</operator><ternary><condition><expr><call><name><name>NppDarkMode</name><operator>::</operator><name>isEnabled</name></name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><literal type="number">2</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr></else></ternary></expr>;</expr_stmt>
		</block_content>}</block>
	</block_content>}</block></switch>

	<expr_stmt><expr><call><name><name>_mainDocTab</name><operator>.</operator><name>init</name></name><argument_list>(<argument><expr><call><name><name>_pPublicInterface</name><operator>-&gt;</operator><name>getHinst</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>hwnd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>_mainEditView</name></expr></argument>, <argument><expr><name>pIconListVector</name></expr></argument>, <argument><expr><name>indexDocTabIcon</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name>_subDocTab</name><operator>.</operator><name>init</name></name><argument_list>(<argument><expr><call><name><name>_pPublicInterface</name><operator>-&gt;</operator><name>getHinst</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>hwnd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>_subEditView</name></expr></argument>, <argument><expr><name>pIconListVector</name></expr></argument>, <argument><expr><name>indexDocTabIcon</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name><name>_mainEditView</name><operator>.</operator><name>display</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name><name>_invisibleEditView</name><operator>.</operator><name>init</name></name><argument_list>(<argument><expr><call><name><name>_pPublicInterface</name><operator>-&gt;</operator><name>getHinst</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>hwnd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name>_invisibleEditView</name><operator>.</operator><name>execute</name></name><argument_list>(<argument><expr><name>SCI_SETUNDOCOLLECTION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name>_invisibleEditView</name><operator>.</operator><name>execute</name></name><argument_list>(<argument><expr><name>SCI_EMPTYUNDOBUFFER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name>_invisibleEditView</name><operator>.</operator><name>wrap</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// Make sure no slow down</comment>

	<comment type="line">// Configuration of 2 scintilla views</comment>
	<expr_stmt><expr><call><name><name>_mainEditView</name><operator>.</operator><name>showMargin</name></name><argument_list>(<argument><expr><name><name>ScintillaEditView</name><operator>::</operator><name>_SC_MARGE_LINENUMBER</name></name></expr></argument>, <argument><expr><name><name>svp</name><operator>.</operator><name>_lineNumberMarginShow</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name>_subEditView</name><operator>.</operator><name>showMargin</name></name><argument_list>(<argument><expr><name><name>ScintillaEditView</name><operator>::</operator><name>_SC_MARGE_LINENUMBER</name></name></expr></argument>, <argument><expr><name><name>svp</name><operator>.</operator><name>_lineNumberMarginShow</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name>_mainEditView</name><operator>.</operator><name>showMargin</name></name><argument_list>(<argument><expr><name><name>ScintillaEditView</name><operator>::</operator><name>_SC_MARGE_SYMBOL</name></name></expr></argument>, <argument><expr><name><name>svp</name><operator>.</operator><name>_bookMarkMarginShow</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name>_subEditView</name><operator>.</operator><name>showMargin</name></name><argument_list>(<argument><expr><name><name>ScintillaEditView</name><operator>::</operator><name>_SC_MARGE_SYMBOL</name></name></expr></argument>, <argument><expr><name><name>svp</name><operator>.</operator><name>_bookMarkMarginShow</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name><name>_mainEditView</name><operator>.</operator><name>showIndentGuideLine</name></name><argument_list>(<argument><expr><name><name>svp</name><operator>.</operator><name>_indentGuideLineShow</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name>_subEditView</name><operator>.</operator><name>showIndentGuideLine</name></name><argument_list>(<argument><expr><name><name>svp</name><operator>.</operator><name>_indentGuideLineShow</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name><operator>::</operator><name>SendMessage</name></name><argument_list>(<argument><expr><name>hwnd</name></expr></argument>, <argument><expr><name>NPPM_INTERNAL_SETCARETWIDTH</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><operator>::</operator><name>SendMessage</name></name><argument_list>(<argument><expr><name>hwnd</name></expr></argument>, <argument><expr><name>NPPM_INTERNAL_SETCARETBLINKRATE</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name><name>_configStyleDlg</name><operator>.</operator><name>init</name></name><argument_list>(<argument><expr><call><name><name>_pPublicInterface</name><operator>-&gt;</operator><name>getHinst</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>hwnd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name>_preference</name><operator>.</operator><name>init</name></name><argument_list>(<argument><expr><call><name><name>_pPublicInterface</name><operator>-&gt;</operator><name>getHinst</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>hwnd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name>_pluginsAdminDlg</name><operator>.</operator><name>init</name></name><argument_list>(<argument><expr><call><name><name>_pPublicInterface</name><operator>-&gt;</operator><name>getHinst</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>hwnd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">//Marker Margin config</comment>
	<expr_stmt><expr><call><name><name>_mainEditView</name><operator>.</operator><name>setMakerStyle</name></name><argument_list>(<argument><expr><name><name>svp</name><operator>.</operator><name>_folderStyle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name>_subEditView</name><operator>.</operator><name>setMakerStyle</name></name><argument_list>(<argument><expr><name><name>svp</name><operator>.</operator><name>_folderStyle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name>_mainEditView</name><operator>.</operator><name>defineDocType</name></name><argument_list>(<argument><expr><call><name><name>_mainEditView</name><operator>.</operator><name>getCurrentBuffer</name></name><argument_list>()</argument_list></call><operator>-&gt;</operator><call><name>getLangType</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name>_subEditView</name><operator>.</operator><name>defineDocType</name></name><argument_list>(<argument><expr><call><name><name>_subEditView</name><operator>.</operator><name>getCurrentBuffer</name></name><argument_list>()</argument_list></call><operator>-&gt;</operator><call><name>getLangType</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">//Line wrap method</comment>
	<expr_stmt><expr><call><name><name>_mainEditView</name><operator>.</operator><name>setWrapMode</name></name><argument_list>(<argument><expr><name><name>svp</name><operator>.</operator><name>_lineWrapMethod</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name>_subEditView</name><operator>.</operator><name>setWrapMode</name></name><argument_list>(<argument><expr><name><name>svp</name><operator>.</operator><name>_lineWrapMethod</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name><name>_mainEditView</name><operator>.</operator><name>execute</name></name><argument_list>(<argument><expr><name>SCI_SETENDATLASTLINE</name></expr></argument>, <argument><expr><operator>!</operator><name><name>svp</name><operator>.</operator><name>_scrollBeyondLastLine</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name>_subEditView</name><operator>.</operator><name>execute</name></name><argument_list>(<argument><expr><name>SCI_SETENDATLASTLINE</name></expr></argument>, <argument><expr><operator>!</operator><name><name>svp</name><operator>.</operator><name>_scrollBeyondLastLine</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>svp</name><operator>.</operator><name>_doSmoothFont</name></name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name><name>_mainEditView</name><operator>.</operator><name>execute</name></name><argument_list>(<argument><expr><name>SCI_SETFONTQUALITY</name></expr></argument>, <argument><expr><name>SC_EFF_QUALITY_LCD_OPTIMIZED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>_subEditView</name><operator>.</operator><name>execute</name></name><argument_list>(<argument><expr><name>SCI_SETFONTQUALITY</name></expr></argument>, <argument><expr><name>SC_EFF_QUALITY_LCD_OPTIMIZED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name><name>_mainEditView</name><operator>.</operator><name>setBorderEdge</name></name><argument_list>(<argument><expr><name><name>svp</name><operator>.</operator><name>_showBorderEdge</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name>_subEditView</name><operator>.</operator><name>setBorderEdge</name></name><argument_list>(<argument><expr><name><name>svp</name><operator>.</operator><name>_showBorderEdge</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name><name>_mainEditView</name><operator>.</operator><name>execute</name></name><argument_list>(<argument><expr><name>SCI_SETCARETLINEVISIBLEALWAYS</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name>_subEditView</name><operator>.</operator><name>execute</name></name><argument_list>(<argument><expr><name>SCI_SETCARETLINEVISIBLEALWAYS</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name><name>_mainEditView</name><operator>.</operator><name>wrap</name></name><argument_list>(<argument><expr><name><name>svp</name><operator>.</operator><name>_doWrap</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name>_subEditView</name><operator>.</operator><name>wrap</name></name><argument_list>(<argument><expr><name><name>svp</name><operator>.</operator><name>_doWrap</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name><operator>::</operator><name>SendMessage</name></name><argument_list>(<argument><expr><name>hwnd</name></expr></argument>, <argument><expr><name>NPPM_INTERNAL_EDGEMULTISETSIZE</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name><name>_mainEditView</name><operator>.</operator><name>showEOL</name></name><argument_list>(<argument><expr><name><name>svp</name><operator>.</operator><name>_eolShow</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name>_subEditView</name><operator>.</operator><name>showEOL</name></name><argument_list>(<argument><expr><name><name>svp</name><operator>.</operator><name>_eolShow</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name><name>_mainEditView</name><operator>.</operator><name>showWSAndTab</name></name><argument_list>(<argument><expr><name><name>svp</name><operator>.</operator><name>_whiteSpaceShow</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name>_subEditView</name><operator>.</operator><name>showWSAndTab</name></name><argument_list>(<argument><expr><name><name>svp</name><operator>.</operator><name>_whiteSpaceShow</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name><name>_mainEditView</name><operator>.</operator><name>showWrapSymbol</name></name><argument_list>(<argument><expr><name><name>svp</name><operator>.</operator><name>_wrapSymbolShow</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name>_subEditView</name><operator>.</operator><name>showWrapSymbol</name></name><argument_list>(<argument><expr><name><name>svp</name><operator>.</operator><name>_wrapSymbolShow</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name><name>_mainEditView</name><operator>.</operator><name>performGlobalStyles</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name>_subEditView</name><operator>.</operator><name>performGlobalStyles</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>_zoomOriginalValue</name> <operator>=</operator> <call><name><name>_pEditView</name><operator>-&gt;</operator><name>execute</name></name><argument_list>(<argument><expr><name>SCI_GETZOOM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name>_mainEditView</name><operator>.</operator><name>execute</name></name><argument_list>(<argument><expr><name>SCI_SETZOOM</name></expr></argument>, <argument><expr><name><name>svp</name><operator>.</operator><name>_zoom</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name>_subEditView</name><operator>.</operator><name>execute</name></name><argument_list>(<argument><expr><name>SCI_SETZOOM</name></expr></argument>, <argument><expr><name><name>svp</name><operator>.</operator><name>_zoom2</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name><operator>::</operator><name>SendMessage</name></name><argument_list>(<argument><expr><name>hwnd</name></expr></argument>, <argument><expr><name>NPPM_INTERNAL_SETMULTISELCTION</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// Make backspace or delete work with multiple selections</comment>
	<expr_stmt><expr><call><name><name>_mainEditView</name><operator>.</operator><name>execute</name></name><argument_list>(<argument><expr><name>SCI_SETADDITIONALSELECTIONTYPING</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name>_subEditView</name><operator>.</operator><name>execute</name></name><argument_list>(<argument><expr><name>SCI_SETADDITIONALSELECTIONTYPING</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// Turn virtual space on</comment>
	<decl_stmt><decl><type><name>int</name></type> <name>virtualSpaceOptions</name> <init>= <expr><name>SCVS_RECTANGULARSELECTION</name></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if<condition>(<expr><name><name>svp</name><operator>.</operator><name>_virtualSpace</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>virtualSpaceOptions</name> <operator>|=</operator> <name>SCVS_USERACCESSIBLE</name> <operator>|</operator> <name>SCVS_NOWRAPLINESTART</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name><name>_mainEditView</name><operator>.</operator><name>execute</name></name><argument_list>(<argument><expr><name>SCI_SETVIRTUALSPACEOPTIONS</name></expr></argument>, <argument><expr><name>virtualSpaceOptions</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name>_subEditView</name><operator>.</operator><name>execute</name></name><argument_list>(<argument><expr><name>SCI_SETVIRTUALSPACEOPTIONS</name></expr></argument>, <argument><expr><name>virtualSpaceOptions</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// Turn multi-paste on</comment>
	<expr_stmt><expr><call><name><name>_mainEditView</name><operator>.</operator><name>execute</name></name><argument_list>(<argument><expr><name>SCI_SETMULTIPASTE</name></expr></argument>, <argument><expr><name>SC_MULTIPASTE_EACH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name>_subEditView</name><operator>.</operator><name>execute</name></name><argument_list>(<argument><expr><name>SCI_SETMULTIPASTE</name></expr></argument>, <argument><expr><name>SC_MULTIPASTE_EACH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// allow user to start selecting as a stream block, then switch to a column block by adding Alt keypress</comment>
	<expr_stmt><expr><call><name><name>_mainEditView</name><operator>.</operator><name>execute</name></name><argument_list>(<argument><expr><name>SCI_SETMOUSESELECTIONRECTANGULARSWITCH</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name>_subEditView</name><operator>.</operator><name>execute</name></name><argument_list>(<argument><expr><name>SCI_SETMOUSESELECTIONRECTANGULARSWITCH</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// Let Scintilla deal with some of the folding functionality</comment>
	<expr_stmt><expr><call><name><name>_mainEditView</name><operator>.</operator><name>execute</name></name><argument_list>(<argument><expr><name>SCI_SETAUTOMATICFOLD</name></expr></argument>, <argument><expr><name>SC_AUTOMATICFOLD_SHOW</name> <operator>|</operator> <name>SC_AUTOMATICFOLD_CHANGE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name>_subEditView</name><operator>.</operator><name>execute</name></name><argument_list>(<argument><expr><name>SCI_SETAUTOMATICFOLD</name></expr></argument>, <argument><expr><name>SC_AUTOMATICFOLD_SHOW</name> <operator>|</operator> <name>SC_AUTOMATICFOLD_CHANGE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// Set padding info</comment>
	<expr_stmt><expr><call><name><name>_mainEditView</name><operator>.</operator><name>execute</name></name><argument_list>(<argument><expr><name>SCI_SETMARGINLEFT</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>svp</name><operator>.</operator><name>_paddingLeft</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name>_mainEditView</name><operator>.</operator><name>execute</name></name><argument_list>(<argument><expr><name>SCI_SETMARGINRIGHT</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>svp</name><operator>.</operator><name>_paddingRight</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name>_subEditView</name><operator>.</operator><name>execute</name></name><argument_list>(<argument><expr><name>SCI_SETMARGINLEFT</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>svp</name><operator>.</operator><name>_paddingLeft</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name>_subEditView</name><operator>.</operator><name>execute</name></name><argument_list>(<argument><expr><name>SCI_SETMARGINRIGHT</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>svp</name><operator>.</operator><name>_paddingRight</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// Improvement of the switching into the wrapped long line document</comment>
	<expr_stmt><expr><call><name><name>_mainEditView</name><operator>.</operator><name>execute</name></name><argument_list>(<argument><expr><name>SCI_STYLESETCHECKMONOSPACED</name></expr></argument>, <argument><expr><name>STYLE_DEFAULT</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name>_subEditView</name><operator>.</operator><name>execute</name></name><argument_list>(<argument><expr><name>SCI_STYLESETCHECKMONOSPACED</name></expr></argument>, <argument><expr><name>STYLE_DEFAULT</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name><name>TabBarPlus</name><operator>::</operator><name>doDragNDrop</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><specifier>const</specifier> <specifier>auto</specifier><modifier>&amp;</modifier></type> <name>hf</name> <init>= <expr><call><name><name>_mainDocTab</name><operator>.</operator><name>getFont</name></name><argument_list>(<argument><expr><name>_toReduceTabBar</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><name>hf</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name><operator>::</operator><name>SendMessage</name></name><argument_list>(<argument><expr><call><name><name>_mainDocTab</name><operator>.</operator><name>getHSelf</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>WM_SETFONT</name></expr></argument>, <argument><expr><cast type="reinterpret">reinterpret_cast<argument_list type="generic">&lt;<argument><expr><name>WPARAM</name></expr></argument>&gt;</argument_list><argument_list>(<argument><expr><name>hf</name></expr></argument>)</argument_list></cast></expr></argument>, <argument><expr><call><name>MAKELPARAM</name><argument_list>(<argument><expr><name>TRUE</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><operator>::</operator><name>SendMessage</name></name><argument_list>(<argument><expr><call><name><name>_subDocTab</name><operator>.</operator><name>getHSelf</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>WM_SETFONT</name></expr></argument>, <argument><expr><cast type="reinterpret">reinterpret_cast<argument_list type="generic">&lt;<argument><expr><name>WPARAM</name></expr></argument>&gt;</argument_list><argument_list>(<argument><expr><name>hf</name></expr></argument>)</argument_list></cast></expr></argument>, <argument><expr><call><name>MAKELPARAM</name><argument_list>(<argument><expr><name>TRUE</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<decl_stmt><decl><type><name>int</name></type> <name>tabDpiDynamicalHeight</name> <init>= <expr><call><name><name>nppParam</name><operator>.</operator><name>_dpiManager</name><operator>.</operator><name>scaleY</name></name><argument_list>(<argument><expr><ternary><condition><expr><name>_toReduceTabBar</name></expr> ?</condition><then> <expr><name>g_TabHeight</name></expr> </then><else>: <expr><name>g_TabHeightLarge</name></expr></else></ternary></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>tabDpiDynamicalWidth</name> <init>= <expr><call><name><name>nppParam</name><operator>.</operator><name>_dpiManager</name><operator>.</operator><name>scaleX</name></name><argument_list>(<argument><expr><name>g_TabWidth</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>TabCtrl_SetItemSize</name><argument_list>(<argument><expr><call><name><name>_mainDocTab</name><operator>.</operator><name>getHSelf</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>tabDpiDynamicalWidth</name></expr></argument>, <argument><expr><name>tabDpiDynamicalHeight</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>TabCtrl_SetItemSize</name><argument_list>(<argument><expr><call><name><name>_subDocTab</name><operator>.</operator><name>getHSelf</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>tabDpiDynamicalWidth</name></expr></argument>, <argument><expr><name>tabDpiDynamicalHeight</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name><name>_mainDocTab</name><operator>.</operator><name>display</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>


	<expr_stmt><expr><call><name><name>TabBarPlus</name><operator>::</operator><name>doDragNDrop</name></name><argument_list>(<argument><expr><operator>(</operator><name>tabBarStatus</name> <operator>&amp;</operator> <name>TAB_DRAGNDROP</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name>TabBarPlus</name><operator>::</operator><name>setDrawTopBar</name></name><argument_list>(<argument><expr><operator>(</operator><name>tabBarStatus</name> <operator>&amp;</operator> <name>TAB_DRAWTOPBAR</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name>TabBarPlus</name><operator>::</operator><name>setDrawInactiveTab</name></name><argument_list>(<argument><expr><operator>(</operator><name>tabBarStatus</name> <operator>&amp;</operator> <name>TAB_DRAWINACTIVETAB</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name>TabBarPlus</name><operator>::</operator><name>setDrawTabCloseButton</name></name><argument_list>(<argument><expr><operator>(</operator><name>tabBarStatus</name> <operator>&amp;</operator> <name>TAB_CLOSEBUTTON</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name>TabBarPlus</name><operator>::</operator><name>setDbClk2Close</name></name><argument_list>(<argument><expr><operator>(</operator><name>tabBarStatus</name> <operator>&amp;</operator> <name>TAB_DBCLK2CLOSE</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name>TabBarPlus</name><operator>::</operator><name>setVertical</name></name><argument_list>(<argument><expr><operator>(</operator><name>tabBarStatus</name> <operator>&amp;</operator> <name>TAB_VERTICAL</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>drawTabbarColoursFromStylerArray</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// Autocomplete list and calltip</comment>
	<decl_stmt><decl><type><specifier>const</specifier> <name>Style</name><modifier>*</modifier></type> <name>pStyle</name> <init>= <expr><call><name><name>NppParameters</name><operator>::</operator><name>getInstance</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getGlobalStylers</name><argument_list>()</argument_list></call><operator>.</operator><call><name>findByID</name><argument_list>(<argument><expr><name>STYLE_DEFAULT</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><name>pStyle</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name><name>NppParameters</name><operator>::</operator><name>getInstance</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>setCurrentDefaultFgColor</name><argument_list>(<argument><expr><name><name>pStyle</name><operator>-&gt;</operator><name>_fgColor</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>NppParameters</name><operator>::</operator><name>getInstance</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>setCurrentDefaultBgColor</name><argument_list>(<argument><expr><name><name>pStyle</name><operator>-&gt;</operator><name>_bgColor</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>drawAutocompleteColoursFromTheme</name><argument_list>(<argument><expr><name><name>pStyle</name><operator>-&gt;</operator><name>_fgColor</name></name></expr></argument>, <argument><expr><name><name>pStyle</name><operator>-&gt;</operator><name>_bgColor</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name><name>AutoCompletion</name><operator>::</operator><name>drawAutocomplete</name></name><argument_list>(<argument><expr><name>_pEditView</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name>AutoCompletion</name><operator>::</operator><name>drawAutocomplete</name></name><argument_list>(<argument><expr><name>_pNonEditView</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// Document Map</comment>
	<expr_stmt><expr><call><name>drawDocumentMapColoursFromStylerArray</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<comment type="line">//--Splitter Section--//</comment>
	<decl_stmt><decl><type><name>bool</name></type> <name>isVertical</name> <init>= <expr><operator>(</operator><name><name>nppGUI</name><operator>.</operator><name>_splitterPos</name></name> <operator>==</operator> <name>POS_VERTICAL</name><operator>)</operator></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>int</name></type> <name>splitterSizeDyn</name> <init>= <expr><call><name><name>nppParam</name><operator>.</operator><name>_dpiManager</name><operator>.</operator><name>scaleX</name></name><argument_list>(<argument><expr><name>splitterSize</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name><name>_subSplitter</name><operator>.</operator><name>init</name></name><argument_list>(<argument><expr><call><name><name>_pPublicInterface</name><operator>-&gt;</operator><name>getHinst</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>hwnd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name>_subSplitter</name><operator>.</operator><name>create</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>_mainDocTab</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>_subDocTab</name></expr></argument>, <argument><expr><name>splitterSizeDyn</name></expr></argument>, <argument><expr><name><name>SplitterMode</name><operator>::</operator><name>DYNAMIC</name></name></expr></argument>, <argument><expr><literal type="number">50</literal></expr></argument>, <argument><expr><name>isVertical</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">//--Status Bar Section--//</comment>
	<decl_stmt><decl><type><name>bool</name></type> <name>willBeShown</name> <init>= <expr><name><name>nppGUI</name><operator>.</operator><name>_statusBarShow</name></name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name><name>_statusBar</name><operator>.</operator><name>init</name></name><argument_list>(<argument><expr><call><name><name>_pPublicInterface</name><operator>-&gt;</operator><name>getHinst</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>hwnd</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name>_statusBar</name><operator>.</operator><name>setPartWidth</name></name><argument_list>(<argument><expr><name>STATUSBAR_DOC_SIZE</name></expr></argument>, <argument><expr><call><name><name>nppParam</name><operator>.</operator><name>_dpiManager</name><operator>.</operator><name>scaleX</name></name><argument_list>(<argument><expr><literal type="number">220</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name>_statusBar</name><operator>.</operator><name>setPartWidth</name></name><argument_list>(<argument><expr><name>STATUSBAR_CUR_POS</name></expr></argument>, <argument><expr><call><name><name>nppParam</name><operator>.</operator><name>_dpiManager</name><operator>.</operator><name>scaleX</name></name><argument_list>(<argument><expr><literal type="number">260</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name>_statusBar</name><operator>.</operator><name>setPartWidth</name></name><argument_list>(<argument><expr><name>STATUSBAR_EOF_FORMAT</name></expr></argument>, <argument><expr><call><name><name>nppParam</name><operator>.</operator><name>_dpiManager</name><operator>.</operator><name>scaleX</name></name><argument_list>(<argument><expr><literal type="number">110</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name>_statusBar</name><operator>.</operator><name>setPartWidth</name></name><argument_list>(<argument><expr><name>STATUSBAR_UNICODE_TYPE</name></expr></argument>, <argument><expr><call><name><name>nppParam</name><operator>.</operator><name>_dpiManager</name><operator>.</operator><name>scaleX</name></name><argument_list>(<argument><expr><literal type="number">120</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name>_statusBar</name><operator>.</operator><name>setPartWidth</name></name><argument_list>(<argument><expr><name>STATUSBAR_TYPING_MODE</name></expr></argument>, <argument><expr><call><name><name>nppParam</name><operator>.</operator><name>_dpiManager</name><operator>.</operator><name>scaleX</name></name><argument_list>(<argument><expr><literal type="number">30</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name>_statusBar</name><operator>.</operator><name>display</name></name><argument_list>(<argument><expr><name>willBeShown</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>_pMainWindow</name> <operator>=</operator> <operator>&amp;</operator><name>_mainDocTab</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name><name>_dockingManager</name><operator>.</operator><name>init</name></name><argument_list>(<argument><expr><call><name><name>_pPublicInterface</name><operator>-&gt;</operator><name>getHinst</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>hwnd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>_pMainWindow</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>nppGUI</name><operator>.</operator><name>_isMinimizedToTray</name></name> <operator>&amp;&amp;</operator> <name>_pTrayIco</name> <operator>==</operator> <literal type="null">nullptr</literal></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>HICON</name></type> <name>icon</name> <init>= <expr><literal type="null">nullptr</literal></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>Notepad_plus_Window</name><operator>::</operator><name>loadTrayIcon</name></name><argument_list>(<argument><expr><call><name><name>_pPublicInterface</name><operator>-&gt;</operator><name>getHinst</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>icon</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>_pTrayIco</name> <operator>=</operator> <operator>new</operator> <call><name>trayIconControler</name><argument_list>(<argument><expr><name>hwnd</name></expr></argument>, <argument><expr><name>IDI_M30ICON</name></expr></argument>, <argument><expr><name>NPPM_INTERNAL_MINIMIZED_TRAY</name></expr></argument>, <argument><expr><name>icon</name></expr></argument>, <argument><expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>checkSyncState</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// Plugin Manager</comment>
	<decl_stmt><decl><type><name>NppData</name></type> <name>nppData</name></decl>;</decl_stmt>
	<expr_stmt><expr><name><name>nppData</name><operator>.</operator><name>_nppHandle</name></name> <operator>=</operator> <name>hwnd</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>nppData</name><operator>.</operator><name>_scintillaMainHandle</name></name> <operator>=</operator> <call><name><name>_mainEditView</name><operator>.</operator><name>getHSelf</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>nppData</name><operator>.</operator><name>_scintillaSecondHandle</name></name> <operator>=</operator> <call><name><name>_subEditView</name><operator>.</operator><name>getHSelf</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name><name>_scintillaCtrls4Plugins</name><operator>.</operator><name>init</name></name><argument_list>(<argument><expr><call><name><name>_pPublicInterface</name><operator>-&gt;</operator><name>getHinst</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>hwnd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name>_pluginsManager</name><operator>.</operator><name>init</name></name><argument_list>(<argument><expr><name>nppData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>bool</name></type> <name>enablePluginAdmin</name> <init>= <expr><call><name><name>_pluginsAdminDlg</name><operator>.</operator><name>initFromJson</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name><name>_pluginsManager</name><operator>.</operator><name>loadPlugins</name></name><argument_list>(<argument><expr><call><name><name>nppParam</name><operator>.</operator><name>getPluginRootDir</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><ternary><condition><expr><name>enablePluginAdmin</name></expr> ?</condition><then> <expr><operator>&amp;</operator><call><name><name>_pluginsAdminDlg</name><operator>.</operator><name>getAvailablePluginUpdateInfoList</name></name><argument_list>()</argument_list></call></expr> </then><else>: <expr><literal type="null">nullptr</literal></expr></else></ternary></expr></argument>, <argument><expr><ternary><condition><expr><name>enablePluginAdmin</name></expr> ?</condition><then> <expr><operator>&amp;</operator><call><name><name>_pluginsAdminDlg</name><operator>.</operator><name>getIncompatibleList</name></name><argument_list>()</argument_list></call></expr> </then><else>: <expr><literal type="null">nullptr</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name>_restoreButton</name><operator>.</operator><name>init</name></name><argument_list>(<argument><expr><call><name><name>_pPublicInterface</name><operator>-&gt;</operator><name>getHinst</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>hwnd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// ------------ //</comment>
	<comment type="line">// Menu Section //</comment>
	<comment type="line">// ------------ //</comment>

	<expr_stmt><expr><call><name>setupColorSampleBitmapsOnMainMenuItems</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// Macro Menu</comment>
	<decl_stmt><decl><type><name>HMENU</name></type> <name>hMacroMenu</name> <init>= <expr><call><name><operator>::</operator><name>GetSubMenu</name></name><argument_list>(<argument><expr><name>_mainMenuHandle</name></expr></argument>, <argument><expr><name>MENUINDEX_MACRO</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name> <specifier>const</specifier></type> <name>macroPosBase</name> <init>= <expr><literal type="number">6</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>DynamicMenu</name><modifier>&amp;</modifier></type> <name>macroMenuItems</name> <init>= <expr><call><name><name>nppParam</name><operator>.</operator><name>getMacroMenuItems</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>nbMacroTopLevelItem</name> <init>= <expr><call><name><name>macroMenuItems</name><operator>.</operator><name>getTopLevelItemNumber</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><name>nbMacroTopLevelItem</name> <operator>&gt;=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name><operator>::</operator><name>InsertMenu</name></name><argument_list>(<argument><expr><name>hMacroMenu</name></expr></argument>, <argument><expr><name>macroPosBase</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>MF_BYPOSITION</name></expr></argument>, <argument><expr><cast type="static">static_cast<argument_list type="generic">&lt;<argument><expr><name>UINT</name></expr></argument>&gt;</argument_list><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></cast></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name><name>macroMenuItems</name><operator>.</operator><name>attach</name></name><argument_list>(<argument><expr><name>hMacroMenu</name></expr></argument>, <argument><expr><name>macroPosBase</name></expr></argument>, <argument><expr><name>IDM_SETTING_SHORTCUT_MAPPER_MACRO</name></expr></argument>, <argument><expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"Modify Shortcut/Delete Macro..."</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>


	<comment type="line">// Run Menu</comment>
	<decl_stmt><decl><type><name>HMENU</name></type> <name>hRunMenu</name> <init>= <expr><call><name><operator>::</operator><name>GetSubMenu</name></name><argument_list>(<argument><expr><name>_mainMenuHandle</name></expr></argument>, <argument><expr><name>MENUINDEX_RUN</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name> <specifier>const</specifier></type> <name>runPosBase</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>DynamicMenu</name><modifier>&amp;</modifier></type> <name>runMenuItems</name> <init>= <expr><call><name><name>nppParam</name><operator>.</operator><name>getRunMenuItems</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>nbRunTopLevelItem</name> <init>= <expr><call><name><name>runMenuItems</name><operator>.</operator><name>getTopLevelItemNumber</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><name>nbRunTopLevelItem</name> <operator>&gt;=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name><operator>::</operator><name>InsertMenu</name></name><argument_list>(<argument><expr><name>hRunMenu</name></expr></argument>, <argument><expr><name>runPosBase</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>MF_BYPOSITION</name></expr></argument>, <argument><expr><cast type="static">static_cast<argument_list type="generic">&lt;<argument><expr><name>UINT</name></expr></argument>&gt;</argument_list><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></cast></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name><name>runMenuItems</name><operator>.</operator><name>attach</name></name><argument_list>(<argument><expr><name>hRunMenu</name></expr></argument>, <argument><expr><name>runPosBase</name></expr></argument>, <argument><expr><name>IDM_SETTING_SHORTCUT_MAPPER_RUN</name></expr></argument>, <argument><expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"Modify Shortcut/Delete Command..."</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// Updater menu item</comment>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>nppGUI</name><operator>.</operator><name>_doesExistUpdater</name></name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name><operator>::</operator><name>DeleteMenu</name></name><argument_list>(<argument><expr><name>_mainMenuHandle</name></expr></argument>, <argument><expr><name>IDM_UPDATE_NPP</name></expr></argument>, <argument><expr><name>MF_BYCOMMAND</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><operator>::</operator><name>DeleteMenu</name></name><argument_list>(<argument><expr><name>_mainMenuHandle</name></expr></argument>, <argument><expr><name>IDM_CONFUPDATERPROXY</name></expr></argument>, <argument><expr><name>MF_BYCOMMAND</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<decl_stmt><decl><type><name>HMENU</name></type> <name>hHelpMenu</name> <init>= <expr><call><name><operator>::</operator><name>GetSubMenu</name></name><argument_list>(<argument><expr><name>_mainMenuHandle</name></expr></argument>, <argument><expr><name>MENUINDEX_HELP</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if <condition>(<expr><name>hHelpMenu</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name><operator>::</operator><name>DeleteMenu</name></name><argument_list>(<argument><expr><name>hHelpMenu</name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>, <argument><expr><name>MF_BYPOSITION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt> <comment type="line">// SEPARATOR</comment>
		<expr_stmt><expr><call><name><operator>::</operator><name>DrawMenuBar</name></name><argument_list>(<argument><expr><name>hwnd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<comment type="line">//Languages Menu</comment>
	<decl_stmt><decl><type><name>HMENU</name></type> <name>hLangMenu</name> <init>= <expr><call><name><operator>::</operator><name>GetSubMenu</name></name><argument_list>(<argument><expr><name>_mainMenuHandle</name></expr></argument>, <argument><expr><name>MENUINDEX_LANGUAGE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>WcharMbcsConvertor</name><modifier>&amp;</modifier></type> <name>wmc</name> <init>= <expr><call><name><name>WcharMbcsConvertor</name><operator>::</operator><name>getInstance</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<comment type="line">// Add external languages to menu</comment>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>nppParam</name><operator>.</operator><name>getNbExternalLang</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
	<block>{<block_content>
		<decl_stmt><decl><type><name>HMENU</name></type> <name>subMenu</name> <init>= <expr><name>hLangMenu</name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>ExternalLangContainer</name> <modifier>&amp;</modifier></type> <name>externalLangContainer</name> <init>= <expr><call><name><name>nppParam</name><operator>.</operator><name>getELCFromIndex</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<decl_stmt><decl><type><name>int</name></type> <name>nbItem</name> <init>= <expr><call><name><operator>::</operator><name>GetMenuItemCount</name></name><argument_list>(<argument><expr><name>subMenu</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>TCHAR</name></type> <name><name>buffer</name><index>[<expr><name>MAX_EXTERNAL_LEXER_NAME_LEN</name></expr>]</index></name><argument_list>{<argument><expr><macro><name>TEXT</name><argument_list>(<argument><literal type="char">'\0'</literal></argument>)</argument_list></macro></expr></argument>}</argument_list></decl>;</decl_stmt>
		<decl_stmt><decl><type><specifier>const</specifier> <name>TCHAR</name><modifier>*</modifier></type> <name>lexerNameW</name> <init>= <expr><call><name><name>wmc</name><operator>.</operator><name>char2wchar</name></name><argument_list>(<argument><expr><call><name><name>externalLangContainer</name><operator>.</operator><name>_name</name><operator>.</operator><name>c_str</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>CP_ACP</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<comment type="line">// Find the first separator which is between IDM_LANG_TEXT and languages</comment>
		<decl_stmt><decl><type><name>int</name></type> <name>x</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>MENUITEMINFO</name></type> <name>menuItemInfo</name>
		<argument_list>{
			<argument><expr><operator>.</operator><name>cbSize</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>MENUITEMINFO</name></expr></argument>)</argument_list></sizeof></expr></argument>,
			<argument><expr><operator>.</operator><name>fMask</name> <operator>=</operator> <name>MIIM_FTYPE</name></expr></argument>
		}</argument_list></decl>;</decl_stmt>
		<for>for <control>(<init>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>nbItem</name></expr>;</condition> <incr><expr><operator>++</operator><name>x</name></expr></incr>)</control>
		<block>{<block_content>
			<expr_stmt><expr><call><name><operator>::</operator><name>GetMenuItemInfo</name></name><argument_list>(<argument><expr><name>subMenu</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>menuItemInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name><name>menuItemInfo</name><operator>.</operator><name>fType</name></name> <operator>&amp;</operator> <name>MFT_SEPARATOR</name></expr>)</condition>
			<block>{<block_content>
				<break>break;</break>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></for>

		<comment type="line">// Find the location in existing language menu to insert to. This includes submenu if using compact language menu.</comment>
		<decl_stmt><decl><type><name>TCHAR</name></type> <name>firstLetter</name> <init>= <expr><call><name>towupper</name><argument_list>(<argument><expr><name><name>lexerNameW</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name><name>menuItemInfo</name><operator>.</operator><name>fMask</name></name> <operator>=</operator> <name>MIIM_SUBMENU</name></expr>;</expr_stmt>
		<for>for <control>(<init><expr><operator>++</operator><name>x</name></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>nbItem</name></expr>;</condition> <incr><expr><operator>++</operator><name>x</name></expr></incr>)</control>
		<block>{<block_content>
			<expr_stmt><expr><call><name><operator>::</operator><name>GetMenuItemInfo</name></name><argument_list>(<argument><expr><name>subMenu</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>menuItemInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><operator>::</operator><name>GetMenuString</name></name><argument_list>(<argument><expr><name>subMenu</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>MAX_EXTERNAL_LEXER_NAME_LEN</name></expr></argument>, <argument><expr><name>MF_BYPOSITION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<comment type="line">// Check if using compact language menu.</comment>
			<if_stmt><if>if <condition>(<expr><name><name>menuItemInfo</name><operator>.</operator><name>hSubMenu</name></name> <operator>&amp;&amp;</operator> <name><name>buffer</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>firstLetter</name></expr>)</condition>
			<block>{<block_content>
				<comment type="line">// Found the submenu for the language's first letter. Search in it instead.</comment>
				<expr_stmt><expr><name>subMenu</name> <operator>=</operator> <name><name>menuItemInfo</name><operator>.</operator><name>hSubMenu</name></name></expr>;</expr_stmt>
				<expr_stmt><expr><name>nbItem</name> <operator>=</operator> <call><name><operator>::</operator><name>GetMenuItemCount</name></name><argument_list>(<argument><expr><name>subMenu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>x</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
			</block_content>}</block></if>
			<if type="elseif">else if <condition>(<expr><call><name>lstrcmp</name><argument_list>(<argument><expr><name>lexerNameW</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
			<block>{<block_content>
				<break>break;</break>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></for>

		<expr_stmt><expr><call><name><operator>::</operator><name>InsertMenu</name></name><argument_list>(<argument><expr><name>subMenu</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>MF_BYPOSITION</name></expr></argument>, <argument><expr><name>IDM_LANG_EXTERNAL</name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><name>lexerNameW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>


	<if_stmt><if>if <condition>(<expr><call><name><name>nppGUI</name><operator>.</operator><name>_excludedLangList</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>len</name> <init>= <expr><call><name><name>nppGUI</name><operator>.</operator><name>_excludedLangList</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
		<block>{<block_content>
			<decl_stmt><decl><type><name>int</name></type> <name>cmdID</name> <init>= <expr><call><name><name>nppParam</name><operator>.</operator><name>langTypeToCommandID</name></name><argument_list>(<argument><expr><name><name>nppGUI</name><operator>.</operator><name>_excludedLangList</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>_langType</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>itemSize</name> <init>= <expr><literal type="number">256</literal></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>TCHAR</name></type> <name><name>itemName</name><index>[<expr><name>itemSize</name></expr>]</index></name></decl>;</decl_stmt>
			<expr_stmt><expr><call><name><operator>::</operator><name>GetMenuString</name></name><argument_list>(<argument><expr><name>hLangMenu</name></expr></argument>, <argument><expr><name>cmdID</name></expr></argument>, <argument><expr><name>itemName</name></expr></argument>, <argument><expr><name>itemSize</name></expr></argument>, <argument><expr><name>MF_BYCOMMAND</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>nppGUI</name><operator>.</operator><name>_excludedLangList</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>_cmdID</name> <operator>=</operator> <name>cmdID</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>nppGUI</name><operator>.</operator><name>_excludedLangList</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>_langName</name> <operator>=</operator> <name>itemName</name></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><operator>::</operator><name>DeleteMenu</name></name><argument_list>(<argument><expr><name>hLangMenu</name></expr></argument>, <argument><expr><name>cmdID</name></expr></argument>, <argument><expr><name>MF_BYCOMMAND</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>DrawMenuBar</name><argument_list>(<argument><expr><name>hwnd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></for>
	</block_content>}</block></if></if_stmt>

	<comment type="line">// Add User Defined Languages Entry</comment>
	<decl_stmt><decl><type><name>int</name></type> <name>udlpos</name> <init>= <expr><call><name><operator>::</operator><name>GetMenuItemCount</name></name><argument_list>(<argument><expr><name>hLangMenu</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>len</name> <init>= <expr><call><name><name>nppParam</name><operator>.</operator><name>getNbUserLang</name></name><argument_list>()</argument_list></call></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
	<block>{<block_content>
		<decl_stmt><decl><type><name>UserLangContainer</name> <modifier>&amp;</modifier></type> <name>userLangContainer</name> <init>= <expr><call><name><name>nppParam</name><operator>.</operator><name>getULCFromIndex</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><operator>::</operator><name>InsertMenu</name></name><argument_list>(<argument><expr><name>hLangMenu</name></expr></argument>, <argument><expr><name>udlpos</name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><name>MF_BYPOSITION</name></expr></argument>, <argument><expr><name>IDM_LANG_USER</name> <operator>+</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><call><name><name>userLangContainer</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>

	<comment type="line">//Add recent files</comment>
	<decl_stmt><decl><type><name>HMENU</name></type> <name>hFileMenu</name> <init>= <expr><call><name><operator>::</operator><name>GetSubMenu</name></name><argument_list>(<argument><expr><name>_mainMenuHandle</name></expr></argument>, <argument><expr><name>MENUINDEX_FILE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>nbLRFile</name> <init>= <expr><call><name><name>nppParam</name><operator>.</operator><name>getNbLRFile</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<comment type="line">//int pos = IDM_FILEMENU_LASTONE - IDM_FILE + 1 /* +1 : because of  IDM_FILE_PRINTNOW */;</comment>

	<expr_stmt><expr><call><name><name>_lastRecentFileList</name><operator>.</operator><name>initMenu</name></name><argument_list>(<argument><expr><name>hFileMenu</name></expr></argument>, <argument><expr><name>IDM_FILEMENU_LASTONE</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>IDM_FILEMENU_EXISTCMDPOSITION</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>_accelerator</name></expr></argument>, <argument><expr><call><name><name>nppParam</name><operator>.</operator><name>putRecentFileInSubMenu</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name>_lastRecentFileList</name><operator>.</operator><name>setLangEncoding</name></name><argument_list>(<argument><expr><call><name><name>_nativeLangSpeaker</name><operator>.</operator><name>getLangEncoding</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nbLRFile</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
	<block>{<block_content>
		<decl_stmt><decl><type><name>generic_string</name> <modifier>*</modifier></type> <name>stdStr</name> <init>= <expr><call><name><name>nppParam</name><operator>.</operator><name>getLRFile</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>nppGUI</name><operator>.</operator><name>_checkHistoryFiles</name></name> <operator>||</operator> <call><name>PathFileExists</name><argument_list>(<argument><expr><call><name><name>stdStr</name><operator>-&gt;</operator><name>c_str</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name><name>_lastRecentFileList</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name><name>stdStr</name><operator>-&gt;</operator><name>c_str</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>

	<comment type="line">//Plugin menu</comment>
	<expr_stmt><expr><call><name><name>_pluginsAdminDlg</name><operator>.</operator><name>setPluginsManager</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>_pluginsManager</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name>_pluginsManager</name><operator>.</operator><name>initMenu</name></name><argument_list>(<argument><expr><name>_mainMenuHandle</name></expr></argument>, <argument><expr><name>enablePluginAdmin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">//Search menu</comment>
	<comment type="line">//disable "Search Results Window" under Search Menu </comment>
	<expr_stmt><expr><call><name><operator>::</operator><name>EnableMenuItem</name></name><argument_list>(<argument><expr><name>_mainMenuHandle</name></expr></argument>, <argument><expr><name>IDM_FOCUS_ON_FOUND_RESULTS</name></expr></argument>, <argument><expr><name>MF_DISABLED</name> <operator>|</operator> <name>MF_GRAYED</name> <operator>|</operator> <name>MF_BYCOMMAND</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">//Main menu is loaded, now load editor context menu items</comment>
	<expr_stmt><expr><call><name><name>nppParam</name><operator>.</operator><name>getContextMenuFromXmlTree</name></name><argument_list>(<argument><expr><name>_mainMenuHandle</name></expr></argument>, <argument><expr><call><name><name>_pluginsManager</name><operator>.</operator><name>getMenuHandle</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">//Main menu is loaded, now load tab context menu items</comment>
	<expr_stmt><expr><call><name><name>nppParam</name><operator>.</operator><name>getContextMenuFromXmlTree</name></name><argument_list>(<argument><expr><name>_mainMenuHandle</name></expr></argument>, <argument><expr><call><name><name>_pluginsManager</name><operator>.</operator><name>getMenuHandle</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><call><name><name>nppParam</name><operator>.</operator><name>hasCustomContextMenu</name></name><argument_list>()</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name><name>_mainEditView</name><operator>.</operator><name>execute</name></name><argument_list>(<argument><expr><name>SCI_USEPOPUP</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>_subEditView</name><operator>.</operator><name>execute</name></name><argument_list>(<argument><expr><name>SCI_USEPOPUP</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name><name>_nativeLangSpeaker</name><operator>.</operator><name>changeMenuLang</name></name><argument_list>(<argument><expr><name>_mainMenuHandle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><operator>::</operator><name>DrawMenuBar</name></name><argument_list>(<argument><expr><name>hwnd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


	<comment type="line">//Windows menu</comment>
	<expr_stmt><expr><call><name><name>_windowsMenu</name><operator>.</operator><name>init</name></name><argument_list>(<argument><expr><name>_mainMenuHandle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// Update Scintilla context menu strings (translated)</comment>
	<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>MenuItemUnit</name></expr></argument>&gt;</argument_list></name> <modifier>&amp;</modifier></type> <name>tmp</name> <init>= <expr><call><name><name>nppParam</name><operator>.</operator><name>getContextMenuItems</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>len</name> <init>= <expr><call><name><name>tmp</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>TCHAR</name></type> <name><name>menuName</name><index>[<expr><name>menuItemStrLenMax</name></expr>]</index></name></decl>;</decl_stmt>
	<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>tmp</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name><name>_itemName</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name><operator>::</operator><name>GetMenuString</name></name><argument_list>(<argument><expr><name>_mainMenuHandle</name></expr></argument>, <argument><expr><name><name>tmp</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>_cmdID</name></expr></argument>, <argument><expr><name>menuName</name></expr></argument>, <argument><expr><name>menuItemStrLenMax</name></expr></argument>, <argument><expr><name>MF_BYCOMMAND</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>tmp</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>_itemName</name> <operator>=</operator> <call><name>purgeMenuItemString</name><argument_list>(<argument><expr><name>menuName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>

	<comment type="line">// Update tab context menu strings (translated)</comment>
	<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>MenuItemUnit</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>tmp2</name> <init>= <expr><call><name><name>nppParam</name><operator>.</operator><name>getTabContextMenuItems</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>len2</name> <init>= <expr><call><name><name>tmp2</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

	<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len2</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>tmp2</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name><name>_itemName</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name><operator>::</operator><name>GetMenuString</name></name><argument_list>(<argument><expr><name>_mainMenuHandle</name></expr></argument>, <argument><expr><name><name>tmp2</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>_cmdID</name></expr></argument>, <argument><expr><name>menuName</name></expr></argument>, <argument><expr><name>menuItemStrLenMax</name></expr></argument>, <argument><expr><name>MF_BYCOMMAND</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>tmp2</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>_itemName</name> <operator>=</operator> <call><name>purgeMenuItemString</name><argument_list>(<argument><expr><name>menuName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>

	<expr_stmt><expr><call><name>updateCommandShortcuts</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<comment type="line">//Translate non-menu shortcuts</comment>
	<expr_stmt><expr><call><name><name>_nativeLangSpeaker</name><operator>.</operator><name>changeShortcutLang</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<comment type="line">//Update plugin shortcuts, all plugin commands should be available now</comment>
	<expr_stmt><expr><call><name><name>nppParam</name><operator>.</operator><name>reloadPluginCmds</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// Shortcut Accelerator : should be the last one since it will capture all the shortcuts</comment>
	<expr_stmt><expr><call><name><name>_accelerator</name><operator>.</operator><name>init</name></name><argument_list>(<argument><expr><name>_mainMenuHandle</name></expr></argument>, <argument><expr><name>hwnd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name>nppParam</name><operator>.</operator><name>setAccelerator</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>_accelerator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// Scintilla key accelerator</comment>
	<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>HWND</name></expr></argument>&gt;</argument_list></name></type> <name>scints</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name><name>scints</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><call><name><name>_mainEditView</name><operator>.</operator><name>getHSelf</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name>scints</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><call><name><name>_subEditView</name><operator>.</operator><name>getHSelf</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name>_scintaccelerator</name><operator>.</operator><name>init</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>scints</name></expr></argument>, <argument><expr><name>_mainMenuHandle</name></expr></argument>, <argument><expr><name>hwnd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name><name>nppParam</name><operator>.</operator><name>setScintillaAccelerator</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>_scintaccelerator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name>_scintaccelerator</name><operator>.</operator><name>updateKeys</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name><operator>::</operator><name>DrawMenuBar</name></name><argument_list>(<argument><expr><name>hwnd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


	<comment type="line">//-- Tool Bar Section --//</comment>
	
	<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>toolbarState</name> <init>= <expr><call><name><name>NppDarkMode</name><operator>::</operator><name>getToolBarIconSet</name></name><argument_list>(<argument><expr><call><name><name>NppDarkMode</name><operator>::</operator><name>isEnabled</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><name>toolbarState</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name><name>nppGUI</name><operator>.</operator><name>_toolBarStatus</name></name> <operator>=</operator> <cast type="static">static_cast<argument_list type="generic">&lt;<argument><expr><name>toolBarStatusType</name></expr></argument>&gt;</argument_list><argument_list>(<argument><expr><name>toolbarState</name></expr></argument>)</argument_list></cast></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<decl_stmt><decl><type><name>toolBarStatusType</name></type> <name>tbStatus</name> <init>= <expr><name><name>nppGUI</name><operator>.</operator><name>_toolBarStatus</name></name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name>willBeShown</name> <operator>=</operator> <name><name>nppGUI</name><operator>.</operator><name>_toolbarShow</name></name></expr>;</expr_stmt>

	<comment type="line">// To notify plugins that toolbar icons can be registered</comment>
	<decl_stmt><decl><type><name>SCNotification</name></type> <name>scnN</name><argument_list>{}</argument_list></decl>;</decl_stmt>
	<expr_stmt><expr><name><name>scnN</name><operator>.</operator><name>nmhdr</name><operator>.</operator><name>code</name></name> <operator>=</operator> <name>NPPN_TBMODIFICATION</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>scnN</name><operator>.</operator><name>nmhdr</name><operator>.</operator><name>hwndFrom</name></name> <operator>=</operator> <name>hwnd</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>scnN</name><operator>.</operator><name>nmhdr</name><operator>.</operator><name>idFrom</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name>_pluginsManager</name><operator>.</operator><name>notify</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>scnN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name><name>_toolBar</name><operator>.</operator><name>init</name></name><argument_list>(<argument><expr><call><name><name>_pPublicInterface</name><operator>-&gt;</operator><name>getHinst</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>hwnd</name></expr></argument>, <argument><expr><name>tbStatus</name></expr></argument>, <argument><expr><name>toolBarIcons</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>toolBarIcons</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>ToolBarButtonUnit</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name><name>_rebarTop</name><operator>.</operator><name>init</name></name><argument_list>(<argument><expr><call><name><name>_pPublicInterface</name><operator>-&gt;</operator><name>getHinst</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>hwnd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name>_rebarBottom</name><operator>.</operator><name>init</name></name><argument_list>(<argument><expr><call><name><name>_pPublicInterface</name><operator>-&gt;</operator><name>getHinst</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>hwnd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name>_toolBar</name><operator>.</operator><name>addToRebar</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>_rebarTop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name>_rebarTop</name><operator>.</operator><name>setIDVisible</name></name><argument_list>(<argument><expr><name>REBAR_BAR_TOOLBAR</name></expr></argument>, <argument><expr><name>willBeShown</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>checkMacroState</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<comment type="line">//--Init dialogs--//</comment>
	<expr_stmt><expr><call><name><name>_findReplaceDlg</name><operator>.</operator><name>init</name></name><argument_list>(<argument><expr><call><name><name>_pPublicInterface</name><operator>-&gt;</operator><name>getHinst</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>hwnd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>_pEditView</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name>_findInFinderDlg</name><operator>.</operator><name>init</name></name><argument_list>(<argument><expr><call><name><name>_pPublicInterface</name><operator>-&gt;</operator><name>getHinst</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>hwnd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name>_incrementFindDlg</name><operator>.</operator><name>init</name></name><argument_list>(<argument><expr><call><name><name>_pPublicInterface</name><operator>-&gt;</operator><name>getHinst</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>hwnd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>_findReplaceDlg</name></expr></argument>, <argument><expr><call><name><name>_nativeLangSpeaker</name><operator>.</operator><name>isRTL</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name>_incrementFindDlg</name><operator>.</operator><name>addToRebar</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>_rebarBottom</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name>_goToLineDlg</name><operator>.</operator><name>init</name></name><argument_list>(<argument><expr><call><name><name>_pPublicInterface</name><operator>-&gt;</operator><name>getHinst</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>hwnd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>_pEditView</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name>_findCharsInRangeDlg</name><operator>.</operator><name>init</name></name><argument_list>(<argument><expr><call><name><name>_pPublicInterface</name><operator>-&gt;</operator><name>getHinst</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>hwnd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>_pEditView</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name>_colEditorDlg</name><operator>.</operator><name>init</name></name><argument_list>(<argument><expr><call><name><name>_pPublicInterface</name><operator>-&gt;</operator><name>getHinst</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>hwnd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>_pEditView</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name>_aboutDlg</name><operator>.</operator><name>init</name></name><argument_list>(<argument><expr><call><name><name>_pPublicInterface</name><operator>-&gt;</operator><name>getHinst</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>hwnd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name>_debugInfoDlg</name><operator>.</operator><name>init</name></name><argument_list>(<argument><expr><call><name><name>_pPublicInterface</name><operator>-&gt;</operator><name>getHinst</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>hwnd</name></expr></argument>, <argument><expr><name>_isAdministrator</name></expr></argument>, <argument><expr><call><name><name>_pluginsManager</name><operator>.</operator><name>getLoadedPluginNames</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name>_runDlg</name><operator>.</operator><name>init</name></name><argument_list>(<argument><expr><call><name><name>_pPublicInterface</name><operator>-&gt;</operator><name>getHinst</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>hwnd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name>_runMacroDlg</name><operator>.</operator><name>init</name></name><argument_list>(<argument><expr><call><name><name>_pPublicInterface</name><operator>-&gt;</operator><name>getHinst</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>hwnd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name>_documentPeeker</name><operator>.</operator><name>init</name></name><argument_list>(<argument><expr><call><name><name>_pPublicInterface</name><operator>-&gt;</operator><name>getHinst</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>hwnd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name><name>_md5FromFilesDlg</name><operator>.</operator><name>init</name></name><argument_list>(<argument><expr><call><name><name>_pPublicInterface</name><operator>-&gt;</operator><name>getHinst</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>hwnd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name>_md5FromFilesDlg</name><operator>.</operator><name>setHashType</name></name><argument_list>(<argument><expr><name>hash_md5</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name>_md5FromTextDlg</name><operator>.</operator><name>init</name></name><argument_list>(<argument><expr><call><name><name>_pPublicInterface</name><operator>-&gt;</operator><name>getHinst</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>hwnd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name>_md5FromTextDlg</name><operator>.</operator><name>setHashType</name></name><argument_list>(<argument><expr><name>hash_md5</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name>_sha2FromFilesDlg</name><operator>.</operator><name>init</name></name><argument_list>(<argument><expr><call><name><name>_pPublicInterface</name><operator>-&gt;</operator><name>getHinst</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>hwnd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name>_sha2FromFilesDlg</name><operator>.</operator><name>setHashType</name></name><argument_list>(<argument><expr><name>hash_sha256</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name>_sha2FromTextDlg</name><operator>.</operator><name>init</name></name><argument_list>(<argument><expr><call><name><name>_pPublicInterface</name><operator>-&gt;</operator><name>getHinst</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>hwnd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name>_sha2FromTextDlg</name><operator>.</operator><name>setHashType</name></name><argument_list>(<argument><expr><name>hash_sha256</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


	<comment type="line">//--User Define Dialog Section--//</comment>
	<decl_stmt><decl><type><name>int</name></type> <name>uddStatus</name> <init>= <expr><name><name>nppGUI</name><operator>.</operator><name>_userDefineDlgStatus</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>UserDefineDialog</name> <modifier>*</modifier></type><name>udd</name> <init>= <expr><call><name><name>_pEditView</name><operator>-&gt;</operator><name>getUserDefineDlg</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>bool</name></type> <name>uddShow</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
	<switch>switch <condition>(<expr><name>uddStatus</name></expr>)</condition>
	<block>{<block_content>
		<case>case <expr><name>UDD_SHOW</name></expr>:</case> <comment type="line">// show &amp; undocked</comment>
		<block>{<block_content>
			<expr_stmt><expr><call><name><name>udd</name><operator>-&gt;</operator><name>doDialog</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><call><name><name>_nativeLangSpeaker</name><operator>.</operator><name>isRTL</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>_nativeLangSpeaker</name><operator>.</operator><name>changeUserDefineLang</name></name><argument_list>(<argument><expr><name>udd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>uddShow</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
			<break>break;</break>
		</block_content>}</block>
		<case>case <expr><name>UDD_DOCKED</name></expr>:</case> <comment type="line">// hide &amp; docked</comment>
		<block>{<block_content>
			<expr_stmt><expr><name>_isUDDocked</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
			<break>break;</break>
		</block_content>}</block>
		<case>case <expr><operator>(</operator><name>UDD_SHOW</name> <operator>|</operator> <name>UDD_DOCKED</name><operator>)</operator></expr>:</case>    <comment type="line">// show &amp; docked</comment>
		<block>{<block_content>
			<expr_stmt><expr><call><name><name>udd</name><operator>-&gt;</operator><name>doDialog</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><call><name><name>_nativeLangSpeaker</name><operator>.</operator><name>isRTL</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>_nativeLangSpeaker</name><operator>.</operator><name>changeUserDefineLang</name></name><argument_list>(<argument><expr><name>udd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><operator>::</operator><name>SendMessage</name></name><argument_list>(<argument><expr><call><name><name>udd</name><operator>-&gt;</operator><name>getHSelf</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>WM_COMMAND</name></expr></argument>, <argument><expr><name>IDC_DOCK_BUTTON</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>uddShow</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
			<break>break;</break>
		</block_content>}</block>

		<default>default:</default> <comment type="line">// hide &amp; undocked</comment>
			<break>break;</break>
	</block_content>}</block></switch>

	<comment type="line">//</comment>
	<comment type="line">// Menu &amp; toolbar for UserDefine Dialog</comment>
	<comment type="line">//</comment>
	<expr_stmt><expr><call><name>checkMenuItem</name><argument_list>(<argument><expr><name>IDM_LANG_USER_DLG</name></expr></argument>, <argument><expr><name>uddShow</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name>_toolBar</name><operator>.</operator><name>setCheck</name></name><argument_list>(<argument><expr><name>IDM_LANG_USER_DLG</name></expr></argument>, <argument><expr><name>uddShow</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">//Hide or show the right shortcuts "＋" "▼" "✕" of main menu bar</comment>
	<if_stmt><if>if <condition>(<expr><name><name>nppGUI</name><operator>.</operator><name>_hideMenuRightShortcuts</name></name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>int</name></type> <name>nbRemoved</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>bufferSize</name> <init>= <expr><literal type="number">64</literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>TCHAR</name></type> <name><name>buffer</name><index>[<expr><name>bufferSize</name></expr>]</index></name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>nbItem</name> <init>= <expr><call><name>GetMenuItemCount</name><argument_list>(<argument><expr><name>_mainMenuHandle</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name>nbItem</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><operator>--</operator><name>i</name></expr></incr>)</control>
		<block>{<block_content>
			<expr_stmt><expr><call><name><operator>::</operator><name>GetMenuStringW</name></name><argument_list>(<argument><expr><name>_mainMenuHandle</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>bufferSize</name></expr></argument>, <argument><expr><name>MF_BYPOSITION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><call><name>lstrcmp</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="string">L"✕"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <call><name>lstrcmp</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="string">L"▼"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <call><name>lstrcmp</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="string">L"＋"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><call><name><operator>::</operator><name>RemoveMenu</name></name><argument_list>(<argument><expr><name>_mainMenuHandle</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>MF_BYPOSITION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><operator>++</operator><name>nbRemoved</name></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
			<if_stmt><if>if <condition>(<expr><name>nbRemoved</name> <operator>==</operator> <literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content>
				<break>break;</break></block_content></block></if></if_stmt>
		</block_content>}</block></for>
		<if_stmt><if>if <condition>(<expr><name>nbRemoved</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name><operator>::</operator><name>DrawMenuBar</name></name><argument_list>(<argument><expr><name>hwnd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="line">//</comment>
	<comment type="line">// Initialize the default foreground &amp; background color</comment>
	<comment type="line">//</comment>
	<block>{<block_content>
		<decl_stmt><decl><type><specifier>const</specifier> <name>Style</name> <modifier>*</modifier></type> <name>pStyle</name> <init>= <expr><call><name><name>nppParam</name><operator>.</operator><name>getGlobalStylers</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>findByID</name><argument_list>(<argument><expr><name>STYLE_DEFAULT</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if <condition>(<expr><name>pStyle</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name><name>nppParam</name><operator>.</operator><name>setCurrentDefaultFgColor</name></name><argument_list>(<argument><expr><name><name>pStyle</name><operator>-&gt;</operator><name>_fgColor</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>nppParam</name><operator>.</operator><name>setCurrentDefaultBgColor</name></name><argument_list>(<argument><expr><name><name>pStyle</name><operator>-&gt;</operator><name>_bgColor</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block>

	<comment type="line">//</comment>
	<comment type="line">// launch the plugin dlg memorized at the last session</comment>
	<comment type="line">//</comment>

	<decl_stmt><decl><type><name>DockingManagerData</name><modifier>&amp;</modifier></type> <name>dmd</name> <init>= <expr><name><name>nppGUI</name><operator>.</operator><name>_dockingData</name></name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name><name>_dockingManager</name><operator>.</operator><name>setDockedContSize</name></name><argument_list>(<argument><expr><name>CONT_LEFT</name></expr></argument>, <argument><expr><name><name>nppGUI</name><operator>.</operator><name>_dockingData</name><operator>.</operator><name>_leftWidth</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name>_dockingManager</name><operator>.</operator><name>setDockedContSize</name></name><argument_list>(<argument><expr><name>CONT_RIGHT</name></expr></argument>, <argument><expr><name><name>nppGUI</name><operator>.</operator><name>_dockingData</name><operator>.</operator><name>_rightWidth</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name>_dockingManager</name><operator>.</operator><name>setDockedContSize</name></name><argument_list>(<argument><expr><name>CONT_TOP</name></expr></argument>, <argument><expr><name><name>nppGUI</name><operator>.</operator><name>_dockingData</name><operator>.</operator><name>_topHeight</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name>_dockingManager</name><operator>.</operator><name>setDockedContSize</name></name><argument_list>(<argument><expr><name>CONT_BOTTOM</name></expr></argument>, <argument><expr><name><name>nppGUI</name><operator>.</operator><name>_dockingData</name><operator>.</operator><name>_bottomHight</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<block>{<block_content>
		<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>len</name> <init>= <expr><call><name><name>dmd</name><operator>.</operator><name>_pluginDockInfo</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
		<block>{<block_content>
			<decl_stmt><decl><type><name>PluginDlgDockingInfo</name><modifier>&amp;</modifier></type> <name>pdi</name> <init>= <expr><name><name>dmd</name><operator>.</operator><name>_pluginDockInfo</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>isInternalFunc</name> <init>= <expr><name><name>pdi</name><operator>.</operator><name>_name</name></name> <operator>==</operator> <name>NPP_INTERNAL_FUCTION_STR</name></expr></init></decl>;</decl_stmt>

			<decl_stmt><decl><type><name>bool</name></type> <name>showPanel</name> <init>= <expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt>
			<if_stmt><if>if <condition>(<expr><name><name>nppGUI</name><operator>.</operator><name>_isCmdlineNosessionActivated</name></name></expr>)</condition>
			<block>{<block_content>
				<decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>showProjectPanel</name> <init>= <expr><name>isInternalFunc</name>
					<operator>&amp;&amp;</operator> <name><name>nppGUI</name><operator>.</operator><name>_projectPanelKeepState</name></name>
					<operator>&amp;&amp;</operator> <operator>(</operator><name><name>pdi</name><operator>.</operator><name>_internalID</name></name> <operator>!=</operator> <name>IDM_EDIT_CLIPBOARDHISTORY_PANEL</name>
						<operator>&amp;&amp;</operator> <name><name>pdi</name><operator>.</operator><name>_internalID</name></name> <operator>!=</operator> <name>IDM_VIEW_DOCLIST</name>
						<operator>&amp;&amp;</operator> <name><name>pdi</name><operator>.</operator><name>_internalID</name></name> <operator>!=</operator> <name>IDM_EDIT_CHAR_PANEL</name>
						<operator>&amp;&amp;</operator> <name><name>pdi</name><operator>.</operator><name>_internalID</name></name> <operator>!=</operator> <name>IDM_VIEW_FILEBROWSER</name>
						<operator>&amp;&amp;</operator> <name><name>pdi</name><operator>.</operator><name>_internalID</name></name> <operator>!=</operator> <name>IDM_VIEW_DOC_MAP</name>
						<operator>&amp;&amp;</operator> <name><name>pdi</name><operator>.</operator><name>_internalID</name></name> <operator>!=</operator> <name>IDM_VIEW_FUNC_LIST</name><operator>)</operator></expr></init></decl>;</decl_stmt>

				<decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>showInternalPanel</name> <init>= <expr><name>isInternalFunc</name>
					<operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name><name>pdi</name><operator>.</operator><name>_internalID</name></name> <operator>==</operator> <name>IDM_EDIT_CLIPBOARDHISTORY_PANEL</name> <operator>&amp;&amp;</operator> <name><name>nppGUI</name><operator>.</operator><name>_clipboardHistoryPanelKeepState</name></name><operator>)</operator>
						<operator>||</operator> <operator>(</operator><name><name>pdi</name><operator>.</operator><name>_internalID</name></name> <operator>==</operator> <name>IDM_VIEW_DOCLIST</name> <operator>&amp;&amp;</operator> <name><name>nppGUI</name><operator>.</operator><name>_docListKeepState</name></name><operator>)</operator>
						<operator>||</operator> <operator>(</operator><name><name>pdi</name><operator>.</operator><name>_internalID</name></name> <operator>==</operator> <name>IDM_EDIT_CHAR_PANEL</name> <operator>&amp;&amp;</operator> <name><name>nppGUI</name><operator>.</operator><name>_charPanelKeepState</name></name><operator>)</operator>
						<operator>||</operator> <operator>(</operator><name><name>pdi</name><operator>.</operator><name>_internalID</name></name> <operator>==</operator> <name>IDM_VIEW_FILEBROWSER</name> <operator>&amp;&amp;</operator> <name><name>nppGUI</name><operator>.</operator><name>_fileBrowserKeepState</name></name><operator>)</operator>
						<operator>||</operator> <operator>(</operator><name>showProjectPanel</name><operator>)</operator>
						<operator>||</operator> <operator>(</operator><name><name>pdi</name><operator>.</operator><name>_internalID</name></name> <operator>==</operator> <name>IDM_VIEW_DOC_MAP</name> <operator>&amp;&amp;</operator> <name><name>nppGUI</name><operator>.</operator><name>_docMapKeepState</name></name><operator>)</operator>
						<operator>||</operator> <operator>(</operator><name><name>pdi</name><operator>.</operator><name>_internalID</name></name> <operator>==</operator> <name>IDM_VIEW_FUNC_LIST</name> <operator>&amp;&amp;</operator> <name><name>nppGUI</name><operator>.</operator><name>_funcListKeepState</name></name><operator>)</operator><operator>)</operator></expr></init></decl>;</decl_stmt>

				<expr_stmt><expr><name>showPanel</name> <operator>=</operator> <operator>(</operator><operator>(</operator><operator>!</operator><name>isInternalFunc</name> <operator>&amp;&amp;</operator> <name><name>nppGUI</name><operator>.</operator><name>_pluginPanelKeepState</name></name><operator>)</operator> <operator>||</operator> <name>showInternalPanel</name><operator>)</operator></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>

			<if_stmt><if>if <condition>(<expr><name><name>pdi</name><operator>.</operator><name>_isVisible</name></name> <operator>&amp;&amp;</operator> <name>showPanel</name></expr>)</condition>
			<block>{<block_content>
				<if_stmt><if>if <condition>(<expr><name>isInternalFunc</name></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><call><name><name>_internalFuncIDs</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name><name>pdi</name><operator>.</operator><name>_internalID</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
				<else>else<block type="pseudo"><block_content>
					<expr_stmt><expr><call><name><name>_pluginsManager</name><operator>.</operator><name>runPluginCommand</name></name><argument_list>(<argument><expr><call><name><name>pdi</name><operator>.</operator><name>_name</name><operator>.</operator><name>c_str</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>pdi</name><operator>.</operator><name>_internalID</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></for>

		<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>len</name> <init>= <expr><call><name><name>dmd</name><operator>.</operator><name>_containerTabInfo</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
		<block>{<block_content>
			<decl_stmt><decl><type><name>ContainerTabInfo</name> <modifier>&amp;</modifier></type> <name>cti</name> <init>= <expr><name><name>dmd</name><operator>.</operator><name>_containerTabInfo</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name><name>_dockingManager</name><operator>.</operator><name>setActiveTab</name></name><argument_list>(<argument><expr><name><name>cti</name><operator>.</operator><name>_cont</name></name></expr></argument>, <argument><expr><name><name>cti</name><operator>.</operator><name>_activeTab</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></for>
	</block_content>}</block>

	<comment type="line">//Load initial docs into doctab</comment>
	<expr_stmt><expr><call><name>loadBufferIntoView</name><argument_list>(<argument><expr><call><name><name>_mainEditView</name><operator>.</operator><name>getCurrentBufferID</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>MAIN_VIEW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>loadBufferIntoView</name><argument_list>(<argument><expr><call><name><name>_subEditView</name><operator>.</operator><name>getCurrentBufferID</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>SUB_VIEW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>activateBuffer</name><argument_list>(<argument><expr><call><name><name>_mainEditView</name><operator>.</operator><name>getCurrentBufferID</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>MAIN_VIEW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>activateBuffer</name><argument_list>(<argument><expr><call><name><name>_subEditView</name><operator>.</operator><name>getCurrentBufferID</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>SUB_VIEW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name><name>_mainEditView</name><operator>.</operator><name>getFocus</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><call><name><name>_nativeLangSpeaker</name><operator>.</operator><name>isRTL</name></name><argument_list>()</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name><name>_mainEditView</name><operator>.</operator><name>changeTextDirection</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>_subEditView</name><operator>.</operator><name>changeTextDirection</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><name>TRUE</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name><name>Notepad_plus</name><operator>::</operator><name>killAllChildren</name></name><parameter_list>()</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name><name>_toolBar</name><operator>.</operator><name>destroy</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name>_rebarTop</name><operator>.</operator><name>destroy</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name>_rebarBottom</name><operator>.</operator><name>destroy</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>_pMainSplitter</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name><name>_pMainSplitter</name><operator>-&gt;</operator><name>destroy</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><operator>delete</operator> <name>_pMainSplitter</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name><name>_mainDocTab</name><operator>.</operator><name>destroy</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>_subDocTab</name><operator>.</operator><name>destroy</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name><name>_mainEditView</name><operator>.</operator><name>destroy</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>_subEditView</name><operator>.</operator><name>destroy</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name>_invisibleEditView</name><operator>.</operator><name>destroy</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>_subSplitter</name><operator>.</operator><name>destroy</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>_statusBar</name><operator>.</operator><name>destroy</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name><name>_scintillaCtrls4Plugins</name><operator>.</operator><name>destroy</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name>_dockingManager</name><operator>.</operator><name>destroy</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name><name>Notepad_plus</name><operator>::</operator><name>saveGUIParams</name></name><parameter_list>()</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>NppParameters</name><modifier>&amp;</modifier></type> <name>nppParams</name> <init>= <expr><call><name><name>NppParameters</name><operator>::</operator><name>getInstance</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>NppGUI</name> <modifier>&amp;</modifier></type> <name>nppGUI</name> <init>= <expr><call><name><name>nppParams</name><operator>.</operator><name>getNppGUI</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name><name>nppGUI</name><operator>.</operator><name>_toolbarShow</name></name> <operator>=</operator> <call><name><name>_rebarTop</name><operator>.</operator><name>getIDVisible</name></name><argument_list>(<argument><expr><name>REBAR_BAR_TOOLBAR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>nppGUI</name><operator>.</operator><name>_toolBarStatus</name></name> <operator>=</operator> <call><name><name>_toolBar</name><operator>.</operator><name>getState</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>nppGUI</name><operator>.</operator><name>_tabStatus</name></name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><call><name><name>TabBarPlus</name><operator>::</operator><name>doDragNDropOrNot</name></name><argument_list>()</argument_list></call></expr>?</condition><then><expr><name>TAB_DRAWTOPBAR</name></expr></then><else>:<expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator> <operator>|</operator> \
						<operator>(</operator><ternary><condition><expr><call><name><name>TabBarPlus</name><operator>::</operator><name>drawTopBar</name></name><argument_list>()</argument_list></call></expr>?</condition><then><expr><name>TAB_DRAGNDROP</name></expr></then><else>:<expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator> <operator>|</operator> \
						<operator>(</operator><ternary><condition><expr><call><name><name>TabBarPlus</name><operator>::</operator><name>drawInactiveTab</name></name><argument_list>()</argument_list></call></expr>?</condition><then><expr><name>TAB_DRAWINACTIVETAB</name></expr></then><else>:<expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator> <operator>|</operator> \
						<operator>(</operator><ternary><condition><expr><name>_toReduceTabBar</name></expr>?</condition><then><expr><name>TAB_REDUCE</name></expr></then><else>:<expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator> <operator>|</operator> \
						<operator>(</operator><ternary><condition><expr><call><name><name>TabBarPlus</name><operator>::</operator><name>drawTabCloseButton</name></name><argument_list>()</argument_list></call></expr>?</condition><then><expr><name>TAB_CLOSEBUTTON</name></expr></then><else>:<expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator> <operator>|</operator> \
						<operator>(</operator><ternary><condition><expr><call><name><name>TabBarPlus</name><operator>::</operator><name>isDbClk2Close</name></name><argument_list>()</argument_list></call></expr>?</condition><then><expr><name>TAB_DBCLK2CLOSE</name></expr></then><else>:<expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator> <operator>|</operator> \
						<operator>(</operator><ternary><condition><expr><call><name><name>TabBarPlus</name><operator>::</operator><name>isVertical</name></name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><name>TAB_VERTICAL</name></expr></then><else>:<expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator> <operator>|</operator> \
						<operator>(</operator><ternary><condition><expr><call><name><name>TabBarPlus</name><operator>::</operator><name>isMultiLine</name></name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><name>TAB_MULTILINE</name></expr></then><else>:<expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator> <operator>|</operator>\
						<operator>(</operator><name><name>nppGUI</name><operator>.</operator><name>_tabStatus</name></name> <operator>&amp;</operator> <name>TAB_HIDE</name><operator>)</operator> <operator>|</operator> \
						<operator>(</operator><name><name>nppGUI</name><operator>.</operator><name>_tabStatus</name></name> <operator>&amp;</operator> <name>TAB_QUITONEMPTY</name><operator>)</operator> <operator>|</operator> \
						<operator>(</operator><name><name>nppGUI</name><operator>.</operator><name>_tabStatus</name></name> <operator>&amp;</operator> <name>TAB_ALTICONS</name><operator>)</operator></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>nppGUI</name><operator>.</operator><name>_splitterPos</name></name> <operator>=</operator> <ternary><condition><expr><call><name><name>_subSplitter</name><operator>.</operator><name>isVertical</name></name><argument_list>()</argument_list></call></expr>?</condition><then><expr><name>POS_VERTICAL</name></expr></then><else>:<expr><name>POS_HORIZOTAL</name></expr></else></ternary></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>UserDefineDialog</name> <modifier>*</modifier></type><name>udd</name> <init>= <expr><call><name><name>_pEditView</name><operator>-&gt;</operator><name>getUserDefineDlg</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name>b</name> <init>= <expr><call><name><name>udd</name><operator>-&gt;</operator><name>isDocked</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name><name>nppGUI</name><operator>.</operator><name>_userDefineDlgStatus</name></name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><name>b</name></expr>?</condition><then><expr><name>UDD_DOCKED</name></expr></then><else>:<expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator> <operator>|</operator> <operator>(</operator><ternary><condition><expr><call><name><name>udd</name><operator>-&gt;</operator><name>isVisible</name></name><argument_list>()</argument_list></call></expr>?</condition><then><expr><name>UDD_SHOW</name></expr></then><else>:<expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>

	<comment type="line">// When window is maximized GetWindowPlacement returns window's last non maximized coordinates.</comment>
	<comment type="line">// Save them so that those will be used when window is restored next time.</comment>
	<decl_stmt><decl><type><name>WINDOWPLACEMENT</name></type> <name>posInfo</name><argument_list>{}</argument_list></decl>;</decl_stmt>
	<expr_stmt><expr><name><name>posInfo</name><operator>.</operator><name>length</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>WINDOWPLACEMENT</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><operator>::</operator><name>GetWindowPlacement</name></name><argument_list>(<argument><expr><call><name><name>_pPublicInterface</name><operator>-&gt;</operator><name>getHSelf</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>posInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>nppGUI</name><operator>.</operator><name>_appPos</name><operator>.</operator><name>left</name></name>   <operator>=</operator> <name><name>posInfo</name><operator>.</operator><name>rcNormalPosition</name><operator>.</operator><name>left</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>nppGUI</name><operator>.</operator><name>_appPos</name><operator>.</operator><name>top</name></name>    <operator>=</operator> <name><name>posInfo</name><operator>.</operator><name>rcNormalPosition</name><operator>.</operator><name>top</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>nppGUI</name><operator>.</operator><name>_appPos</name><operator>.</operator><name>right</name></name>  <operator>=</operator> <name><name>posInfo</name><operator>.</operator><name>rcNormalPosition</name><operator>.</operator><name>right</name></name> <operator>-</operator> <name><name>posInfo</name><operator>.</operator><name>rcNormalPosition</name><operator>.</operator><name>left</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>nppGUI</name><operator>.</operator><name>_appPos</name><operator>.</operator><name>bottom</name></name> <operator>=</operator> <name><name>posInfo</name><operator>.</operator><name>rcNormalPosition</name><operator>.</operator><name>bottom</name></name> <operator>-</operator> <name><name>posInfo</name><operator>.</operator><name>rcNormalPosition</name><operator>.</operator><name>top</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>nppGUI</name><operator>.</operator><name>_isMaximized</name></name> <operator>=</operator> <operator>(</operator><operator>(</operator><call><name>IsZoomed</name><argument_list>(<argument><expr><call><name><name>_pPublicInterface</name><operator>-&gt;</operator><name>getHSelf</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>posInfo</name><operator>.</operator><name>flags</name></name> <operator>&amp;</operator> <name>WPF_RESTORETOMAXIMIZED</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><call><name><name>_findReplaceDlg</name><operator>.</operator><name>getHSelf</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name><operator>::</operator><name>GetWindowPlacement</name></name><argument_list>(<argument><expr><call><name><name>_findReplaceDlg</name><operator>.</operator><name>getHSelf</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>posInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name><name>nppGUI</name><operator>.</operator><name>_findWindowPos</name><operator>.</operator><name>left</name></name> <operator>=</operator> <name><name>posInfo</name><operator>.</operator><name>rcNormalPosition</name><operator>.</operator><name>left</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>nppGUI</name><operator>.</operator><name>_findWindowPos</name><operator>.</operator><name>top</name></name> <operator>=</operator> <name><name>posInfo</name><operator>.</operator><name>rcNormalPosition</name><operator>.</operator><name>top</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>nppGUI</name><operator>.</operator><name>_findWindowPos</name><operator>.</operator><name>right</name></name> <operator>=</operator> <name><name>posInfo</name><operator>.</operator><name>rcNormalPosition</name><operator>.</operator><name>right</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>nppGUI</name><operator>.</operator><name>_findWindowPos</name><operator>.</operator><name>bottom</name></name> <operator>=</operator> <name><name>posInfo</name><operator>.</operator><name>rcNormalPosition</name><operator>.</operator><name>bottom</name></name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>saveDockingParams</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name>nppParams</name><operator>.</operator><name>createXmlTreeFromGUIParams</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><literal type="boolean">true</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name><name>Notepad_plus</name><operator>::</operator><name>saveColumnEditorParams</name></name><parameter_list>()</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>NppParameters</name><modifier>&amp;</modifier></type> <name>nppParams</name> <init>= <expr><call><name><name>NppParameters</name><operator>::</operator><name>getInstance</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<return>return <expr><call><name><name>nppParams</name><operator>.</operator><name>writeColumnEditorSettings</name></name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name><name>Notepad_plus</name><operator>::</operator><name>saveProjectPanelsParams</name></name><parameter_list>()</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>NppParameters</name><modifier>&amp;</modifier></type> <name>nppParams</name> <init>= <expr><call><name><name>NppParameters</name><operator>::</operator><name>getInstance</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>_pProjectPanel_1</name></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>_pProjectPanel_1</name><operator>-&gt;</operator><name>checkIfNeedSave</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>
		<expr_stmt><expr><call><name><name>nppParams</name><operator>.</operator><name>setWorkSpaceFilePath</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name><name>_pProjectPanel_1</name><operator>-&gt;</operator><name>getWorkSpaceFilePath</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>_pProjectPanel_2</name></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>_pProjectPanel_2</name><operator>-&gt;</operator><name>checkIfNeedSave</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>
		<expr_stmt><expr><call><name><name>nppParams</name><operator>.</operator><name>setWorkSpaceFilePath</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name><name>_pProjectPanel_2</name><operator>-&gt;</operator><name>getWorkSpaceFilePath</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>_pProjectPanel_3</name></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>_pProjectPanel_3</name><operator>-&gt;</operator><name>checkIfNeedSave</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>
		<expr_stmt><expr><call><name><name>nppParams</name><operator>.</operator><name>setWorkSpaceFilePath</name></name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><call><name><name>_pProjectPanel_3</name><operator>-&gt;</operator><name>getWorkSpaceFilePath</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><call><name><name>nppParams</name><operator>.</operator><name>writeProjectPanelsSettings</name></name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name><name>Notepad_plus</name><operator>::</operator><name>saveFileBrowserParam</name></name><parameter_list>()</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>_pFileBrowser</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>generic_string</name></expr></argument>&gt;</argument_list></name></type> <name>rootPaths</name> <init>= <expr><call><name><name>_pFileBrowser</name><operator>-&gt;</operator><name>getRoots</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>generic_string</name></type> <name>selectedItemPath</name> <init>= <expr><call><name><name>_pFileBrowser</name><operator>-&gt;</operator><name>getSelectedItemPath</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<return>return <expr><operator>(</operator><call><name><name>NppParameters</name><operator>::</operator><name>getInstance</name></name><argument_list>()</argument_list></call><operator>)</operator><operator>.</operator><call><name>writeFileBrowserSettings</name><argument_list>(<argument><expr><name>rootPaths</name></expr></argument>, <argument><expr><name>selectedItemPath</name></expr></argument>)</argument_list></call></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><literal type="boolean">true</literal></expr>;</return> <comment type="line">// nothing to save so true is returned</comment>
</block_content>}</block></function>

<function><type><name>void</name></type> <name><name>Notepad_plus</name><operator>::</operator><name>saveDockingParams</name></name><parameter_list>()</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>NppGUI</name> <modifier>&amp;</modifier></type> <name>nppGUI</name> <init>= <expr><operator>(</operator><call><name><name>NppParameters</name><operator>::</operator><name>getInstance</name></name><argument_list>()</argument_list></call><operator>)</operator><operator>.</operator><call><name>getNppGUI</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

	<comment type="line">// Save the docking information</comment>
	<expr_stmt><expr><name><name>nppGUI</name><operator>.</operator><name>_dockingData</name><operator>.</operator><name>_leftWidth</name></name>		<operator>=</operator> <call><name><name>_dockingManager</name><operator>.</operator><name>getDockedContSize</name></name><argument_list>(<argument><expr><name>CONT_LEFT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>nppGUI</name><operator>.</operator><name>_dockingData</name><operator>.</operator><name>_rightWidth</name></name>		<operator>=</operator> <call><name><name>_dockingManager</name><operator>.</operator><name>getDockedContSize</name></name><argument_list>(<argument><expr><name>CONT_RIGHT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>nppGUI</name><operator>.</operator><name>_dockingData</name><operator>.</operator><name>_topHeight</name></name>		<operator>=</operator> <call><name><name>_dockingManager</name><operator>.</operator><name>getDockedContSize</name></name><argument_list>(<argument><expr><name>CONT_TOP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>nppGUI</name><operator>.</operator><name>_dockingData</name><operator>.</operator><name>_bottomHight</name></name>	<operator>=</operator> <call><name><name>_dockingManager</name><operator>.</operator><name>getDockedContSize</name></name><argument_list>(<argument><expr><name>CONT_BOTTOM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// clear the container tab information (active tab)</comment>
	<expr_stmt><expr><call><name><name>nppGUI</name><operator>.</operator><name>_dockingData</name><operator>.</operator><name>_containerTabInfo</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// create a vector to save the current information</comment>
	<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>PluginDlgDockingInfo</name></expr></argument>&gt;</argument_list></name></type>	<name>vPluginDockInfo</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>FloatingWindowInfo</name></expr></argument>&gt;</argument_list></name></type>		<name>vFloatingWindowInfo</name></decl>;</decl_stmt>

	<comment type="line">// save every container</comment>
	<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>DockingCont</name><modifier>*</modifier></expr></argument>&gt;</argument_list></name></type> <name>vCont</name> <init>= <expr><call><name><name>_dockingManager</name><operator>.</operator><name>getContainerInfo</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

	<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>len</name> <init>= <expr><call><name><name>vCont</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr> ;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
	<block>{<block_content>
		<comment type="line">// save at first the visible Tb's</comment>
		<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>tTbData</name> <modifier>*</modifier></expr></argument>&gt;</argument_list></name></type>	<name>vDataVis</name>	<init>= <expr><name><name>vCont</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><call><name>getDataOfVisTb</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

		<for>for <control>(<init><decl><type><name>size_t</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>len2</name> <init>= <expr><call><name><name>vDataVis</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>len2</name></expr> ;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control>
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name><name>vDataVis</name><index>[<expr><name>j</name></expr>]</index></name><operator>-&gt;</operator><name>pszName</name> <operator>&amp;&amp;</operator> <name><name>vDataVis</name><index>[<expr><name>j</name></expr>]</index></name><operator>-&gt;</operator><name><name>pszName</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition>
			<block>{<block_content>
				<decl_stmt><decl><type><name>PluginDlgDockingInfo</name></type> <name>pddi</name><argument_list>(<argument><expr><name><name>vDataVis</name><index>[<expr><name>j</name></expr>]</index></name><operator>-&gt;</operator><name>pszModuleName</name></expr></argument>, <argument><expr><name><name>vDataVis</name><index>[<expr><name>j</name></expr>]</index></name><operator>-&gt;</operator><name>dlgID</name></expr></argument>, <argument><expr><call><name>int32_t</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>vDataVis</name><index>[<expr><name>j</name></expr>]</index></name><operator>-&gt;</operator><name>iPrevCont</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
				<expr_stmt><expr><call><name><name>vPluginDockInfo</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>pddi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></for>

		<comment type="line">// save the hidden Tb's</comment>
		<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>tTbData</name> <modifier>*</modifier></expr></argument>&gt;</argument_list></name></type>	<name>vDataAll</name>	<init>= <expr><name><name>vCont</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><call><name>getDataOfAllTb</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

		<for>for <control>(<init><decl><type><name>size_t</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>len3</name> <init>= <expr><call><name><name>vDataAll</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>len3</name></expr> ;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control>
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>vDataAll</name><index>[<expr><name>j</name></expr>]</index></name><operator>-&gt;</operator><name>pszName</name> <operator>&amp;&amp;</operator> <name><name>vDataAll</name><index>[<expr><name>j</name></expr>]</index></name><operator>-&gt;</operator><name><name>pszName</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><name><name>vCont</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><call><name>isTbVis</name><argument_list>(<argument><expr><name><name>vDataAll</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>
			<block>{<block_content>
				<decl_stmt><decl><type><name>PluginDlgDockingInfo</name></type> <name>pddi</name><argument_list>(<argument><expr><name><name>vDataAll</name><index>[<expr><name>j</name></expr>]</index></name><operator>-&gt;</operator><name>pszModuleName</name></expr></argument>, <argument><expr><name><name>vDataAll</name><index>[<expr><name>j</name></expr>]</index></name><operator>-&gt;</operator><name>dlgID</name></expr></argument>, <argument><expr><call><name>int32_t</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>vDataAll</name><index>[<expr><name>j</name></expr>]</index></name><operator>-&gt;</operator><name>iPrevCont</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
				<expr_stmt><expr><call><name><name>vPluginDockInfo</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>pddi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></for>

		<comment type="line">// save the position, when container is a floated one</comment>
		<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;=</operator> <name>DOCKCONT_MAX</name></expr>)</condition>
		<block>{<block_content>
			<decl_stmt><decl><type><name>RECT</name></type>	<name>rc</name></decl>;</decl_stmt>
			<expr_stmt><expr><name><name>vCont</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><call><name>getWindowRect</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<decl_stmt><decl><type><name>FloatingWindowInfo</name></type> <name>fwi</name><argument_list>(<argument><expr><call><name>int32_t</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>rc</name><operator>.</operator><name>left</name></name></expr></argument>, <argument><expr><name><name>rc</name><operator>.</operator><name>top</name></name></expr></argument>, <argument><expr><name><name>rc</name><operator>.</operator><name>right</name></name></expr></argument>, <argument><expr><name><name>rc</name><operator>.</operator><name>bottom</name></name></expr></argument>)</argument_list></decl>;</decl_stmt>
			<expr_stmt><expr><call><name><name>vFloatingWindowInfo</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>fwi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<comment type="line">// save the active tab</comment>
		<decl_stmt><decl><type><name>ContainerTabInfo</name></type> <name>act</name><argument_list>(<argument><expr><call><name>int32_t</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>vCont</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><call><name>getActiveTb</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>nppGUI</name><operator>.</operator><name>_dockingData</name><operator>.</operator><name>_containerTabInfo</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>act</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>

	<comment type="line">// add the missing information and store it in nppGUI</comment>
	<decl_stmt><decl><type><name>UCHAR</name></type> <name><name>floatContArray</name><index>[<expr><literal type="number">50</literal></expr>]</index></name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>floatContArray</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">50</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>len4</name> <init>= <expr><call><name><name>nppGUI</name><operator>.</operator><name>_dockingData</name><operator>.</operator><name>_pluginDockInfo</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len4</name></expr> ;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
	<block>{<block_content>
		<decl_stmt><decl><type><name>BOOL</name></type>	<name>isStored</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
		<for>for <control>(<init><decl><type><name>size_t</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>len5</name> <init>= <expr><call><name><name>vPluginDockInfo</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>len5</name></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control>
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name><name>nppGUI</name><operator>.</operator><name>_dockingData</name><operator>.</operator><name>_pluginDockInfo</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name><name>vPluginDockInfo</name><index>[<expr><name>j</name></expr>]</index></name></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><name>isStored</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
				<break>break;</break>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></for>

		<if_stmt><if>if <condition>(<expr><name>isStored</name> <operator>==</operator> <name>FALSE</name></expr>)</condition>
		<block>{<block_content>
			<decl_stmt><decl><type><name>int</name></type> <name>floatCont</name>	<init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

			<if_stmt><if>if <condition>(<expr><name><name>nppGUI</name><operator>.</operator><name>_dockingData</name><operator>.</operator><name>_pluginDockInfo</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>_currContainer</name> <operator>&gt;=</operator> <name>DOCKCONT_MAX</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name>floatCont</name> <operator>=</operator> <name><name>nppGUI</name><operator>.</operator><name>_dockingData</name><operator>.</operator><name>_pluginDockInfo</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>_currContainer</name></expr>;</expr_stmt></block_content></block></if>
			<else>else<block type="pseudo"><block_content>
				<expr_stmt><expr><name>floatCont</name> <operator>=</operator> <name><name>nppGUI</name><operator>.</operator><name>_dockingData</name><operator>.</operator><name>_pluginDockInfo</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>_prevContainer</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

			<if_stmt><if>if <condition>(<expr><name>floatCont</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition>
			<block>{<block_content>
				<if_stmt><if>if <condition>(<expr><name><name>floatContArray</name><index>[<expr><name>floatCont</name></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
				<block>{<block_content>
					<decl_stmt><decl><type><name>RECT</name></type> <name>rc</name></decl>;</decl_stmt>
					<if_stmt><if>if <condition>(<expr><call><name><name>nppGUI</name><operator>.</operator><name>_dockingData</name><operator>.</operator><name>getFloatingRCFrom</name></name><argument_list>(<argument><expr><name>floatCont</name></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>)</condition>
					<block>{<block_content>
						<expr_stmt><expr><call><name><name>vFloatingWindowInfo</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><call><name>FloatingWindowInfo</name><argument_list>(<argument><expr><name>floatCont</name></expr></argument>, <argument><expr><name><name>rc</name><operator>.</operator><name>left</name></name></expr></argument>, <argument><expr><name><name>rc</name><operator>.</operator><name>top</name></name></expr></argument>, <argument><expr><name><name>rc</name><operator>.</operator><name>right</name></name></expr></argument>, <argument><expr><name><name>rc</name><operator>.</operator><name>bottom</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					</block_content>}</block></if></if_stmt>
					<expr_stmt><expr><name><name>floatContArray</name><index>[<expr><name>floatCont</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
				</block_content>}</block></if></if_stmt>
			</block_content>}</block></if></if_stmt>
			<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <call><name><name>nppGUI</name><operator>.</operator><name>_dockingData</name><operator>.</operator><name>_pluginDockInfo</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <comment type="line">// to prevent from crash in debug mode</comment>
				<expr_stmt><expr><call><name><name>vPluginDockInfo</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name><name>nppGUI</name><operator>.</operator><name>_dockingData</name><operator>.</operator><name>_pluginDockInfo</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>

	<expr_stmt><expr><name><name>nppGUI</name><operator>.</operator><name>_dockingData</name><operator>.</operator><name>_pluginDockInfo</name></name> <operator>=</operator> <name>vPluginDockInfo</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>nppGUI</name><operator>.</operator><name>_dockingData</name><operator>.</operator><name>_flaotingWindowInfo</name></name> <operator>=</operator> <name>vFloatingWindowInfo</name></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type> <name><name>Notepad_plus</name><operator>::</operator><name>saveUserDefineLangs</name></name><parameter_list>()</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><operator>(</operator><call><name><name>NppParameters</name><operator>::</operator><name>getInstance</name></name><argument_list>()</argument_list></call><operator>)</operator><operator>.</operator><call><name>writeNeed2SaveUDL</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type> <name><name>Notepad_plus</name><operator>::</operator><name>saveShortcuts</name></name><parameter_list>()</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name><name>NppParameters</name><operator>::</operator><name>getInstance</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>writeShortcuts</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type> <name><name>Notepad_plus</name><operator>::</operator><name>saveFindHistory</name></name><parameter_list>()</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name><name>_findReplaceDlg</name><operator>.</operator><name>saveFindHistory</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><operator>(</operator><call><name><name>NppParameters</name><operator>::</operator><name>getInstance</name></name><argument_list>()</argument_list></call><operator>)</operator><operator>.</operator><call><name>writeFindHistory</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>int</name></type> <name><name>Notepad_plus</name><operator>::</operator><name>getHtmlXmlEncoding</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>TCHAR</name> <modifier>*</modifier></type><name>fileName</name></decl></parameter>)</parameter_list> <specifier>const</specifier>
<block>{<block_content>
	<comment type="line">// Get Language type</comment>
	<decl_stmt><decl><type><name>TCHAR</name> <modifier>*</modifier></type><name>ext</name> <init>= <expr><call><name>PathFindExtension</name><argument_list>(<argument><expr><name>fileName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><operator>*</operator><name>ext</name> <operator>==</operator> <literal type="char">'.'</literal></expr>)</condition> <comment type="line">//extension found</comment>
	<block>{<block_content>
		<expr_stmt><expr><name>ext</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></else></if_stmt>
	<decl_stmt><decl><type><name>NppParameters</name><modifier>&amp;</modifier></type> <name>nppParamInst</name> <init>= <expr><call><name><name>NppParameters</name><operator>::</operator><name>getInstance</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>LangType</name></type> <name>langT</name> <init>= <expr><call><name><name>nppParamInst</name><operator>.</operator><name>getLangFromExt</name></name><argument_list>(<argument><expr><name>ext</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><operator>(</operator><name>langT</name> <operator>!=</operator> <name>L_XML</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>langT</name> <operator>!=</operator> <name>L_HTML</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

	<comment type="line">// Get the beginning of file data</comment>
	<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>f</name> <init>= <expr><call><name>_wfopen</name><argument_list>(<argument><expr><name>fileName</name></expr></argument>, <argument><expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"rb"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>f</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>blockSize</name> <init>= <expr><literal type="number">1024</literal></expr></init></decl>;</decl_stmt> <comment type="line">// To ensure that length is long enough to capture the encoding in html</comment>
	<decl_stmt><decl><type><name>char</name></type> <name><name>data</name><index>[<expr><name>blockSize</name></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>lenFile</name> <init>= <expr><call><name>fread</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>blockSize</name></expr></argument>, <argument><expr><name>f</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// Put data in _invisibleEditView</comment>
	<expr_stmt><expr><call><name><name>_invisibleEditView</name><operator>.</operator><name>execute</name></name><argument_list>(<argument><expr><name>SCI_CLEARALL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name>_invisibleEditView</name><operator>.</operator><name>execute</name></name><argument_list>(<argument><expr><name>SCI_APPENDTEXT</name></expr></argument>, <argument><expr><name>lenFile</name></expr></argument>, <argument><expr><cast type="reinterpret">reinterpret_cast<argument_list type="generic">&lt;<argument><expr><name>LPARAM</name></expr></argument>&gt;</argument_list><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></cast></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>encodingAliasRegExpr</name> <init>= <expr><literal type="string">"[a-zA-Z0-9_-]+"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>encodingStrLen</name> <init>= <expr><literal type="number">128</literal></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><name>langT</name> <operator>==</operator> <name>L_XML</name></expr>)</condition>
	<block>{<block_content>
		<comment type="line">// find encoding by RegExpr</comment>

		<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>xmlHeaderRegExpr</name> <init>= <expr><literal type="string">"&lt;?xml[ \\t]+version[ \\t]*=[ \\t]*\"[^\"]+\"[ \\t]+encoding[ \\t]*=[ \\t]*\"[^\"]+\"[ \\t]*.*?&gt;"</literal></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>size_t</name></type> <name>startPos</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>size_t</name></type> <name>endPos</name> <init>= <expr><name>lenFile</name><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>_invisibleEditView</name><operator>.</operator><name>execute</name></name><argument_list>(<argument><expr><name>SCI_SETSEARCHFLAGS</name></expr></argument>, <argument><expr><name>SCFIND_REGEXP</name><operator>|</operator><name>SCFIND_POSIX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name><name>_invisibleEditView</name><operator>.</operator><name>execute</name></name><argument_list>(<argument><expr><name>SCI_SETTARGETRANGE</name></expr></argument>, <argument><expr><name>startPos</name></expr></argument>, <argument><expr><name>endPos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<decl_stmt><decl><type><name>auto</name></type> <name>posFound</name> <init>= <expr><call><name><name>_invisibleEditView</name><operator>.</operator><name>execute</name></name><argument_list>(<argument><expr><name>SCI_SEARCHINTARGET</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>xmlHeaderRegExpr</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><cast type="reinterpret">reinterpret_cast<argument_list type="generic">&lt;<argument><expr><name>LPARAM</name></expr></argument>&gt;</argument_list><argument_list>(<argument><expr><name>xmlHeaderRegExpr</name></expr></argument>)</argument_list></cast></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if <condition>(<expr><name>posFound</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition>
		<block>{<block_content>
            <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>encodingBlockRegExpr</name> <init>= <expr><literal type="string">"encoding[ \\t]*=[ \\t]*\"[^\".]+\""</literal></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name><name>_invisibleEditView</name><operator>.</operator><name>execute</name></name><argument_list>(<argument><expr><name>SCI_SEARCHINTARGET</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>encodingBlockRegExpr</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><cast type="reinterpret">reinterpret_cast<argument_list type="generic">&lt;<argument><expr><name>LPARAM</name></expr></argument>&gt;</argument_list><argument_list>(<argument><expr><name>encodingBlockRegExpr</name></expr></argument>)</argument_list></cast></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>encodingRegExpr</name> <init>= <expr><literal type="string">"\".+\""</literal></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name><name>_invisibleEditView</name><operator>.</operator><name>execute</name></name><argument_list>(<argument><expr><name>SCI_SEARCHINTARGET</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>encodingRegExpr</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><cast type="reinterpret">reinterpret_cast<argument_list type="generic">&lt;<argument><expr><name>LPARAM</name></expr></argument>&gt;</argument_list><argument_list>(<argument><expr><name>encodingRegExpr</name></expr></argument>)</argument_list></cast></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<expr_stmt><expr><call><name><name>_invisibleEditView</name><operator>.</operator><name>execute</name></name><argument_list>(<argument><expr><name>SCI_SEARCHINTARGET</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>encodingAliasRegExpr</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><cast type="reinterpret">reinterpret_cast<argument_list type="generic">&lt;<argument><expr><name>LPARAM</name></expr></argument>&gt;</argument_list><argument_list>(<argument><expr><name>encodingAliasRegExpr</name></expr></argument>)</argument_list></cast></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><name>startPos</name> <operator>=</operator> <call><name><name>_invisibleEditView</name><operator>.</operator><name>execute</name></name><argument_list>(<argument><expr><name>SCI_GETTARGETSTART</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>endPos</name> <operator>=</operator> <call><name><name>_invisibleEditView</name><operator>.</operator><name>execute</name></name><argument_list>(<argument><expr><name>SCI_GETTARGETEND</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			
			<decl_stmt><decl><type><name>size_t</name></type> <name>len</name> <init>= <expr><name>endPos</name> <operator>-</operator> <name>startPos</name></expr></init></decl>;</decl_stmt>
			<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;=</operator> <name>encodingStrLen</name></expr>)</condition>
			<block>{<block_content>
				<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
			</block_content>}</block></if></if_stmt>

            <decl_stmt><decl><type><name>char</name></type> <name><name>encodingStr</name><index>[<expr><name>encodingStrLen</name></expr>]</index></name></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>_invisibleEditView</name><operator>.</operator><name>getText</name></name><argument_list>(<argument><expr><name>encodingStr</name></expr></argument>, <argument><expr><name>startPos</name></expr></argument>, <argument><expr><name>endPos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<decl_stmt><decl><type><name>EncodingMapper</name><modifier>&amp;</modifier></type> <name>em</name> <init>= <expr><call><name><name>EncodingMapper</name><operator>::</operator><name>getInstance</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>enc</name> <init>= <expr><call><name><name>em</name><operator>.</operator><name>getEncodingFromString</name></name><argument_list>(<argument><expr><name>encodingStr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <return>return <expr><operator>(</operator><ternary><condition><expr><name>enc</name> <operator>==</operator> <name>CP_ACP</name></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><name>enc</name></expr></else></ternary><operator>)</operator></expr>;</return>
		</block_content>}</block></if></if_stmt>
        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if>
	<else>else <comment type="line">// if (langT == L_HTML)</comment>
	<block>{<block_content>
		<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>htmlHeaderRegExpr</name>  <init>= <expr><literal type="string">"&lt;meta[ \\t]+http-equiv[ \\t]*=[ \\t\"']*Content-Type[ \\t\"']*content[ \\t]*= *[\"']text/html;[ \\t]+charset[ \\t]*=[ \\t]*.+[\"'] */*&gt;"</literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>htmlHeaderRegExpr2</name> <init>= <expr><literal type="string">"&lt;meta[ \\t]+content[ \\t]*= *[\"']text/html;[ \\t]+charset[ \\t]*=[ \\t]*.+[ \\t\"']http-equiv[ \\t]*=[ \\t\"']*Content-Type[ \\t\"']*/*&gt;"</literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>charsetBlock</name> <init>= <expr><literal type="string">"charset[ \\t]*=[ \\t]*[^\"']+"</literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>intermediaire</name> <init>= <expr><literal type="string">"=[ \\t]*.+"</literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>encodingStrRE</name> <init>= <expr><literal type="string">"[^ \\t=]+"</literal></expr></init></decl>;</decl_stmt>

		<decl_stmt><decl><type><name>intptr_t</name></type> <name>startPos</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>auto</name></type> <name>endPos</name> <init>= <expr><name>lenFile</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>_invisibleEditView</name><operator>.</operator><name>execute</name></name><argument_list>(<argument><expr><name>SCI_SETSEARCHFLAGS</name></expr></argument>, <argument><expr><name>SCFIND_REGEXP</name><operator>|</operator><name>SCFIND_POSIX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name><name>_invisibleEditView</name><operator>.</operator><name>execute</name></name><argument_list>(<argument><expr><name>SCI_SETTARGETRANGE</name></expr></argument>, <argument><expr><name>startPos</name></expr></argument>, <argument><expr><name>endPos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<decl_stmt><decl><type><name>auto</name></type> <name>posFound</name> <init>= <expr><call><name><name>_invisibleEditView</name><operator>.</operator><name>execute</name></name><argument_list>(<argument><expr><name>SCI_SEARCHINTARGET</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>htmlHeaderRegExpr</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><cast type="reinterpret">reinterpret_cast<argument_list type="generic">&lt;<argument><expr><name>LPARAM</name></expr></argument>&gt;</argument_list><argument_list>(<argument><expr><name>htmlHeaderRegExpr</name></expr></argument>)</argument_list></cast></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><name>posFound</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name>posFound</name> <operator>=</operator> <call><name><name>_invisibleEditView</name><operator>.</operator><name>execute</name></name><argument_list>(<argument><expr><name>SCI_SEARCHINTARGET</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>htmlHeaderRegExpr2</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><cast type="reinterpret">reinterpret_cast<argument_list type="generic">&lt;<argument><expr><name>LPARAM</name></expr></argument>&gt;</argument_list><argument_list>(<argument><expr><name>htmlHeaderRegExpr2</name></expr></argument>)</argument_list></cast></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>posFound</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
				<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><call><name><name>_invisibleEditView</name><operator>.</operator><name>execute</name></name><argument_list>(<argument><expr><name>SCI_SEARCHINTARGET</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>charsetBlock</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><cast type="reinterpret">reinterpret_cast<argument_list type="generic">&lt;<argument><expr><name>LPARAM</name></expr></argument>&gt;</argument_list><argument_list>(<argument><expr><name>charsetBlock</name></expr></argument>)</argument_list></cast></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>_invisibleEditView</name><operator>.</operator><name>execute</name></name><argument_list>(<argument><expr><name>SCI_SEARCHINTARGET</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>intermediaire</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><cast type="reinterpret">reinterpret_cast<argument_list type="generic">&lt;<argument><expr><name>LPARAM</name></expr></argument>&gt;</argument_list><argument_list>(<argument><expr><name>intermediaire</name></expr></argument>)</argument_list></cast></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>_invisibleEditView</name><operator>.</operator><name>execute</name></name><argument_list>(<argument><expr><name>SCI_SEARCHINTARGET</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>encodingStrRE</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><cast type="reinterpret">reinterpret_cast<argument_list type="generic">&lt;<argument><expr><name>LPARAM</name></expr></argument>&gt;</argument_list><argument_list>(<argument><expr><name>encodingStrRE</name></expr></argument>)</argument_list></cast></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>startPos</name> <operator>=</operator> <call><name><name>_invisibleEditView</name><operator>.</operator><name>execute</name></name><argument_list>(<argument><expr><name>SCI_GETTARGETSTART</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>endPos</name> <operator>=</operator> <call><name><name>_invisibleEditView</name><operator>.</operator><name>execute</name></name><argument_list>(<argument><expr><name>SCI_GETTARGETEND</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<decl_stmt><decl><type><name>size_t</name></type> <name>len</name> <init>= <expr><name>endPos</name> <operator>-</operator> <name>startPos</name></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;=</operator> <name>encodingStrLen</name></expr>)</condition>
		<block>{<block_content>
			<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
		</block_content>}</block></if></if_stmt>

        <decl_stmt><decl><type><name>char</name></type> <name><name>encodingStr</name><index>[<expr><name>encodingStrLen</name></expr>]</index></name></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>_invisibleEditView</name><operator>.</operator><name>getText</name></name><argument_list>(<argument><expr><name>encodingStr</name></expr></argument>, <argument><expr><name>startPos</name></expr></argument>, <argument><expr><name>endPos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<decl_stmt><decl><type><name>EncodingMapper</name><modifier>&amp;</modifier></type> <name>em</name> <init>= <expr><call><name><name>EncodingMapper</name><operator>::</operator><name>getInstance</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>enc</name> <init>= <expr><call><name><name>em</name><operator>.</operator><name>getEncodingFromString</name></name><argument_list>(<argument><expr><name>encodingStr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr><operator>(</operator><ternary><condition><expr><name>enc</name> <operator>==</operator> <name>CP_ACP</name></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><name>enc</name></expr></else></ternary><operator>)</operator></expr>;</return>
	</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name><name>Notepad_plus</name><operator>::</operator><name>setCodePageForInvisibleView</name></name><parameter_list>(<parameter><decl><type><name>Buffer</name> <specifier>const</specifier> <modifier>*</modifier></type><name>pBuffer</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>intptr_t</name></type> <name>detectedCp</name> <init>= <expr><call><name><name>_invisibleEditView</name><operator>.</operator><name>execute</name></name><argument_list>(<argument><expr><name>SCI_GETCODEPAGE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>intptr_t</name></type> <name>cp2set</name> <init>= <expr><name>SC_CP_UTF8</name></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><call><name><name>pBuffer</name><operator>-&gt;</operator><name>getUnicodeMode</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name>uni8Bit</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>cp2set</name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><name>detectedCp</name> <operator>==</operator> <name>SC_CP_UTF8</name></expr> ?</condition><then> <expr><name>CP_ACP</name></expr> </then><else>: <expr><name>detectedCp</name></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name><name>_invisibleEditView</name><operator>.</operator><name>execute</name></name><argument_list>(<argument><expr><name>SCI_SETCODEPAGE</name></expr></argument>, <argument><expr><name>cp2set</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name><name>Notepad_plus</name><operator>::</operator><name>replaceInOpenedFiles</name></name><parameter_list>()</parameter_list>
<block>{<block_content>

	<decl_stmt><decl><type><name>ScintillaEditView</name> <modifier>*</modifier></type><name>pOldView</name> <init>= <expr><name>_pEditView</name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name>_pEditView</name> <operator>=</operator> <operator>&amp;</operator><name>_invisibleEditView</name></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>Document</name></type> <name>oldDoc</name> <init>= <expr><call><name><name>_invisibleEditView</name><operator>.</operator><name>execute</name></name><argument_list>(<argument><expr><name>SCI_GETDOCPOINTER</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Buffer</name> <modifier>*</modifier></type> <name>oldBuf</name> <init>= <expr><call><name><name>_invisibleEditView</name><operator>.</operator><name>getCurrentBuffer</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>	<comment type="line">//for manually setting the buffer, so notifications can be handled properly</comment>

	<decl_stmt><decl><type><name>Buffer</name> <modifier>*</modifier></type> <name>pBuf</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>int</name></type> <name>nbTotal</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>isEntireDoc</name> <init>= <expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>_mainWindowStatus</name> <operator>&amp;</operator> <name>WindowMainActive</name></expr>)</condition>
    <block>{<block_content>
		<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>len</name> <init>= <expr><call><name><name>_mainDocTab</name><operator>.</operator><name>nbItem</name></name><argument_list>()</argument_list></call></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr> ;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
	    <block>{<block_content>
			<expr_stmt><expr><name>pBuf</name> <operator>=</operator> <call><name><name>MainFileManager</name><operator>.</operator><name>getBufferByID</name></name><argument_list>(<argument><expr><call><name><name>_mainDocTab</name><operator>.</operator><name>getBufferByIndex</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><call><name><name>pBuf</name><operator>-&gt;</operator><name>isReadOnly</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
				<continue>continue;</continue></block_content></block></if></if_stmt>
			<expr_stmt><expr><call><name><name>_invisibleEditView</name><operator>.</operator><name>execute</name></name><argument_list>(<argument><expr><name>SCI_SETDOCPOINTER</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name><name>pBuf</name><operator>-&gt;</operator><name>getDocument</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<expr_stmt><expr><call><name>setCodePageForInvisibleView</name><argument_list>(<argument><expr><name>pBuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<expr_stmt><expr><call><name><name>_invisibleEditView</name><operator>.</operator><name>setCurrentBuffer</name></name><argument_list>(<argument><expr><name>pBuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<expr_stmt><expr><call><name><name>_invisibleEditView</name><operator>.</operator><name>execute</name></name><argument_list>(<argument><expr><name>SCI_BEGINUNDOACTION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>nbTotal</name> <operator>+=</operator> <call><name><name>_findReplaceDlg</name><operator>.</operator><name>processAll</name></name><argument_list>(<argument><expr><name>ProcessReplaceAll</name></expr></argument>, <argument><expr><name><name>FindReplaceDlg</name><operator>::</operator><name>_env</name></name></expr></argument>, <argument><expr><name>isEntireDoc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>_invisibleEditView</name><operator>.</operator><name>execute</name></name><argument_list>(<argument><expr><name>SCI_ENDUNDOACTION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></for>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>_mainWindowStatus</name> <operator>&amp;</operator> <name>WindowSubActive</name></expr>)</condition>
	<block>{<block_content>
		<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>len</name> <init>= <expr><call><name><name>_subDocTab</name><operator>.</operator><name>nbItem</name></name><argument_list>()</argument_list></call></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
		<block>{<block_content>
			<expr_stmt><expr><name>pBuf</name> <operator>=</operator> <call><name><name>MainFileManager</name><operator>.</operator><name>getBufferByID</name></name><argument_list>(<argument><expr><call><name><name>_subDocTab</name><operator>.</operator><name>getBufferByIndex</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><call><name><name>pBuf</name><operator>-&gt;</operator><name>isReadOnly</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
				<continue>continue;</continue></block_content></block></if></if_stmt>
			<expr_stmt><expr><call><name><name>_invisibleEditView</name><operator>.</operator><name>execute</name></name><argument_list>(<argument><expr><name>SCI_SETDOCPOINTER</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name><name>pBuf</name><operator>-&gt;</operator><name>getDocument</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<expr_stmt><expr><call><name>setCodePageForInvisibleView</name><argument_list>(<argument><expr><name>pBuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<expr_stmt><expr><call><name><name>_invisibleEditView</name><operator>.</operator><name>setCurrentBuffer</name></name><argument_list>(<argument><expr><name>pBuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<expr_stmt><expr><call><name><name>_invisibleEditView</name><operator>.</operator><name>execute</name></name><argument_list>(<argument><expr><name>SCI_BEGINUNDOACTION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>nbTotal</name> <operator>+=</operator> <call><name><name>_findReplaceDlg</name><operator>.</operator><name>processAll</name></name><argument_list>(<argument><expr><name>ProcessReplaceAll</name></expr></argument>, <argument><expr><name><name>FindReplaceDlg</name><operator>::</operator><name>_env</name></name></expr></argument>, <argument><expr><name>isEntireDoc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>_invisibleEditView</name><operator>.</operator><name>execute</name></name><argument_list>(<argument><expr><name>SCI_ENDUNDOACTION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></for>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name><name>_invisibleEditView</name><operator>.</operator><name>execute</name></name><argument_list>(<argument><expr><name>SCI_SETDOCPOINTER</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>oldDoc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name>_invisibleEditView</name><operator>.</operator><name>setCurrentBuffer</name></name><argument_list>(<argument><expr><name>oldBuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_pEditView</name> <operator>=</operator> <name>pOldView</name></expr>;</expr_stmt>


	<if_stmt><if>if <condition>(<expr><name>nbTotal</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>generic_string</name></type> <name>msg</name> <init>= <expr><call><name><name>_nativeLangSpeaker</name><operator>.</operator><name>getLocalizedStrFromID</name></name><argument_list>(<argument><expr><literal type="string">"find-status-replaceinfiles-re-malformed"</literal></expr></argument>, <argument><expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"Replace in Opened Files: The regular expression is malformed."</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>_findReplaceDlg</name><operator>.</operator><name>setStatusbarMessage</name></name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><name>FSNotFound</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>nbTotal</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>enableCommand</name><argument_list>(<argument><expr><name>IDM_FILE_SAVEALL</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><name>MENU</name> <operator>|</operator> <name>TOOLBAR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<decl_stmt><decl><type><name>generic_string</name></type> <name>result</name></decl>;</decl_stmt>
		<if_stmt><if>if <condition>(<expr><name>nbTotal</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name><name>_nativeLangSpeaker</name><operator>.</operator><name>getLocalizedStrFromID</name></name><argument_list>(<argument><expr><literal type="string">"find-status-replaceinopenedfiles-1-replaced"</literal></expr></argument>, <argument><expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"Replace in Opened Files: 1 occurrence was replaced."</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if>
		<else>else
		<block>{<block_content>
			<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name><name>_nativeLangSpeaker</name><operator>.</operator><name>getLocalizedStrFromID</name></name><argument_list>(<argument><expr><literal type="string">"find-status-replaceinopenedfiles-nb-replaced"</literal></expr></argument>, <argument><expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"Replace in Opened Files: $INT_REPLACE$ occurrences were replaced."</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>stringReplace</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"$INT_REPLACE$"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>std</name><operator>::</operator><name>to_wstring</name></name><argument_list>(<argument><expr><name>nbTotal</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
		<expr_stmt><expr><call><name><name>_findReplaceDlg</name><operator>.</operator><name>setStatusbarMessage</name></name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><name>FSMessage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
	<return>return <expr><literal type="boolean">true</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name><name>Notepad_plus</name><operator>::</operator><name>wsTabConvert</name></name><parameter_list>(<parameter><decl><type><name>spaceTab</name></type> <name>whichWay</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="line">// block selection is not supported</comment>
	<if_stmt><if>if <condition>(<expr><operator>(</operator><call><name><name>_pEditView</name><operator>-&gt;</operator><name>execute</name></name><argument_list>(<argument><expr><name>SCI_GETSELECTIONMODE</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>SC_SEL_RECTANGLE</name><operator>)</operator> <operator>||</operator> <operator>(</operator><call><name><name>_pEditView</name><operator>-&gt;</operator><name>execute</name></name><argument_list>(<argument><expr><name>SCI_GETSELECTIONMODE</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>SC_SEL_THIN</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
		<return>return;</return></block_content></block></if></if_stmt>

	<decl_stmt><decl><type><name>intptr_t</name></type> <name>tabWidth</name> <init>= <expr><call><name><name>_pEditView</name><operator>-&gt;</operator><name>execute</name></name><argument_list>(<argument><expr><name>SCI_GETTABWIDTH</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>intptr_t</name></type> <name>currentPos</name> <init>= <expr><call><name><name>_pEditView</name><operator>-&gt;</operator><name>execute</name></name><argument_list>(<argument><expr><name>SCI_GETCURRENTPOS</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>intptr_t</name></type> <name>currentLine</name> <init>= <expr><call><name><name>_pEditView</name><operator>-&gt;</operator><name>execute</name></name><argument_list>(<argument><expr><name>SCI_LINEFROMPOSITION</name></expr></argument>, <argument><expr><name>currentPos</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>intptr_t</name></type> <name>currentPosInLine</name> <init>= <expr><name>currentPos</name> <operator>-</operator> <call><name><name>_pEditView</name><operator>-&gt;</operator><name>execute</name></name><argument_list>(<argument><expr><name>SCI_POSITIONFROMLINE</name></expr></argument>, <argument><expr><name>currentLine</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>intptr_t</name></type> <name>startLine</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>intptr_t</name></type> <name>endLine</name> <init>= <expr><call><name><name>_pEditView</name><operator>-&gt;</operator><name>lastZeroBasedLineNumber</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>intptr_t</name></type> <name>endLineCorrect</name> <init>= <expr><name>endLine</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>intptr_t</name></type> <name>dataLength</name> <init>= <expr><call><name><name>_pEditView</name><operator>-&gt;</operator><name>execute</name></name><argument_list>(<argument><expr><name>SCI_GETLENGTH</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>intptr_t</name></type> <name>mainSelAnchor</name> <init>= <expr><call><name><name>_pEditView</name><operator>-&gt;</operator><name>execute</name></name><argument_list>(<argument><expr><name>SCI_GETANCHOR</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name>isEntireDoc</name> <init>= <expr><operator>(</operator><name>mainSelAnchor</name> <operator>==</operator> <name>currentPos</name><operator>)</operator></expr></init></decl>;</decl_stmt>

	<comment type="line">// restore original selection if nothing has changed</comment>
	<decl_stmt><decl><type><name>auto</name></type> <name>restoreSelection</name> <init>= <expr><lambda><capture>[<argument><name>this</name></argument>, <argument><name>mainSelAnchor</name></argument>, <argument><name>currentPos</name></argument>, <argument><name>isEntireDoc</name></argument>]</capture><parameter_list>()</parameter_list>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><name>isEntireDoc</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name><name>_pEditView</name><operator>-&gt;</operator><name>execute</name></name><argument_list>(<argument><expr><name>SCI_SETANCHOR</name></expr></argument>, <argument><expr><name>mainSelAnchor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>_pEditView</name><operator>-&gt;</operator><name>execute</name></name><argument_list>(<argument><expr><name>SCI_SETCURRENTPOS</name></expr></argument>, <argument><expr><name>currentPos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></lambda></expr></init></decl>;</decl_stmt>

	<comment type="line">// auto-expand of partially selected lines</comment>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>isEntireDoc</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>intptr_t</name></type> <name>startPos</name> <init>= <expr><call><name><name>_pEditView</name><operator>-&gt;</operator><name>execute</name></name><argument_list>(<argument><expr><name>SCI_GETSELECTIONSTART</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name>startLine</name> <operator>=</operator> <call><name><name>_pEditView</name><operator>-&gt;</operator><name>execute</name></name><argument_list>(<argument><expr><name>SCI_LINEFROMPOSITION</name></expr></argument>, <argument><expr><name>startPos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<decl_stmt><decl><type><name>intptr_t</name></type> <name>endPos</name> <init>= <expr><call><name><name>_pEditView</name><operator>-&gt;</operator><name>execute</name></name><argument_list>(<argument><expr><name>SCI_GETSELECTIONEND</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name>endLine</name> <operator>=</operator> <name>endLineCorrect</name> <operator>=</operator> <call><name><name>_pEditView</name><operator>-&gt;</operator><name>execute</name></name><argument_list>(<argument><expr><name>SCI_LINEFROMPOSITION</name></expr></argument>, <argument><expr><name>endPos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name>startPos</name> <operator>!=</operator> <call><name><name>_pEditView</name><operator>-&gt;</operator><name>execute</name></name><argument_list>(<argument><expr><name>SCI_POSITIONFROMLINE</name></expr></argument>, <argument><expr><name>startLine</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>startPos</name> <operator>=</operator> <call><name><name>_pEditView</name><operator>-&gt;</operator><name>execute</name></name><argument_list>(<argument><expr><name>SCI_POSITIONFROMLINE</name></expr></argument>, <argument><expr><name>startLine</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><name>endPos</name> <operator>==</operator> <call><name><name>_pEditView</name><operator>-&gt;</operator><name>execute</name></name><argument_list>(<argument><expr><name>SCI_POSITIONFROMLINE</name></expr></argument>, <argument><expr><name>endLine</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>endLineCorrect</name> <operator>=</operator> <name>endLine</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
		<if type="elseif">else if <condition>(<expr><name>endPos</name> <operator>&lt;</operator> <call><name><name>_pEditView</name><operator>-&gt;</operator><name>execute</name></name><argument_list>(<argument><expr><name>SCI_GETLINEENDPOSITION</name></expr></argument>, <argument><expr><name>endLine</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>endPos</name> <operator>=</operator> <call><name><name>_pEditView</name><operator>-&gt;</operator><name>execute</name></name><argument_list>(<argument><expr><name>SCI_GETLINEENDPOSITION</name></expr></argument>, <argument><expr><name>endLine</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<expr_stmt><expr><name>dataLength</name> <operator>=</operator> <name>endPos</name> <operator>-</operator> <name>startPos</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>_pEditView</name><operator>-&gt;</operator><name>execute</name></name><argument_list>(<argument><expr><name>SCI_SETSEL</name></expr></argument>, <argument><expr><name>startPos</name></expr></argument>, <argument><expr><name>endPos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>dataLength</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>restoreSelection</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<decl_stmt><decl><type><name>intptr_t</name></type> <name>changeDataCount</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>intptr_t</name></type> <name>newCurrentPos</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>intptr_t</name></expr></argument>&gt;</argument_list></name></type> <name>folding</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name><name>_pEditView</name><operator>-&gt;</operator><name>execute</name></name><argument_list>(<argument><expr><name>SCI_BEGINUNDOACTION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<for>for <control>(<init><decl><type><name>intptr_t</name></type> <name>idx</name> <init>= <expr><name>startLine</name></expr></init></decl>;</init> <condition><expr><name>idx</name> <operator>&lt;</operator> <name>endLineCorrect</name> <operator>+</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><operator>++</operator><name>idx</name></expr></incr>)</control>
	<block>{<block_content>
		<decl_stmt><decl><type><name>intptr_t</name></type> <name>startPos</name> <init>= <expr><call><name><name>_pEditView</name><operator>-&gt;</operator><name>execute</name></name><argument_list>(<argument><expr><name>SCI_POSITIONFROMLINE</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>intptr_t</name></type> <name>endPos</name> <init>= <expr><call><name><name>_pEditView</name><operator>-&gt;</operator><name>execute</name></name><argument_list>(<argument><expr><name>SCI_GETLINEENDPOSITION</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name>dataLength</name> <operator>=</operator> <name>endPos</name> <operator>-</operator> <name>startPos</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

		<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type> <name>source</name> <init>= <expr><operator>new</operator> <name><name>char</name><index>[<expr><name>dataLength</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if <condition>(<expr><name>source</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
			<continue>continue;</continue></block_content></block></if></if_stmt>

		<expr_stmt><expr><name><name>source</name><index>[<expr><name>dataLength</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt> <comment type="line">// make sure to have correct data termination</comment>
		<expr_stmt><expr><call><name><name>_pEditView</name><operator>-&gt;</operator><name>execute</name></name><argument_list>(<argument><expr><name>SCI_SETTARGETRANGE</name></expr></argument>, <argument><expr><name>startPos</name></expr></argument>, <argument><expr><name>endPos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>_pEditView</name><operator>-&gt;</operator><name>execute</name></name><argument_list>(<argument><expr><name>SCI_GETTARGETTEXT</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><cast type="reinterpret">reinterpret_cast<argument_list type="generic">&lt;<argument><expr><name>LPARAM</name></expr></argument>&gt;</argument_list><argument_list>(<argument><expr><name>source</name></expr></argument>)</argument_list></cast></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<decl_stmt><decl><type><name>intptr_t</name></type> <name>count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>intptr_t</name></type> <name>column</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>intptr_t</name></type> <name>tabStop</name> <init>= <expr><name>tabWidth</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>   <comment type="line">// remember, counting from zero !</comment>
		<decl_stmt><decl><type><name>bool</name></type> <name>onlyLeading</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><name>whichWay</name> <operator>==</operator> <name>tab2Space</name></expr>)</condition>
		<block>{<block_content>
			<comment type="line">// count how many tabs are there</comment>
			<for>for <control>(<init><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>ch</name> <init>= <expr><name>source</name></expr></init></decl>;</init> <condition><expr><operator>*</operator><name>ch</name></expr>;</condition> <incr><expr><operator>++</operator><name>ch</name></expr></incr>)</control>
			<block>{<block_content>
				<if_stmt><if>if <condition>(<expr><operator>*</operator><name>ch</name> <operator>==</operator> <literal type="char">'\t'</literal></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><operator>++</operator><name>count</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
			</block_content>}</block></for>
			<if_stmt><if>if <condition>(<expr><name>count</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><operator>delete</operator> <index>[]</index> <name>source</name></expr>;</expr_stmt>
				<continue>continue;</continue>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></if></if_stmt>
		<comment type="line">// allocate tabwidth-1 chars extra per tab, just to be safe</comment>
		<decl_stmt><decl><type><name>size_t</name></type> <name>newLen</name> <init>= <expr><name>dataLength</name> <operator>+</operator> <name>count</name> <operator>*</operator> <operator>(</operator><name>tabWidth</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type> <name>destination</name> <init>= <expr><operator>new</operator> <name><name>char</name><index>[<expr><name>newLen</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if <condition>(<expr><name>destination</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><operator>delete</operator> <index>[]</index> <name>source</name></expr>;</expr_stmt>
			<continue>continue;</continue>
		</block_content>}</block></if></if_stmt>
		<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type> <name>dest</name> <init>= <expr><name>destination</name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>intptr_t</name></type> <name>changeDataLineCount</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

		<switch>switch <condition>(<expr><name>whichWay</name></expr>)</condition>
		<block>{<block_content>
			<case>case <expr><name>tab2Space</name></expr>:</case>
			<block>{<block_content>
				<comment type="line">// rip through each line of the file</comment>
				<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name><name>source</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
				<block>{<block_content>
					<if_stmt><if>if <condition>(<expr><name><name>source</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'\t'</literal></expr>)</condition>
					<block>{<block_content>
						<decl_stmt><decl><type><name>intptr_t</name></type> <name>insertTabs</name> <init>= <expr><name>tabWidth</name> <operator>-</operator> <operator>(</operator><name>column</name> <operator>%</operator> <name>tabWidth</name><operator>)</operator></expr></init></decl>;</decl_stmt>
						<for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>insertTabs</name></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control>
						<block>{<block_content>
							<expr_stmt><expr><operator>*</operator><name>dest</name><operator>++</operator> <operator>=</operator> <literal type="char">' '</literal></expr>;</expr_stmt>
							<expr_stmt><expr><name>changeDataCount</name><operator>++</operator></expr>;</expr_stmt>
							<expr_stmt><expr><name>changeDataLineCount</name><operator>++</operator></expr>;</expr_stmt>
							<if_stmt><if>if <condition>(<expr><name>idx</name> <operator>==</operator> <name>currentLine</name> <operator>&amp;&amp;</operator> <name>i</name> <operator>&lt;</operator> <name>currentPosInLine</name></expr>)</condition><block type="pseudo"><block_content>
								<expr_stmt><expr><operator>++</operator><name>newCurrentPos</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
						</block_content>}</block></for>
						<expr_stmt><expr><name>column</name> <operator>+=</operator> <name>insertTabs</name></expr>;</expr_stmt>
					</block_content>}</block></if>
					<else>else
					<block>{<block_content>
						<expr_stmt><expr><operator>*</operator><name>dest</name><operator>++</operator> <operator>=</operator> <name><name>source</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
						<if_stmt><if>if <condition>(<expr><name>idx</name> <operator>==</operator> <name>currentLine</name> <operator>&amp;&amp;</operator> <name>i</name> <operator>&lt;</operator> <name>currentPosInLine</name></expr>)</condition><block type="pseudo"><block_content>
							<expr_stmt><expr><operator>++</operator><name>newCurrentPos</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
						<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>source</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'\n'</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>source</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'\r'</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
							<expr_stmt><expr><name>column</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>
						<if type="elseif">else if <condition>(<expr><operator>(</operator><name><name>source</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xC0</literal><operator>)</operator> <operator>!=</operator> <literal type="number">0x80</literal></expr>)</condition><block type="pseudo"><block_content>  <comment type="line">// UTF_8 support: count only bytes that don't start with 10......</comment>
							<expr_stmt><expr><operator>++</operator><name>column</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
					</block_content>}</block></else></if_stmt>
				</block_content>}</block></for>
				<expr_stmt><expr><operator>*</operator><name>dest</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
				<break>break;</break>
			</block_content>}</block>
			<case>case <expr><name>space2TabLeading</name></expr>:</case>
			<block>{<block_content>
				<expr_stmt><expr><name>onlyLeading</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
			</block_content>}</block>
			<attribute>[[<expr><name>fallthrough</name></expr>]]</attribute><empty_stmt>;</empty_stmt>
			<case>case <expr><name>space2TabAll</name></expr>:</case>
			<block>{<block_content>
				<decl_stmt><decl><type><name>bool</name></type> <name>nextChar</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>int</name></type> <name>counter</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>bool</name></type> <name>nonSpaceFound</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
				<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name><name>source</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
				<block>{<block_content>
					<if_stmt><if>if <condition>(<expr><name>nonSpaceFound</name> <operator>==</operator> <literal type="boolean">false</literal></expr>)</condition>
					<block>{<block_content>
						<while>while <condition>(<expr><name><name>source</name><index>[<expr><name>i</name> <operator>+</operator> <name>counter</name></expr>]</index></name> <operator>==</operator> <literal type="char">' '</literal></expr>)</condition>
						<block>{<block_content>
							<if_stmt><if>if <condition>(<expr><operator>(</operator><name>column</name> <operator>+</operator> <name>counter</name><operator>)</operator> <operator>==</operator> <name>tabStop</name></expr>)</condition>
							<block>{<block_content>
								<expr_stmt><expr><name>tabStop</name> <operator>+=</operator> <name>tabWidth</name></expr>;</expr_stmt>
								<if_stmt><if>if <condition>(<expr><name>counter</name> <operator>&gt;=</operator> <literal type="number">1</literal></expr>)</condition>        <comment type="line">// counter is counted from 0, so counter &gt;= max-1</comment>
								<block>{<block_content>
									<expr_stmt><expr><operator>*</operator><name>dest</name><operator>++</operator> <operator>=</operator> <literal type="char">'\t'</literal></expr>;</expr_stmt>
									<expr_stmt><expr><name>changeDataCount</name><operator>++</operator></expr>;</expr_stmt>
									<expr_stmt><expr><name>changeDataLineCount</name><operator>++</operator></expr>;</expr_stmt>
									<expr_stmt><expr><name>i</name> <operator>+=</operator> <name>counter</name></expr>;</expr_stmt>
									<expr_stmt><expr><name>column</name> <operator>+=</operator> <name>counter</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
									<expr_stmt><expr><name>counter</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
									<expr_stmt><expr><name>nextChar</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
									<if_stmt><if>if <condition>(<expr><name>idx</name> <operator>==</operator> <name>currentLine</name> <operator>&amp;&amp;</operator> <name>i</name> <operator>&lt;=</operator> <name>currentPosInLine</name></expr>)</condition><block type="pseudo"><block_content>
										<expr_stmt><expr><operator>++</operator><name>newCurrentPos</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
									<break>break;</break>
								</block_content>}</block></if>
								<if type="elseif">else if <condition>(<expr><name><name>source</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">' '</literal> <operator>||</operator> <name><name>source</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\t'</literal></expr>)</condition>  <comment type="line">// if followed by space or TAB, convert even a single space to TAB</comment>
								<block>{<block_content>
									<expr_stmt><expr><operator>*</operator><name>dest</name><operator>++</operator> <operator>=</operator> <literal type="char">'\t'</literal></expr>;</expr_stmt>
									<expr_stmt><expr><name>changeDataCount</name><operator>++</operator></expr>;</expr_stmt>
									<expr_stmt><expr><name>changeDataLineCount</name><operator>++</operator></expr>;</expr_stmt>
									<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
									<expr_stmt><expr><name>column</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
									<expr_stmt><expr><name>counter</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
									<if_stmt><if>if <condition>(<expr><name>idx</name> <operator>==</operator> <name>currentLine</name> <operator>&amp;&amp;</operator> <name>i</name> <operator>&lt;=</operator> <name>currentPosInLine</name></expr>)</condition><block type="pseudo"><block_content>
										<expr_stmt><expr><operator>++</operator><name>newCurrentPos</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
								</block_content>}</block></if>
								<else>else       <comment type="line">// single space, don't convert it to TAB</comment>
								<block>{<block_content>
									<expr_stmt><expr><operator>*</operator><name>dest</name><operator>++</operator> <operator>=</operator> <name><name>source</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
									<expr_stmt><expr><name>column</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
									<expr_stmt><expr><name>counter</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
									<expr_stmt><expr><name>nextChar</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
									<if_stmt><if>if <condition>(<expr><name>idx</name> <operator>==</operator> <name>currentLine</name> <operator>&amp;&amp;</operator> <name>i</name> <operator>&lt;=</operator> <name>currentPosInLine</name></expr>)</condition><block type="pseudo"><block_content>
										<expr_stmt><expr><operator>++</operator><name>newCurrentPos</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
									<break>break;</break>
								</block_content>}</block></else></if_stmt>
							</block_content>}</block></if>
							<else>else<block type="pseudo"><block_content>
								<expr_stmt><expr><operator>++</operator><name>counter</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
						</block_content>}</block></while>

						<if_stmt><if>if <condition>(<expr><name>nextChar</name> <operator>==</operator> <literal type="boolean">true</literal></expr>)</condition>
						<block>{<block_content>
							<expr_stmt><expr><name>nextChar</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
							<continue>continue;</continue>
						</block_content>}</block></if></if_stmt>

						<if_stmt><if>if <condition>(<expr><name><name>source</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">' '</literal> <operator>&amp;&amp;</operator> <name><name>source</name><index>[<expr><name>i</name> <operator>+</operator> <name>counter</name></expr>]</index></name> <operator>==</operator> <literal type="char">'\t'</literal></expr>)</condition> <comment type="line">// spaces "absorbed" by a TAB on the right</comment>
						<block>{<block_content>
							<expr_stmt><expr><operator>*</operator><name>dest</name><operator>++</operator> <operator>=</operator> <literal type="char">'\t'</literal></expr>;</expr_stmt>
							<expr_stmt><expr><name>changeDataCount</name><operator>++</operator></expr>;</expr_stmt>
							<expr_stmt><expr><name>changeDataLineCount</name><operator>++</operator></expr>;</expr_stmt>
							<expr_stmt><expr><name>i</name> <operator>+=</operator> <name>counter</name></expr>;</expr_stmt>
							<expr_stmt><expr><name>column</name> <operator>=</operator> <name>tabStop</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
							<expr_stmt><expr><name>tabStop</name> <operator>+=</operator> <name>tabWidth</name></expr>;</expr_stmt>
							<expr_stmt><expr><name>counter</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
							<if_stmt><if>if <condition>(<expr><name>idx</name> <operator>==</operator> <name>currentLine</name> <operator>&amp;&amp;</operator> <name>i</name> <operator>&lt;=</operator> <name>currentPosInLine</name></expr>)</condition><block type="pseudo"><block_content>
								<expr_stmt><expr><operator>++</operator><name>newCurrentPos</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
							<continue>continue;</continue>
						</block_content>}</block></if></if_stmt>
					</block_content>}</block></if></if_stmt>

					<if_stmt><if>if <condition>(<expr><name>onlyLeading</name> <operator>==</operator> <literal type="boolean">true</literal> <operator>&amp;&amp;</operator> <name>nonSpaceFound</name> <operator>==</operator> <literal type="boolean">false</literal></expr>)</condition><block type="pseudo"><block_content>
						<expr_stmt><expr><name>nonSpaceFound</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

					<if_stmt><if>if <condition>(<expr><name><name>source</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'\n'</literal> <operator>||</operator> <name><name>source</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'\r'</literal></expr>)</condition>
					<block>{<block_content>
						<expr_stmt><expr><operator>*</operator><name>dest</name><operator>++</operator> <operator>=</operator> <name><name>source</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
						<expr_stmt><expr><name>column</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
						<expr_stmt><expr><name>tabStop</name> <operator>=</operator> <name>tabWidth</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
						<expr_stmt><expr><name>nonSpaceFound</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
					</block_content>}</block></if>
					<if type="elseif">else if <condition>(<expr><name><name>source</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'\t'</literal></expr>)</condition>
					<block>{<block_content>
						<expr_stmt><expr><operator>*</operator><name>dest</name><operator>++</operator> <operator>=</operator> <name><name>source</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
						<expr_stmt><expr><name>column</name> <operator>=</operator> <name>tabStop</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
						<expr_stmt><expr><name>tabStop</name> <operator>+=</operator> <name>tabWidth</name></expr>;</expr_stmt>
						<expr_stmt><expr><name>counter</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
					</block_content>}</block></if>
					<else>else
					<block>{<block_content>
						<expr_stmt><expr><operator>*</operator><name>dest</name><operator>++</operator> <operator>=</operator> <name><name>source</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
						<expr_stmt><expr><name>counter</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
						<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>source</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xC0</literal><operator>)</operator> <operator>!=</operator> <literal type="number">0x80</literal></expr>)</condition>   <comment type="line">// UTF_8 support: count only bytes that don't start with 10......</comment>
						<block>{<block_content>
							<expr_stmt><expr><operator>++</operator><name>column</name></expr>;</expr_stmt>

							<if_stmt><if>if <condition>(<expr><name>column</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>column</name> <operator>%</operator> <name>tabWidth</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
								<expr_stmt><expr><name>tabStop</name> <operator>+=</operator> <name>tabWidth</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
						</block_content>}</block></if></if_stmt>
					</block_content>}</block></else></if_stmt>

					<if_stmt><if>if <condition>(<expr><name>idx</name> <operator>==</operator> <name>currentLine</name> <operator>&amp;&amp;</operator> <name>i</name> <operator>&lt;</operator> <name>currentPosInLine</name></expr>)</condition><block type="pseudo"><block_content>
						<expr_stmt><expr><operator>++</operator><name>newCurrentPos</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
				</block_content>}</block></for>
				<expr_stmt><expr><operator>*</operator><name>dest</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
				<break>break;</break>
			</block_content>}</block>
		</block_content>}</block></switch>

		<if_stmt><if>if <condition>(<expr><operator>(</operator><call><name><name>_pEditView</name><operator>-&gt;</operator><name>execute</name></name><argument_list>(<argument><expr><name>SCI_GETFOLDLEVEL</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <name>SC_FOLDLEVELHEADERFLAG</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
			<if_stmt><if>if <condition>(<expr><call><name><name>_pEditView</name><operator>-&gt;</operator><name>execute</name></name><argument_list>(<argument><expr><name>SCI_GETFOLDEXPANDED</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name><name>folding</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><name>changeDataLineCount</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name><name>_pEditView</name><operator>-&gt;</operator><name>execute</name></name><argument_list>(<argument><expr><name>SCI_REPLACETARGET</name></expr></argument>, <argument><expr><cast type="static">static_cast<argument_list type="generic">&lt;<argument><expr><name>WPARAM</name></expr></argument>&gt;</argument_list><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></cast></expr></argument>, <argument><expr><cast type="reinterpret">reinterpret_cast<argument_list type="generic">&lt;<argument><expr><name>LPARAM</name></expr></argument>&gt;</argument_list><argument_list>(<argument><expr><name>destination</name></expr></argument>)</argument_list></cast></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<comment type="line">// clean up</comment>
		<expr_stmt><expr><operator>delete</operator> <index>[]</index> <name>source</name></expr>;</expr_stmt>
		<expr_stmt><expr><operator>delete</operator> <index>[]</index> <name>destination</name></expr>;</expr_stmt>
	
	</block_content>}</block></for>

	<expr_stmt><expr><call><name><name>_pEditView</name><operator>-&gt;</operator><name>execute</name></name><argument_list>(<argument><expr><name>SCI_ENDUNDOACTION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>changeDataCount</name></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><name>isEntireDoc</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name><name>_pEditView</name><operator>-&gt;</operator><name>execute</name></name><argument_list>(<argument><expr><name>SCI_SETSEL</name></expr></argument>, <argument><expr><call><name><name>_pEditView</name><operator>-&gt;</operator><name>execute</name></name><argument_list>(<argument><expr><name>SCI_POSITIONFROMLINE</name></expr></argument>, <argument><expr><name>startLine</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><ternary><condition><expr><name>endLineCorrect</name> <operator>!=</operator> <name>endLine</name></expr> ?</condition><then> <expr><call><name><name>_pEditView</name><operator>-&gt;</operator><name>execute</name></name><argument_list>(<argument><expr><name>SCI_POSITIONFROMLINE</name></expr></argument>, <argument><expr><name>endLine</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><call><name><name>_pEditView</name><operator>-&gt;</operator><name>execute</name></name><argument_list>(<argument><expr><name>SCI_GETLINEENDPOSITION</name></expr></argument>, <argument><expr><name>endLine</name></expr></argument>)</argument_list></call></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><call><name><name>_pEditView</name><operator>-&gt;</operator><name>execute</name></name><argument_list>(<argument><expr><name>SCI_GOTOPOS</name></expr></argument>, <argument><expr><call><name><name>_pEditView</name><operator>-&gt;</operator><name>execute</name></name><argument_list>(<argument><expr><name>SCI_POSITIONFROMLINE</name></expr></argument>, <argument><expr><name>currentLine</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>newCurrentPos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

		<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>folding</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name><name>_pEditView</name><operator>-&gt;</operator><name>fold</name></name><argument_list>(<argument><expr><name><name>folding</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
	</block_content>}</block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>restoreSelection</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name><name>Notepad_plus</name><operator>::</operator><name>doTrim</name></name><parameter_list>(<parameter><decl><type><name>trimOp</name></type> <name>whichPart</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="line">// whichPart : line head or line tail or line both</comment>
	<decl_stmt><decl><type><name>FindOption</name></type> <name>env</name></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><name>whichPart</name> <operator>==</operator> <name>lineHeader</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name><name>env</name><operator>.</operator><name>_str2Search</name></name> <operator>=</operator> <call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"^[\\t ]+"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><name>whichPart</name> <operator>==</operator> <name>lineTail</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name><name>env</name><operator>.</operator><name>_str2Search</name></name> <operator>=</operator> <call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"[\\t ]+$"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><name>whichPart</name> <operator>==</operator> <name>lineBoth</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name><name>env</name><operator>.</operator><name>_str2Search</name></name> <operator>=</operator> <call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"^[\\t ]+|[\\t ]+$"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else<block type="pseudo"><block_content>
		<return>return;</return></block_content></block></else></if_stmt>
	<expr_stmt><expr><name><name>env</name><operator>.</operator><name>_str4Replace</name></name> <operator>=</operator> <call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>env</name><operator>.</operator><name>_searchType</name></name> <operator>=</operator> <name>FindRegex</name></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>auto</name></type> <name>mainSelAnchor</name> <init>= <expr><call><name><name>_pEditView</name><operator>-&gt;</operator><name>execute</name></name><argument_list>(<argument><expr><name>SCI_GETANCHOR</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>auto</name></type> <name>mainSelCaretPos</name> <init>= <expr><call><name><name>_pEditView</name><operator>-&gt;</operator><name>execute</name></name><argument_list>(<argument><expr><name>SCI_GETCURRENTPOS</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name>isEntireDoc</name> <init>= <expr><operator>(</operator><name>mainSelAnchor</name> <operator>==</operator> <name>mainSelCaretPos</name><operator>)</operator></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>auto</name></type> <name>docLength</name> <init>= <expr><call><name><name>_pEditView</name><operator>-&gt;</operator><name>execute</name></name><argument_list>(<argument><expr><name>SCI_GETLENGTH</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<comment type="line">// block selection is not supported</comment>
	<if_stmt><if>if <condition>(<expr><operator>(</operator><call><name><name>_pEditView</name><operator>-&gt;</operator><name>execute</name></name><argument_list>(<argument><expr><name>SCI_GETSELECTIONMODE</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>SC_SEL_RECTANGLE</name><operator>)</operator> <operator>||</operator> <operator>(</operator><call><name><name>_pEditView</name><operator>-&gt;</operator><name>execute</name></name><argument_list>(<argument><expr><name>SCI_GETSELECTIONMODE</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>SC_SEL_THIN</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
		<return>return;</return></block_content></block></if></if_stmt>

	<comment type="line">// auto-expand of partially selected lines</comment>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>isEntireDoc</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name><name>env</name><operator>.</operator><name>_isInSelection</name></name> <operator>=</operator> <operator>!</operator><name>isEntireDoc</name></expr>;</expr_stmt>
		<decl_stmt><decl><type><name>auto</name></type> <name>startPos</name> <init>= <expr><call><name><name>_pEditView</name><operator>-&gt;</operator><name>execute</name></name><argument_list>(<argument><expr><name>SCI_GETSELECTIONSTART</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>auto</name></type> <name>startLine</name> <init>= <expr><call><name><name>_pEditView</name><operator>-&gt;</operator><name>execute</name></name><argument_list>(<argument><expr><name>SCI_LINEFROMPOSITION</name></expr></argument>, <argument><expr><name>startPos</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>auto</name></type> <name>endPos</name> <init>= <expr><call><name><name>_pEditView</name><operator>-&gt;</operator><name>execute</name></name><argument_list>(<argument><expr><name>SCI_GETSELECTIONEND</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>auto</name></type> <name>endLine</name> <init>= <expr><call><name><name>_pEditView</name><operator>-&gt;</operator><name>execute</name></name><argument_list>(<argument><expr><name>SCI_LINEFROMPOSITION</name></expr></argument>, <argument><expr><name>endPos</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><name>startPos</name> <operator>!=</operator> <call><name><name>_pEditView</name><operator>-&gt;</operator><name>execute</name></name><argument_list>(<argument><expr><name>SCI_POSITIONFROMLINE</name></expr></argument>, <argument><expr><name>startLine</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>startPos</name> <operator>=</operator> <call><name><name>_pEditView</name><operator>-&gt;</operator><name>execute</name></name><argument_list>(<argument><expr><name>SCI_POSITIONFROMLINE</name></expr></argument>, <argument><expr><name>startLine</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><name>endPos</name> <operator>!=</operator> <call><name><name>_pEditView</name><operator>-&gt;</operator><name>execute</name></name><argument_list>(<argument><expr><name>SCI_POSITIONFROMLINE</name></expr></argument>, <argument><expr><name>endLine</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>endPos</name> <operator>&lt;</operator> <call><name><name>_pEditView</name><operator>-&gt;</operator><name>execute</name></name><argument_list>(<argument><expr><name>SCI_GETLINEENDPOSITION</name></expr></argument>, <argument><expr><name>endLine</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>endPos</name> <operator>=</operator> <call><name><name>_pEditView</name><operator>-&gt;</operator><name>execute</name></name><argument_list>(<argument><expr><name>SCI_GETLINEENDPOSITION</name></expr></argument>, <argument><expr><name>endLine</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<expr_stmt><expr><call><name><name>_pEditView</name><operator>-&gt;</operator><name>execute</name></name><argument_list>(<argument><expr><name>SCI_SETSEL</name></expr></argument>, <argument><expr><name>startPos</name></expr></argument>, <argument><expr><name>endPos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name><name>_findReplaceDlg</name><operator>.</operator><name>processAll</name></name><argument_list>(<argument><expr><name>ProcessReplaceAll</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>env</name></expr></argument>, <argument><expr><name>isEntireDoc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// restore original selection if nothing has changed</comment>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>isEntireDoc</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>docLength</name> <operator>==</operator> <call><name><name>_pEditView</name><operator>-&gt;</operator><name>execute</name></name><argument_list>(<argument><expr><name>SCI_GETLENGTH</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name><name>_pEditView</name><operator>-&gt;</operator><name>execute</name></name><argument_list>(<argument><expr><name>SCI_SETANCHOR</name></expr></argument>, <argument><expr><name>mainSelAnchor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>_pEditView</name><operator>-&gt;</operator><name>execute</name></name><argument_list>(<argument><expr><name>SCI_SETCURRENTPOS</name></expr></argument>, <argument><expr><name>mainSelCaretPos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name><name>Notepad_plus</name><operator>::</operator><name>eol2ws</name></name><parameter_list>()</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>bool</name></type> <name>isEntireDoc</name> <init>= <expr><operator>(</operator><call><name><name>_pEditView</name><operator>-&gt;</operator><name>execute</name></name><argument_list>(<argument><expr><name>SCI_GETANCHOR</name></expr></argument>)</argument_list></call> <operator>==</operator> <call><name><name>_pEditView</name><operator>-&gt;</operator><name>execute</name></name><argument_list>(<argument><expr><name>SCI_GETCURRENTPOS</name></expr></argument>)</argument_list></call><operator>)</operator></expr></init></decl>;</decl_stmt>

	<comment type="line">// block selection is not supported</comment>
	<if_stmt><if>if <condition>(<expr><operator>(</operator><call><name><name>_pEditView</name><operator>-&gt;</operator><name>execute</name></name><argument_list>(<argument><expr><name>SCI_GETSELECTIONMODE</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>SC_SEL_RECTANGLE</name><operator>)</operator> <operator>||</operator> <operator>(</operator><call><name><name>_pEditView</name><operator>-&gt;</operator><name>execute</name></name><argument_list>(<argument><expr><name>SCI_GETSELECTIONMODE</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>SC_SEL_THIN</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
		<return>return;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name><name>_pEditView</name><operator>-&gt;</operator><name>execute</name></name><argument_list>(<argument><expr><ternary><condition><expr><name>isEntireDoc</name></expr> ?</condition><then> <expr><name>SCI_TARGETWHOLEDOCUMENT</name></expr></then><else>: <expr><name>SCI_TARGETFROMSELECTION</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name>_pEditView</name><operator>-&gt;</operator><name>execute</name></name><argument_list>(<argument><expr><name>SCI_LINESJOIN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name><name>Notepad_plus</name><operator>::</operator><name>removeEmptyLine</name></name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>isBlankContained</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="line">// whichPart : line head or line tail</comment>
	<decl_stmt><decl><type><name>FindOption</name></type> <name>env</name></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><name>isBlankContained</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name><name>env</name><operator>.</operator><name>_str2Search</name></name> <operator>=</operator> <call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"^(?&gt;[\\t ]*[\\r\\n]+)+"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<expr_stmt><expr><name><name>env</name><operator>.</operator><name>_str2Search</name></name> <operator>=</operator> <call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"^[\\r\\n]+"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
	<expr_stmt><expr><name><name>env</name><operator>.</operator><name>_str4Replace</name></name> <operator>=</operator> <call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>env</name><operator>.</operator><name>_searchType</name></name> <operator>=</operator> <name>FindRegex</name></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>auto</name></type> <name>mainSelStart</name> <init>= <expr><call><name><name>_pEditView</name><operator>-&gt;</operator><name>execute</name></name><argument_list>(<argument><expr><name>SCI_GETSELECTIONSTART</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>auto</name></type> <name>mainSelEnd</name> <init>= <expr><call><name><name>_pEditView</name><operator>-&gt;</operator><name>execute</name></name><argument_list>(<argument><expr><name>SCI_GETSELECTIONEND</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>auto</name></type> <name>mainSelLength</name> <init>= <expr><name>mainSelEnd</name> <operator>-</operator> <name>mainSelStart</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name>isEntireDoc</name> <init>= <expr><name>mainSelLength</name> <operator>==</operator> <literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name><name>env</name><operator>.</operator><name>_isInSelection</name></name> <operator>=</operator> <operator>!</operator><name>isEntireDoc</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name>_findReplaceDlg</name><operator>.</operator><name>processAll</name></name><argument_list>(<argument><expr><name>ProcessReplaceAll</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>env</name></expr></argument>, <argument><expr><name>isEntireDoc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// remove the last line if it's an empty line.</comment>
	<decl_stmt><decl><type><name>auto</name></type> <name>lastLineDoc</name> <init>= <expr><call><name><name>_pEditView</name><operator>-&gt;</operator><name>execute</name></name><argument_list>(<argument><expr><name>SCI_GETLINECOUNT</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>auto</name></type> <name>str2Search</name> <init>= <expr><ternary><condition><expr><name>isBlankContained</name></expr> ?</condition><then> <expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"[\\r\\n]+^[\\t ]*$|^[\\t ]+$"</literal></expr></argument>)</argument_list></call></expr> </then><else>: <expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"[\\r\\n]+^$"</literal></expr></argument>)</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>auto</name></type> <name>startPos</name> <init>= <expr><call><name><name>_pEditView</name><operator>-&gt;</operator><name>execute</name></name><argument_list>(<argument><expr><name>SCI_POSITIONFROMLINE</name></expr></argument>, <argument><expr><name>lastLineDoc</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>auto</name></type> <name>endPos</name> <init>= <expr><call><name><name>_pEditView</name><operator>-&gt;</operator><name>execute</name></name><argument_list>(<argument><expr><name>SCI_GETLENGTH</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>isEntireDoc</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>startPos</name> <operator>=</operator> <call><name><name>_pEditView</name><operator>-&gt;</operator><name>execute</name></name><argument_list>(<argument><expr><name>SCI_GETSELECTIONSTART</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>endPos</name> <operator>=</operator> <call><name><name>_pEditView</name><operator>-&gt;</operator><name>execute</name></name><argument_list>(<argument><expr><name>SCI_GETSELECTIONEND</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<decl_stmt><decl><type><name>auto</name></type> <name>endLine</name> <init>= <expr><call><name><name>_pEditView</name><operator>-&gt;</operator><name>execute</name></name><argument_list>(<argument><expr><name>SCI_LINEFROMPOSITION</name></expr></argument>, <argument><expr><name>endPos</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if <condition>(<expr><name>endPos</name> <operator>!=</operator> <operator>(</operator><call><name><name>_pEditView</name><operator>-&gt;</operator><name>execute</name></name><argument_list>(<argument><expr><name>SCI_POSITIONFROMLINE</name></expr></argument>, <argument><expr><name>endLine</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name><name>_pEditView</name><operator>-&gt;</operator><name>execute</name></name><argument_list>(<argument><expr><name>SCI_LINELENGTH</name></expr></argument>, <argument><expr><name>endLine</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
			<return>return;</return></block_content></block></if></if_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name><name>_pEditView</name><operator>-&gt;</operator><name>execute</name></name><argument_list>(<argument><expr><name>SCI_SETSEARCHFLAGS</name></expr></argument>, <argument><expr><name>SCFIND_REGEXP</name><operator>|</operator><name>SCFIND_POSIX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>auto</name></type> <name>posFound</name> <init>= <expr><call><name><name>_pEditView</name><operator>-&gt;</operator><name>searchInTarget</name></name><argument_list>(<argument><expr><name>str2Search</name></expr></argument>, <argument><expr><call><name>lstrlen</name><argument_list>(<argument><expr><name>str2Search</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>startPos</name></expr></argument>, <argument><expr><name>endPos</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><name>posFound</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name><name>_pEditView</name><operator>-&gt;</operator><name>replaceTarget</name></name><argument_list>(<argument><expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>posFound</name></expr></argument>, <argument><expr><name>endPos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name><name>Notepad_plus</name><operator>::</operator><name>removeDuplicateLines</name></name><parameter_list>()</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>intptr_t</name></type> <name>mainSelAnchor</name> <init>= <expr><call><name><name>_pEditView</name><operator>-&gt;</operator><name>execute</name></name><argument_list>(<argument><expr><name>SCI_GETANCHOR</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>intptr_t</name></type> <name>mainSelCaretPos</name> <init>= <expr><call><name><name>_pEditView</name><operator>-&gt;</operator><name>execute</name></name><argument_list>(<argument><expr><name>SCI_GETCURRENTPOS</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name>isEntireDoc</name> <init>= <expr><operator>(</operator><name>mainSelAnchor</name> <operator>==</operator> <name>mainSelCaretPos</name><operator>)</operator></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>intptr_t</name></type> <name>startLine</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>intptr_t</name></type> <name>endLine</name> <init>= <expr><call><name><name>_pEditView</name><operator>-&gt;</operator><name>lastZeroBasedLineNumber</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>isEntireDoc</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>intptr_t</name></type> <name>startPos</name> <init>= <expr><call><name><name>_pEditView</name><operator>-&gt;</operator><name>execute</name></name><argument_list>(<argument><expr><name>SCI_GETSELECTIONSTART</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name>startLine</name> <operator>=</operator> <call><name><name>_pEditView</name><operator>-&gt;</operator><name>execute</name></name><argument_list>(<argument><expr><name>SCI_LINEFROMPOSITION</name></expr></argument>, <argument><expr><name>startPos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<decl_stmt><decl><type><name>intptr_t</name></type> <name>endPos</name> <init>= <expr><call><name><name>_pEditView</name><operator>-&gt;</operator><name>execute</name></name><argument_list>(<argument><expr><name>SCI_GETSELECTIONEND</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name>endLine</name> <operator>=</operator> <call><name><name>_pEditView</name><operator>-&gt;</operator><name>execute</name></name><argument_list>(<argument><expr><name>SCI_LINEFROMPOSITION</name></expr></argument>, <argument><expr><name>endPos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>endPos</name> <operator>==</operator> <call><name><name>_pEditView</name><operator>-&gt;</operator><name>execute</name></name><argument_list>(<argument><expr><name>SCI_POSITIONFROMLINE</name></expr></argument>, <argument><expr><name>endLine</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>endLine</name> <operator>-=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>startLine</name> <operator>==</operator> <name>endLine</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return;</return></block_content></block></if></if_stmt>

	<decl_stmt><decl><type><name>intptr_t</name></type> <name>firstMatchLineNr</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>intptr_t</name></type> <name>lastMatchLineNr</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>generic_string</name></type> <name>firstMatchLineStr</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>generic_string</name></type> <name>lastMatchLineStr</name></decl>;</decl_stmt>

	<for>for <control>(<init><decl><type><name>intptr_t</name></type> <name>i</name> <init>= <expr><name>startLine</name></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>endLine</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><call><name><name>firstMatchLineStr</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name>firstMatchLineNr</name> <operator>=</operator> <name>lastMatchLineNr</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>firstMatchLineStr</name> <operator>=</operator> <call><name><name>_pEditView</name><operator>-&gt;</operator><name>getLine</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<continue>continue;</continue>
		</block_content>}</block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><name>lastMatchLineStr</name> <operator>=</operator> <call><name><name>_pEditView</name><operator>-&gt;</operator><name>getLine</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

		<if_stmt><if>if <condition>(<expr><name>firstMatchLineStr</name> <operator>==</operator> <name>lastMatchLineStr</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name>lastMatchLineNr</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>i</name> <operator>!=</operator> <name>endLine</name></expr>)</condition><block type="pseudo"><block_content>
				<continue>continue;</continue></block_content></block></if></if_stmt>
		</block_content>}</block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><name>firstMatchLineNr</name> <operator>!=</operator> <name>lastMatchLineNr</name></expr>)</condition>
		<block>{<block_content>
			<decl_stmt><decl><type><name>intptr_t</name></type> <name>startPos</name> <init>= <expr><call><name><name>_pEditView</name><operator>-&gt;</operator><name>execute</name></name><argument_list>(<argument><expr><name>SCI_POSITIONFROMLINE</name></expr></argument>, <argument><expr><name>firstMatchLineNr</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>intptr_t</name></type> <name>endPos</name> <init>= <expr><call><name><name>_pEditView</name><operator>-&gt;</operator><name>execute</name></name><argument_list>(<argument><expr><name>SCI_POSITIONFROMLINE</name></expr></argument>, <argument><expr><name>lastMatchLineNr</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name><name>_pEditView</name><operator>-&gt;</operator><name>execute</name></name><argument_list>(<argument><expr><name>SCI_LINELENGTH</name></expr></argument>, <argument><expr><name>lastMatchLineNr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name><name>_pEditView</name><operator>-&gt;</operator><name>execute</name></name><argument_list>(<argument><expr><name>SCI_DELETERANGE</name></expr></argument>, <argument><expr><name>startPos</name></expr></argument>, <argument><expr><name>endPos</name> <operator>-</operator> <name>startPos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<decl_stmt><decl><type><name>intptr_t</name></type> <name>removedLines</name> <init>= <expr><name>lastMatchLineNr</name> <operator>-</operator> <name>firstMatchLineNr</name></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><name>i</name> <operator>-=</operator> <name>removedLines</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>endLine</name> <operator>-=</operator> <name>removedLines</name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><name>firstMatchLineStr</name> <operator>=</operator> <name>lastMatchLineStr</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>firstMatchLineNr</name> <operator>=</operator> <name>lastMatchLineNr</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>

	</block_content>}</block></for>

	<comment type="line">// correct the last line (without EOL) if it's a duplicate line</comment>
	<decl_stmt><decl><type><name>intptr_t</name></type> <name>endLineStartPos</name> <init>= <expr><call><name><name>_pEditView</name><operator>-&gt;</operator><name>execute</name></name><argument_list>(<argument><expr><name>SCI_POSITIONFROMLINE</name></expr></argument>, <argument><expr><name>endLine</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>intptr_t</name></type> <name>endLineEndPos</name> <init>= <expr><call><name><name>_pEditView</name><operator>-&gt;</operator><name>execute</name></name><argument_list>(<argument><expr><name>SCI_GETLINEENDPOSITION</name></expr></argument>, <argument><expr><name>endLine</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>intptr_t</name></type> <name>endLineLength</name> <init>= <expr><call><name><name>_pEditView</name><operator>-&gt;</operator><name>execute</name></name><argument_list>(<argument><expr><name>SCI_LINELENGTH</name></expr></argument>, <argument><expr><name>endLine</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>endLine</name> <operator>==</operator> <call><name><name>_pEditView</name><operator>-&gt;</operator><name>lastZeroBasedLineNumber</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <name>endLineLength</name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>endLineEndPos</name> <operator>-</operator> <name>endLineStartPos</name><operator>)</operator> <operator>==</operator> <name>endLineLength</name><operator>)</operator></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>intptr_t</name></type> <name>prevLine</name> <init>= <expr><name>endLine</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>intptr_t</name></type> <name>prevLineStartPos</name> <init>= <expr><call><name><name>_pEditView</name><operator>-&gt;</operator><name>execute</name></name><argument_list>(<argument><expr><name>SCI_POSITIONFROMLINE</name></expr></argument>, <argument><expr><name>prevLine</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>intptr_t</name></type> <name>prevLineEndPos</name> <init>= <expr><call><name><name>_pEditView</name><operator>-&gt;</operator><name>execute</name></name><argument_list>(<argument><expr><name>SCI_GETLINEENDPOSITION</name></expr></argument>, <argument><expr><name>prevLine</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>intptr_t</name></type> <name>prevLineLength</name> <init>= <expr><call><name><name>_pEditView</name><operator>-&gt;</operator><name>execute</name></name><argument_list>(<argument><expr><name>SCI_LINELENGTH</name></expr></argument>, <argument><expr><name>prevLine</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><specifier>const</specifier> <name>generic_string</name></type> <name>endLineStr</name> <init>= <expr><call><name><name>_pEditView</name><operator>-&gt;</operator><name>getLine</name></name><argument_list>(<argument><expr><name>endLine</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><specifier>const</specifier> <name>generic_string</name></type> <name>prevLineStr</name> <init>= <expr><call><name><name>_pEditView</name><operator>-&gt;</operator><name>getGenericTextAsString</name></name><argument_list>(<argument><expr><name>prevLineStartPos</name></expr></argument>, <argument><expr><name>prevLineEndPos</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if <condition>(<expr><name>endLineStr</name> <operator>==</operator> <name>prevLineStr</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name><name>_pEditView</name><operator>-&gt;</operator><name>execute</name></name><argument_list>(<argument><expr><name>SCI_DELETERANGE</name></expr></argument>, <argument><expr><name>prevLineStartPos</name></expr></argument>, <argument><expr><name>prevLineLength</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name><name>Notepad_plus</name><operator>::</operator><name>getMatchedFileNames</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>TCHAR</name> <modifier>*</modifier></type><name>dir</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>level</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>generic_string</name></expr></argument>&gt;</argument_list></name> <modifier>&amp;</modifier></type> <name>patterns</name></decl></parameter>, <parameter><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>generic_string</name></expr></argument>&gt;</argument_list></name> <modifier>&amp;</modifier></type> <name>fileNames</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>isRecursive</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>isInHiddenDir</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><name>level</name><operator>++</operator></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>generic_string</name></type> <name>dirFilter</name><argument_list>(<argument><expr><name>dir</name></expr></argument>)</argument_list></decl>;</decl_stmt>
	<expr_stmt><expr><name>dirFilter</name> <operator>+=</operator> <call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"*.*"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>WIN32_FIND_DATA</name></type> <name>foundData</name></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>HANDLE</name></type> <name>hFile</name> <init>= <expr><call><name><operator>::</operator><name>FindFirstFile</name></name><argument_list>(<argument><expr><call><name><name>dirFilter</name><operator>.</operator><name>c_str</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>foundData</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>hFile</name> <operator>!=</operator> <name>INVALID_HANDLE_VALUE</name></expr>)</condition>
	<block>{<block_content>

		<if_stmt><if>if <condition>(<expr><name><name>foundData</name><operator>.</operator><name>dwFileAttributes</name></name> <operator>&amp;</operator> <name>FILE_ATTRIBUTE_DIRECTORY</name></expr>)</condition>
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><operator>!</operator><name>isInHiddenDir</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>foundData</name><operator>.</operator><name>dwFileAttributes</name></name> <operator>&amp;</operator> <name>FILE_ATTRIBUTE_HIDDEN</name><operator>)</operator></expr>)</condition>
			<block>{<block_content>
				<comment type="line">// do nothing</comment>
			</block_content>}</block></if>
			<if type="elseif">else if <condition>(<expr><name>isRecursive</name></expr>)</condition>
			<block>{<block_content>
				<if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>OrdinalIgnoreCaseCompareStrings</name><argument_list>(<argument><expr><name><name>foundData</name><operator>.</operator><name>cFileName</name></name></expr></argument>, <argument><expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"."</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>OrdinalIgnoreCaseCompareStrings</name><argument_list>(<argument><expr><name><name>foundData</name><operator>.</operator><name>cFileName</name></name></expr></argument>, <argument><expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">".."</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator>
					<operator>!</operator><call><name>matchInExcludeDirList</name><argument_list>(<argument><expr><name><name>foundData</name><operator>.</operator><name>cFileName</name></name></expr></argument>, <argument><expr><name>patterns</name></expr></argument>, <argument><expr><name>level</name></expr></argument>)</argument_list></call></expr>)</condition>
				<block>{<block_content>
					<decl_stmt><decl><type><name>generic_string</name></type> <name>pathDir</name><argument_list>(<argument><expr><name>dir</name></expr></argument>)</argument_list></decl>;</decl_stmt>
					<expr_stmt><expr><name>pathDir</name> <operator>+=</operator> <name><name>foundData</name><operator>.</operator><name>cFileName</name></name></expr>;</expr_stmt>
					<expr_stmt><expr><name>pathDir</name> <operator>+=</operator> <call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"\\"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name>getMatchedFileNames</name><argument_list>(<argument><expr><call><name><name>pathDir</name><operator>.</operator><name>c_str</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>level</name></expr></argument>, <argument><expr><name>patterns</name></expr></argument>, <argument><expr><name>fileNames</name></expr></argument>, <argument><expr><name>isRecursive</name></expr></argument>, <argument><expr><name>isInHiddenDir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block></if></if_stmt>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></if>
		<else>else
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><call><name>matchInList</name><argument_list>(<argument><expr><name><name>foundData</name><operator>.</operator><name>cFileName</name></name></expr></argument>, <argument><expr><name>patterns</name></expr></argument>)</argument_list></call></expr>)</condition>
			<block>{<block_content>
				<decl_stmt><decl><type><name>generic_string</name></type> <name>pathFile</name><argument_list>(<argument><expr><name>dir</name></expr></argument>)</argument_list></decl>;</decl_stmt>
				<expr_stmt><expr><name>pathFile</name> <operator>+=</operator> <name><name>foundData</name><operator>.</operator><name>cFileName</name></name></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name>fileNames</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><call><name><name>pathFile</name><operator>.</operator><name>c_str</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></if></if_stmt>
	<while>while <condition>(<expr><call><name><operator>::</operator><name>FindNextFile</name></name><argument_list>(<argument><expr><name>hFile</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>foundData</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>foundData</name><operator>.</operator><name>dwFileAttributes</name></name> <operator>&amp;</operator> <name>FILE_ATTRIBUTE_DIRECTORY</name></expr>)</condition>
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><operator>!</operator><name>isInHiddenDir</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>foundData</name><operator>.</operator><name>dwFileAttributes</name></name> <operator>&amp;</operator> <name>FILE_ATTRIBUTE_HIDDEN</name><operator>)</operator></expr>)</condition>
			<block>{<block_content>
				<comment type="line">// do nothing</comment>
			</block_content>}</block></if>
			<if type="elseif">else if <condition>(<expr><name>isRecursive</name></expr>)</condition>
			<block>{<block_content>
				<if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>OrdinalIgnoreCaseCompareStrings</name><argument_list>(<argument><expr><name><name>foundData</name><operator>.</operator><name>cFileName</name></name></expr></argument>, <argument><expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"."</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>OrdinalIgnoreCaseCompareStrings</name><argument_list>(<argument><expr><name><name>foundData</name><operator>.</operator><name>cFileName</name></name></expr></argument>, <argument><expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">".."</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator>
					<operator>!</operator><call><name>matchInExcludeDirList</name><argument_list>(<argument><expr><name><name>foundData</name><operator>.</operator><name>cFileName</name></name></expr></argument>, <argument><expr><name>patterns</name></expr></argument>, <argument><expr><name>level</name></expr></argument>)</argument_list></call></expr>)</condition>
				<block>{<block_content>
					<decl_stmt><decl><type><name>generic_string</name></type> <name>pathDir</name><argument_list>(<argument><expr><name>dir</name></expr></argument>)</argument_list></decl>;</decl_stmt>
					<expr_stmt><expr><name>pathDir</name> <operator>+=</operator> <name><name>foundData</name><operator>.</operator><name>cFileName</name></name></expr>;</expr_stmt>
					<expr_stmt><expr><name>pathDir</name> <operator>+=</operator> <call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"\\"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name>getMatchedFileNames</name><argument_list>(<argument><expr><call><name><name>pathDir</name><operator>.</operator><name>c_str</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>level</name></expr></argument>, <argument><expr><name>patterns</name></expr></argument>, <argument><expr><name>fileNames</name></expr></argument>, <argument><expr><name>isRecursive</name></expr></argument>, <argument><expr><name>isInHiddenDir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block></if></if_stmt>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></if>
		<else>else
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><call><name>matchInList</name><argument_list>(<argument><expr><name><name>foundData</name><operator>.</operator><name>cFileName</name></name></expr></argument>, <argument><expr><name>patterns</name></expr></argument>)</argument_list></call></expr>)</condition>
			<block>{<block_content>
				<decl_stmt><decl><type><name>generic_string</name></type> <name>pathFile</name><argument_list>(<argument><expr><name>dir</name></expr></argument>)</argument_list></decl>;</decl_stmt>
				<expr_stmt><expr><name>pathFile</name> <operator>+=</operator> <name><name>foundData</name><operator>.</operator><name>cFileName</name></name></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name>fileNames</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><call><name><name>pathFile</name><operator>.</operator><name>c_str</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></while>
	<expr_stmt><expr><call><name><operator>::</operator><name>FindClose</name></name><argument_list>(<argument><expr><name>hFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name><name>Notepad_plus</name><operator>::</operator><name>createFilelistForFiles</name></name><parameter_list>(<parameter><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>generic_string</name></expr></argument>&gt;</argument_list></name> <modifier>&amp;</modifier></type> <name>fileNames</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>TCHAR</name> <modifier>*</modifier></type><name>dir2Search</name> <init>= <expr><call><name><name>_findReplaceDlg</name><operator>.</operator><name>getDir2Search</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>dir2Search</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>||</operator> <operator>!</operator><call><name><operator>::</operator><name>PathFileExists</name></name><argument_list>(<argument><expr><name>dir2Search</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<return>return <expr><literal type="boolean">false</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>generic_string</name></expr></argument>&gt;</argument_list></name></type> <name>patterns2Match</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name><name>_findReplaceDlg</name><operator>.</operator><name>getAndValidatePatterns</name></name><argument_list>(<argument><expr><name>patterns2Match</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>bool</name></type> <name>isRecursive</name> <init>= <expr><call><name><name>_findReplaceDlg</name><operator>.</operator><name>isRecursive</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name>isInHiddenDir</name> <init>= <expr><call><name><name>_findReplaceDlg</name><operator>.</operator><name>isInHiddenDir</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>getMatchedFileNames</name><argument_list>(<argument><expr><name>dir2Search</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>patterns2Match</name></expr></argument>, <argument><expr><name>fileNames</name></expr></argument>, <argument><expr><name>isRecursive</name></expr></argument>, <argument><expr><name>isInHiddenDir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><literal type="boolean">true</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name><name>Notepad_plus</name><operator>::</operator><name>createFilelistForProjects</name></name><parameter_list>(<parameter><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>generic_string</name></expr></argument>&gt;</argument_list></name> <modifier>&amp;</modifier></type> <name>fileNames</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>generic_string</name></expr></argument>&gt;</argument_list></name></type> <name>patterns2Match</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name><name>_findReplaceDlg</name><operator>.</operator><name>getAndValidatePatterns</name></name><argument_list>(<argument><expr><name>patterns2Match</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name>somethingIsSelected</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt> <comment type="line">// at least one Project Panel is open and checked</comment>

	<if_stmt><if>if <condition>(<expr><call><name><name>_findReplaceDlg</name><operator>.</operator><name>isProjectPanel_1</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <name>_pProjectPanel_1</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>_pProjectPanel_1</name><operator>-&gt;</operator><name>isClosed</name></name><argument_list>()</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name><name>_pProjectPanel_1</name><operator>-&gt;</operator><name>enumWorkSpaceFiles</name></name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>patterns2Match</name></expr></argument>, <argument><expr><name>fileNames</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>somethingIsSelected</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><call><name><name>_findReplaceDlg</name><operator>.</operator><name>isProjectPanel_2</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <name>_pProjectPanel_2</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>_pProjectPanel_2</name><operator>-&gt;</operator><name>isClosed</name></name><argument_list>()</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name><name>_pProjectPanel_2</name><operator>-&gt;</operator><name>enumWorkSpaceFiles</name></name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>patterns2Match</name></expr></argument>, <argument><expr><name>fileNames</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>somethingIsSelected</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><call><name><name>_findReplaceDlg</name><operator>.</operator><name>isProjectPanel_3</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <name>_pProjectPanel_3</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>_pProjectPanel_3</name><operator>-&gt;</operator><name>isClosed</name></name><argument_list>()</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name><name>_pProjectPanel_3</name><operator>-&gt;</operator><name>enumWorkSpaceFiles</name></name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>patterns2Match</name></expr></argument>, <argument><expr><name>fileNames</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>somethingIsSelected</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><name>somethingIsSelected</name></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>mutex</name></name></type> <name>replaceInFiles_mutex</name></decl>;</decl_stmt>

<function><type><name>bool</name></type> <name><name>Notepad_plus</name><operator>::</operator><name>replaceInFiles</name></name><parameter_list>()</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>lock_guard</name><argument_list type="generic">&lt;<argument><expr><name><name>std</name><operator>::</operator><name>mutex</name></name></expr></argument>&gt;</argument_list></name></type> <name>lock</name><argument_list>(<argument><expr><name>replaceInFiles_mutex</name></expr></argument>)</argument_list></decl>;</decl_stmt>

	<decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>generic_string</name></expr></argument>&gt;</argument_list></name></type> <name>fileNames</name></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>createFilelistForFiles</name><argument_list>(<argument><expr><name>fileNames</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>

	<return>return <expr><call><name>replaceInFilelist</name><argument_list>(<argument><expr><name>fileNames</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name><name>Notepad_plus</name><operator>::</operator><name>replaceInProjects</name></name><parameter_list>()</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>lock_guard</name><argument_list type="generic">&lt;<argument><expr><name><name>std</name><operator>::</operator><name>mutex</name></name></expr></argument>&gt;</argument_list></name></type> <name>lock</name><argument_list>(<argument><expr><name>replaceInFiles_mutex</name></expr></argument>)</argument_list></decl>;</decl_stmt>

	<decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>generic_string</name></expr></argument>&gt;</argument_list></name></type> <name>fileNames</name></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>createFilelistForProjects</name><argument_list>(<argument><expr><name>fileNames</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>

	<return>return <expr><call><name>replaceInFilelist</name><argument_list>(<argument><expr><name>fileNames</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name><name>Notepad_plus</name><operator>::</operator><name>replaceInFilelist</name></name><parameter_list>(<parameter><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>generic_string</name></expr></argument>&gt;</argument_list></name> <modifier>&amp;</modifier></type> <name>fileNames</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>nbTotal</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>ScintillaEditView</name> <modifier>*</modifier></type><name>pOldView</name> <init>= <expr><name>_pEditView</name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name>_pEditView</name> <operator>=</operator> <operator>&amp;</operator><name>_invisibleEditView</name></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>Document</name></type> <name>oldDoc</name> <init>= <expr><call><name><name>_invisibleEditView</name><operator>.</operator><name>execute</name></name><argument_list>(<argument><expr><name>SCI_GETDOCPOINTER</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Buffer</name> <modifier>*</modifier></type> <name>oldBuf</name> <init>= <expr><call><name><name>_invisibleEditView</name><operator>.</operator><name>getCurrentBuffer</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>	<comment type="line">//for manually setting the buffer, so notifications can be handled properly</comment>

	<decl_stmt><decl><type><name>Progress</name></type> <name>progress</name><argument_list>(<argument><expr><call><name><name>_pPublicInterface</name><operator>-&gt;</operator><name>getHinst</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>filesCount</name> <init>= <expr><call><name><name>fileNames</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>filesPerPercent</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>filesCount</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>filesCount</name> <operator>&gt;=</operator> <literal type="number">200</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>filesPerPercent</name> <operator>=</operator> <name>filesCount</name> <operator>/</operator> <literal type="number">100</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
		
		<decl_stmt><decl><type><name>generic_string</name></type> <name>msg</name> <init>= <expr><call><name><name>_nativeLangSpeaker</name><operator>.</operator><name>getLocalizedStrFromID</name></name><argument_list>(
			<argument><expr><literal type="string">"replace-in-files-progress-title"</literal></expr></argument>, <argument><expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"Replace In Files progress..."</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>progress</name><operator>.</operator><name>open</name></name><argument_list>(<argument><expr><call><name><name>_findReplaceDlg</name><operator>.</operator><name>getHSelf</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>msg</name><operator>.</operator><name>c_str</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>updateOnCount</name> <init>= <expr><name>filesPerPercent</name></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>filesCount</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><call><name><name>progress</name><operator>.</operator><name>isCancelled</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>

		<decl_stmt><decl><type><name>bool</name></type> <name>closeBuf</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>

		<decl_stmt><decl><type><name>BufferID</name></type> <name>id</name> <init>= <expr><call><name><name>MainFileManager</name><operator>.</operator><name>getBufferFromName</name></name><argument_list>(<argument><expr><call><name><name>fileNames</name><operator>.</operator><name>at</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>c_str</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if <condition>(<expr><name>id</name> <operator>==</operator> <name>BUFFER_INVALID</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name>id</name> <operator>=</operator> <call><name><name>MainFileManager</name><operator>.</operator><name>loadFile</name></name><argument_list>(<argument><expr><call><name><name>fileNames</name><operator>.</operator><name>at</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>c_str</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>closeBuf</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><name>id</name> <operator>!=</operator> <name>BUFFER_INVALID</name></expr>)</condition>
		<block>{<block_content>
			<decl_stmt><decl><type><name>Buffer</name> <modifier>*</modifier></type> <name>pBuf</name> <init>= <expr><call><name><name>MainFileManager</name><operator>.</operator><name>getBufferByID</name></name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name><name>_invisibleEditView</name><operator>.</operator><name>execute</name></name><argument_list>(<argument><expr><name>SCI_SETDOCPOINTER</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name><name>pBuf</name><operator>-&gt;</operator><name>getDocument</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<expr_stmt><expr><call><name>setCodePageForInvisibleView</name><argument_list>(<argument><expr><name>pBuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<expr_stmt><expr><call><name><name>_invisibleEditView</name><operator>.</operator><name>setCurrentBuffer</name></name><argument_list>(<argument><expr><name>pBuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<decl_stmt><decl><type><name>FindersInfo</name></type> <name>findersInfo</name></decl>;</decl_stmt>
			<expr_stmt><expr><name><name>findersInfo</name><operator>.</operator><name>_pFileName</name></name> <operator>=</operator> <call><name><name>fileNames</name><operator>.</operator><name>at</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>c_str</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<decl_stmt><decl><type><name>int</name></type> <name>nbReplaced</name> <init>= <expr><call><name><name>_findReplaceDlg</name><operator>.</operator><name>processAll</name></name><argument_list>(<argument><expr><name>ProcessReplaceAll</name></expr></argument>, <argument><expr><name><name>FindReplaceDlg</name><operator>::</operator><name>_env</name></name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>findersInfo</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><name>nbTotal</name> <operator>+=</operator> <name>nbReplaced</name></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>nbReplaced</name></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><call><name><name>MainFileManager</name><operator>.</operator><name>saveBuffer</name></name><argument_list>(<argument><expr><name>id</name></expr></argument>, <argument><expr><call><name><name>pBuf</name><operator>-&gt;</operator><name>getFullPathName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>

			<if_stmt><if>if <condition>(<expr><name>closeBuf</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name><name>MainFileManager</name><operator>.</operator><name>closeBuffer</name></name><argument_list>(<argument><expr><name>id</name></expr></argument>, <argument><expr><name>_pEditView</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		</block_content>}</block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <name>updateOnCount</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name>updateOnCount</name> <operator>+=</operator> <name>filesPerPercent</name></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>progress</name><operator>.</operator><name>setPercent</name></name><argument_list>(<argument><expr><call><name>int32_t</name><argument_list>(<argument><expr><operator>(</operator><name>i</name> <operator>*</operator> <literal type="number">100</literal><operator>)</operator> <operator>/</operator> <name>filesCount</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>fileNames</name><operator>.</operator><name>at</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>c_str</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>nbTotal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if>
		<else>else
		<block>{<block_content>
			<expr_stmt><expr><call><name><name>progress</name><operator>.</operator><name>setInfo</name></name><argument_list>(<argument><expr><call><name><name>fileNames</name><operator>.</operator><name>at</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>c_str</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>nbTotal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></for>

	<expr_stmt><expr><call><name><name>progress</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name><name>_invisibleEditView</name><operator>.</operator><name>execute</name></name><argument_list>(<argument><expr><name>SCI_SETDOCPOINTER</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>oldDoc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name>_invisibleEditView</name><operator>.</operator><name>setCurrentBuffer</name></name><argument_list>(<argument><expr><name>oldBuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_pEditView</name> <operator>=</operator> <name>pOldView</name></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>generic_string</name></type> <name>result</name></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><name>nbTotal</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name><name>_nativeLangSpeaker</name><operator>.</operator><name>getLocalizedStrFromID</name></name><argument_list>(<argument><expr><literal type="string">"find-status-replaceinfiles-1-replaced"</literal></expr></argument>, <argument><expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"Replace in Files: 1 occurrence was replaced."</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name><name>_nativeLangSpeaker</name><operator>.</operator><name>getLocalizedStrFromID</name></name><argument_list>(<argument><expr><literal type="string">"find-status-replaceinfiles-nb-replaced"</literal></expr></argument>, <argument><expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"Replace in Files: $INT_REPLACE$ occurrences were replaced."</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>stringReplace</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"$INT_REPLACE$"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>std</name><operator>::</operator><name>to_wstring</name></name><argument_list>(<argument><expr><name>nbTotal</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
	<expr_stmt><expr><call><name><name>_findReplaceDlg</name><operator>.</operator><name>setStatusbarMessage</name></name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><name>FSMessage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><literal type="boolean">true</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name><name>Notepad_plus</name><operator>::</operator><name>findInFinderFiles</name></name><parameter_list>(<parameter><decl><type><name>FindersInfo</name> <modifier>*</modifier></type><name>findInFolderInfo</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>nbTotal</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ScintillaEditView</name> <modifier>*</modifier></type><name>pOldView</name> <init>= <expr><name>_pEditView</name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name>_pEditView</name> <operator>=</operator> <operator>&amp;</operator><name>_invisibleEditView</name></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>Document</name></type> <name>oldDoc</name> <init>= <expr><call><name><name>_invisibleEditView</name><operator>.</operator><name>execute</name></name><argument_list>(<argument><expr><name>SCI_GETDOCPOINTER</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>generic_string</name></expr></argument>&gt;</argument_list></name></type> <name>fileNames</name> <init>= <expr><call><name><name>findInFolderInfo</name><operator>-&gt;</operator><name>_pSourceFinder</name><operator>-&gt;</operator><name>getResultFilePaths</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name><name>findInFolderInfo</name><operator>-&gt;</operator><name>_pDestFinder</name><operator>-&gt;</operator><name>beginNewFilesSearch</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name>findInFolderInfo</name><operator>-&gt;</operator><name>_pDestFinder</name><operator>-&gt;</operator><name>addSearchLine</name></name><argument_list>(<argument><expr><call><name><name>findInFolderInfo</name><operator>-&gt;</operator><name>_findOption</name><operator>.</operator><name>_str2Search</name><operator>.</operator><name>c_str</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>Progress</name></type> <name>progress</name><argument_list>(<argument><expr><call><name><name>_pPublicInterface</name><operator>-&gt;</operator><name>getHinst</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>size_t</name></type> <name>filesCount</name> <init>= <expr><call><name><name>fileNames</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>filesPerPercent</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>filesCount</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>filesCount</name> <operator>&gt;=</operator> <literal type="number">200</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>filesPerPercent</name> <operator>=</operator> <name>filesCount</name> <operator>/</operator> <literal type="number">100</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
		
		<decl_stmt><decl><type><name>generic_string</name></type> <name>msg</name> <init>= <expr><call><name><name>_nativeLangSpeaker</name><operator>.</operator><name>getLocalizedStrFromID</name></name><argument_list>(
			<argument><expr><literal type="string">"find-in-files-progress-title"</literal></expr></argument>, <argument><expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"Find In Files progress..."</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>progress</name><operator>.</operator><name>open</name></name><argument_list>(<argument><expr><call><name><name>_findReplaceDlg</name><operator>.</operator><name>getHSelf</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>msg</name><operator>.</operator><name>c_str</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>updateOnCount</name> <init>= <expr><name>filesPerPercent</name></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>filesCount</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><call><name><name>progress</name><operator>.</operator><name>isCancelled</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>

		<decl_stmt><decl><type><name>bool</name></type> <name>closeBuf</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>BufferID</name></type> <name>id</name> <init>= <expr><call><name><name>MainFileManager</name><operator>.</operator><name>getBufferFromName</name></name><argument_list>(<argument><expr><call><name><name>fileNames</name><operator>.</operator><name>at</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>c_str</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if <condition>(<expr><name>id</name> <operator>==</operator> <name>BUFFER_INVALID</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name>id</name> <operator>=</operator> <call><name><name>MainFileManager</name><operator>.</operator><name>loadFile</name></name><argument_list>(<argument><expr><call><name><name>fileNames</name><operator>.</operator><name>at</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>c_str</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>closeBuf</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><name>id</name> <operator>!=</operator> <name>BUFFER_INVALID</name></expr>)</condition>
		<block>{<block_content>
			<decl_stmt><decl><type><name>Buffer</name> <modifier>*</modifier></type> <name>pBuf</name> <init>= <expr><call><name><name>MainFileManager</name><operator>.</operator><name>getBufferByID</name></name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name><name>_invisibleEditView</name><operator>.</operator><name>execute</name></name><argument_list>(<argument><expr><name>SCI_SETDOCPOINTER</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name><name>pBuf</name><operator>-&gt;</operator><name>getDocument</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<expr_stmt><expr><call><name>setCodePageForInvisibleView</name><argument_list>(<argument><expr><name>pBuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<expr_stmt><expr><name><name>findInFolderInfo</name><operator>-&gt;</operator><name>_pFileName</name></name> <operator>=</operator> <call><name><name>fileNames</name><operator>.</operator><name>at</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>c_str</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			
			<expr_stmt><expr><name>nbTotal</name> <operator>+=</operator> <call><name><name>_findReplaceDlg</name><operator>.</operator><name>processAll</name></name><argument_list>(<argument><expr><name>ProcessFindInFinder</name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>findInFolderInfo</name><operator>-&gt;</operator><name>_findOption</name></name><operator>)</operator></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><name>findInFolderInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			
			<if_stmt><if>if <condition>(<expr><name>closeBuf</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name><name>MainFileManager</name><operator>.</operator><name>closeBuffer</name></name><argument_list>(<argument><expr><name>id</name></expr></argument>, <argument><expr><name>_pEditView</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		</block_content>}</block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <name>updateOnCount</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name>updateOnCount</name> <operator>+=</operator> <name>filesPerPercent</name></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>progress</name><operator>.</operator><name>setPercent</name></name><argument_list>(<argument><expr><call><name>int32_t</name><argument_list>(<argument><expr><operator>(</operator><name>i</name> <operator>*</operator> <literal type="number">100</literal><operator>)</operator> <operator>/</operator> <name>filesCount</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>fileNames</name><operator>.</operator><name>at</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>c_str</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>nbTotal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if>
		<else>else
		<block>{<block_content>
			<expr_stmt><expr><call><name><name>progress</name><operator>.</operator><name>setInfo</name></name><argument_list>(<argument><expr><call><name><name>fileNames</name><operator>.</operator><name>at</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>c_str</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>nbTotal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></for>
	<expr_stmt><expr><call><name><name>progress</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>searchedInSelection</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name><name>findInFolderInfo</name><operator>-&gt;</operator><name>_pDestFinder</name><operator>-&gt;</operator><name>finishFilesSearch</name></name><argument_list>(<argument><expr><name>nbTotal</name></expr></argument>, <argument><expr><call><name>int</name><argument_list>(<argument><expr><name>filesCount</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>findInFolderInfo</name><operator>-&gt;</operator><name>_findOption</name><operator>.</operator><name>_isMatchLineNumber</name></name></expr></argument>, <argument><expr><operator>!</operator><name>searchedInSelection</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name><name>_invisibleEditView</name><operator>.</operator><name>execute</name></name><argument_list>(<argument><expr><name>SCI_SETDOCPOINTER</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>oldDoc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_pEditView</name> <operator>=</operator> <name>pOldView</name></expr>;</expr_stmt>

	<return>return <expr><literal type="boolean">true</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name><name>Notepad_plus</name><operator>::</operator><name>findInFiles</name></name><parameter_list>()</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>generic_string</name></expr></argument>&gt;</argument_list></name></type> <name>fileNames</name></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator> <call><name>createFilelistForFiles</name><argument_list>(<argument><expr><name>fileNames</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>

	<return>return <expr><call><name>findInFilelist</name><argument_list>(<argument><expr><name>fileNames</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name><name>Notepad_plus</name><operator>::</operator><name>findInProjects</name></name><parameter_list>()</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>generic_string</name></expr></argument>&gt;</argument_list></name></type> <name>fileNames</name></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator> <call><name>createFilelistForProjects</name><argument_list>(<argument><expr><name>fileNames</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>

	<return>return <expr><call><name>findInFilelist</name><argument_list>(<argument><expr><name>fileNames</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name><name>Notepad_plus</name><operator>::</operator><name>findInFilelist</name></name><parameter_list>(<parameter><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>generic_string</name></expr></argument>&gt;</argument_list></name> <modifier>&amp;</modifier></type> <name>fileNames</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>nbTotal</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ScintillaEditView</name> <modifier>*</modifier></type><name>pOldView</name> <init>= <expr><name>_pEditView</name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name>_pEditView</name> <operator>=</operator> <operator>&amp;</operator><name>_invisibleEditView</name></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>Document</name></type> <name>oldDoc</name> <init>= <expr><call><name><name>_invisibleEditView</name><operator>.</operator><name>execute</name></name><argument_list>(<argument><expr><name>SCI_GETDOCPOINTER</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name><name>_findReplaceDlg</name><operator>.</operator><name>beginNewFilesSearch</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>Progress</name></type> <name>progress</name><argument_list>(<argument><expr><call><name><name>_pPublicInterface</name><operator>-&gt;</operator><name>getHinst</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>size_t</name></type> <name>filesCount</name> <init>= <expr><call><name><name>fileNames</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>filesPerPercent</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>filesCount</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>filesCount</name> <operator>&gt;=</operator> <literal type="number">200</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>filesPerPercent</name> <operator>=</operator> <name>filesCount</name> <operator>/</operator> <literal type="number">100</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<decl_stmt><decl><type><name>generic_string</name></type> <name>msg</name> <init>= <expr><call><name><name>_nativeLangSpeaker</name><operator>.</operator><name>getLocalizedStrFromID</name></name><argument_list>(
			<argument><expr><literal type="string">"find-in-files-progress-title"</literal></expr></argument>, <argument><expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"Find In Files progress..."</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>progress</name><operator>.</operator><name>open</name></name><argument_list>(<argument><expr><call><name><name>_findReplaceDlg</name><operator>.</operator><name>getHSelf</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>msg</name><operator>.</operator><name>c_str</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>isEntireDoc</name> <init>= <expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt>

	<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>updateOnCount</name> <init>= <expr><name>filesPerPercent</name></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>filesCount</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><call><name><name>progress</name><operator>.</operator><name>isCancelled</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>

		<decl_stmt><decl><type><name>bool</name></type> <name>closeBuf</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>BufferID</name></type> <name>id</name> <init>= <expr><call><name><name>MainFileManager</name><operator>.</operator><name>getBufferFromName</name></name><argument_list>(<argument><expr><call><name><name>fileNames</name><operator>.</operator><name>at</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>c_str</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if <condition>(<expr><name>id</name> <operator>==</operator> <name>BUFFER_INVALID</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name>id</name> <operator>=</operator> <call><name><name>MainFileManager</name><operator>.</operator><name>loadFile</name></name><argument_list>(<argument><expr><call><name><name>fileNames</name><operator>.</operator><name>at</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>c_str</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>closeBuf</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><name>id</name> <operator>!=</operator> <name>BUFFER_INVALID</name></expr>)</condition>
		<block>{<block_content>
			<decl_stmt><decl><type><name>Buffer</name> <modifier>*</modifier></type> <name>pBuf</name> <init>= <expr><call><name><name>MainFileManager</name><operator>.</operator><name>getBufferByID</name></name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name><name>_invisibleEditView</name><operator>.</operator><name>execute</name></name><argument_list>(<argument><expr><name>SCI_SETDOCPOINTER</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name><name>pBuf</name><operator>-&gt;</operator><name>getDocument</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<expr_stmt><expr><call><name>setCodePageForInvisibleView</name><argument_list>(<argument><expr><name>pBuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<decl_stmt><decl><type><name>FindersInfo</name></type> <name>findersInfo</name></decl>;</decl_stmt>
			<expr_stmt><expr><name><name>findersInfo</name><operator>.</operator><name>_pFileName</name></name> <operator>=</operator> <call><name><name>fileNames</name><operator>.</operator><name>at</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>c_str</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

			<expr_stmt><expr><name>nbTotal</name> <operator>+=</operator> <call><name><name>_findReplaceDlg</name><operator>.</operator><name>processAll</name></name><argument_list>(<argument><expr><name>ProcessFindAll</name></expr></argument>, <argument><expr><name><name>FindReplaceDlg</name><operator>::</operator><name>_env</name></name></expr></argument>, <argument><expr><name>isEntireDoc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>findersInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<if_stmt><if>if <condition>(<expr><name>closeBuf</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name><name>MainFileManager</name><operator>.</operator><name>closeBuffer</name></name><argument_list>(<argument><expr><name>id</name></expr></argument>, <argument><expr><name>_pEditView</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		</block_content>}</block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <name>updateOnCount</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name>updateOnCount</name> <operator>+=</operator> <name>filesPerPercent</name></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>progress</name><operator>.</operator><name>setPercent</name></name><argument_list>(<argument><expr><call><name>int32_t</name><argument_list>(<argument><expr><operator>(</operator><name>i</name> <operator>*</operator> <literal type="number">100</literal><operator>)</operator> <operator>/</operator> <name>filesCount</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>fileNames</name><operator>.</operator><name>at</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>c_str</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>nbTotal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if>
		<else>else
		<block>{<block_content>
			<expr_stmt><expr><call><name><name>progress</name><operator>.</operator><name>setInfo</name></name><argument_list>(<argument><expr><call><name><name>fileNames</name><operator>.</operator><name>at</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>c_str</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>nbTotal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></for>

	<expr_stmt><expr><call><name><name>progress</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name><name>_findReplaceDlg</name><operator>.</operator><name>finishFilesSearch</name></name><argument_list>(<argument><expr><name>nbTotal</name></expr></argument>, <argument><expr><call><name>int</name><argument_list>(<argument><expr><name>filesCount</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>isEntireDoc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name><name>_invisibleEditView</name><operator>.</operator><name>execute</name></name><argument_list>(<argument><expr><name>SCI_SETDOCPOINTER</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>oldDoc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_pEditView</name> <operator>=</operator> <name>pOldView</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name><name>_findReplaceDlg</name><operator>.</operator><name>putFindResult</name></name><argument_list>(<argument><expr><name>nbTotal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>nbTotal</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>NppParameters</name><modifier>&amp;</modifier></type> <name>nppParam</name> <init>= <expr><call><name><name>NppParameters</name><operator>::</operator><name>getInstance</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>NppGUI</name><modifier>&amp;</modifier></type> <name>nppGui</name> <init>= <expr><call><name><name>nppParam</name><operator>.</operator><name>getNppGUI</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>nppGui</name><operator>.</operator><name>_findDlgAlwaysVisible</name></name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name><name>_findReplaceDlg</name><operator>.</operator><name>display</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><literal type="boolean">true</literal></expr>;</return>
</block_content>}</block></function>


<function><type><name>bool</name></type> <name><name>Notepad_plus</name><operator>::</operator><name>findInOpenedFiles</name></name><parameter_list>()</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>nbTotal</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ScintillaEditView</name> <modifier>*</modifier></type><name>pOldView</name> <init>= <expr><name>_pEditView</name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name>_pEditView</name> <operator>=</operator> <operator>&amp;</operator><name>_invisibleEditView</name></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>Document</name></type> <name>oldDoc</name> <init>= <expr><call><name><name>_invisibleEditView</name><operator>.</operator><name>execute</name></name><argument_list>(<argument><expr><name>SCI_GETDOCPOINTER</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>Buffer</name> <modifier>*</modifier></type> <name>pBuf</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>isEntireDoc</name> <init>= <expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name><name>_findReplaceDlg</name><operator>.</operator><name>beginNewFilesSearch</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>_mainWindowStatus</name> <operator>&amp;</operator> <name>WindowMainActive</name></expr>)</condition>
	<block>{<block_content>
		<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>len</name> <init>= <expr><call><name><name>_mainDocTab</name><operator>.</operator><name>nbItem</name></name><argument_list>()</argument_list></call></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr> ;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
		<block>{<block_content>
			<expr_stmt><expr><name>pBuf</name> <operator>=</operator> <call><name><name>MainFileManager</name><operator>.</operator><name>getBufferByID</name></name><argument_list>(<argument><expr><call><name><name>_mainDocTab</name><operator>.</operator><name>getBufferByIndex</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>_invisibleEditView</name><operator>.</operator><name>execute</name></name><argument_list>(<argument><expr><name>SCI_SETDOCPOINTER</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name><name>pBuf</name><operator>-&gt;</operator><name>getDocument</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<expr_stmt><expr><call><name>setCodePageForInvisibleView</name><argument_list>(<argument><expr><name>pBuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<decl_stmt><decl><type><name>FindersInfo</name></type> <name>findersInfo</name></decl>;</decl_stmt>
			<expr_stmt><expr><name><name>findersInfo</name><operator>.</operator><name>_pFileName</name></name> <operator>=</operator> <call><name><name>pBuf</name><operator>-&gt;</operator><name>getFullPathName</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			
			<expr_stmt><expr><name>nbTotal</name> <operator>+=</operator> <call><name><name>_findReplaceDlg</name><operator>.</operator><name>processAll</name></name><argument_list>(<argument><expr><name>ProcessFindAll</name></expr></argument>, <argument><expr><name><name>FindReplaceDlg</name><operator>::</operator><name>_env</name></name></expr></argument>, <argument><expr><name>isEntireDoc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>findersInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></for>
	</block_content>}</block></if></if_stmt>

	<decl_stmt><decl><type><name>size_t</name></type> <name>nbUniqueBuffers</name> <init>= <expr><call><name><name>_mainDocTab</name><operator>.</operator><name>nbItem</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>_mainWindowStatus</name> <operator>&amp;</operator> <name>WindowSubActive</name></expr>)</condition>
	<block>{<block_content>
		<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>len2</name> <init>= <expr><call><name><name>_subDocTab</name><operator>.</operator><name>nbItem</name></name><argument_list>()</argument_list></call></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len2</name></expr> ;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
		<block>{<block_content>
			<expr_stmt><expr><name>pBuf</name> <operator>=</operator> <call><name><name>MainFileManager</name><operator>.</operator><name>getBufferByID</name></name><argument_list>(<argument><expr><call><name><name>_subDocTab</name><operator>.</operator><name>getBufferByIndex</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><call><name><name>_mainDocTab</name><operator>.</operator><name>getIndexByBuffer</name></name><argument_list>(<argument><expr><name>pBuf</name></expr></argument>)</argument_list></call> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
			<block>{<block_content>
				<continue>continue;</continue>  <comment type="line">// clone was already searched in main; skip re-searching in sub</comment>
			</block_content>}</block></if></if_stmt>
			<expr_stmt><expr><call><name><name>_invisibleEditView</name><operator>.</operator><name>execute</name></name><argument_list>(<argument><expr><name>SCI_SETDOCPOINTER</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name><name>pBuf</name><operator>-&gt;</operator><name>getDocument</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<expr_stmt><expr><call><name>setCodePageForInvisibleView</name><argument_list>(<argument><expr><name>pBuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<decl_stmt><decl><type><name>FindersInfo</name></type> <name>findersInfo</name></decl>;</decl_stmt>
			<expr_stmt><expr><name><name>findersInfo</name><operator>.</operator><name>_pFileName</name></name> <operator>=</operator> <call><name><name>pBuf</name><operator>-&gt;</operator><name>getFullPathName</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

			<expr_stmt><expr><name>nbTotal</name> <operator>+=</operator> <call><name><name>_findReplaceDlg</name><operator>.</operator><name>processAll</name></name><argument_list>(<argument><expr><name>ProcessFindAll</name></expr></argument>, <argument><expr><name><name>FindReplaceDlg</name><operator>::</operator><name>_env</name></name></expr></argument>, <argument><expr><name>isEntireDoc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>findersInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<expr_stmt><expr><operator>++</operator><name>nbUniqueBuffers</name></expr>;</expr_stmt>
		</block_content>}</block></for>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name><name>_findReplaceDlg</name><operator>.</operator><name>finishFilesSearch</name></name><argument_list>(<argument><expr><name>nbTotal</name></expr></argument>, <argument><expr><call><name>int</name><argument_list>(<argument><expr><name>nbUniqueBuffers</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>isEntireDoc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name><name>_invisibleEditView</name><operator>.</operator><name>execute</name></name><argument_list>(<argument><expr><name>SCI_SETDOCPOINTER</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>oldDoc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_pEditView</name> <operator>=</operator> <name>pOldView</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name><name>_findReplaceDlg</name><operator>.</operator><name>putFindResult</name></name><argument_list>(<argument><expr><name>nbTotal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>nbTotal</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>NppParameters</name><modifier>&amp;</modifier></type> <name>nppParam</name> <init>= <expr><call><name><name>NppParameters</name><operator>::</operator><name>getInstance</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>NppGUI</name><modifier>&amp;</modifier></type> <name>nppGui</name> <init>= <expr><call><name><name>nppParam</name><operator>.</operator><name>getNppGUI</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>nppGui</name><operator>.</operator><name>_findDlgAlwaysVisible</name></name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name><name>_findReplaceDlg</name><operator>.</operator><name>display</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><literal type="boolean">true</literal></expr>;</return>
</block_content>}</block></function>


<function><type><name>bool</name></type> <name><name>Notepad_plus</name><operator>::</operator><name>findInCurrentFile</name></name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>isEntireDoc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>nbTotal</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Buffer</name> <modifier>*</modifier></type> <name>pBuf</name> <init>= <expr><call><name><name>_pEditView</name><operator>-&gt;</operator><name>getCurrentBuffer</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>Sci_CharacterRangeFull</name></type> <name>mainSelection</name> <init>= <expr><call><name><name>_pEditView</name><operator>-&gt;</operator><name>getSelection</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>  <comment type="line">// remember selection before switching view</comment>

	<decl_stmt><decl><type><name>ScintillaEditView</name> <modifier>*</modifier></type><name>pOldView</name> <init>= <expr><name>_pEditView</name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name>_pEditView</name> <operator>=</operator> <operator>&amp;</operator><name>_invisibleEditView</name></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>Document</name></type> <name>oldDoc</name> <init>= <expr><call><name><name>_invisibleEditView</name><operator>.</operator><name>execute</name></name><argument_list>(<argument><expr><name>SCI_GETDOCPOINTER</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name><name>_findReplaceDlg</name><operator>.</operator><name>beginNewFilesSearch</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name><name>_invisibleEditView</name><operator>.</operator><name>execute</name></name><argument_list>(<argument><expr><name>SCI_SETDOCPOINTER</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name><name>pBuf</name><operator>-&gt;</operator><name>getDocument</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>setCodePageForInvisibleView</name><argument_list>(<argument><expr><name>pBuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>isEntireDoc</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>auto</name></type> <name>docLength</name> <init>= <expr><call><name><name>_invisibleEditView</name><operator>.</operator><name>execute</name></name><argument_list>(<argument><expr><name>SCI_GETLENGTH</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>mainSelection</name><operator>.</operator><name>cpMin</name></name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>mainSelection</name><operator>.</operator><name>cpMax</name></name> <operator>&lt;</operator> <name>docLength</name><operator>)</operator></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name><name>_invisibleEditView</name><operator>.</operator><name>execute</name></name><argument_list>(<argument><expr><name>SCI_SETSELECTIONSTART</name></expr></argument>, <argument><expr><name><name>mainSelection</name><operator>.</operator><name>cpMin</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>_invisibleEditView</name><operator>.</operator><name>execute</name></name><argument_list>(<argument><expr><name>SCI_SETSELECTIONEND</name></expr></argument>, <argument><expr><name><name>mainSelection</name><operator>.</operator><name>cpMax</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if>
		<else>else
		<block>{<block_content>
			<expr_stmt><expr><name>isEntireDoc</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></if></if_stmt>

	<decl_stmt><decl><type><name>FindersInfo</name></type> <name>findersInfo</name></decl>;</decl_stmt>
	<expr_stmt><expr><name><name>findersInfo</name><operator>.</operator><name>_pFileName</name></name> <operator>=</operator> <call><name><name>pBuf</name><operator>-&gt;</operator><name>getFullPathName</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>nbTotal</name> <operator>+=</operator> <call><name><name>_findReplaceDlg</name><operator>.</operator><name>processAll</name></name><argument_list>(<argument><expr><name>ProcessFindAll</name></expr></argument>, <argument><expr><name><name>FindReplaceDlg</name><operator>::</operator><name>_env</name></name></expr></argument>, <argument><expr><name>isEntireDoc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>findersInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name><name>_findReplaceDlg</name><operator>.</operator><name>finishFilesSearch</name></name><argument_list>(<argument><expr><name>nbTotal</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>isEntireDoc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name><name>_invisibleEditView</name><operator>.</operator><name>execute</name></name><argument_list>(<argument><expr><name>SCI_SETDOCPOINTER</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>oldDoc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_pEditView</name> <operator>=</operator> <name>pOldView</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name><name>_findReplaceDlg</name><operator>.</operator><name>putFindResult</name></name><argument_list>(<argument><expr><name>nbTotal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>nbTotal</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>NppParameters</name><modifier>&amp;</modifier></type> <name>nppParam</name> <init>= <expr><call><name><name>NppParameters</name><operator>::</operator><name>getInstance</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>NppGUI</name><modifier>&amp;</modifier></type> <name>nppGui</name> <init>= <expr><call><name><name>nppParam</name><operator>.</operator><name>getNppGUI</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>nppGui</name><operator>.</operator><name>_findDlgAlwaysVisible</name></name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name><name>_findReplaceDlg</name><operator>.</operator><name>display</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><literal type="boolean">true</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name><name>Notepad_plus</name><operator>::</operator><name>filePrint</name></name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>showDialog</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Printer</name></type> <name>printer</name></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>intptr_t</name></type> <name>startPos</name> <init>= <expr><call><name><name>_pEditView</name><operator>-&gt;</operator><name>execute</name></name><argument_list>(<argument><expr><name>SCI_GETSELECTIONSTART</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>intptr_t</name></type> <name>endPos</name> <init>= <expr><call><name><name>_pEditView</name><operator>-&gt;</operator><name>execute</name></name><argument_list>(<argument><expr><name>SCI_GETSELECTIONEND</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name><name>printer</name><operator>.</operator><name>init</name></name><argument_list>(<argument><expr><call><name><name>_pPublicInterface</name><operator>-&gt;</operator><name>getHinst</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>_pPublicInterface</name><operator>-&gt;</operator><name>getHSelf</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>_pEditView</name></expr></argument>, <argument><expr><name>showDialog</name></expr></argument>, <argument><expr><name>startPos</name></expr></argument>, <argument><expr><name>endPos</name></expr></argument>, <argument><expr><call><name><name>_nativeLangSpeaker</name><operator>.</operator><name>isRTL</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name>printer</name><operator>.</operator><name>doPrint</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name><name>Notepad_plus</name><operator>::</operator><name>doSaveOrNot</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>TCHAR</name><modifier>*</modifier></type> <name>fn</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>isMulti</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><operator>(</operator><call><name><name>NppParameters</name><operator>::</operator><name>getInstance</name></name><argument_list>()</argument_list></call><operator>)</operator><operator>.</operator><call><name>isEndSessionCritical</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>IDCANCEL</name></expr>;</return></block_content></block></if></if_stmt> <comment type="line">// simulate Esc-key or Cancel-button as there should not be any big delay / code-flow block</comment>

	<comment type="line">// In case Notepad++ is iconized into notification zone</comment>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><operator>::</operator><name>IsWindowVisible</name></name><argument_list>(<argument><expr><call><name><name>_pPublicInterface</name><operator>-&gt;</operator><name>getHSelf</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name><operator>::</operator><name>ShowWindow</name></name><argument_list>(<argument><expr><call><name><name>_pPublicInterface</name><operator>-&gt;</operator><name>getHSelf</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>SW_SHOW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="line">// Send sizing info to make window fit (specially to show tool bar.)</comment>
		<expr_stmt><expr><call><name><operator>::</operator><name>SendMessage</name></name><argument_list>(<argument><expr><call><name><name>_pPublicInterface</name><operator>-&gt;</operator><name>getHSelf</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>WM_SIZE</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>isMulti</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>generic_string</name></type> <name>title</name></decl>, <decl><type ref="prev"/><name>msg</name></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>_nativeLangSpeaker</name><operator>.</operator><name>getDoSaveOrNotStrings</name></name><argument_list>(<argument><expr><name>title</name></expr></argument>, <argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name>title</name> <operator>=</operator> <call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"Save"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>msg</name> <operator>=</operator> <call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"Save file \"$STR_REPLACE$\" ?"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><name>msg</name> <operator>=</operator> <call><name>stringReplace</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"$STR_REPLACE$"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>fn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<return>return <expr><call><name><operator>::</operator><name>MessageBox</name></name><argument_list>(<argument><expr><call><name><name>_pPublicInterface</name><operator>-&gt;</operator><name>getHSelf</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>msg</name><operator>.</operator><name>c_str</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>title</name><operator>.</operator><name>c_str</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>MB_YESNOCANCEL</name> <operator>|</operator> <name>MB_ICONQUESTION</name> <operator>|</operator> <name>MB_APPLMODAL</name></expr></argument>)</argument_list></call></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<decl_stmt><decl><type><name>DoSaveOrNotBox</name></type> <name>doSaveOrNotBox</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name><name>doSaveOrNotBox</name><operator>.</operator><name>init</name></name><argument_list>(<argument><expr><call><name><name>_pPublicInterface</name><operator>-&gt;</operator><name>getHinst</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>_pPublicInterface</name><operator>-&gt;</operator><name>getHSelf</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>fn</name></expr></argument>, <argument><expr><name>isMulti</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name>doSaveOrNotBox</name><operator>.</operator><name>doDialog</name></name><argument_list>(<argument><expr><call><name><name>_nativeLangSpeaker</name><operator>.</operator><name>isRTL</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>buttonID</name> <init>= <expr><call><name><name>doSaveOrNotBox</name><operator>.</operator><name>getClickedButtonId</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name><name>doSaveOrNotBox</name><operator>.</operator><name>destroy</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>buttonID</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name><name>Notepad_plus</name><operator>::</operator><name>doSaveAll</name></name><parameter_list>()</parameter_list>
<block>{<block_content>
	<comment type="line">// In case Notepad++ is iconized into notification zone</comment>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><operator>::</operator><name>IsWindowVisible</name></name><argument_list>(<argument><expr><call><name><name>_pPublicInterface</name><operator>-&gt;</operator><name>getHSelf</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name><operator>::</operator><name>ShowWindow</name></name><argument_list>(<argument><expr><call><name><name>_pPublicInterface</name><operator>-&gt;</operator><name>getHSelf</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>SW_SHOW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="line">// Send sizing info to make window fit (specially to show tool bar.)</comment>
		<expr_stmt><expr><call><name><operator>::</operator><name>SendMessage</name></name><argument_list>(<argument><expr><call><name><name>_pPublicInterface</name><operator>-&gt;</operator><name>getHSelf</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>WM_SIZE</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<decl_stmt><decl><type><name>DoSaveAllBox</name></type> <name>doSaveAllBox</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name><name>doSaveAllBox</name><operator>.</operator><name>init</name></name><argument_list>(<argument><expr><call><name><name>_pPublicInterface</name><operator>-&gt;</operator><name>getHinst</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>_pPublicInterface</name><operator>-&gt;</operator><name>getHSelf</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name>doSaveAllBox</name><operator>.</operator><name>doDialog</name></name><argument_list>(<argument><expr><call><name><name>_nativeLangSpeaker</name><operator>.</operator><name>isRTL</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>buttonID</name> <init>= <expr><call><name><name>doSaveAllBox</name><operator>.</operator><name>getClickedButtonId</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name><name>doSaveAllBox</name><operator>.</operator><name>destroy</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>buttonID</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name><name>Notepad_plus</name><operator>::</operator><name>doReloadOrNot</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>TCHAR</name> <modifier>*</modifier></type><name>fn</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>dirty</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>dirty</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><call><name><name>_nativeLangSpeaker</name><operator>.</operator><name>messageBox</name></name><argument_list>(<argument><expr><literal type="string">"DoReloadOrNotAndLooseChange"</literal></expr></argument>,
			<argument><expr><call><name><name>_pPublicInterface</name><operator>-&gt;</operator><name>getHSelf</name></name><argument_list>()</argument_list></call></expr></argument>,
			<argument><expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"\"$STR_REPLACE$\"\r\rThis file has been modified by another program.\rDo you want to reload it and lose the changes made in Notepad++?"</literal></expr></argument>)</argument_list></call></expr></argument>,
			<argument><expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"Reload"</literal></expr></argument>)</argument_list></call></expr></argument>,
			<argument><expr><name>MB_YESNO</name> <operator>|</operator> <name>MB_APPLMODAL</name> <operator>|</operator> <name>MB_ICONEXCLAMATION</name></expr></argument>,
			<argument><expr><literal type="number">0</literal></expr></argument>, <comment type="line">// not used</comment>
			<argument><expr><name>fn</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<return>return <expr><call><name><name>_nativeLangSpeaker</name><operator>.</operator><name>messageBox</name></name><argument_list>(<argument><expr><literal type="string">"DoReloadOrNot"</literal></expr></argument>,
			<argument><expr><call><name><name>_pPublicInterface</name><operator>-&gt;</operator><name>getHSelf</name></name><argument_list>()</argument_list></call></expr></argument>,
			<argument><expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"\"$STR_REPLACE$\"\r\rThis file has been modified by another program.\rDo you want to reload it?"</literal></expr></argument>)</argument_list></call></expr></argument>,
			<argument><expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"Reload"</literal></expr></argument>)</argument_list></call></expr></argument>,
			<argument><expr><name>MB_YESNO</name> <operator>|</operator> <name>MB_APPLMODAL</name> <operator>|</operator> <name>MB_ICONQUESTION</name></expr></argument>,
			<argument><expr><literal type="number">0</literal></expr></argument>, <comment type="line">// not used</comment>
			<argument><expr><name>fn</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name><name>Notepad_plus</name><operator>::</operator><name>doCloseOrNot</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>TCHAR</name> <modifier>*</modifier></type><name>fn</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name><name>_nativeLangSpeaker</name><operator>.</operator><name>messageBox</name></name><argument_list>(<argument><expr><literal type="string">"DoCloseOrNot"</literal></expr></argument>,
		<argument><expr><call><name><name>_pPublicInterface</name><operator>-&gt;</operator><name>getHSelf</name></name><argument_list>()</argument_list></call></expr></argument>,
		<argument><expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"The file \"$STR_REPLACE$\" doesn't exist anymore.\rKeep this file in editor?"</literal></expr></argument>)</argument_list></call></expr></argument>,
		<argument><expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"Keep non existing file"</literal></expr></argument>)</argument_list></call></expr></argument>,
		<argument><expr><name>MB_YESNO</name> <operator>|</operator> <name>MB_ICONQUESTION</name> <operator>|</operator> <name>MB_APPLMODAL</name></expr></argument>,
		<argument><expr><literal type="number">0</literal></expr></argument>, <comment type="line">// not used</comment>
		<argument><expr><name>fn</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name><name>Notepad_plus</name><operator>::</operator><name>doDeleteOrNot</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>TCHAR</name> <modifier>*</modifier></type><name>fn</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name><name>_nativeLangSpeaker</name><operator>.</operator><name>messageBox</name></name><argument_list>(<argument><expr><literal type="string">"DoDeleteOrNot"</literal></expr></argument>,
		<argument><expr><call><name><name>_pPublicInterface</name><operator>-&gt;</operator><name>getHSelf</name></name><argument_list>()</argument_list></call></expr></argument>,
		<argument><expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"The file \"$STR_REPLACE$\"\rwill be moved to your Recycle Bin and this document will be closed.\rContinue?"</literal></expr></argument>)</argument_list></call></expr></argument>,
		<argument><expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"Delete file"</literal></expr></argument>)</argument_list></call></expr></argument>,
		<argument><expr><name>MB_OKCANCEL</name> <operator>|</operator> <name>MB_ICONQUESTION</name> <operator>|</operator> <name>MB_APPLMODAL</name></expr></argument>,
		<argument><expr><literal type="number">0</literal></expr></argument>, <comment type="line">// not used</comment>
		<argument><expr><name>fn</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name><name>Notepad_plus</name><operator>::</operator><name>enableMenu</name></name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>cmdID</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>doEnable</name></decl></parameter>)</parameter_list> <specifier>const</specifier>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>flag</name> <init>= <expr><ternary><condition><expr><name>doEnable</name></expr>?</condition><then><expr><name>MF_ENABLED</name> <operator>|</operator> <name>MF_BYCOMMAND</name></expr></then><else>:<expr><name>MF_DISABLED</name> <operator>|</operator> <name>MF_GRAYED</name> <operator>|</operator> <name>MF_BYCOMMAND</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name><operator>::</operator><name>EnableMenuItem</name></name><argument_list>(<argument><expr><name>_mainMenuHandle</name></expr></argument>, <argument><expr><name>cmdID</name></expr></argument>, <argument><expr><name>flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name><name>Notepad_plus</name><operator>::</operator><name>enableCommand</name></name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>cmdID</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>doEnable</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>which</name></decl></parameter>)</parameter_list> <specifier>const</specifier>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>which</name> <operator>&amp;</operator> <name>MENU</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>enableMenu</name><argument_list>(<argument><expr><name>cmdID</name></expr></argument>, <argument><expr><name>doEnable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>which</name> <operator>&amp;</operator> <name>TOOLBAR</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name><name>_toolBar</name><operator>.</operator><name>enable</name></name><argument_list>(<argument><expr><name>cmdID</name></expr></argument>, <argument><expr><name>doEnable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name><name>Notepad_plus</name><operator>::</operator><name>checkClipboard</name></name><parameter_list>()</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>bool</name></type> <name>hasSelection</name> <init>= <expr><operator>(</operator><call><name><name>_pEditView</name><operator>-&gt;</operator><name>execute</name></name><argument_list>(<argument><expr><name>SCI_GETSELECTIONSTART</name></expr></argument>)</argument_list></call> <operator>!=</operator> <call><name><name>_pEditView</name><operator>-&gt;</operator><name>execute</name></name><argument_list>(<argument><expr><name>SCI_GETSELECTIONEND</name></expr></argument>)</argument_list></call><operator>)</operator></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name>canPaste</name> <init>= <expr><operator>(</operator><call><name><name>_pEditView</name><operator>-&gt;</operator><name>execute</name></name><argument_list>(<argument><expr><name>SCI_CANPASTE</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>enableCommand</name><argument_list>(<argument><expr><name>IDM_EDIT_CUT</name></expr></argument>, <argument><expr><name>hasSelection</name></expr></argument>, <argument><expr><name>MENU</name> <operator>|</operator> <name>TOOLBAR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>enableCommand</name><argument_list>(<argument><expr><name>IDM_EDIT_COPY</name></expr></argument>, <argument><expr><name>hasSelection</name></expr></argument>, <argument><expr><name>MENU</name> <operator>|</operator> <name>TOOLBAR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>enableCommand</name><argument_list>(<argument><expr><name>IDM_EDIT_PASTE</name></expr></argument>, <argument><expr><name>canPaste</name></expr></argument>, <argument><expr><name>MENU</name> <operator>|</operator> <name>TOOLBAR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>enableCommand</name><argument_list>(<argument><expr><name>IDM_EDIT_DELETE</name></expr></argument>, <argument><expr><name>hasSelection</name></expr></argument>, <argument><expr><name>MENU</name> <operator>|</operator> <name>TOOLBAR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>enableCommand</name><argument_list>(<argument><expr><name>IDM_EDIT_UPPERCASE</name></expr></argument>, <argument><expr><name>hasSelection</name></expr></argument>, <argument><expr><name>MENU</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>enableCommand</name><argument_list>(<argument><expr><name>IDM_EDIT_LOWERCASE</name></expr></argument>, <argument><expr><name>hasSelection</name></expr></argument>, <argument><expr><name>MENU</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>enableCommand</name><argument_list>(<argument><expr><name>IDM_EDIT_PROPERCASE_FORCE</name></expr></argument>, <argument><expr><name>hasSelection</name></expr></argument>, <argument><expr><name>MENU</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>enableCommand</name><argument_list>(<argument><expr><name>IDM_EDIT_PROPERCASE_BLEND</name></expr></argument>, <argument><expr><name>hasSelection</name></expr></argument>, <argument><expr><name>MENU</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>enableCommand</name><argument_list>(<argument><expr><name>IDM_EDIT_SENTENCECASE_FORCE</name></expr></argument>, <argument><expr><name>hasSelection</name></expr></argument>, <argument><expr><name>MENU</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>enableCommand</name><argument_list>(<argument><expr><name>IDM_EDIT_SENTENCECASE_BLEND</name></expr></argument>, <argument><expr><name>hasSelection</name></expr></argument>, <argument><expr><name>MENU</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>enableCommand</name><argument_list>(<argument><expr><name>IDM_EDIT_INVERTCASE</name></expr></argument>, <argument><expr><name>hasSelection</name></expr></argument>, <argument><expr><name>MENU</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>enableCommand</name><argument_list>(<argument><expr><name>IDM_EDIT_RANDOMCASE</name></expr></argument>, <argument><expr><name>hasSelection</name></expr></argument>, <argument><expr><name>MENU</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name><name>Notepad_plus</name><operator>::</operator><name>checkDocState</name></name><parameter_list>()</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Buffer</name> <modifier>*</modifier></type> <name>curBuf</name> <init>= <expr><call><name><name>_pEditView</name><operator>-&gt;</operator><name>getCurrentBuffer</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>bool</name></type> <name>isCurrentDirty</name> <init>= <expr><call><name><name>curBuf</name><operator>-&gt;</operator><name>isDirty</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name>isSeveralDirty</name> <init>= <expr><name>isCurrentDirty</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name>isFileExisting</name> <init>= <expr><call><name>PathFileExists</name><argument_list>(<argument><expr><call><name><name>curBuf</name><operator>-&gt;</operator><name>getFullPathName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>!=</operator> <name>FALSE</name></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>isCurrentDirty</name></expr>)</condition>
	<block>{<block_content>
		<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>MainFileManager</name><operator>.</operator><name>getNbBuffers</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><call><name><name>MainFileManager</name><operator>.</operator><name>getBufferByIndex</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><call><name>isDirty</name><argument_list>()</argument_list></call></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><name>isSeveralDirty</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
				<break>break;</break>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></for>
	</block_content>}</block></if></if_stmt>

	<decl_stmt><decl><type><name>bool</name></type> <name>isCurrentUntitled</name> <init>= <expr><call><name><name>curBuf</name><operator>-&gt;</operator><name>isUntitled</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>enableCommand</name><argument_list>(<argument><expr><name>IDM_FILE_SAVE</name></expr></argument>, <argument><expr><name>isCurrentDirty</name></expr></argument>, <argument><expr><name>MENU</name> <operator>|</operator> <name>TOOLBAR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>enableCommand</name><argument_list>(<argument><expr><name>IDM_FILE_SAVEALL</name></expr></argument>, <argument><expr><name>isSeveralDirty</name></expr></argument>, <argument><expr><name>MENU</name> <operator>|</operator> <name>TOOLBAR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>enableCommand</name><argument_list>(<argument><expr><name>IDM_VIEW_GOTO_NEW_INSTANCE</name></expr></argument>, <argument><expr><operator>!</operator><operator>(</operator><name>isCurrentDirty</name> <operator>||</operator> <name>isCurrentUntitled</name><operator>)</operator></expr></argument>, <argument><expr><name>MENU</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>enableCommand</name><argument_list>(<argument><expr><name>IDM_VIEW_LOAD_IN_NEW_INSTANCE</name></expr></argument>, <argument><expr><operator>!</operator><operator>(</operator><name>isCurrentDirty</name> <operator>||</operator> <name>isCurrentUntitled</name><operator>)</operator></expr></argument>, <argument><expr><name>MENU</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>bool</name></type> <name>isSysReadOnly</name> <init>= <expr><call><name><name>curBuf</name><operator>-&gt;</operator><name>getFileReadOnly</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>enableCommand</name><argument_list>(<argument><expr><name>IDM_EDIT_CLEARREADONLY</name></expr></argument>, <argument><expr><name>isSysReadOnly</name></expr></argument>, <argument><expr><name>MENU</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>bool</name></type> <name>doEnable</name> <init>= <expr><operator>!</operator><operator>(</operator><call><name><name>curBuf</name><operator>-&gt;</operator><name>isMonitoringOn</name></name><argument_list>()</argument_list></call> <operator>||</operator> <name>isSysReadOnly</name><operator>)</operator></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>enableCommand</name><argument_list>(<argument><expr><name>IDM_EDIT_SETREADONLY</name></expr></argument>, <argument><expr><name>doEnable</name></expr></argument>, <argument><expr><name>MENU</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>bool</name></type> <name>isUserReadOnly</name> <init>= <expr><call><name><name>curBuf</name><operator>-&gt;</operator><name>getUserReadOnly</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name><operator>::</operator><name>CheckMenuItem</name></name><argument_list>(<argument><expr><name>_mainMenuHandle</name></expr></argument>, <argument><expr><name>IDM_EDIT_SETREADONLY</name></expr></argument>, <argument><expr><name>MF_BYCOMMAND</name> <operator>|</operator> <operator>(</operator><ternary><condition><expr><name>isUserReadOnly</name></expr> ?</condition><then> <expr><name>MF_CHECKED</name></expr> </then><else>: <expr><name>MF_UNCHECKED</name></expr></else></ternary><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>enableCommand</name><argument_list>(<argument><expr><name>IDM_FILE_DELETE</name></expr></argument>, <argument><expr><name>isFileExisting</name></expr></argument>, <argument><expr><name>MENU</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="line">//enableCommand(IDM_FILE_RENAME, isFileExisting, MENU);</comment>
	<expr_stmt><expr><call><name>enableCommand</name><argument_list>(<argument><expr><name>IDM_FILE_OPEN_CMD</name></expr></argument>, <argument><expr><name>isFileExisting</name></expr></argument>, <argument><expr><name>MENU</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>enableCommand</name><argument_list>(<argument><expr><name>IDM_FILE_OPEN_FOLDER</name></expr></argument>, <argument><expr><name>isFileExisting</name></expr></argument>, <argument><expr><name>MENU</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>enableCommand</name><argument_list>(<argument><expr><name>IDM_FILE_RELOAD</name></expr></argument>, <argument><expr><name>isFileExisting</name></expr></argument>, <argument><expr><name>MENU</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>enableCommand</name><argument_list>(<argument><expr><name>IDM_FILE_OPEN_DEFAULT_VIEWER</name></expr></argument>, <argument><expr><call><name>isAssoCommandExisting</name><argument_list>(<argument><expr><call><name><name>curBuf</name><operator>-&gt;</operator><name>getFullPathName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>MENU</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>enableCommand</name><argument_list>(<argument><expr><name>IDM_VIEW_IN_FIREFOX</name></expr></argument>, <argument><expr><name>isFileExisting</name></expr></argument>, <argument><expr><name>MENU</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>enableCommand</name><argument_list>(<argument><expr><name>IDM_VIEW_IN_CHROME</name></expr></argument>, <argument><expr><name>isFileExisting</name></expr></argument>, <argument><expr><name>MENU</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>enableCommand</name><argument_list>(<argument><expr><name>IDM_VIEW_IN_IE</name></expr></argument>, <argument><expr><name>isFileExisting</name></expr></argument>, <argument><expr><name>MENU</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>enableCommand</name><argument_list>(<argument><expr><name>IDM_VIEW_IN_EDGE</name></expr></argument>, <argument><expr><name>isFileExisting</name></expr></argument>, <argument><expr><name>MENU</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>enableConvertMenuItems</name><argument_list>(<argument><expr><call><name><name>curBuf</name><operator>-&gt;</operator><name>getEolFormat</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>checkUnicodeMenuItems</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>checkLangsMenu</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>_pAnsiCharPanel</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name><name>_pAnsiCharPanel</name><operator>-&gt;</operator><name>switchEncoding</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>enableCommand</name><argument_list>(<argument><expr><name>IDM_VIEW_MONITORING</name></expr></argument>, <argument><expr><operator>!</operator><call><name><name>curBuf</name><operator>-&gt;</operator><name>isUntitled</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>MENU</name> <operator>|</operator> <name>TOOLBAR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>checkMenuItem</name><argument_list>(<argument><expr><name>IDM_VIEW_MONITORING</name></expr></argument>, <argument><expr><call><name><name>curBuf</name><operator>-&gt;</operator><name>isMonitoringOn</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name>_toolBar</name><operator>.</operator><name>setCheck</name></name><argument_list>(<argument><expr><name>IDM_VIEW_MONITORING</name></expr></argument>, <argument><expr><call><name><name>curBuf</name><operator>-&gt;</operator><name>isMonitoringOn</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name><name>Notepad_plus</name><operator>::</operator><name>checkUndoState</name></name><parameter_list>()</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>enableCommand</name><argument_list>(<argument><expr><name>IDM_EDIT_UNDO</name></expr></argument>, <argument><expr><call><name><name>_pEditView</name><operator>-&gt;</operator><name>execute</name></name><argument_list>(<argument><expr><name>SCI_CANUNDO</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>MENU</name> <operator>|</operator> <name>TOOLBAR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>enableCommand</name><argument_list>(<argument><expr><name>IDM_EDIT_REDO</name></expr></argument>, <argument><expr><call><name><name>_pEditView</name><operator>-&gt;</operator><name>execute</name></name><argument_list>(<argument><expr><name>SCI_CANREDO</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>MENU</name> <operator>|</operator> <name>TOOLBAR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name><name>Notepad_plus</name><operator>::</operator><name>checkMacroState</name></name><parameter_list>()</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>enableCommand</name><argument_list>(<argument><expr><name>IDM_MACRO_STARTRECORDINGMACRO</name></expr></argument>, <argument><expr><operator>!</operator><name>_recordingMacro</name></expr></argument>, <argument><expr><name>MENU</name> <operator>|</operator> <name>TOOLBAR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>enableCommand</name><argument_list>(<argument><expr><name>IDM_MACRO_STOPRECORDINGMACRO</name></expr></argument>, <argument><expr><name>_recordingMacro</name></expr></argument>, <argument><expr><name>MENU</name> <operator>|</operator> <name>TOOLBAR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>enableCommand</name><argument_list>(<argument><expr><name>IDM_MACRO_PLAYBACKRECORDEDMACRO</name></expr></argument>, <argument><expr><operator>!</operator><call><name><name>_macro</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><name>_recordingMacro</name></expr></argument>, <argument><expr><name>MENU</name> <operator>|</operator> <name>TOOLBAR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>enableCommand</name><argument_list>(<argument><expr><name>IDM_MACRO_SAVECURRENTMACRO</name></expr></argument>, <argument><expr><operator>!</operator><call><name><name>_macro</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><name>_recordingMacro</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>_recordingSaved</name></expr></argument>, <argument><expr><name>MENU</name> <operator>|</operator> <name>TOOLBAR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>enableCommand</name><argument_list>(<argument><expr><name>IDM_MACRO_RUNMULTIMACRODLG</name></expr></argument>, <argument><expr><operator>(</operator><operator>!</operator><call><name><name>_macro</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><name>_recordingMacro</name><operator>)</operator> <operator>||</operator> <operator>!</operator><operator>(</operator><operator>(</operator><call><name><name>NppParameters</name><operator>::</operator><name>getInstance</name></name><argument_list>()</argument_list></call><operator>)</operator><operator>.</operator><call><name>getMacroList</name><argument_list>()</argument_list></call><operator>)</operator><operator>.</operator><call><name>empty</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>MENU</name> <operator>|</operator> <name>TOOLBAR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name><name>Notepad_plus</name><operator>::</operator><name>checkSyncState</name></name><parameter_list>()</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>bool</name></type> <name>canDoSync</name> <init>= <expr><call><name>viewVisible</name><argument_list>(<argument><expr><name>MAIN_VIEW</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>viewVisible</name><argument_list>(<argument><expr><name>SUB_VIEW</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>canDoSync</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name><name>_syncInfo</name><operator>.</operator><name>_isSynScollV</name></name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>_syncInfo</name><operator>.</operator><name>_isSynScollH</name></name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>checkMenuItem</name><argument_list>(<argument><expr><name>IDM_VIEW_SYNSCROLLV</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>checkMenuItem</name><argument_list>(<argument><expr><name>IDM_VIEW_SYNSCROLLH</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>_toolBar</name><operator>.</operator><name>setCheck</name></name><argument_list>(<argument><expr><name>IDM_VIEW_SYNSCROLLV</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>_toolBar</name><operator>.</operator><name>setCheck</name></name><argument_list>(<argument><expr><name>IDM_VIEW_SYNSCROLLH</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>enableCommand</name><argument_list>(<argument><expr><name>IDM_VIEW_SYNSCROLLV</name></expr></argument>, <argument><expr><name>canDoSync</name></expr></argument>, <argument><expr><name>MENU</name> <operator>|</operator> <name>TOOLBAR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>enableCommand</name><argument_list>(<argument><expr><name>IDM_VIEW_SYNSCROLLH</name></expr></argument>, <argument><expr><name>canDoSync</name></expr></argument>, <argument><expr><name>MENU</name> <operator>|</operator> <name>TOOLBAR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name><name>Notepad_plus</name><operator>::</operator><name>setupColorSampleBitmapsOnMainMenuItems</name></name><parameter_list>()</parameter_list>
<block>{<block_content>
	<comment type="line">// set up bitmaps on menu items</comment>
	<comment type="line">// style-related bitmaps of color samples</comment>

	<struct>struct
	<block>{<public type="default">
		<decl_stmt><decl><type><name>int</name></type> <name>firstOfThisColorMenuId</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>styleIndic</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>sameColorMenuIds</name></decl>;</decl_stmt>
	</public>}</block>
	<decl><name><name>bitmapOnStyleMenuItemsInfo</name><index>[]</index></name> <init>=
	<expr><block>{
		<expr><block>{ <expr><name>IDM_SEARCH_GONEXTMARKER5</name></expr>, <expr><name>SCE_UNIVERSAL_FOUND_STYLE_EXT5</name></expr>, <expr><block>{ <expr><name>IDM_SEARCH_MARKALLEXT5</name></expr>, <expr><name>IDM_SEARCH_MARKONEEXT5</name></expr>, <expr><name>IDM_SEARCH_UNMARKALLEXT5</name></expr>, <expr><name>IDM_SEARCH_GOPREVMARKER5</name></expr>, <expr><name>IDM_SEARCH_STYLE5TOCLIP</name></expr> }</block></expr> }</block></expr>,
		<expr><block>{ <expr><name>IDM_SEARCH_GONEXTMARKER4</name></expr>, <expr><name>SCE_UNIVERSAL_FOUND_STYLE_EXT4</name></expr>, <expr><block>{ <expr><name>IDM_SEARCH_MARKALLEXT4</name></expr>, <expr><name>IDM_SEARCH_MARKONEEXT4</name></expr>, <expr><name>IDM_SEARCH_UNMARKALLEXT4</name></expr>, <expr><name>IDM_SEARCH_GOPREVMARKER4</name></expr>, <expr><name>IDM_SEARCH_STYLE4TOCLIP</name></expr> }</block></expr> }</block></expr>,
		<expr><block>{ <expr><name>IDM_SEARCH_GONEXTMARKER3</name></expr>, <expr><name>SCE_UNIVERSAL_FOUND_STYLE_EXT3</name></expr>, <expr><block>{ <expr><name>IDM_SEARCH_MARKALLEXT3</name></expr>, <expr><name>IDM_SEARCH_MARKONEEXT3</name></expr>, <expr><name>IDM_SEARCH_UNMARKALLEXT3</name></expr>, <expr><name>IDM_SEARCH_GOPREVMARKER3</name></expr>, <expr><name>IDM_SEARCH_STYLE3TOCLIP</name></expr> }</block></expr> }</block></expr>,
		<expr><block>{ <expr><name>IDM_SEARCH_GONEXTMARKER2</name></expr>, <expr><name>SCE_UNIVERSAL_FOUND_STYLE_EXT2</name></expr>, <expr><block>{ <expr><name>IDM_SEARCH_MARKALLEXT2</name></expr>, <expr><name>IDM_SEARCH_MARKONEEXT2</name></expr>, <expr><name>IDM_SEARCH_UNMARKALLEXT2</name></expr>, <expr><name>IDM_SEARCH_GOPREVMARKER2</name></expr>, <expr><name>IDM_SEARCH_STYLE2TOCLIP</name></expr> }</block></expr> }</block></expr>,
		<expr><block>{ <expr><name>IDM_SEARCH_GONEXTMARKER1</name></expr>, <expr><name>SCE_UNIVERSAL_FOUND_STYLE_EXT1</name></expr>, <expr><block>{ <expr><name>IDM_SEARCH_MARKALLEXT1</name></expr>, <expr><name>IDM_SEARCH_MARKONEEXT1</name></expr>, <expr><name>IDM_SEARCH_UNMARKALLEXT1</name></expr>, <expr><name>IDM_SEARCH_GOPREVMARKER1</name></expr>, <expr><name>IDM_SEARCH_STYLE1TOCLIP</name></expr> }</block></expr> }</block></expr>,
		<expr><block>{ <expr><name>IDM_SEARCH_GONEXTMARKER_DEF</name></expr>, <expr><name>SCE_UNIVERSAL_FOUND_STYLE</name></expr>, <expr><block>{ <expr><name>IDM_SEARCH_GOPREVMARKER_DEF</name></expr>, <expr><name>IDM_SEARCH_MARKEDTOCLIP</name></expr> }</block></expr> }</block></expr>
	}</block></expr></init></decl>;</struct>

	<for>for <control>(<init><decl><type><name>size_t</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>bitmapOnStyleMenuItemsInfo</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>bitmapOnStyleMenuItemsInfo</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control>
	<block>{<block_content>
		<decl_stmt><decl><type><specifier>const</specifier> <name>Style</name> <modifier>*</modifier></type> <name>pStyle</name> <init>= <expr><call><name><name>NppParameters</name><operator>::</operator><name>getInstance</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getMiscStylerArray</name><argument_list>()</argument_list></call><operator>.</operator><call><name>findByID</name><argument_list>(<argument><expr><name><name>bitmapOnStyleMenuItemsInfo</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>styleIndic</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if <condition>(<expr><name>pStyle</name></expr>)</condition>
		<block>{<block_content>
			<decl_stmt><decl><type><name>HBITMAP</name></type> <name>hNewBitmap</name> <init>= <expr><call><name>generateSolidColourMenuItemIcon</name><argument_list>(<argument><expr><name><name>pStyle</name><operator>-&gt;</operator><name>_bgColor</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

			<expr_stmt><expr><call><name>SetMenuItemBitmaps</name><argument_list>(<argument><expr><name>_mainMenuHandle</name></expr></argument>, <argument><expr><name><name>bitmapOnStyleMenuItemsInfo</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>firstOfThisColorMenuId</name></expr></argument>, <argument><expr><name>MF_BYCOMMAND</name></expr></argument>, <argument><expr><name>hNewBitmap</name></expr></argument>, <argument><expr><name>hNewBitmap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<for>for <control>(<init><decl><type><name>int</name></type> <name>relatedMenuId</name> <range>: <expr><name><name>bitmapOnStyleMenuItemsInfo</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>sameColorMenuIds</name></expr></range></decl></init>)</control>
			<block>{<block_content>
				<expr_stmt><expr><call><name>SetMenuItemBitmaps</name><argument_list>(<argument><expr><name>_mainMenuHandle</name></expr></argument>, <argument><expr><name>relatedMenuId</name></expr></argument>, <argument><expr><name>MF_BYCOMMAND</name></expr></argument>, <argument><expr><name>hNewBitmap</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></for>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>

	<comment type="line">// Adds tab colour icons</comment>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">5</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
	<block>{<block_content>
		<decl_stmt><decl><type><name>COLORREF</name></type> <name>colour</name> <init>= <expr><call><name><name>NppDarkMode</name><operator>::</operator><name>getIndividualTabColour</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><call><name><name>NppDarkMode</name><operator>::</operator><name>isDarkMenuEnabled</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>HBITMAP</name></type> <name>hBitmap</name> <init>= <expr><call><name>generateSolidColourMenuItemIcon</name><argument_list>(<argument><expr><name>colour</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>SetMenuItemBitmaps</name><argument_list>(<argument><expr><name>_mainMenuHandle</name></expr></argument>, <argument><expr><name>IDM_VIEW_TAB_COLOUR_1</name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><name>MF_BYCOMMAND</name></expr></argument>, <argument><expr><name>hBitmap</name></expr></argument>, <argument><expr><name>hBitmap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>doCheck</name><parameter_list>(<parameter><decl><type><name>HMENU</name></type> <name>mainHandle</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>id</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>MENUITEMINFO</name></type> <name>mii</name><argument_list>{}</argument_list></decl>;</decl_stmt>
	<expr_stmt><expr><name><name>mii</name><operator>.</operator><name>cbSize</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>MENUITEMINFO</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>mii</name><operator>.</operator><name>fMask</name></name> <operator>=</operator> <name>MIIM_SUBMENU</name> <operator>|</operator> <name>MIIM_FTYPE</name> <operator>|</operator> <name>MIIM_ID</name> <operator>|</operator> <name>MIIM_STATE</name></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>bool</name></type> <name>found</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>count</name> <init>= <expr><call><name><operator>::</operator><name>GetMenuItemCount</name></name><argument_list>(<argument><expr><name>mainHandle</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<expr_stmt><expr><call><name><operator>::</operator><name>GetMenuItemInfo</name></name><argument_list>(<argument><expr><name>mainHandle</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>MF_BYPOSITION</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mii</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>mii</name><operator>.</operator><name>fType</name></name> <operator>==</operator> <name>MFT_RADIOCHECK</name> <operator>||</operator> <name><name>mii</name><operator>.</operator><name>fType</name></name> <operator>==</operator> <name>MFT_STRING</name></expr>)</condition>
		<block>{<block_content>
			<decl_stmt><decl><type><name>bool</name></type> <name>checked</name> <init>= <expr><ternary><condition><expr><name><name>mii</name><operator>.</operator><name>hSubMenu</name></name></expr> ?</condition><then> <expr><call><name>doCheck</name><argument_list>(<argument><expr><name><name>mii</name><operator>.</operator><name>hSubMenu</name></name></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><operator>(</operator><name><name>mii</name><operator>.</operator><name>wID</name></name> <operator>==</operator> <operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator><name>id</name><operator>)</operator></expr></else></ternary></expr></init></decl>;</decl_stmt>
			<if_stmt><if>if <condition>(<expr><name>checked</name></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><call><name><operator>::</operator><name>CheckMenuRadioItem</name></name><argument_list>(<argument><expr><name>mainHandle</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>count</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>MF_BYPOSITION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>found</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
			</block_content>}</block></if>
			<else>else
			<block>{<block_content>
				<expr_stmt><expr><name><name>mii</name><operator>.</operator><name>fState</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><operator>::</operator><name>SetMenuItemInfo</name></name><argument_list>(<argument><expr><name>mainHandle</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>MF_BYPOSITION</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mii</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></else></if_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>
	<return>return <expr><name>found</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name><name>Notepad_plus</name><operator>::</operator><name>checkLangsMenu</name></name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>id</name></decl></parameter>)</parameter_list> <specifier>const</specifier>
<block>{<block_content>
	<decl_stmt><decl><type><name>Buffer</name> <modifier>*</modifier></type> <name>curBuf</name> <init>= <expr><call><name><name>_pEditView</name><operator>-&gt;</operator><name>getCurrentBuffer</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><name>id</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>id</name> <operator>=</operator> <operator>(</operator><call><name><name>NppParameters</name><operator>::</operator><name>getInstance</name></name><argument_list>()</argument_list></call><operator>)</operator><operator>.</operator><call><name>langTypeToCommandID</name><argument_list>(<argument><expr><call><name><name>curBuf</name><operator>-&gt;</operator><name>getLangType</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>id</name> <operator>==</operator> <name>IDM_LANG_USER</name></expr>)</condition>
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><call><name><name>curBuf</name><operator>-&gt;</operator><name>isUserDefineLangExt</name></name><argument_list>()</argument_list></call></expr>)</condition>
			<block>{<block_content>
				<decl_stmt><decl><type><specifier>const</specifier> <name>TCHAR</name> <modifier>*</modifier></type><name>userLangName</name> <init>= <expr><call><name><name>curBuf</name><operator>-&gt;</operator><name>getUserDefineLangName</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>TCHAR</name></type> <name><name>menuLangName</name><index>[<expr><name>menuItemStrLenMax</name></expr>]</index></name></decl>;</decl_stmt>

				<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name>IDM_LANG_USER</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl> ;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>IDM_LANG_USER_LIMIT</name></expr> ;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
				<block>{<block_content>
					<if_stmt><if>if <condition>(<expr><call><name><operator>::</operator><name>GetMenuString</name></name><argument_list>(<argument><expr><name>_mainMenuHandle</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>menuLangName</name></expr></argument>, <argument><expr><name>menuItemStrLenMax</name></expr></argument>, <argument><expr><name>MF_BYCOMMAND</name></expr></argument>)</argument_list></call></expr>)</condition>
					<block>{<block_content>
						<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>lstrcmp</name><argument_list>(<argument><expr><name>userLangName</name></expr></argument>, <argument><expr><name>menuLangName</name></expr></argument>)</argument_list></call></expr>)</condition>
						<block>{<block_content>
							<decl_stmt><decl><type><name>HMENU</name></type> <name>_langMenuHandle</name> <init>= <expr><call><name><operator>::</operator><name>GetSubMenu</name></name><argument_list>(<argument><expr><name>_mainMenuHandle</name></expr></argument>, <argument><expr><name>MENUINDEX_LANGUAGE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
							<expr_stmt><expr><call><name>doCheck</name><argument_list>(<argument><expr><name>_langMenuHandle</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
							<return>return;</return>
						</block_content>}</block></if></if_stmt>
					</block_content>}</block></if></if_stmt>
				</block_content>}</block></for>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>
	<decl_stmt><decl><type><name>HMENU</name></type> <name>_langMenuHandle</name> <init>= <expr><call><name><operator>::</operator><name>GetSubMenu</name></name><argument_list>(<argument><expr><name>_mainMenuHandle</name></expr></argument>, <argument><expr><name>MENUINDEX_LANGUAGE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>doCheck</name><argument_list>(<argument><expr><name>_langMenuHandle</name></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>generic_string</name></type> <name><name>Notepad_plus</name><operator>::</operator><name>getLangDesc</name></name><parameter_list>(<parameter><decl><type><name>LangType</name></type> <name>langType</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>getName</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>NppParameters</name><modifier>&amp;</modifier></type> <name>nppParams</name> <init>= <expr><call><name><name>NppParameters</name><operator>::</operator><name>getInstance</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><operator>(</operator><name>langType</name> <operator>&gt;=</operator> <name>L_EXTERNAL</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>langType</name> <operator>&lt;</operator> <name><name>nppParams</name><operator>.</operator><name>L_END</name></name><operator>)</operator></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>ExternalLangContainer</name> <modifier>&amp;</modifier></type> <name>elc</name> <init>= <expr><call><name><name>nppParams</name><operator>.</operator><name>getELCFromIndex</name></name><argument_list>(<argument><expr><name>langType</name> <operator>-</operator> <name>L_EXTERNAL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>WcharMbcsConvertor</name><modifier>&amp;</modifier></type> <name>wmc</name> <init>= <expr><call><name><name>WcharMbcsConvertor</name><operator>::</operator><name>getInstance</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><specifier>const</specifier> <name>TCHAR</name><modifier>*</modifier></type> <name>lexerNameW</name> <init>= <expr><call><name><name>wmc</name><operator>.</operator><name>char2wchar</name></name><argument_list>(<argument><expr><call><name><name>elc</name><operator>.</operator><name>_name</name><operator>.</operator><name>c_str</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>CP_ACP</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<return>return <expr><call><name>generic_string</name><argument_list>(<argument><expr><name>lexerNameW</name></expr></argument>)</argument_list></call></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>langType</name> <argument_list type="generic">&lt; <argument><expr><name>L_TEXT</name> <operator>||</operator> <name>langType</name></expr></argument> &gt;</argument_list></name> <name>L_EXTERNAL</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>langType</name> <operator>=</operator> <name>L_TEXT</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<decl_stmt><decl><type><name>generic_string</name></type> <name>str2Show</name></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><name>getName</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>str2Show</name> <operator>=</operator> <name><name>ScintillaEditView</name><operator>::</operator><name>_langNameInfoArray</name><index>[<expr><name>langType</name></expr>]</index></name><operator>.</operator><name>_shortName</name></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><name>str2Show</name> <operator>=</operator> <name><name>ScintillaEditView</name><operator>::</operator><name>_langNameInfoArray</name><index>[<expr><name>langType</name></expr>]</index></name><operator>.</operator><name>_longName</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>langType</name> <operator>==</operator> <name>L_USER</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>Buffer</name> <modifier>*</modifier></type> <name>currentBuf</name> <init>= <expr><call><name><name>_pEditView</name><operator>-&gt;</operator><name>getCurrentBuffer</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if <condition>(<expr><call><name><name>currentBuf</name><operator>-&gt;</operator><name>isUserDefineLangExt</name></name><argument_list>()</argument_list></call></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name>str2Show</name> <operator>+=</operator> <call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">" - "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>str2Show</name> <operator>+=</operator> <call><name><name>currentBuf</name><operator>-&gt;</operator><name>getUserDefineLangName</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><name>str2Show</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name><name>Notepad_plus</name><operator>::</operator><name>copyMarkedLines</name></name><parameter_list>()</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>intptr_t</name></type> <name>lastLine</name> <init>= <expr><call><name><name>_pEditView</name><operator>-&gt;</operator><name>lastZeroBasedLineNumber</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>generic_string</name></type> <name>globalStr</name> <init>= <expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<for>for <control>(<init><decl><type><name>intptr_t</name></type> <name>i</name> <init>= <expr><name>lastLine</name></expr></init></decl> ;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr> ;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><call><name>bookmarkPresent</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>)</condition>
		<block>{<block_content>
			<decl_stmt><decl><type><name>generic_string</name></type> <name>currentStr</name> <init>= <expr><call><name>getMarkedLine</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>globalStr</name></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><name>globalStr</name> <operator>=</operator> <name>currentStr</name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>
	<expr_stmt><expr><call><name>str2Cliboard</name><argument_list>(<argument><expr><name>globalStr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>mutex</name></name></type> <name>mark_mutex</name></decl>;</decl_stmt>

<function><type><name>void</name></type> <name><name>Notepad_plus</name><operator>::</operator><name>cutMarkedLines</name></name><parameter_list>()</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>lock_guard</name><argument_list type="generic">&lt;<argument><expr><name><name>std</name><operator>::</operator><name>mutex</name></name></expr></argument>&gt;</argument_list></name></type> <name>lock</name><argument_list>(<argument><expr><name>mark_mutex</name></expr></argument>)</argument_list></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>intptr_t</name></type> <name>lastLine</name> <init>= <expr><call><name><name>_pEditView</name><operator>-&gt;</operator><name>lastZeroBasedLineNumber</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>generic_string</name></type> <name>globalStr</name> <init>= <expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name><name>_pEditView</name><operator>-&gt;</operator><name>execute</name></name><argument_list>(<argument><expr><name>SCI_BEGINUNDOACTION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for <control>(<init><decl><type><name>intptr_t</name></type> <name>i</name> <init>= <expr><name>lastLine</name></expr></init></decl> ;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr> ;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><call><name>bookmarkPresent</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>)</condition>
		<block>{<block_content>
			<decl_stmt><decl><type><name>generic_string</name></type> <name>currentStr</name> <init>= <expr><call><name>getMarkedLine</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>globalStr</name></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><name>globalStr</name> <operator>=</operator> <name>currentStr</name></expr>;</expr_stmt>

			<expr_stmt><expr><call><name>deleteMarkedline</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>
	<expr_stmt><expr><call><name><name>_pEditView</name><operator>-&gt;</operator><name>execute</name></name><argument_list>(<argument><expr><name>SCI_ENDUNDOACTION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>str2Cliboard</name><argument_list>(<argument><expr><name>globalStr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name><name>Notepad_plus</name><operator>::</operator><name>deleteMarkedLines</name></name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>isMarked</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>lock_guard</name><argument_list type="generic">&lt;<argument><expr><name><name>std</name><operator>::</operator><name>mutex</name></name></expr></argument>&gt;</argument_list></name></type> <name>lock</name><argument_list>(<argument><expr><name>mark_mutex</name></expr></argument>)</argument_list></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>intptr_t</name></type> <name>lastLine</name> <init>= <expr><call><name><name>_pEditView</name><operator>-&gt;</operator><name>lastZeroBasedLineNumber</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name><name>_pEditView</name><operator>-&gt;</operator><name>execute</name></name><argument_list>(<argument><expr><name>SCI_BEGINUNDOACTION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for <control>(<init><decl><type><name>intptr_t</name></type> <name>i</name> <init>= <expr><name>lastLine</name></expr></init></decl> ;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr> ;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><call><name>bookmarkPresent</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>isMarked</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>deleteMarkedline</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></for>
	<expr_stmt><expr><call><name><name>_pEditView</name><operator>-&gt;</operator><name>execute</name></name><argument_list>(<argument><expr><name>SCI_ENDUNDOACTION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name><name>Notepad_plus</name><operator>::</operator><name>pasteToMarkedLines</name></name><parameter_list>()</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>lock_guard</name><argument_list type="generic">&lt;<argument><expr><name><name>std</name><operator>::</operator><name>mutex</name></name></expr></argument>&gt;</argument_list></name></type> <name>lock</name><argument_list>(<argument><expr><name>mark_mutex</name></expr></argument>)</argument_list></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>int</name></type> <name>clipFormat</name></decl>;</decl_stmt>
	<expr_stmt><expr><name>clipFormat</name> <operator>=</operator> <name>CF_UNICODETEXT</name></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>BOOL</name></type> <name>canPaste</name> <init>= <expr><call><name><operator>::</operator><name>IsClipboardFormatAvailable</name></name><argument_list>(<argument><expr><name>clipFormat</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>canPaste</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return;</return></block_content></block></if></if_stmt>
	<decl_stmt><decl><type><name>intptr_t</name></type> <name>lastLine</name> <init>= <expr><call><name><name>_pEditView</name><operator>-&gt;</operator><name>lastZeroBasedLineNumber</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name><operator>::</operator><name>OpenClipboard</name></name><argument_list>(<argument><expr><call><name><name>_pPublicInterface</name><operator>-&gt;</operator><name>getHSelf</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>HANDLE</name></type> <name>clipboardData</name> <init>= <expr><call><name><operator>::</operator><name>GetClipboardData</name></name><argument_list>(<argument><expr><name>clipFormat</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name><operator>::</operator><name>GlobalSize</name></name><argument_list>(<argument><expr><name>clipboardData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>LPVOID</name></type> <name>clipboardDataPtr</name> <init>= <expr><call><name><operator>::</operator><name>GlobalLock</name></name><argument_list>(<argument><expr><name>clipboardData</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>clipboardDataPtr</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

	<decl_stmt><decl><type><name>generic_string</name></type> <name>clipboardStr</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>TCHAR</name> <operator>*</operator><operator>)</operator><name>clipboardDataPtr</name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name><operator>::</operator><name>GlobalUnlock</name></name><argument_list>(<argument><expr><name>clipboardData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><operator>::</operator><name>CloseClipboard</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name><name>_pEditView</name><operator>-&gt;</operator><name>execute</name></name><argument_list>(<argument><expr><name>SCI_BEGINUNDOACTION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for <control>(<init><decl><type><name>intptr_t</name></type> <name>i</name> <init>= <expr><name>lastLine</name></expr></init></decl> ;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr> ;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><call><name>bookmarkPresent</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>replaceMarkedline</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><call><name><name>clipboardStr</name><operator>.</operator><name>c_str</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>
	<expr_stmt><expr><call><name><name>_pEditView</name><operator>-&gt;</operator><name>execute</name></name><argument_list>(<argument><expr><name>SCI_ENDUNDOACTION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name><name>Notepad_plus</name><operator>::</operator><name>deleteMarkedline</name></name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>ln</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>intptr_t</name></type> <name>lineLen</name> <init>= <expr><call><name><name>_pEditView</name><operator>-&gt;</operator><name>execute</name></name><argument_list>(<argument><expr><name>SCI_LINELENGTH</name></expr></argument>, <argument><expr><name>ln</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>intptr_t</name></type> <name>lineBegin</name> <init>= <expr><call><name><name>_pEditView</name><operator>-&gt;</operator><name>execute</name></name><argument_list>(<argument><expr><name>SCI_POSITIONFROMLINE</name></expr></argument>, <argument><expr><name>ln</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>bookmarkDelete</name><argument_list>(<argument><expr><name>ln</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>TCHAR</name></type> <name><name>emptyString</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name><name>_pEditView</name><operator>-&gt;</operator><name>replaceTarget</name></name><argument_list>(<argument><expr><name>emptyString</name></expr></argument>, <argument><expr><name>lineBegin</name></expr></argument>, <argument><expr><name>lineBegin</name> <operator>+</operator> <name>lineLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name><name>Notepad_plus</name><operator>::</operator><name>inverseMarks</name></name><parameter_list>()</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>intptr_t</name></type> <name>lastLine</name> <init>= <expr><call><name><name>_pEditView</name><operator>-&gt;</operator><name>lastZeroBasedLineNumber</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>lastLine</name></expr>  ;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><call><name>bookmarkPresent</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>bookmarkDelete</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if>
		<else>else
		<block>{<block_content>
			<expr_stmt><expr><call><name>bookmarkAdd</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></for>
</block_content>}</block></function>

<function><type><name>void</name></type> <name><name>Notepad_plus</name><operator>::</operator><name>replaceMarkedline</name></name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>ln</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>TCHAR</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>intptr_t</name></type> <name>lineBegin</name> <init>= <expr><call><name><name>_pEditView</name><operator>-&gt;</operator><name>execute</name></name><argument_list>(<argument><expr><name>SCI_POSITIONFROMLINE</name></expr></argument>, <argument><expr><name>ln</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>intptr_t</name></type> <name>lineEnd</name> <init>= <expr><call><name><name>_pEditView</name><operator>-&gt;</operator><name>execute</name></name><argument_list>(<argument><expr><name>SCI_GETLINEENDPOSITION</name></expr></argument>, <argument><expr><name>ln</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name><name>_pEditView</name><operator>-&gt;</operator><name>replaceTarget</name></name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>lineBegin</name></expr></argument>, <argument><expr><name>lineEnd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>generic_string</name></type> <name><name>Notepad_plus</name><operator>::</operator><name>getMarkedLine</name></name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>ln</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>auto</name></type> <name>lineLen</name> <init>= <expr><call><name><name>_pEditView</name><operator>-&gt;</operator><name>execute</name></name><argument_list>(<argument><expr><name>SCI_LINELENGTH</name></expr></argument>, <argument><expr><name>ln</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>auto</name></type> <name>lineBegin</name> <init>= <expr><call><name><name>_pEditView</name><operator>-&gt;</operator><name>execute</name></name><argument_list>(<argument><expr><name>SCI_POSITIONFROMLINE</name></expr></argument>, <argument><expr><name>ln</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>TCHAR</name> <modifier>*</modifier></type> <name>buf</name> <init>= <expr><operator>new</operator> <name><name>TCHAR</name><index>[<expr><name>lineLen</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name><name>_pEditView</name><operator>-&gt;</operator><name>getGenericText</name></name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>lineLen</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>lineBegin</name></expr></argument>, <argument><expr><name>lineBegin</name> <operator>+</operator> <name>lineLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>generic_string</name></type> <name>line</name> <init>= <expr><name>buf</name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><operator>delete</operator> <index>[]</index> <name>buf</name></expr>;</expr_stmt>

	<return>return <expr><name>line</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name><name>Notepad_plus</name><operator>::</operator><name>findMatchingBracePos</name></name><parameter_list>(<parameter><decl><type><name>intptr_t</name><modifier>&amp;</modifier></type> <name>braceAtCaret</name></decl></parameter>, <parameter><decl><type><name>intptr_t</name><modifier>&amp;</modifier></type> <name>braceOpposite</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>intptr_t</name></type> <name>caretPos</name> <init>= <expr><call><name><name>_pEditView</name><operator>-&gt;</operator><name>execute</name></name><argument_list>(<argument><expr><name>SCI_GETCURRENTPOS</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name>braceAtCaret</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>braceOpposite</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>TCHAR</name></type> <name>charBefore</name> <init>= <expr><literal type="char">'\0'</literal></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>intptr_t</name></type> <name>lengthDoc</name> <init>= <expr><call><name><name>_pEditView</name><operator>-&gt;</operator><name>execute</name></name><argument_list>(<argument><expr><name>SCI_GETLENGTH</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><operator>(</operator><name>lengthDoc</name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>caretPos</name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition>
    <block>{<block_content>
		<expr_stmt><expr><name>charBefore</name> <operator>=</operator> <call><name>TCHAR</name><argument_list>(<argument><expr><call><name><name>_pEditView</name><operator>-&gt;</operator><name>execute</name></name><argument_list>(<argument><expr><name>SCI_GETCHARAT</name></expr></argument>, <argument><expr><name>caretPos</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<comment type="line">// Priority goes to character before caret</comment>
	<if_stmt><if>if <condition>(<expr><name>charBefore</name> <operator>&amp;&amp;</operator> <call><name>wcschr</name><argument_list>(<argument><expr><literal type="string">L"[](){}"</literal></expr></argument>, <argument><expr><name>charBefore</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
		<expr_stmt><expr><name>braceAtCaret</name> <operator>=</operator> <name>caretPos</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>lengthDoc</name> <operator>&gt;</operator> <literal type="number">0</literal>  <operator>&amp;&amp;</operator> <operator>(</operator><name>braceAtCaret</name> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition>
    <block>{<block_content>
		<comment type="line">// No brace found so check other side</comment>
		<decl_stmt><decl><type><name>TCHAR</name></type> <name>charAfter</name> <init>= <expr><call><name>TCHAR</name><argument_list>(<argument><expr><call><name><name>_pEditView</name><operator>-&gt;</operator><name>execute</name></name><argument_list>(<argument><expr><name>SCI_GETCHARAT</name></expr></argument>, <argument><expr><name>caretPos</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if <condition>(<expr><name>charAfter</name> <operator>&amp;&amp;</operator> <call><name>wcschr</name><argument_list>(<argument><expr><literal type="string">L"[](){}"</literal></expr></argument>, <argument><expr><name>charAfter</name></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
			<expr_stmt><expr><name>braceAtCaret</name> <operator>=</operator> <name>caretPos</name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>braceAtCaret</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>braceOpposite</name> <operator>=</operator> <call><name><name>_pEditView</name><operator>-&gt;</operator><name>execute</name></name><argument_list>(<argument><expr><name>SCI_BRACEMATCH</name></expr></argument>, <argument><expr><name>braceAtCaret</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<comment type="line">// return true if 1 or 2 (matched) brace(s) is found</comment>
<function><type><name>bool</name></type> <name><name>Notepad_plus</name><operator>::</operator><name>braceMatch</name></name><parameter_list>()</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Buffer</name><modifier>*</modifier></type> <name>currentBuf</name> <init>= <expr><call><name><name>_pEditView</name><operator>-&gt;</operator><name>getCurrentBuffer</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>currentBuf</name><operator>-&gt;</operator><name>allowBraceMach</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>

	<decl_stmt><decl><type><name>intptr_t</name></type> <name>braceAtCaret</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>intptr_t</name></type> <name>braceOpposite</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>findMatchingBracePos</name><argument_list>(<argument><expr><name>braceAtCaret</name></expr></argument>, <argument><expr><name>braceOpposite</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><operator>(</operator><name>braceAtCaret</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>braceOpposite</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>)</condition>
    <block>{<block_content>
		<expr_stmt><expr><call><name><name>_pEditView</name><operator>-&gt;</operator><name>execute</name></name><argument_list>(<argument><expr><name>SCI_BRACEBADLIGHT</name></expr></argument>, <argument><expr><name>braceAtCaret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>_pEditView</name><operator>-&gt;</operator><name>execute</name></name><argument_list>(<argument><expr><name>SCI_SETHIGHLIGHTGUIDE</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
    <else>else
    <block>{<block_content>
		<expr_stmt><expr><call><name><name>_pEditView</name><operator>-&gt;</operator><name>execute</name></name><argument_list>(<argument><expr><name>SCI_BRACEHIGHLIGHT</name></expr></argument>, <argument><expr><name>braceAtCaret</name></expr></argument>, <argument><expr><name>braceOpposite</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><call><name><name>_pEditView</name><operator>-&gt;</operator><name>isShownIndentGuide</name></name><argument_list>()</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <decl_stmt><decl><type><name>intptr_t</name></type> <name>columnAtCaret</name> <init>= <expr><call><name><name>_pEditView</name><operator>-&gt;</operator><name>execute</name></name><argument_list>(<argument><expr><name>SCI_GETCOLUMN</name></expr></argument>, <argument><expr><name>braceAtCaret</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		    <decl_stmt><decl><type><name>intptr_t</name></type> <name>columnOpposite</name> <init>= <expr><call><name><name>_pEditView</name><operator>-&gt;</operator><name>execute</name></name><argument_list>(<argument><expr><name>SCI_GETCOLUMN</name></expr></argument>, <argument><expr><name>braceOpposite</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name><name>_pEditView</name><operator>-&gt;</operator><name>execute</name></name><argument_list>(<argument><expr><name>SCI_SETHIGHLIGHTGUIDE</name></expr></argument>, <argument><expr><ternary><condition><expr><operator>(</operator><name>columnAtCaret</name> <operator>&lt;</operator> <name>columnOpposite</name><operator>)</operator></expr>?</condition><then><expr><name>columnAtCaret</name></expr></then><else>:<expr><name>columnOpposite</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></else></if_stmt>

	<decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>enable</name> <init>= <expr><operator>(</operator><name>braceAtCaret</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>braceOpposite</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>enableCommand</name><argument_list>(<argument><expr><name>IDM_SEARCH_GOTOMATCHINGBRACE</name></expr></argument>, <argument><expr><name>enable</name></expr></argument>, <argument><expr><name>MENU</name> <operator>|</operator> <name>TOOLBAR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>enableCommand</name><argument_list>(<argument><expr><name>IDM_SEARCH_SELECTMATCHINGBRACES</name></expr></argument>, <argument><expr><name>enable</name></expr></argument>, <argument><expr><name>MENU</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>(</operator><name>braceAtCaret</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>


<function><type><name>void</name></type> <name><name>Notepad_plus</name><operator>::</operator><name>setLangStatus</name></name><parameter_list>(<parameter><decl><type><name>LangType</name></type> <name>langType</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name><name>_statusBar</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><call><name>getLangDesc</name><argument_list>(<argument><expr><name>langType</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>c_str</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>STATUSBAR_DOC_TYPE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type> <name><name>Notepad_plus</name><operator>::</operator><name>setDisplayFormat</name></name><parameter_list>(<parameter><decl><type><name>EolType</name></type> <name>format</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>TCHAR</name><modifier>*</modifier></type> <name>str</name> <init>= <expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"??"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<switch>switch <condition>(<expr><name>format</name></expr>)</condition>
	<block>{<block_content>
		<case>case <expr><name><name>EolType</name><operator>::</operator><name>windows</name></name></expr>:</case> <expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"Windows (CR LF)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
		<case>case <expr><name><name>EolType</name><operator>::</operator><name>macos</name></name></expr>:</case>   <expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"Macintosh (CR)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
		<case>case <expr><name><name>EolType</name><operator>::</operator><name>unix</name></name></expr>:</case>    <expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"Unix (LF)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
		<case>case <expr><name><name>EolType</name><operator>::</operator><name>unknown</name></name></expr>:</case> <expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"Unknown"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <break>break;</break>
	</block_content>}</block></switch>
	<expr_stmt><expr><call><name><name>_statusBar</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>STATUSBAR_EOF_FORMAT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type> <name><name>Notepad_plus</name><operator>::</operator><name>setUniModeText</name></name><parameter_list>()</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Buffer</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><call><name><name>_pEditView</name><operator>-&gt;</operator><name>getCurrentBuffer</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>encoding</name> <init>= <expr><call><name><name>buf</name><operator>-&gt;</operator><name>getEncoding</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>UniMode</name></type> <name>um</name> <init>= <expr><call><name><name>buf</name><operator>-&gt;</operator><name>getUnicodeMode</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>generic_string</name></type> <name>uniModeTextString</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>encoding</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
	<block>{<block_content>
		<switch>switch <condition>(<expr><name>um</name></expr>)</condition>
		<block>{<block_content>
			<case>case <expr><name>uniUTF8</name></expr>:</case>
				<expr_stmt><expr><name>uniModeTextString</name> <operator>=</operator> <call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"UTF-8-BOM"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
			<case>case <expr><name>uni16BE</name></expr>:</case>
				<expr_stmt><expr><name>uniModeTextString</name> <operator>=</operator> <call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"UTF-16 BE BOM"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
			<case>case <expr><name>uni16LE</name></expr>:</case>
				<expr_stmt><expr><name>uniModeTextString</name> <operator>=</operator> <call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"UTF-16 LE BOM"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
			<case>case <expr><name>uni16BE_NoBOM</name></expr>:</case>
				<expr_stmt><expr><name>uniModeTextString</name> <operator>=</operator> <call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"UTF-16 Big Endian"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
			<case>case <expr><name>uni16LE_NoBOM</name></expr>:</case>
				<expr_stmt><expr><name>uniModeTextString</name> <operator>=</operator> <call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"UTF-16 Little Endian"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
			<case>case <expr><name>uniCookie</name></expr>:</case>
				<expr_stmt><expr><name>uniModeTextString</name> <operator>=</operator> <call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"UTF-8"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
			<default>default :</default>
				<expr_stmt><expr><name>uniModeTextString</name> <operator>=</operator> <call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"ANSI"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></switch>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<decl_stmt><decl><type><name>EncodingMapper</name><modifier>&amp;</modifier></type> <name>em</name> <init>= <expr><call><name><name>EncodingMapper</name><operator>::</operator><name>getInstance</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>cmdID</name> <init>= <expr><call><name><name>em</name><operator>.</operator><name>getIndexFromEncoding</name></name><argument_list>(<argument><expr><name>encoding</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if <condition>(<expr><name>cmdID</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><literal type="string">"Encoding problem. Encoding is not added in encoding_table?"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return;</return>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><name>cmdID</name> <operator>+=</operator> <name>IDM_FORMAT_ENCODE</name></expr>;</expr_stmt>

		<decl_stmt><decl><type><name>TCHAR</name></type> <name><name>uniModeText</name><index>[<expr><name>menuItemStrLenMax</name></expr>]</index></name><argument_list>{}</argument_list></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><operator>::</operator><name>GetMenuString</name></name><argument_list>(<argument><expr><name>_mainMenuHandle</name></expr></argument>, <argument><expr><name>cmdID</name></expr></argument>, <argument><expr><name>uniModeText</name></expr></argument>, <argument><expr><name>menuItemStrLenMax</name></expr></argument>, <argument><expr><name>MF_BYCOMMAND</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>uniModeTextString</name> <operator>=</operator> <name>uniModeText</name></expr>;</expr_stmt>
		<comment type="line">// Remove the shortcut text from the menu text.</comment>
		<decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>tabPos</name> <init>= <expr><call><name><name>uniModeTextString</name><operator>.</operator><name>find_last_of</name></name><argument_list>(<argument><expr><literal type="char">'\t'</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if <condition>(<expr><name>tabPos</name> <operator>!=</operator> <name><name>generic_string</name><operator>::</operator><name>npos</name></name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name><name>uniModeTextString</name><operator>.</operator><name>resize</name></name><argument_list>(<argument><expr><name>tabPos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></else></if_stmt>
	<expr_stmt><expr><call><name><name>_statusBar</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><call><name><name>uniModeTextString</name><operator>.</operator><name>c_str</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>STATUSBAR_UNICODE_TYPE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>isUrlSchemeStartChar</name><parameter_list>(<parameter><decl><type><name>TCHAR</name> <specifier>const</specifier></type> <name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><operator>(</operator><operator>(</operator><name>c</name> <operator>&gt;=</operator> <literal type="char">'A'</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>c</name> <operator>&lt;=</operator> <literal type="char">'Z'</literal><operator>)</operator><operator>)</operator>
		<operator>||</operator> <operator>(</operator><operator>(</operator><name>c</name> <operator>&gt;=</operator> <literal type="char">'a'</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>c</name> <operator>&lt;=</operator> <literal type="char">'z'</literal><operator>)</operator><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>isUrlSchemeDelimiter</name><parameter_list>(<parameter><decl><type><name>TCHAR</name> <specifier>const</specifier></type> <name>c</name></decl></parameter>)</parameter_list> <comment type="line">// characters allowed immedeately before scheme</comment>
<block>{<block_content>
	<return>return   <expr><operator>!</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>c</name> <operator>&gt;=</operator> <literal type="char">'0'</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>c</name> <operator>&lt;=</operator> <literal type="char">'9'</literal><operator>)</operator><operator>)</operator>
			 <operator>||</operator> <operator>(</operator><operator>(</operator><name>c</name> <operator>&gt;=</operator> <literal type="char">'A'</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>c</name> <operator>&lt;=</operator> <literal type="char">'Z'</literal><operator>)</operator><operator>)</operator>
			 <operator>||</operator> <operator>(</operator><operator>(</operator><name>c</name> <operator>&gt;=</operator> <literal type="char">'a'</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>c</name> <operator>&lt;=</operator> <literal type="char">'z'</literal><operator>)</operator><operator>)</operator>
			 <operator>||</operator>  <operator>(</operator><name>c</name> <operator>==</operator> <literal type="char">'_'</literal><operator>)</operator><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>isUrlTextChar</name><parameter_list>(<parameter><decl><type><name>TCHAR</name> <specifier>const</specifier></type> <name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>c</name> <operator>&lt;=</operator> <literal type="char">' '</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>
	<switch>switch <condition>(<expr><name>c</name></expr>)</condition>
	<block>{<block_content>
		<case>case <expr><literal type="char">'"'</literal></expr>:</case>
		<case>case <expr><literal type="char">'#'</literal></expr>:</case>
		<case>case <expr><literal type="char">'&lt;'</literal></expr>:</case>
		<case>case <expr><literal type="char">'&gt;'</literal></expr>:</case>
		<case>case <expr><literal type="char">'{'</literal></expr>:</case>
		<case>case <expr><literal type="char">'}'</literal></expr>:</case>
		<case>case <expr><literal type="char">'?'</literal></expr>:</case>
		<case>case <expr><literal type="char">'\u007F'</literal></expr>:</case>
			<return>return <expr><literal type="boolean">false</literal></expr>;</return>
	</block_content>}</block></switch>
	<return>return <expr><literal type="boolean">true</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>isUrlQueryDelimiter</name><parameter_list>(<parameter><decl><type><name>TCHAR</name> <specifier>const</specifier></type> <name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<switch>switch<condition>(<expr><name>c</name></expr>)</condition>
	<block>{<block_content>
		<case>case <expr><literal type="char">'&amp;'</literal></expr>:</case>
		<case>case <expr><literal type="char">'+'</literal></expr>:</case>
		<case>case <expr><literal type="char">'='</literal></expr>:</case>
		<case>case <expr><literal type="char">';'</literal></expr>:</case>
			<return>return <expr><literal type="boolean">true</literal></expr>;</return>
	</block_content>}</block></switch>
	<return>return <expr><literal type="boolean">false</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>isUrlSchemeSupported</name><parameter_list>(<parameter><decl><type><name>INTERNET_SCHEME</name></type> <name>s</name></decl></parameter>, <parameter><decl><type><name>TCHAR</name> <modifier>*</modifier></type><name>url</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<switch>switch <condition>(<expr><name>s</name></expr>)</condition>
	<block>{<block_content>
		<case>case <expr><name>INTERNET_SCHEME_FTP</name></expr>:</case>
		<case>case <expr><name>INTERNET_SCHEME_HTTP</name></expr>:</case>
		<case>case <expr><name>INTERNET_SCHEME_HTTPS</name></expr>:</case>
		<case>case <expr><name>INTERNET_SCHEME_MAILTO</name></expr>:</case>
		<case>case <expr><name>INTERNET_SCHEME_FILE</name></expr>:</case>
			<return>return <expr><literal type="boolean">true</literal></expr>;</return>

		<case>case <expr><name>INTERNET_SCHEME_PARTIAL</name></expr>:</case>
		<case>case <expr><name>INTERNET_SCHEME_UNKNOWN</name></expr>:</case>
		<case>case <expr><name>INTERNET_SCHEME_DEFAULT</name></expr>:</case>
		<case>case <expr><name>INTERNET_SCHEME_GOPHER</name></expr>:</case>
		<case>case <expr><name>INTERNET_SCHEME_NEWS</name></expr>:</case>
		<case>case <expr><name>INTERNET_SCHEME_SOCKS</name></expr>:</case>
		<case>case <expr><name>INTERNET_SCHEME_JAVASCRIPT</name></expr>:</case>
		<case>case <expr><name>INTERNET_SCHEME_VBSCRIPT</name></expr>:</case>
		<case>case <expr><name>INTERNET_SCHEME_RES</name></expr>:</case>
		<default>default:</default>
			<break>break;</break>
	</block_content>}</block></switch>
	<decl_stmt><decl><type><name>generic_string</name> <specifier>const</specifier></type> <name>mySchemes</name> <init>= <expr><operator>(</operator><call><name><name>NppParameters</name><operator>::</operator><name>getInstance</name></name><argument_list>()</argument_list></call><operator>)</operator><operator>.</operator><call><name>getNppGUI</name><argument_list>()</argument_list></call><operator>.</operator><name>_uriSchemes</name> <operator>+</operator> <call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">" "</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>TCHAR</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>(</operator><name>TCHAR</name> <operator>*</operator><operator>)</operator><call><name><name>mySchemes</name><operator>.</operator><name>c_str</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<while>while <condition>(<expr><operator>*</operator><name>p</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
		<while>while <condition>(<expr><name><name>p</name> <index>[<expr><name>i</name></expr>]</index></name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>p</name> <index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <literal type="char">' '</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>
		<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><call><name>wcsnicmp</name><argument_list>(<argument><expr><name>url</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="boolean">true</literal></expr>;</return></block_content></block></if></if_stmt>
		<expr_stmt><expr><name>p</name> <operator>+=</operator> <name>i</name></expr>;</expr_stmt>
		<while>while <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">' '</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>
	</block_content>}</block></while>
	<return>return <expr><literal type="boolean">false</literal></expr>;</return>
</block_content>}</block></function>

<comment type="line">// scanToUrlStart searches for a possible URL in &lt;text&gt;.</comment>
<comment type="line">// If a possible URL is found, then:</comment>
<comment type="line">// - True is returned.</comment>
<comment type="line">// - The number of characters between &lt;text[start]&gt; and the beginning of the URL candidate is stored in &lt;distance&gt;.</comment>
<comment type="line">// - The length of the URL scheme is stored in &lt;schemeLength&gt;.</comment>
<comment type="line">// If no URL is found, then:</comment>
<comment type="line">// - False is returned.</comment>
<comment type="line">// - The number of characters between &lt;text[start]&gt; and the end of text is stored in &lt;distance&gt;.</comment>
<function><type><name>bool</name></type> <name>scanToUrlStart</name><parameter_list>(<parameter><decl><type><name>TCHAR</name> <modifier>*</modifier></type><name>text</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>textLen</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>start</name></decl></parameter>, <parameter><decl><type><name>int</name><modifier>*</modifier></type> <name>distance</name></decl></parameter>, <parameter><decl><type><name>int</name><modifier>*</modifier></type> <name>schemeLength</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>p</name> <init>= <expr><name>start</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>p0</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<enum>enum <block>{<decl><name>sUnknown</name></decl>, <decl><name>sScheme</name></decl>}</block> <decl><name>s</name> <init>= <expr><name>sUnknown</name></expr></init></decl>;</enum>
	<while>while <condition>(<expr><name>p</name> <operator>&lt;</operator> <name>textLen</name></expr>)</condition>
	<block>{<block_content>
		<switch>switch <condition>(<expr><name>s</name></expr>)</condition>
		<block>{<block_content>
			<case>case <expr><name>sUnknown</name></expr>:</case>
				<if_stmt><if>if <condition>(<expr><call><name>isUrlSchemeStartChar</name><argument_list>(<argument><expr><name><name>text</name> <index>[<expr><name>p</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>p</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator> <call><name>isUrlSchemeDelimiter</name><argument_list>(<argument><expr><name><name>text</name> <index>[<expr><name>p</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>
				<block>{<block_content>
					<expr_stmt><expr><name>p0</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
					<expr_stmt><expr><name>s</name> <operator>=</operator> <name>sScheme</name></expr>;</expr_stmt>
				</block_content>}</block></if></if_stmt>
				<break>break;</break>

			<case>case <expr><name>sScheme</name></expr>:</case>
				<if_stmt><if>if <condition>(<expr><name><name>text</name> <index>[<expr><name>p</name></expr>]</index></name> <operator>==</operator> <literal type="char">':'</literal></expr>)</condition>
				<block>{<block_content>
					<expr_stmt><expr><operator>*</operator><name>distance</name> <operator>=</operator> <name>p0</name> <operator>-</operator> <name>start</name></expr>;</expr_stmt>
					<expr_stmt><expr><operator>*</operator><name>schemeLength</name> <operator>=</operator> <name>p</name> <operator>-</operator> <name>p0</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
					<return>return <expr><literal type="boolean">true</literal></expr>;</return>
				</block_content>}</block></if></if_stmt>
				<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>isUrlSchemeStartChar</name><argument_list>(<argument><expr><name><name>text</name> <index>[<expr><name>p</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><name>s</name> <operator>=</operator> <name>sUnknown</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
				<break>break;</break>
		</block_content>}</block></switch>
		<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt>
	</block_content>}</block></while>
	<expr_stmt><expr><operator>*</operator><name>schemeLength</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><operator>*</operator><name>distance</name> <operator>=</operator> <name>p</name> <operator>-</operator> <name>start</name></expr>;</expr_stmt>
	<return>return <expr><literal type="boolean">false</literal></expr>;</return>
</block_content>}</block></function>

<comment type="line">// scanToUrlEnd searches the end of an URL, coarsly parsing its main parts HostAndPath, Query and Fragment.</comment>
<comment type="line">//</comment>
<comment type="line">// In the query part, a simple pattern is enforced, to avoid that everything goes through as a query.</comment>
<comment type="line">// The pattern is kept simple, since there seem to be many different forms of queries used in the world.</comment>
<comment type="line">// The objective here is not to detect whether or not a query is malformed. The objective is, to let through</comment>
<comment type="line">// most of the real world's queries, and to sort out what is certainly not a query.</comment>
<comment type="line">//</comment>
<comment type="line">// The approach is:</comment>
<comment type="line">// - A query begins with '?', followed by any number of values,</comment>
<comment type="line">//   which are separated by a single delimiter character '&amp;', '+', '=' or ';'.</comment>
<comment type="line">// - Each value may be enclosed in single or double quotes.</comment>
<comment type="line">//</comment>
<comment type="line">// The query pattern going through looks like this:</comment>
<comment type="line">// - ?abc;def;fgh="i j k"&amp;'l m n'+opq</comment>
<comment type="line">//</comment>
<function><type><name>void</name></type> <name>scanToUrlEnd</name><parameter_list>(<parameter><decl><type><name>TCHAR</name> <modifier>*</modifier></type><name>text</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>textLen</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>start</name></decl></parameter>, <parameter><decl><type><name>int</name><modifier>*</modifier></type> <name>distance</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>p</name> <init>= <expr><name>start</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>TCHAR</name></type> <name>q</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<enum>enum <block>{<decl><name>sHostAndPath</name></decl>, <decl><name>sQuery</name></decl>, <decl><name>sQueryAfterDelimiter</name></decl>, <decl><name>sQueryQuotes</name></decl>, <decl><name>sQueryAfterQuotes</name></decl>, <decl><name>sFragment</name></decl>}</block> <decl><name>s</name> <init>= <expr><name>sHostAndPath</name></expr></init></decl>;</enum>
	<while>while <condition>(<expr><name>p</name> <operator>&lt;</operator> <name>textLen</name></expr>)</condition>
	<block>{<block_content>
		<switch>switch <condition>(<expr><name>s</name></expr>)</condition>
		<block>{<block_content>
			<case>case <expr><name>sHostAndPath</name></expr>:</case> 
				<if_stmt><if>if <condition>(<expr><name><name>text</name> <index>[<expr><name>p</name></expr>]</index></name> <operator>==</operator> <literal type="char">'?'</literal></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><name>s</name> <operator>=</operator> <name>sQuery</name></expr>;</expr_stmt></block_content></block></if>
				<if type="elseif">else if <condition>(<expr><name><name>text</name> <index>[<expr><name>p</name></expr>]</index></name> <operator>==</operator> <literal type="char">'#'</literal></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><name>s</name> <operator>=</operator> <name>sFragment</name></expr>;</expr_stmt></block_content></block></if>
				<if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>isUrlTextChar</name> <argument_list>(<argument><expr><name><name>text</name> <index>[<expr><name>p</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition>
				<block>{<block_content>
					<expr_stmt><expr><operator>*</operator><name>distance</name> <operator>=</operator> <name>p</name> <operator>-</operator> <name>start</name></expr>;</expr_stmt>
					<return>return;</return>
				</block_content>}</block></if></if_stmt>
				<break>break;</break>

			<case>case <expr><name>sQuery</name></expr>:</case>
				<if_stmt><if>if <condition>(<expr><name><name>text</name> <index>[<expr><name>p</name></expr>]</index></name> <operator>==</operator> <literal type="char">'#'</literal></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><name>s</name> <operator>=</operator> <name>sFragment</name></expr>;</expr_stmt></block_content></block></if>
				<if type="elseif">else if <condition>(<expr><call><name>isUrlQueryDelimiter</name> <argument_list>(<argument><expr><name><name>text</name> <index>[<expr><name>p</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><name>s</name> <operator>=</operator> <name>sQueryAfterDelimiter</name></expr>;</expr_stmt></block_content></block></if>
				<if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>isUrlTextChar</name><argument_list>(<argument><expr><name><name>text</name> <index>[<expr><name>p</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition>
				<block>{<block_content>
					<expr_stmt><expr><operator>*</operator><name>distance</name> <operator>=</operator> <name>p</name> <operator>-</operator> <name>start</name></expr>;</expr_stmt>
					<return>return;</return>
				</block_content>}</block></if></if_stmt>
				<break>break;</break>

			<case>case <expr><name>sQueryAfterDelimiter</name></expr>:</case>
				<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>text</name> <index>[<expr><name>p</name></expr>]</index></name> <operator>==</operator> <literal type="char">'\''</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>text</name> <index>[<expr><name>p</name></expr>]</index></name> <operator>==</operator> <literal type="char">'"'</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>text</name> <index>[<expr><name>p</name></expr>]</index></name> <operator>==</operator> <literal type="char">'`'</literal><operator>)</operator></expr>)</condition>
				<block>{<block_content>
					<expr_stmt><expr><name>q</name> <operator>=</operator> <name><name>text</name> <index>[<expr><name>p</name></expr>]</index></name></expr>;</expr_stmt>
					<expr_stmt><expr><name>s</name> <operator>=</operator> <name>sQueryQuotes</name></expr>;</expr_stmt>
				</block_content>}</block></if>
				<if type="elseif">else if <condition>(<expr><name><name>text</name> <index>[<expr><name>p</name></expr>]</index></name> <operator>==</operator> <literal type="char">'('</literal></expr>)</condition>
				<block>{<block_content>
					<expr_stmt><expr><name>q</name> <operator>=</operator> <literal type="char">')'</literal></expr>;</expr_stmt>
					<expr_stmt><expr><name>s</name> <operator>=</operator> <name>sQueryQuotes</name></expr>;</expr_stmt>
				</block_content>}</block></if>
				<if type="elseif">else if <condition>(<expr><name><name>text</name> <index>[<expr><name>p</name></expr>]</index></name> <operator>==</operator> <literal type="char">'['</literal></expr>)</condition>
				<block>{<block_content>
					<expr_stmt><expr><name>q</name> <operator>=</operator> <literal type="char">']'</literal></expr>;</expr_stmt>
					<expr_stmt><expr><name>s</name> <operator>=</operator> <name>sQueryQuotes</name></expr>;</expr_stmt>
				</block_content>}</block></if>
				<if type="elseif">else if <condition>(<expr><name><name>text</name> <index>[<expr><name>p</name></expr>]</index></name> <operator>==</operator> <literal type="char">'{'</literal></expr>)</condition>
				<block>{<block_content>
					<expr_stmt><expr><name>q</name> <operator>=</operator> <literal type="char">'}'</literal></expr>;</expr_stmt>
					<expr_stmt><expr><name>s</name> <operator>=</operator> <name>sQueryQuotes</name></expr>;</expr_stmt>
				</block_content>}</block></if>
				<if type="elseif">else if <condition>(<expr><call><name>isUrlTextChar</name><argument_list>(<argument><expr><name><name>text</name> <index>[<expr><name>p</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><name>s</name> <operator>=</operator> <name>sQuery</name></expr>;</expr_stmt></block_content></block></if>
				<else>else
				<block>{<block_content>
					<expr_stmt><expr><operator>*</operator><name>distance</name> <operator>=</operator> <name>p</name> <operator>-</operator> <name>start</name></expr>;</expr_stmt>
					<return>return;</return>
				</block_content>}</block></else></if_stmt>
				<break>break;</break>

			<case>case <expr><name>sQueryQuotes</name></expr>:</case>
				<if_stmt><if>if <condition>(<expr><name><name>text</name> <index>[<expr><name>p</name></expr>]</index></name> <operator>&lt;</operator> <literal type="char">' '</literal></expr>)</condition>
				<block>{<block_content>
					<expr_stmt><expr><operator>*</operator><name>distance</name> <operator>=</operator> <name>p</name> <operator>-</operator> <name>start</name></expr>;</expr_stmt>
					<return>return;</return>
				</block_content>}</block></if></if_stmt>
				<if_stmt><if>if <condition>(<expr><name><name>text</name> <index>[<expr><name>p</name></expr>]</index></name> <operator>==</operator> <name>q</name></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><name>s</name> <operator>=</operator> <name>sQueryAfterQuotes</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
				<break>break;</break>
	
			<case>case <expr><name>sQueryAfterQuotes</name></expr>:</case>
				<if_stmt><if>if <condition>(<expr><call><name>isUrlQueryDelimiter</name> <argument_list>(<argument><expr><name><name>text</name> <index>[<expr><name>p</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><name>s</name> <operator>=</operator> <name>sQueryAfterDelimiter</name></expr>;</expr_stmt></block_content></block></if>
				<else>else
				<block>{<block_content>
					<expr_stmt><expr><operator>*</operator><name>distance</name> <operator>=</operator> <name>p</name> <operator>-</operator> <name>start</name></expr>;</expr_stmt>
					<return>return;</return>
				</block_content>}</block></else></if_stmt>
				<break>break;</break>

			<case>case <expr><name>sFragment</name></expr>:</case>
				<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>isUrlTextChar</name><argument_list>(<argument><expr><name><name>text</name> <index>[<expr><name>p</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition>
				<block>{<block_content>
					<expr_stmt><expr><operator>*</operator><name>distance</name> <operator>=</operator> <name>p</name> <operator>-</operator> <name>start</name></expr>;</expr_stmt>
					<return>return;</return>
				</block_content>}</block></if></if_stmt>
				<break>break;</break>
		</block_content>}</block></switch>
		<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt>
	</block_content>}</block></while>
	<expr_stmt><expr><operator>*</operator><name>distance</name> <operator>=</operator> <name>p</name> <operator>-</operator> <name>start</name></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="line">// removeUnwantedTrailingCharFromUrl removes a single unwanted trailing character from an URL.</comment>
<comment type="line">// It has to be called repeatedly, until it returns false, meaning that all unwanted characters are gone.</comment>
<function><type><name>bool</name></type> <name>removeUnwantedTrailingCharFromUrl</name> <parameter_list>(<parameter><decl><type><name>TCHAR</name> <specifier>const</specifier> <modifier>*</modifier></type><name>text</name></decl></parameter>, <parameter><decl><type><name>int</name><modifier>*</modifier></type> <name>length</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>l</name> <init>= <expr><operator>*</operator><name>length</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><name>l</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>
	<block>{<block_content> <comment type="line">// remove unwanted single characters</comment>
		<decl_stmt><decl><type><specifier>const</specifier> <name>TCHAR</name> <modifier>*</modifier></type><name>singleChars</name> <init>= <expr><literal type="string">L".,:;?!#"</literal></expr></init></decl>;</decl_stmt>
		<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name><name>singleChars</name> <index>[<expr><name>i</name></expr>]</index></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
			<if_stmt><if>if <condition>(<expr><name><name>text</name> <index>[<expr><name>l</name></expr>]</index></name> <operator>==</operator> <name><name>singleChars</name> <index>[<expr><name>i</name></expr>]</index></name></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><operator>*</operator><name>length</name> <operator>=</operator> <name>l</name></expr>;</expr_stmt>
				<return>return <expr><literal type="boolean">true</literal></expr>;</return>
			</block_content>}</block></if></if_stmt></block_content></block></for>
	</block_content>}</block>
	<block>{<block_content> <comment type="line">// remove unwanted closing parenthesis</comment>
		<decl_stmt><decl><type><specifier>const</specifier> <name>TCHAR</name> <modifier>*</modifier></type><name>closingParenthesis</name> <init>= <expr><literal type="string">L")]"</literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><specifier>const</specifier> <name>TCHAR</name> <modifier>*</modifier></type><name>openingParenthesis</name> <init>= <expr><literal type="string">L"(["</literal></expr></init></decl>;</decl_stmt>
		<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name><name>closingParenthesis</name> <index>[<expr><name>i</name></expr>]</index></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
			<if_stmt><if>if <condition>(<expr><name><name>text</name> <index>[<expr><name>l</name></expr>]</index></name> <operator>==</operator> <name><name>closingParenthesis</name> <index>[<expr><name>i</name></expr>]</index></name></expr>)</condition>
			<block>{<block_content>
				<decl_stmt><decl><type><name>int</name></type> <name>count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
				<for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><name>l</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>j</name><operator>--</operator></expr></incr>)</control>
				<block>{<block_content>
					<if_stmt><if>if <condition>(<expr><name><name>text</name> <index>[<expr><name>j</name></expr>]</index></name> <operator>==</operator> <name><name>closingParenthesis</name> <index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
						<expr_stmt><expr><name>count</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
					<if_stmt><if>if <condition>(<expr><name><name>text</name><index>[<expr><name>j</name></expr>]</index></name> <operator>==</operator> <name><name>openingParenthesis</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition>
					<block>{<block_content>
						<if_stmt><if>if <condition>(<expr><name>count</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
							<expr_stmt><expr><name>count</name><operator>--</operator></expr>;</expr_stmt></block_content></block></if>
						<else>else<block type="pseudo"><block_content>
							<return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></else></if_stmt>
					</block_content>}</block></if></if_stmt>
				</block_content>}</block></for>
				<if_stmt><if>if <condition>(<expr><name>count</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
					<return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>
				<expr_stmt><expr><operator>*</operator><name>length</name> <operator>=</operator> <name>l</name></expr>;</expr_stmt>
				<return>return <expr><literal type="boolean">true</literal></expr>;</return>
			</block_content>}</block></if></if_stmt></block_content></block></for>
	</block_content>}</block>
	<return>return <expr><literal type="boolean">false</literal></expr>;</return>
</block_content>}</block></function>

<comment type="line">// isUrl checks, whether there is a valid URL at &lt;text [start]&gt;.</comment>
<comment type="line">// If yes:</comment>
<comment type="line">// - True is returned.</comment>
<comment type="line">// - The length of the URL is stored in &lt;segmentLen&gt;.</comment>
<comment type="line">// If no:</comment>
<comment type="line">// - False is returned.</comment>
<comment type="line">// - The number of characters between &lt;text[start]&gt; and the next URL is stored in &lt;segementLen&gt;.</comment>
<comment type="line">// - If no URL is found at all, then the number of characters between &lt;text[start]&gt; and the end of text is stored in &lt;segmentLen&gt;.</comment>
<function><type><name>bool</name></type> <name>isUrl</name><parameter_list>(<parameter><decl><type><name>TCHAR</name> <modifier>*</modifier></type> <name>text</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>textLen</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>start</name></decl></parameter>, <parameter><decl><type><name>int</name><modifier>*</modifier></type> <name>segmentLen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>dist</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>schemeLen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><call><name>scanToUrlStart</name><argument_list>(<argument><expr><name>text</name></expr></argument>, <argument><expr><name>textLen</name></expr></argument>, <argument><expr><name>start</name></expr></argument>, <argument><expr><operator>&amp;</operator> <name>dist</name></expr></argument>, <argument><expr><operator>&amp;</operator> <name>schemeLen</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>dist</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><operator>*</operator><name>segmentLen</name> <operator>=</operator> <name>dist</name></expr>;</expr_stmt>
			<return>return <expr><literal type="boolean">false</literal></expr>;</return>
		</block_content>}</block></if></if_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>scanToUrlEnd</name> <argument_list>(<argument><expr><name>text</name></expr></argument>, <argument><expr><name>textLen</name></expr></argument>, <argument><expr><name>start</name> <operator>+</operator> <name>schemeLen</name></expr></argument>, <argument><expr><operator>&amp;</operator> <name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>len</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name>len</name> <operator>+=</operator> <name>schemeLen</name></expr>;</expr_stmt>
			<decl_stmt><decl><type><name>URL_COMPONENTS</name></type> <name>url</name></decl>;</decl_stmt>
			<expr_stmt><expr><call><name>memset</name> <argument_list>(<argument><expr><operator>&amp;</operator> <name>url</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>url</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>url</name><operator>.</operator><name>dwStructSize</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>url</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
			<decl_stmt><decl><type><name>bool</name></type> <name>r</name>  <init>= <expr><call><name>InternetCrackUrl</name><argument_list>(<argument><expr><operator>&amp;</operator> <name><name>text</name> <index>[<expr><name>start</name></expr>]</index></name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator> <name>url</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>isUrlSchemeSupported</name><argument_list>(<argument><expr><name><name>url</name><operator>.</operator><name>nScheme</name></name></expr></argument>, <argument><expr><operator>&amp;</operator> <name><name>text</name> <index>[<expr><name>start</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<if_stmt><if>if <condition>(<expr><name>r</name></expr>)</condition>
			<block>{<block_content>
				<while>while <condition>(<expr><call><name>removeUnwantedTrailingCharFromUrl</name> <argument_list>(<argument><expr><operator>&amp;</operator> <name><name>text</name> <index>[<expr><name>start</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator> <name>len</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content><empty_stmt>;</empty_stmt></block_content></block></while>
				<expr_stmt><expr><operator>*</operator><name>segmentLen</name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>
				<return>return <expr><literal type="boolean">true</literal></expr>;</return>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><name>len</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>lMax</name> <init>= <expr><name>textLen</name> <operator>-</operator> <name>start</name></expr></init></decl>;</decl_stmt>
		<while>while <condition>(<expr><call><name>isUrlSchemeStartChar</name><argument_list>(<argument><expr><name><name>text</name><index>[<expr><name>start</name><operator>+</operator><name>len</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><name>len</name> <operator>&lt;</operator> <name>lMax</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>len</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>
		<expr_stmt><expr><operator>*</operator><name>segmentLen</name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>
		<return>return <expr><literal type="boolean">false</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><operator>*</operator><name>segmentLen</name> <operator>=</operator> <name>dist</name></expr>;</expr_stmt>
	<return>return <expr><literal type="boolean">false</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name><name>Notepad_plus</name><operator>::</operator><name>addHotSpot</name></name><parameter_list>(<parameter><decl><type><name>ScintillaEditView</name><modifier>*</modifier></type> <name>view</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ScintillaEditView</name><modifier>*</modifier></type> <name>pView</name> <init>= <expr><ternary><condition><expr><name>view</name></expr> ?</condition><then> <expr><name>view</name></expr> </then><else>: <expr><name>_pEditView</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Buffer</name><modifier>*</modifier></type> <name>currentBuf</name> <init>= <expr><call><name><name>pView</name><operator>-&gt;</operator><name>getCurrentBuffer</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>int</name></type> <name>urlAction</name> <init>= <expr><operator>(</operator><call><name><name>NppParameters</name><operator>::</operator><name>getInstance</name></name><argument_list>()</argument_list></call><operator>)</operator><operator>.</operator><call><name>getNppGUI</name><argument_list>()</argument_list></call><operator>.</operator><name>_styleURL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>LPARAM</name></type> <name>indicStyle</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>urlAction</name> <operator>==</operator> <name>urlNoUnderLineFg</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>urlAction</name> <operator>==</operator> <name>urlNoUnderLineBg</name><operator>)</operator></expr> ?</condition><then> <expr><name>INDIC_HIDDEN</name></expr> </then><else>: <expr><name>INDIC_PLAIN</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>LPARAM</name></type> <name>indicHoverStyle</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>urlAction</name> <operator>==</operator> <name>urlNoUnderLineBg</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>urlAction</name> <operator>==</operator> <name>urlUnderLineBg</name><operator>)</operator></expr> ?</condition><then> <expr><name>INDIC_FULLBOX</name></expr> </then><else>: <expr><name>INDIC_EXPLORERLINK</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>LPARAM</name></type> <name>indicStyleCur</name> <init>= <expr><call><name><name>pView</name><operator>-&gt;</operator><name>execute</name></name><argument_list>(<argument><expr><name>SCI_INDICGETSTYLE</name></expr></argument>, <argument><expr><name>URL_INDIC</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>LPARAM</name></type> <name>indicHoverStyleCur</name> <init>= <expr><call><name><name>pView</name><operator>-&gt;</operator><name>execute</name></name><argument_list>(<argument><expr><name>SCI_INDICGETHOVERSTYLE</name></expr></argument>, <argument><expr><name>URL_INDIC</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><operator>(</operator><name>indicStyleCur</name> <operator>!=</operator> <name>indicStyle</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>indicHoverStyleCur</name> <operator>!=</operator> <name>indicHoverStyle</name><operator>)</operator></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name><name>pView</name><operator>-&gt;</operator><name>execute</name></name><argument_list>(<argument><expr><name>SCI_INDICSETSTYLE</name></expr></argument>, <argument><expr><name>URL_INDIC</name></expr></argument>, <argument><expr><name>indicStyle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>pView</name><operator>-&gt;</operator><name>execute</name></name><argument_list>(<argument><expr><name>SCI_INDICSETHOVERSTYLE</name></expr></argument>, <argument><expr><name>URL_INDIC</name></expr></argument>, <argument><expr><name>indicHoverStyle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>pView</name><operator>-&gt;</operator><name>execute</name></name><argument_list>(<argument><expr><name>SCI_INDICSETALPHA</name></expr></argument>, <argument><expr><name>URL_INDIC</name></expr></argument>, <argument><expr><literal type="number">70</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>pView</name><operator>-&gt;</operator><name>execute</name></name><argument_list>(<argument><expr><name>SCI_INDICSETFLAGS</name></expr></argument>, <argument><expr><name>URL_INDIC</name></expr></argument>, <argument><expr><name>SC_INDICFLAG_VALUEFORE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<decl_stmt><decl><type><name>intptr_t</name></type> <name>startPos</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>intptr_t</name></type> <name>endPos</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name><name>pView</name><operator>-&gt;</operator><name>getVisibleStartAndEndPosition</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>startPos</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>endPos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>startPos</name> <operator>&gt;=</operator> <name>endPos</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
	<expr_stmt><expr><call><name><name>pView</name><operator>-&gt;</operator><name>execute</name></name><argument_list>(<argument><expr><name>SCI_SETINDICATORCURRENT</name></expr></argument>, <argument><expr><name>URL_INDIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>urlAction</name> <operator>==</operator> <name>urlDisable</name> <operator>||</operator> <operator>!</operator><call><name><name>currentBuf</name><operator>-&gt;</operator><name>allowClickableLink</name></name><argument_list>()</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name><name>pView</name><operator>-&gt;</operator><name>execute</name></name><argument_list>(<argument><expr><name>SCI_INDICATORCLEARRANGE</name></expr></argument>, <argument><expr><name>startPos</name></expr></argument>, <argument><expr><name>endPos</name> <operator>-</operator> <name>startPos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<decl_stmt><decl><type><name>LRESULT</name></type> <name>indicFore</name> <init>= <expr><call><name><name>pView</name><operator>-&gt;</operator><name>execute</name></name><argument_list>(<argument><expr><name>SCI_STYLEGETFORE</name></expr></argument>, <argument><expr><name>STYLE_DEFAULT</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name><name>pView</name><operator>-&gt;</operator><name>execute</name></name><argument_list>(<argument><expr><name>SCI_SETINDICATORVALUE</name></expr></argument>, <argument><expr><name>indicFore</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>UINT</name></type> <name>cp</name> <init>= <expr><cast type="static">static_cast<argument_list type="generic">&lt;<argument><expr><name>UINT</name></expr></argument>&gt;</argument_list><argument_list>(<argument><expr><call><name><name>pView</name><operator>-&gt;</operator><name>execute</name></name><argument_list>(<argument><expr><name>SCI_GETCODEPAGE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></cast></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>encodedText</name> <init>= <expr><operator>new</operator> <name><name>char</name><index>[<expr><name>endPos</name> <operator>-</operator> <name>startPos</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name><name>pView</name><operator>-&gt;</operator><name>getText</name></name><argument_list>(<argument><expr><name>encodedText</name></expr></argument>, <argument><expr><name>startPos</name></expr></argument>, <argument><expr><name>endPos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>TCHAR</name> <modifier>*</modifier></type><name>wideText</name> <init>= <expr><operator>new</operator> <name><name>TCHAR</name><index>[<expr><name>endPos</name> <operator>-</operator> <name>startPos</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>wideTextLen</name> <init>= <expr><call><name>MultiByteToWideChar</name><argument_list>(<argument><expr><name>cp</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>encodedText</name></expr></argument>, <argument><expr><cast type="static">static_cast<argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list><argument_list>(<argument><expr><name>endPos</name> <operator>-</operator> <name>startPos</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></cast></expr></argument>, <argument><expr><operator>(</operator><name>LPWSTR</name><operator>)</operator> <name>wideText</name></expr></argument>, <argument><expr><cast type="static">static_cast<argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list><argument_list>(<argument><expr><name>endPos</name> <operator>-</operator> <name>startPos</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></cast></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><operator>delete</operator><index>[]</index> <name>encodedText</name></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>wideTextLen</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>int</name></type> <name>startWide</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>lenWide</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>startEncoded</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>lenEncoded</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
		<while>while <condition>(<expr><literal type="boolean">true</literal></expr>)</condition>
		<block>{<block_content>
			<decl_stmt><decl><type><name>bool</name></type> <name>r</name> <init>= <expr><call><name>isUrl</name><argument_list>(<argument><expr><name>wideText</name></expr></argument>, <argument><expr><name>wideTextLen</name></expr></argument>, <argument><expr><name>startWide</name></expr></argument>, <argument><expr><operator>&amp;</operator> <name>lenWide</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<if_stmt><if>if <condition>(<expr><name>lenWide</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
				<break>break;</break></block_content></block></if></if_stmt>
			<expr_stmt><expr><call><name>assert</name> <argument_list>(<argument><expr><operator>(</operator><name>startWide</name> <operator>+</operator> <name>lenWide</name><operator>)</operator> <operator>&lt;=</operator> <name>wideTextLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>lenEncoded</name> <operator>=</operator> <call><name>WideCharToMultiByte</name><argument_list>(<argument><expr><name>cp</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator> <name><name>wideText</name> <index>[<expr><name>startWide</name></expr>]</index></name></expr></argument>, <argument><expr><name>lenWide</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>r</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name><name>pView</name><operator>-&gt;</operator><name>execute</name></name><argument_list>(<argument><expr><name>SCI_INDICATORFILLRANGE</name></expr></argument>, <argument><expr><name>startEncoded</name> <operator>+</operator> <name>startPos</name></expr></argument>, <argument><expr><name>lenEncoded</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
			<else>else<block type="pseudo"><block_content>
				<expr_stmt><expr><call><name><name>pView</name><operator>-&gt;</operator><name>execute</name></name><argument_list>(<argument><expr><name>SCI_INDICATORCLEARRANGE</name></expr></argument>, <argument><expr><name>startEncoded</name> <operator>+</operator> <name>startPos</name></expr></argument>, <argument><expr><name>lenEncoded</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
			<expr_stmt><expr><name>startWide</name> <operator>+=</operator> <name>lenWide</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>startEncoded</name> <operator>+=</operator> <name>lenEncoded</name></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><operator>(</operator><name>startWide</name> <operator>&gt;=</operator> <name>wideTextLen</name><operator>)</operator> <operator>||</operator> <operator>(</operator><operator>(</operator><name>startEncoded</name> <operator>+</operator> <name>startPos</name><operator>)</operator> <operator>&gt;=</operator> <name>endPos</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
				<break>break;</break></block_content></block></if></if_stmt>
		</block_content>}</block></while>
		<expr_stmt><expr><call><name>assert</name> <argument_list>(<argument><expr><operator>(</operator><name>startEncoded</name> <operator>+</operator> <name>startPos</name><operator>)</operator> <operator>==</operator> <name>endPos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>assert</name> <argument_list>(<argument><expr><name>startWide</name> <operator>==</operator> <name>wideTextLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><operator>delete</operator><index>[]</index> <name>wideText</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name><name>Notepad_plus</name><operator>::</operator><name>isConditionExprLine</name></name><parameter_list>(<parameter><decl><type><name>intptr_t</name></type> <name>lineNumber</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name><name>lineNumber</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">0</literal> <operator>||</operator> <name>lineNumber</name></expr></argument> &gt;</argument_list></name> <call><name><name>_pEditView</name><operator>-&gt;</operator><name>execute</name></name><argument_list>(<argument><expr><name>SCI_GETLINECOUNT</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>

	<decl_stmt><decl><type><name>auto</name></type> <name>startPos</name> <init>= <expr><call><name><name>_pEditView</name><operator>-&gt;</operator><name>execute</name></name><argument_list>(<argument><expr><name>SCI_POSITIONFROMLINE</name></expr></argument>, <argument><expr><name>lineNumber</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>auto</name></type> <name>endPos</name> <init>= <expr><call><name><name>_pEditView</name><operator>-&gt;</operator><name>execute</name></name><argument_list>(<argument><expr><name>SCI_GETLINEENDPOSITION</name></expr></argument>, <argument><expr><name>lineNumber</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name><name>_pEditView</name><operator>-&gt;</operator><name>execute</name></name><argument_list>(<argument><expr><name>SCI_SETSEARCHFLAGS</name></expr></argument>, <argument><expr><name>SCFIND_REGEXP</name> <operator>|</operator> <name>SCFIND_POSIX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name>_pEditView</name><operator>-&gt;</operator><name>execute</name></name><argument_list>(<argument><expr><name>SCI_SETTARGETRANGE</name></expr></argument>, <argument><expr><name>startPos</name></expr></argument>, <argument><expr><name>endPos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name></type> <name><name>ifElseForWhileExpr</name><index>[]</index></name> <init>= <expr><literal type="string">"((else[ \t]+)?if|for|while)[ \t]*[(].*[)][ \t]*|else[ \t]*"</literal></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>auto</name></type> <name>posFound</name> <init>= <expr><call><name><name>_pEditView</name><operator>-&gt;</operator><name>execute</name></name><argument_list>(<argument><expr><name>SCI_SEARCHINTARGET</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>ifElseForWhileExpr</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><cast type="reinterpret">reinterpret_cast<argument_list type="generic">&lt;<argument><expr><name>LPARAM</name></expr></argument>&gt;</argument_list><argument_list>(<argument><expr><name>ifElseForWhileExpr</name></expr></argument>)</argument_list></cast></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><name>posFound</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>auto</name></type> <name>end</name> <init>= <expr><call><name><name>_pEditView</name><operator>-&gt;</operator><name>execute</name></name><argument_list>(<argument><expr><name>SCI_GETTARGETEND</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if <condition>(<expr><name>end</name> <operator>==</operator> <name>endPos</name></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><literal type="boolean">true</literal></expr>;</return></block_content></block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><literal type="boolean">false</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>intptr_t</name></type> <name><name>Notepad_plus</name><operator>::</operator><name>findMachedBracePos</name></name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>startPos</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>endPos</name></decl></parameter>, <parameter><decl><type><name>char</name></type> <name>targetSymbol</name></decl></parameter>, <parameter><decl><type><name>char</name></type> <name>matchedSymbol</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>startPos</name> <operator>==</operator> <name>endPos</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>startPos</name> <operator>&gt;</operator> <name>endPos</name></expr>)</condition> <comment type="line">// backward</comment>
	<block>{<block_content>
		<decl_stmt><decl><type><name>int</name></type> <name>balance</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
		<for>for <control>(<init><decl><type><name>intptr_t</name></type> <name>i</name> <init>= <expr><name>startPos</name></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <cast type="static">static_cast<argument_list type="generic">&lt;<argument><expr><name>intptr_t</name></expr></argument>&gt;</argument_list><argument_list>(<argument><expr><name>endPos</name></expr></argument>)</argument_list></cast></expr>;</condition> <incr><expr><operator>--</operator><name>i</name></expr></incr>)</control>
		<block>{<block_content>
			<decl_stmt><decl><type><name>char</name></type> <name>aChar</name> <init>= <expr><cast type="static">static_cast<argument_list type="generic">&lt;<argument><expr><name>char</name></expr></argument>&gt;</argument_list><argument_list>(<argument><expr><call><name><name>_pEditView</name><operator>-&gt;</operator><name>execute</name></name><argument_list>(<argument><expr><name>SCI_GETCHARAT</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></cast></expr></init></decl>;</decl_stmt>
			<if_stmt><if>if <condition>(<expr><name>aChar</name> <operator>==</operator> <name>targetSymbol</name></expr>)</condition>
			<block>{<block_content>
				<if_stmt><if>if <condition>(<expr><name>balance</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
					<return>return <expr><name>i</name></expr>;</return></block_content></block></if></if_stmt>
				<expr_stmt><expr><operator>--</operator><name>balance</name></expr>;</expr_stmt>
			</block_content>}</block></if>
			<if type="elseif">else if <condition>(<expr><name>aChar</name> <operator>==</operator> <name>matchedSymbol</name></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><operator>++</operator><name>balance</name></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></for>
	</block_content>}</block></if>
	<else>else <comment type="line">// forward</comment>
	<block>{<block_content>
	</block_content>}</block></else></if_stmt>
	<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name><name>Notepad_plus</name><operator>::</operator><name>maintainIndentation</name></name><parameter_list>(<parameter><decl><type><name>TCHAR</name></type> <name>ch</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>intptr_t</name></type> <name>eolMode</name> <init>= <expr><call><name><name>_pEditView</name><operator>-&gt;</operator><name>execute</name></name><argument_list>(<argument><expr><name>SCI_GETEOLMODE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>intptr_t</name></type> <name>curLine</name> <init>= <expr><call><name><name>_pEditView</name><operator>-&gt;</operator><name>getCurrentLineNumber</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>intptr_t</name></type> <name>prevLine</name> <init>= <expr><name>curLine</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>intptr_t</name></type> <name>indentAmountPrevLine</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>intptr_t</name></type> <name>tabWidth</name> <init>= <expr><call><name><name>_pEditView</name><operator>-&gt;</operator><name>execute</name></name><argument_list>(<argument><expr><name>SCI_GETTABWIDTH</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>LangType</name></type> <name>type</name> <init>= <expr><call><name><name>_pEditView</name><operator>-&gt;</operator><name>getCurrentBuffer</name></name><argument_list>()</argument_list></call><operator>-&gt;</operator><call><name>getLangType</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ExternalLexerAutoIndentMode</name></type> <name>autoIndentMode</name> <init>= <expr><name><name>ExternalLexerAutoIndentMode</name><operator>::</operator><name>Standard</name></name></expr></init></decl>;</decl_stmt>

	<comment type="line">// For external languages, query for custom auto-indentation funcionality</comment>
	<if_stmt><if>if <condition>(<expr><name>type</name> <operator>&gt;=</operator> <name>L_EXTERNAL</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>NppParameters</name><modifier>&amp;</modifier></type> <name>nppParam</name> <init>= <expr><call><name><name>NppParameters</name><operator>::</operator><name>getInstance</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name>autoIndentMode</name> <operator>=</operator> <call><name><name>nppParam</name><operator>.</operator><name>getELCFromIndex</name></name><argument_list>(<argument><expr><name>type</name> <operator>-</operator> <name>L_EXTERNAL</name></expr></argument>)</argument_list></call><operator>.</operator><name>_autoIndentMode</name></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>autoIndentMode</name> <operator>==</operator> <name><name>ExternalLexerAutoIndentMode</name><operator>::</operator><name>Custom</name></name></expr>)</condition><block type="pseudo"><block_content>
			<return>return;</return></block_content></block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="line">// Do not alter indentation if we were at the beginning of the line and we pressed Enter</comment>
	<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><operator>(</operator><name>eolMode</name> <operator>==</operator> <name>SC_EOL_CRLF</name> <operator>||</operator> <name>eolMode</name> <operator>==</operator> <name>SC_EOL_LF</name><operator>)</operator> <operator>&amp;&amp;</operator> <name>ch</name> <operator>==</operator> <literal type="char">'\n'</literal><operator>)</operator> <operator>||</operator>
		<operator>(</operator><name>eolMode</name> <operator>==</operator> <name>SC_EOL_CR</name> <operator>&amp;&amp;</operator> <name>ch</name> <operator>==</operator> <literal type="char">'\r'</literal><operator>)</operator><operator>)</operator> <operator>&amp;&amp;</operator> <name>prevLine</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name><name>_pEditView</name><operator>-&gt;</operator><name>getLineLength</name></name><argument_list>(<argument><expr><name>prevLine</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return;</return></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>L_C</name> <operator>||</operator> <name>type</name> <operator>==</operator> <name>L_CPP</name> <operator>||</operator> <name>type</name> <operator>==</operator> <name>L_JAVA</name> <operator>||</operator> <name>type</name> <operator>==</operator> <name>L_CS</name> <operator>||</operator> <name>type</name> <operator>==</operator> <name>L_OBJC</name> <operator>||</operator>
		<name>type</name> <operator>==</operator> <name>L_PHP</name> <operator>||</operator> <name>type</name> <operator>==</operator> <name>L_JS</name> <operator>||</operator> <name>type</name> <operator>==</operator> <name>L_JAVASCRIPT</name> <operator>||</operator> <name>type</name> <operator>==</operator> <name>L_JSP</name> <operator>||</operator> <name>type</name> <operator>==</operator> <name>L_CSS</name> <operator>||</operator> <name>type</name> <operator>==</operator> <name>L_PERL</name> <operator>||</operator> 
		<name>type</name> <operator>==</operator> <name>L_RUST</name> <operator>||</operator> <name>type</name> <operator>==</operator> <name>L_POWERSHELL</name> <operator>||</operator> <name>type</name> <operator>==</operator> <name>L_JSON</name> <operator>||</operator> <name>type</name> <operator>==</operator> <name>L_JSON5</name> <operator>||</operator> <name>autoIndentMode</name> <operator>==</operator> <name><name>ExternalLexerAutoIndentMode</name><operator>::</operator><name>C_Like</name></name></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>eolMode</name> <operator>==</operator> <name>SC_EOL_CRLF</name> <operator>||</operator> <name>eolMode</name> <operator>==</operator> <name>SC_EOL_LF</name><operator>)</operator> <operator>&amp;&amp;</operator> <name>ch</name> <operator>==</operator> <literal type="char">'\n'</literal><operator>)</operator> <operator>||</operator>
			<operator>(</operator><name>eolMode</name> <operator>==</operator> <name>SC_EOL_CR</name> <operator>&amp;&amp;</operator> <name>ch</name> <operator>==</operator> <literal type="char">'\r'</literal><operator>)</operator></expr>)</condition>
		<block>{<block_content>
			<comment type="line">// Search the non-empty previous line</comment>
			<while>while <condition>(<expr><name>prevLine</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name><name>_pEditView</name><operator>-&gt;</operator><name>getLineLength</name></name><argument_list>(<argument><expr><name>prevLine</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name>prevLine</name><operator>--</operator></expr>;</expr_stmt></block_content></block></while>

			<comment type="line">// Get previous line's Indent</comment>
			<if_stmt><if>if <condition>(<expr><name>prevLine</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><name>indentAmountPrevLine</name> <operator>=</operator> <call><name><name>_pEditView</name><operator>-&gt;</operator><name>getLineIndent</name></name><argument_list>(<argument><expr><name>prevLine</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>

			<comment type="line">// get previous char from current line</comment>
			<decl_stmt><decl><type><name>intptr_t</name></type> <name>prevPos</name> <init>= <expr><call><name><name>_pEditView</name><operator>-&gt;</operator><name>execute</name></name><argument_list>(<argument><expr><name>SCI_GETCURRENTPOS</name></expr></argument>)</argument_list></call> <operator>-</operator> <operator>(</operator><ternary><condition><expr><name>eolMode</name> <operator>==</operator> <name>SC_EOL_CRLF</name></expr> ?</condition><then> <expr><literal type="number">3</literal></expr> </then><else>: <expr><literal type="number">2</literal></expr></else></ternary><operator>)</operator></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>UCHAR</name></type> <name>prevChar</name> <init>= <expr><operator>(</operator><name>UCHAR</name><operator>)</operator><call><name><name>_pEditView</name><operator>-&gt;</operator><name>execute</name></name><argument_list>(<argument><expr><name>SCI_GETCHARAT</name></expr></argument>, <argument><expr><name>prevPos</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>auto</name></type> <name>curPos</name> <init>= <expr><call><name><name>_pEditView</name><operator>-&gt;</operator><name>execute</name></name><argument_list>(<argument><expr><name>SCI_GETCURRENTPOS</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>UCHAR</name></type> <name>nextChar</name> <init>= <expr><operator>(</operator><name>UCHAR</name><operator>)</operator><call><name><name>_pEditView</name><operator>-&gt;</operator><name>execute</name></name><argument_list>(<argument><expr><name>SCI_GETCHARAT</name></expr></argument>, <argument><expr><name>curPos</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

			<if_stmt><if>if <condition>(<expr><name>prevChar</name> <operator>==</operator> <literal type="char">'{'</literal></expr>)</condition>
			<block>{<block_content>
				<if_stmt><if>if <condition>(<expr><name>nextChar</name> <operator>==</operator> <literal type="char">'}'</literal></expr>)</condition>
				<block>{<block_content>
					<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>eolChars</name></decl>;</decl_stmt>
					<if_stmt><if>if <condition>(<expr><name>eolMode</name> <operator>==</operator> <name>SC_EOL_CRLF</name></expr>)</condition><block type="pseudo"><block_content>
						<expr_stmt><expr><name>eolChars</name> <operator>=</operator> <literal type="string">"\r\n"</literal></expr>;</expr_stmt></block_content></block></if>
					<if type="elseif">else if <condition>(<expr><name>eolMode</name> <operator>==</operator> <name>SC_EOL_LF</name></expr>)</condition><block type="pseudo"><block_content>
						<expr_stmt><expr><name>eolChars</name> <operator>=</operator> <literal type="string">"\n"</literal></expr>;</expr_stmt></block_content></block></if>
					<else>else<block type="pseudo"><block_content>
						<expr_stmt><expr><name>eolChars</name> <operator>=</operator> <literal type="string">"\r"</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

					<expr_stmt><expr><call><name><name>_pEditView</name><operator>-&gt;</operator><name>execute</name></name><argument_list>(<argument><expr><name>SCI_INSERTTEXT</name></expr></argument>, <argument><expr><call><name><name>_pEditView</name><operator>-&gt;</operator><name>execute</name></name><argument_list>(<argument><expr><name>SCI_GETCURRENTPOS</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><cast type="reinterpret">reinterpret_cast<argument_list type="generic">&lt;<argument><expr><name>LPARAM</name></expr></argument>&gt;</argument_list><argument_list>(<argument><expr><name>eolChars</name></expr></argument>)</argument_list></cast></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name>_pEditView</name><operator>-&gt;</operator><name>setLineIndent</name></name><argument_list>(<argument><expr><name>curLine</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>indentAmountPrevLine</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block></if></if_stmt>
				<expr_stmt><expr><call><name><name>_pEditView</name><operator>-&gt;</operator><name>setLineIndent</name></name><argument_list>(<argument><expr><name>curLine</name></expr></argument>, <argument><expr><name>indentAmountPrevLine</name> <operator>+</operator> <name>tabWidth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if>
			<if type="elseif">else if <condition>(<expr><name>nextChar</name> <operator>==</operator> <literal type="char">'{'</literal></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><call><name><name>_pEditView</name><operator>-&gt;</operator><name>setLineIndent</name></name><argument_list>(<argument><expr><name>curLine</name></expr></argument>, <argument><expr><name>indentAmountPrevLine</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if>
			<comment type="line">// These languages do no support single line control structures without braces.</comment>
			<if type="elseif">else if <condition>(<expr><name>type</name> <operator>==</operator> <name>L_PERL</name> <operator>||</operator> <name>type</name> <operator>==</operator> <name>L_RUST</name> <operator>||</operator> <name>type</name> <operator>==</operator> <name>L_POWERSHELL</name> <operator>||</operator> <name>type</name> <operator>==</operator> <name>L_JSON</name> <operator>||</operator> <name>type</name> <operator>==</operator> <name>L_JSON5</name></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><call><name><name>_pEditView</name><operator>-&gt;</operator><name>setLineIndent</name></name><argument_list>(<argument><expr><name>curLine</name></expr></argument>, <argument><expr><name>indentAmountPrevLine</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if>
			<if type="elseif">else if <condition>(<expr><call><name>isConditionExprLine</name><argument_list>(<argument><expr><name>prevLine</name></expr></argument>)</argument_list></call></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><call><name><name>_pEditView</name><operator>-&gt;</operator><name>setLineIndent</name></name><argument_list>(<argument><expr><name>curLine</name></expr></argument>, <argument><expr><name>indentAmountPrevLine</name> <operator>+</operator> <name>tabWidth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if>
			<else>else
			<block>{<block_content>
				<if_stmt><if>if <condition>(<expr><name>indentAmountPrevLine</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
				<block>{<block_content>
					<if_stmt><if>if <condition>(<expr><name>prevLine</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>isConditionExprLine</name><argument_list>(<argument><expr><name>prevLine</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
						<expr_stmt><expr><call><name><name>_pEditView</name><operator>-&gt;</operator><name>setLineIndent</name></name><argument_list>(<argument><expr><name>curLine</name></expr></argument>, <argument><expr><name>indentAmountPrevLine</name> <operator>-</operator> <name>tabWidth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
					<else>else<block type="pseudo"><block_content>
						<expr_stmt><expr><call><name><name>_pEditView</name><operator>-&gt;</operator><name>setLineIndent</name></name><argument_list>(<argument><expr><name>curLine</name></expr></argument>, <argument><expr><name>indentAmountPrevLine</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
				</block_content>}</block></if></if_stmt>
			</block_content>}</block></else></if_stmt>
		</block_content>}</block></if>
		<if type="elseif">else if <condition>(<expr><name>ch</name> <operator>==</operator> <literal type="char">'{'</literal></expr>)</condition>
		<block>{<block_content>
			<comment type="line">// if no character in front of {, aligned with prev line's indentation</comment>
			<decl_stmt><decl><type><name>auto</name></type> <name>startPos</name> <init>= <expr><call><name><name>_pEditView</name><operator>-&gt;</operator><name>execute</name></name><argument_list>(<argument><expr><name>SCI_POSITIONFROMLINE</name></expr></argument>, <argument><expr><name>curLine</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>LRESULT</name></type> <name>endPos</name> <init>= <expr><call><name><name>_pEditView</name><operator>-&gt;</operator><name>execute</name></name><argument_list>(<argument><expr><name>SCI_GETCURRENTPOS</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

			<for>for <control>(<init><decl><type><name>LRESULT</name></type> <name>i</name> <init>= <expr><name>endPos</name> <operator>-</operator> <literal type="number">2</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>i</name> <operator>&gt;</operator> <name>startPos</name></expr>;</condition> <incr><expr><operator>--</operator><name>i</name></expr></incr>)</control>
			<block>{<block_content>
				<decl_stmt><decl><type><name>UCHAR</name></type> <name>aChar</name> <init>= <expr><operator>(</operator><name>UCHAR</name><operator>)</operator><call><name><name>_pEditView</name><operator>-&gt;</operator><name>execute</name></name><argument_list>(<argument><expr><name>SCI_GETCHARAT</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<if_stmt><if>if <condition>(<expr><name>aChar</name> <operator>!=</operator> <literal type="char">' '</literal> <operator>&amp;&amp;</operator> <name>aChar</name> <operator>!=</operator> <literal type="char">'\t'</literal></expr>)</condition><block type="pseudo"><block_content>
					<return>return;</return></block_content></block></if></if_stmt>
			</block_content>}</block></for>

			<comment type="line">// Search the non-empty previous line</comment>
			<while>while <condition>(<expr><name>prevLine</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name><name>_pEditView</name><operator>-&gt;</operator><name>getLineLength</name></name><argument_list>(<argument><expr><name>prevLine</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name>prevLine</name><operator>--</operator></expr>;</expr_stmt></block_content></block></while>

			<comment type="line">// Get previous line's Indent</comment>
			<if_stmt><if>if <condition>(<expr><name>prevLine</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><name>indentAmountPrevLine</name> <operator>=</operator> <call><name><name>_pEditView</name><operator>-&gt;</operator><name>getLineIndent</name></name><argument_list>(<argument><expr><name>prevLine</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<decl_stmt><decl><type><name>auto</name></type> <name>startPos2</name> <init>= <expr><call><name><name>_pEditView</name><operator>-&gt;</operator><name>execute</name></name><argument_list>(<argument><expr><name>SCI_POSITIONFROMLINE</name></expr></argument>, <argument><expr><name>prevLine</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>auto</name></type> <name>endPos2</name> <init>= <expr><call><name><name>_pEditView</name><operator>-&gt;</operator><name>execute</name></name><argument_list>(<argument><expr><name>SCI_GETLINEENDPOSITION</name></expr></argument>, <argument><expr><name>prevLine</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<expr_stmt><expr><call><name><name>_pEditView</name><operator>-&gt;</operator><name>execute</name></name><argument_list>(<argument><expr><name>SCI_SETSEARCHFLAGS</name></expr></argument>, <argument><expr><name>SCFIND_REGEXP</name> <operator>|</operator> <name>SCFIND_POSIX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name>_pEditView</name><operator>-&gt;</operator><name>execute</name></name><argument_list>(<argument><expr><name>SCI_SETTARGETRANGE</name></expr></argument>, <argument><expr><name>startPos2</name></expr></argument>, <argument><expr><name>endPos2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<decl_stmt><decl><type><specifier>const</specifier> <name>char</name></type> <name><name>braceExpr</name><index>[]</index></name> <init>= <expr><literal type="string">"[ \t]*\\{.*"</literal></expr></init></decl>;</decl_stmt>

				<decl_stmt><decl><type><name>intptr_t</name></type> <name>posFound</name> <init>= <expr><call><name><name>_pEditView</name><operator>-&gt;</operator><name>execute</name></name><argument_list>(<argument><expr><name>SCI_SEARCHINTARGET</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>braceExpr</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><cast type="reinterpret">reinterpret_cast<argument_list type="generic">&lt;<argument><expr><name>LPARAM</name></expr></argument>&gt;</argument_list><argument_list>(<argument><expr><name>braceExpr</name></expr></argument>)</argument_list></cast></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<if_stmt><if>if <condition>(<expr><name>posFound</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition>
				<block>{<block_content>
					<decl_stmt><decl><type><name>auto</name></type> <name>end</name> <init>= <expr><call><name><name>_pEditView</name><operator>-&gt;</operator><name>execute</name></name><argument_list>(<argument><expr><name>SCI_GETTARGETEND</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
					<if_stmt><if>if <condition>(<expr><name>end</name> <operator>==</operator> <name>endPos2</name></expr>)</condition><block type="pseudo"><block_content>
						<expr_stmt><expr><name>indentAmountPrevLine</name> <operator>+=</operator> <name>tabWidth</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
				</block_content>}</block></if></if_stmt>
			</block_content>}</block></if></if_stmt>

			<expr_stmt><expr><call><name><name>_pEditView</name><operator>-&gt;</operator><name>setLineIndent</name></name><argument_list>(<argument><expr><name>curLine</name></expr></argument>, <argument><expr><name>indentAmountPrevLine</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		</block_content>}</block></if>
		<if type="elseif">else if <condition>(<expr><name>ch</name> <operator>==</operator> <literal type="char">'}'</literal></expr>)</condition>
		<block>{<block_content>
			<comment type="line">// Look backward for the pair {</comment>
			<decl_stmt><decl><type><name>intptr_t</name></type> <name>startPos</name> <init>= <expr><call><name><name>_pEditView</name><operator>-&gt;</operator><name>execute</name></name><argument_list>(<argument><expr><name>SCI_GETCURRENTPOS</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<if_stmt><if>if <condition>(<expr><name>startPos</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name>startPos</name> <operator>-=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<decl_stmt><decl><type><name>intptr_t</name></type> <name>posFound</name> <init>= <expr><call><name>findMachedBracePos</name><argument_list>(<argument><expr><name>startPos</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="char">'{'</literal></expr></argument>, <argument><expr><literal type="char">'}'</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

			<comment type="line">// if no { found, do nothing</comment>
			<if_stmt><if>if <condition>(<expr><name>posFound</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
				<return>return;</return></block_content></block></if></if_stmt>

			<comment type="line">// if { is in the same line, do nothing</comment>
			<decl_stmt><decl><type><name>intptr_t</name></type> <name>matchedPairLine</name> <init>= <expr><call><name><name>_pEditView</name><operator>-&gt;</operator><name>execute</name></name><argument_list>(<argument><expr><name>SCI_LINEFROMPOSITION</name></expr></argument>, <argument><expr><name>posFound</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<if_stmt><if>if <condition>(<expr><name>matchedPairLine</name> <operator>==</operator> <name>curLine</name></expr>)</condition><block type="pseudo"><block_content>
				<return>return;</return></block_content></block></if></if_stmt>

			<comment type="line">// { is in another line, get its indentation</comment>
			<expr_stmt><expr><name>indentAmountPrevLine</name> <operator>=</operator> <call><name><name>_pEditView</name><operator>-&gt;</operator><name>getLineIndent</name></name><argument_list>(<argument><expr><name>matchedPairLine</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<comment type="line">// aligned } indent with {</comment>
			<expr_stmt><expr><call><name><name>_pEditView</name><operator>-&gt;</operator><name>setLineIndent</name></name><argument_list>(<argument><expr><name>curLine</name></expr></argument>, <argument><expr><name>indentAmountPrevLine</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<comment type="block">/*
			// indent lines from { to }
			for (int i = matchedPairLine + 1; i &lt; curLine; ++i)
				_pEditView-&gt;setLineIndent(i, indentAmountPrevLine + tabWidth);
			*/</comment>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if>
	<else>else <comment type="line">// Basic indentation mode</comment>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>eolMode</name> <operator>==</operator> <name>SC_EOL_CRLF</name> <operator>||</operator> <name>eolMode</name> <operator>==</operator> <name>SC_EOL_LF</name><operator>)</operator> <operator>&amp;&amp;</operator> <name>ch</name> <operator>==</operator> <literal type="char">'\n'</literal><operator>)</operator> <operator>||</operator>
			<operator>(</operator><name>eolMode</name> <operator>==</operator> <name>SC_EOL_CR</name> <operator>&amp;&amp;</operator> <name>ch</name> <operator>==</operator> <literal type="char">'\r'</literal><operator>)</operator></expr>)</condition>
		<block>{<block_content>
			<comment type="line">// Search the non-empty previous line</comment>
			<while>while <condition>(<expr><name>prevLine</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name><name>_pEditView</name><operator>-&gt;</operator><name>getLineLength</name></name><argument_list>(<argument><expr><name>prevLine</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name>prevLine</name><operator>--</operator></expr>;</expr_stmt></block_content></block></while>

			<if_stmt><if>if <condition>(<expr><name>prevLine</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><name>indentAmountPrevLine</name> <operator>=</operator> <call><name><name>_pEditView</name><operator>-&gt;</operator><name>getLineIndent</name></name><argument_list>(<argument><expr><name>prevLine</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>

			<if_stmt><if>if <condition>(<expr><name>indentAmountPrevLine</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><call><name><name>_pEditView</name><operator>-&gt;</operator><name>setLineIndent</name></name><argument_list>(<argument><expr><name>curLine</name></expr></argument>, <argument><expr><name>indentAmountPrevLine</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>BOOL</name></type> <name><name>Notepad_plus</name><operator>::</operator><name>processFindAccel</name></name><parameter_list>(<parameter><decl><type><name>MSG</name> <modifier>*</modifier></type><name>msg</name></decl></parameter>)</parameter_list> <specifier>const</specifier>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><operator>::</operator><name>IsChild</name></name><argument_list>(<argument><expr><call><name><name>_findReplaceDlg</name><operator>.</operator><name>getHSelf</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><operator>::</operator><name>GetFocus</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt>
	<return>return <expr><call><name><operator>::</operator><name>TranslateAccelerator</name></name><argument_list>(<argument><expr><call><name><name>_findReplaceDlg</name><operator>.</operator><name>getHSelf</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>_accelerator</name><operator>.</operator><name>getFindAccTable</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>BOOL</name></type> <name><name>Notepad_plus</name><operator>::</operator><name>processIncrFindAccel</name></name><parameter_list>(<parameter><decl><type><name>MSG</name> <modifier>*</modifier></type><name>msg</name></decl></parameter>)</parameter_list> <specifier>const</specifier>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><operator>::</operator><name>IsChild</name></name><argument_list>(<argument><expr><call><name><name>_incrementFindDlg</name><operator>.</operator><name>getHSelf</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><operator>::</operator><name>GetFocus</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt>
	<return>return <expr><call><name><operator>::</operator><name>TranslateAccelerator</name></name><argument_list>(<argument><expr><call><name><name>_incrementFindDlg</name><operator>.</operator><name>getHSelf</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>_accelerator</name><operator>.</operator><name>getIncrFindAccTable</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name><name>Notepad_plus</name><operator>::</operator><name>setLanguage</name></name><parameter_list>(<parameter><decl><type><name>LangType</name></type> <name>langType</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="line">//Add logic to prevent changing a language when a document is shared between two views</comment>
	<comment type="line">//If so, release one document</comment>
	<decl_stmt><decl><type><name>bool</name></type> <name>reset</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Document</name></type> <name>prev</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><call><name>bothActive</name><argument_list>()</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><call><name><name>_mainEditView</name><operator>.</operator><name>getCurrentBufferID</name></name><argument_list>()</argument_list></call> <operator>==</operator> <call><name><name>_subEditView</name><operator>.</operator><name>getCurrentBufferID</name></name><argument_list>()</argument_list></call></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name>reset</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>_subEditView</name><operator>.</operator><name>saveCurrentPos</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>prev</name> <operator>=</operator> <call><name><name>_subEditView</name><operator>.</operator><name>execute</name></name><argument_list>(<argument><expr><name>SCI_GETDOCPOINTER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>_subEditView</name><operator>.</operator><name>execute</name></name><argument_list>(<argument><expr><name>SCI_SETDOCPOINTER</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>
	
	<if_stmt><if>if <condition>(<expr><name>reset</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name><name>_mainEditView</name><operator>.</operator><name>getCurrentBuffer</name></name><argument_list>()</argument_list></call><operator>-&gt;</operator><call><name>setLangType</name><argument_list>(<argument><expr><name>langType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<expr_stmt><expr><call><name><name>_pEditView</name><operator>-&gt;</operator><name>getCurrentBuffer</name></name><argument_list>()</argument_list></call><operator>-&gt;</operator><call><name>setLangType</name><argument_list>(<argument><expr><name>langType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>reset</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name><name>_subEditView</name><operator>.</operator><name>execute</name></name><argument_list>(<argument><expr><name>SCI_SETDOCPOINTER</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>prev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>_subEditView</name><operator>.</operator><name>restoreCurrentPosPreStep</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>LangType</name></type> <name><name>Notepad_plus</name><operator>::</operator><name>menuID2LangType</name></name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>cmdID</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<switch>switch <condition>(<expr><name>cmdID</name></expr>)</condition>
	<block>{<block_content>
        <case>case <expr><name>IDM_LANG_C</name></expr>	:</case>
            <return>return <expr><name>L_C</name></expr>;</return>
        <case>case <expr><name>IDM_LANG_CPP</name></expr> :</case>
            <return>return <expr><name>L_CPP</name></expr>;</return>
        <case>case <expr><name>IDM_LANG_JAVA</name></expr> :</case>
            <return>return <expr><name>L_JAVA</name></expr>;</return>
        <case>case <expr><name>IDM_LANG_CS</name></expr> :</case>
            <return>return <expr><name>L_CS</name></expr>;</return>
        <case>case <expr><name>IDM_LANG_HTML</name></expr> :</case>
            <return>return <expr><name>L_HTML</name></expr>;</return>
        <case>case <expr><name>IDM_LANG_XML</name></expr> :</case>
            <return>return <expr><name>L_XML</name></expr>;</return>
        <case>case <expr><name>IDM_LANG_JS</name></expr> :</case>
			<return>return <expr><name>L_JAVASCRIPT</name></expr>;</return>
		<case>case <expr><name>IDM_LANG_JSON</name></expr>:</case>
			<return>return <expr><name>L_JSON</name></expr>;</return>
		<case>case <expr><name>IDM_LANG_JSON5</name></expr>:</case>
			<return>return <expr><name>L_JSON5</name></expr>;</return>
        <case>case <expr><name>IDM_LANG_PHP</name></expr> :</case>
            <return>return <expr><name>L_PHP</name></expr>;</return>
        <case>case <expr><name>IDM_LANG_ASP</name></expr> :</case>
            <return>return <expr><name>L_ASP</name></expr>;</return>
        <case>case <expr><name>IDM_LANG_JSP</name></expr> :</case>
            <return>return <expr><name>L_JSP</name></expr>;</return>
        <case>case <expr><name>IDM_LANG_CSS</name></expr> :</case>
            <return>return <expr><name>L_CSS</name></expr>;</return>
        <case>case <expr><name>IDM_LANG_LUA</name></expr> :</case>
            <return>return <expr><name>L_LUA</name></expr>;</return>
        <case>case <expr><name>IDM_LANG_PERL</name></expr> :</case>
            <return>return <expr><name>L_PERL</name></expr>;</return>
        <case>case <expr><name>IDM_LANG_PYTHON</name></expr> :</case>
            <return>return <expr><name>L_PYTHON</name></expr>;</return>
        <case>case <expr><name>IDM_LANG_PASCAL</name></expr> :</case>
            <return>return <expr><name>L_PASCAL</name></expr>;</return>
        <case>case <expr><name>IDM_LANG_BATCH</name></expr> :</case>
            <return>return <expr><name>L_BATCH</name></expr>;</return>
        <case>case <expr><name>IDM_LANG_OBJC</name></expr> :</case>
            <return>return <expr><name>L_OBJC</name></expr>;</return>
        <case>case <expr><name>IDM_LANG_VB</name></expr> :</case>
            <return>return <expr><name>L_VB</name></expr>;</return>
        <case>case <expr><name>IDM_LANG_SQL</name></expr> :</case>
            <return>return <expr><name>L_SQL</name></expr>;</return>
        <case>case <expr><name>IDM_LANG_MSSQL</name></expr> :</case>
            <return>return <expr><name>L_MSSQL</name></expr>;</return>
        <case>case <expr><name>IDM_LANG_ASCII</name></expr> :</case>
            <return>return <expr><name>L_ASCII</name></expr>;</return>
        <case>case <expr><name>IDM_LANG_TEXT</name></expr> :</case>
            <return>return <expr><name>L_TEXT</name></expr>;</return>
        <case>case <expr><name>IDM_LANG_RC</name></expr> :</case>
            <return>return <expr><name>L_RC</name></expr>;</return>
        <case>case <expr><name>IDM_LANG_MAKEFILE</name></expr> :</case>
            <return>return <expr><name>L_MAKEFILE</name></expr>;</return>
        <case>case <expr><name>IDM_LANG_INI</name></expr> :</case>
            <return>return <expr><name>L_INI</name></expr>;</return>
        <case>case <expr><name>IDM_LANG_TEX</name></expr> :</case>
            <return>return <expr><name>L_TEX</name></expr>;</return>
        <case>case <expr><name>IDM_LANG_FORTRAN</name></expr> :</case>
            <return>return <expr><name>L_FORTRAN</name></expr>;</return>
		<case>case <expr><name>IDM_LANG_FORTRAN_77</name></expr> :</case>
			<return>return <expr><name>L_FORTRAN_77</name></expr>;</return>
        <case>case <expr><name>IDM_LANG_BASH</name></expr> :</case>
            <return>return <expr><name>L_BASH</name></expr>;</return>
        <case>case <expr><name>IDM_LANG_FLASH</name></expr> :</case>
            <return>return <expr><name>L_FLASH</name></expr>;</return>
		<case>case <expr><name>IDM_LANG_NSIS</name></expr> :</case>
            <return>return <expr><name>L_NSIS</name></expr>;</return>
		<case>case <expr><name>IDM_LANG_TCL</name></expr> :</case>
            <return>return <expr><name>L_TCL</name></expr>;</return>
		<case>case <expr><name>IDM_LANG_LISP</name></expr> :</case>
			<return>return <expr><name>L_LISP</name></expr>;</return>
		<case>case <expr><name>IDM_LANG_SCHEME</name></expr> :</case>
			<return>return <expr><name>L_SCHEME</name></expr>;</return>
		<case>case <expr><name>IDM_LANG_ASM</name></expr> :</case>
            <return>return <expr><name>L_ASM</name></expr>;</return>
		<case>case <expr><name>IDM_LANG_DIFF</name></expr> :</case>
            <return>return <expr><name>L_DIFF</name></expr>;</return>
		<case>case <expr><name>IDM_LANG_PROPS</name></expr> :</case>
            <return>return <expr><name>L_PROPS</name></expr>;</return>
		<case>case <expr><name>IDM_LANG_PS</name></expr>:</case>
            <return>return <expr><name>L_PS</name></expr>;</return>
		<case>case <expr><name>IDM_LANG_RUBY</name></expr>:</case>
            <return>return <expr><name>L_RUBY</name></expr>;</return>
		<case>case <expr><name>IDM_LANG_SMALLTALK</name></expr>:</case>
            <return>return <expr><name>L_SMALLTALK</name></expr>;</return>
		<case>case <expr><name>IDM_LANG_VHDL</name></expr> :</case>
            <return>return <expr><name>L_VHDL</name></expr>;</return>
        <case>case <expr><name>IDM_LANG_KIX</name></expr> :</case>
            <return>return <expr><name>L_KIX</name></expr>;</return>
        <case>case <expr><name>IDM_LANG_CAML</name></expr> :</case>
            <return>return <expr><name>L_CAML</name></expr>;</return>
        <case>case <expr><name>IDM_LANG_ADA</name></expr> :</case>
            <return>return <expr><name>L_ADA</name></expr>;</return>
        <case>case <expr><name>IDM_LANG_VERILOG</name></expr> :</case>
            <return>return <expr><name>L_VERILOG</name></expr>;</return>
		<case>case <expr><name>IDM_LANG_MATLAB</name></expr> :</case>
            <return>return <expr><name>L_MATLAB</name></expr>;</return>
		<case>case <expr><name>IDM_LANG_HASKELL</name></expr> :</case>
            <return>return <expr><name>L_HASKELL</name></expr>;</return>
        <case>case <expr><name>IDM_LANG_AU3</name></expr> :</case>
            <return>return <expr><name>L_AU3</name></expr>;</return>
		<case>case <expr><name>IDM_LANG_INNO</name></expr> :</case>
            <return>return <expr><name>L_INNO</name></expr>;</return>
		<case>case <expr><name>IDM_LANG_CMAKE</name></expr> :</case>
            <return>return <expr><name>L_CMAKE</name></expr>;</return>
		<case>case <expr><name>IDM_LANG_YAML</name></expr> :</case>
			<return>return <expr><name>L_YAML</name></expr>;</return>
        <case>case <expr><name>IDM_LANG_COBOL</name></expr> :</case>
            <return>return <expr><name>L_COBOL</name></expr>;</return>
        <case>case <expr><name>IDM_LANG_D</name></expr> :</case>
            <return>return <expr><name>L_D</name></expr>;</return>
        <case>case <expr><name>IDM_LANG_GUI4CLI</name></expr> :</case>
            <return>return <expr><name>L_GUI4CLI</name></expr>;</return>
        <case>case <expr><name>IDM_LANG_POWERSHELL</name></expr> :</case>
            <return>return <expr><name>L_POWERSHELL</name></expr>;</return>
        <case>case <expr><name>IDM_LANG_R</name></expr> :</case>
            <return>return <expr><name>L_R</name></expr>;</return>
		<case>case <expr><name>IDM_LANG_COFFEESCRIPT</name></expr> :</case>
            <return>return <expr><name>L_COFFEESCRIPT</name></expr>;</return>
		<case>case <expr><name>IDM_LANG_BAANC</name></expr>:</case>
			<return>return <expr><name>L_BAANC</name></expr>;</return>
		<case>case <expr><name>IDM_LANG_SREC</name></expr> :</case>
            <return>return <expr><name>L_SREC</name></expr>;</return>
		<case>case <expr><name>IDM_LANG_IHEX</name></expr> :</case>
            <return>return <expr><name>L_IHEX</name></expr>;</return>
		<case>case <expr><name>IDM_LANG_TEHEX</name></expr> :</case>
            <return>return <expr><name>L_TEHEX</name></expr>;</return>
		<case>case <expr><name>IDM_LANG_SWIFT</name></expr>:</case>
			<return>return <expr><name>L_SWIFT</name></expr>;</return>
        <case>case <expr><name>IDM_LANG_ASN1</name></expr> :</case>
            <return>return <expr><name>L_ASN1</name></expr>;</return>
        <case>case <expr><name>IDM_LANG_AVS</name></expr> :</case>
            <return>return <expr><name>L_AVS</name></expr>;</return>
        <case>case <expr><name>IDM_LANG_BLITZBASIC</name></expr> :</case>
            <return>return <expr><name>L_BLITZBASIC</name></expr>;</return>
        <case>case <expr><name>IDM_LANG_PUREBASIC</name></expr> :</case>
            <return>return <expr><name>L_PUREBASIC</name></expr>;</return>
        <case>case <expr><name>IDM_LANG_FREEBASIC</name></expr> :</case>
            <return>return <expr><name>L_FREEBASIC</name></expr>;</return>
        <case>case <expr><name>IDM_LANG_CSOUND</name></expr> :</case>
            <return>return <expr><name>L_CSOUND</name></expr>;</return>
        <case>case <expr><name>IDM_LANG_ERLANG</name></expr> :</case>
            <return>return <expr><name>L_ERLANG</name></expr>;</return>
        <case>case <expr><name>IDM_LANG_ESCRIPT</name></expr> :</case>
            <return>return <expr><name>L_ESCRIPT</name></expr>;</return>
        <case>case <expr><name>IDM_LANG_FORTH</name></expr> :</case>
            <return>return <expr><name>L_FORTH</name></expr>;</return>
        <case>case <expr><name>IDM_LANG_LATEX</name></expr> :</case>
            <return>return <expr><name>L_LATEX</name></expr>;</return>
        <case>case <expr><name>IDM_LANG_MMIXAL</name></expr> :</case>
            <return>return <expr><name>L_MMIXAL</name></expr>;</return>
        <case>case <expr><name>IDM_LANG_NIM</name></expr> :</case>
            <return>return <expr><name>L_NIM</name></expr>;</return>
        <case>case <expr><name>IDM_LANG_NNCRONTAB</name></expr> :</case>
            <return>return <expr><name>L_NNCRONTAB</name></expr>;</return>
        <case>case <expr><name>IDM_LANG_OSCRIPT</name></expr> :</case>
            <return>return <expr><name>L_OSCRIPT</name></expr>;</return>
        <case>case <expr><name>IDM_LANG_REBOL</name></expr> :</case>
            <return>return <expr><name>L_REBOL</name></expr>;</return>
        <case>case <expr><name>IDM_LANG_REGISTRY</name></expr> :</case>
            <return>return <expr><name>L_REGISTRY</name></expr>;</return>
        <case>case <expr><name>IDM_LANG_RUST</name></expr> :</case>
            <return>return <expr><name>L_RUST</name></expr>;</return>
        <case>case <expr><name>IDM_LANG_SPICE</name></expr> :</case>
            <return>return <expr><name>L_SPICE</name></expr>;</return>
        <case>case <expr><name>IDM_LANG_TXT2TAGS</name></expr> :</case>
            <return>return <expr><name>L_TXT2TAGS</name></expr>;</return>
        <case>case <expr><name>IDM_LANG_VISUALPROLOG</name></expr>:</case>
            <return>return <expr><name>L_VISUALPROLOG</name></expr>;</return>
        <case>case <expr><name>IDM_LANG_TYPESCRIPT</name></expr>:</case>
            <return>return <expr><name>L_TYPESCRIPT</name></expr>;</return>
        <case>case <expr><name>IDM_LANG_GDSCRIPT</name></expr>:</case>
            <return>return <expr><name>L_GDSCRIPT</name></expr>;</return>
        <case>case <expr><name>IDM_LANG_HOLLYWOOD</name></expr>:</case>
            <return>return <expr><name>L_HOLLYWOOD</name></expr>;</return>	    
        <case>case <expr><name>IDM_LANG_USER</name></expr>:</case>
            <return>return <expr><name>L_USER</name></expr>;</return>
		<default>default:</default>
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name>cmdID</name> <operator>&gt;=</operator> <name>IDM_LANG_USER</name> <operator>&amp;&amp;</operator> <name>cmdID</name> <operator>&lt;=</operator> <name>IDM_LANG_USER_LIMIT</name></expr>)</condition>
			<block>{<block_content>
				<return>return <expr><name>L_USER</name></expr>;</return>
			</block_content>}</block></if></if_stmt>
			<break>break;</break> 
		</block_content>}</block>
	</block_content>}</block></switch>
	<return>return <expr><name>L_EXTERNAL</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>void</name></type> <name><name>Notepad_plus</name><operator>::</operator><name>setTitle</name></name><parameter_list>()</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>NppParameters</name><modifier>&amp;</modifier></type> <name>nppParams</name> <init>= <expr><call><name><name>NppParameters</name><operator>::</operator><name>getInstance</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>NppGUI</name> <modifier>&amp;</modifier></type> <name>nppGUI</name> <init>= <expr><call><name><name>nppParams</name><operator>.</operator><name>getNppGUI</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<comment type="line">//Get the buffer</comment>
	<decl_stmt><decl><type><name>Buffer</name> <modifier>*</modifier></type> <name>buf</name> <init>= <expr><call><name><name>_pEditView</name><operator>-&gt;</operator><name>getCurrentBuffer</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>generic_string</name></type> <name>result</name> <init>= <expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><call><name><name>buf</name><operator>-&gt;</operator><name>isDirty</name></name><argument_list>()</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>result</name> <operator>+=</operator> <call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"*"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>nppGUI</name><operator>.</operator><name>_shortTitlebar</name></name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>result</name> <operator>+=</operator> <call><name><name>buf</name><operator>-&gt;</operator><name>getFileName</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<expr_stmt><expr><name>result</name> <operator>+=</operator> <call><name><name>buf</name><operator>-&gt;</operator><name>getFullPathName</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
	<expr_stmt><expr><name>result</name> <operator>+=</operator> <call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">" - "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>result</name> <operator>+=</operator> <call><name><name>_pPublicInterface</name><operator>-&gt;</operator><name>getClassName</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>_isAdministrator</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>result</name> <operator>+=</operator> <call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">" [Administrator]"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<decl_stmt><decl><type><name>generic_string</name></type> <name>tbAdd</name> <init>= <expr><call><name><name>nppParams</name><operator>.</operator><name>getTitleBarAdd</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>tbAdd</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>result</name> <operator>+=</operator> <call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">" - "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>result</name> <operator>+=</operator> <name>tbAdd</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name><operator>::</operator><name>SendMessage</name></name><argument_list>(<argument><expr><call><name><name>_pPublicInterface</name><operator>-&gt;</operator><name>getHSelf</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>WM_SETTEXT</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><cast type="reinterpret">reinterpret_cast<argument_list type="generic">&lt;<argument><expr><name>LPARAM</name></expr></argument>&gt;</argument_list><argument_list>(<argument><expr><call><name><name>result</name><operator>.</operator><name>c_str</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></cast></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name><name>Notepad_plus</name><operator>::</operator><name>activateNextDoc</name></name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>direction</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>nbDoc</name> <init>= <expr><cast type="static">static_cast<argument_list type="generic">&lt;<argument><expr><name>int32_t</name></expr></argument>&gt;</argument_list><argument_list>(<argument><expr><call><name><name>_pDocTab</name><operator>-&gt;</operator><name>nbItem</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></cast></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>int</name></type> <name>curIndex</name> <init>= <expr><call><name><name>_pDocTab</name><operator>-&gt;</operator><name>getCurrentTabIndex</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>curIndex</name> <operator>+=</operator> <ternary><condition><expr><operator>(</operator><name>direction</name> <operator>==</operator> <name>dirUp</name><operator>)</operator></expr>?</condition><then><expr><operator>-</operator><literal type="number">1</literal></expr></then><else>:<expr><literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>curIndex</name> <operator>&gt;=</operator> <name>nbDoc</name></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><call><name>viewVisible</name><argument_list>(<argument><expr><call><name>otherView</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>switchEditViewTo</name><argument_list>(<argument><expr><call><name>otherView</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<expr_stmt><expr><name>curIndex</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	</block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><name>curIndex</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><call><name>viewVisible</name><argument_list>(<argument><expr><call><name>otherView</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>switchEditViewTo</name><argument_list>(<argument><expr><call><name>otherView</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>nbDoc</name> <operator>=</operator> <cast type="static">static_cast<argument_list type="generic">&lt;<argument><expr><name>int32_t</name></expr></argument>&gt;</argument_list><argument_list>(<argument><expr><call><name><name>_pDocTab</name><operator>-&gt;</operator><name>nbItem</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></cast></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><name>curIndex</name> <operator>=</operator> <name>nbDoc</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<decl_stmt><decl><type><name>BufferID</name></type> <name>id</name> <init>= <expr><call><name><name>_pDocTab</name><operator>-&gt;</operator><name>getBufferByIndex</name></name><argument_list>(<argument><expr><name>curIndex</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>activateBuffer</name><argument_list>(<argument><expr><name>id</name></expr></argument>, <argument><expr><call><name>currentView</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name><name>Notepad_plus</name><operator>::</operator><name>activateDoc</name></name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>pos</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>size_t</name></type> <name>nbDoc</name> <init>= <expr><call><name><name>_pDocTab</name><operator>-&gt;</operator><name>nbItem</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><name>pos</name> <operator>==</operator> <cast type="static">static_cast<argument_list type="generic">&lt;<argument><expr><name>size_t</name></expr></argument>&gt;</argument_list><argument_list>(<argument><expr><call><name><name>_pDocTab</name><operator>-&gt;</operator><name>getCurrentTabIndex</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></cast></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>Buffer</name> <modifier>*</modifier></type> <name>buf</name> <init>= <expr><call><name><name>_pEditView</name><operator>-&gt;</operator><name>getCurrentBuffer</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>buf</name><operator>-&gt;</operator><name>increaseRecentTag</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>pos</name> <operator>&lt;</operator> <name>nbDoc</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>BufferID</name></type> <name>id</name> <init>= <expr><call><name><name>_pDocTab</name><operator>-&gt;</operator><name>getBufferByIndex</name></name><argument_list>(<argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>activateBuffer</name><argument_list>(<argument><expr><name>id</name></expr></argument>, <argument><expr><call><name>currentView</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>


<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>utflen</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">3</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<function><type><name>size_t</name></type> <name><name>Notepad_plus</name><operator>::</operator><name>getSelectedCharNumber</name></name><parameter_list>(<parameter><decl><type><name>UniMode</name></type> <name>u</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>size_t</name></type> <name>result</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>numSel</name> <init>= <expr><call><name><name>_pEditView</name><operator>-&gt;</operator><name>execute</name></name><argument_list>(<argument><expr><name>SCI_GETSELECTIONS</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><name>u</name> <operator>==</operator> <name>uniUTF8</name> <operator>||</operator> <name>u</name> <operator>==</operator> <name>uniCookie</name></expr>)</condition>
	<block>{<block_content>
		<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>numSel</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
		<block>{<block_content>
			<decl_stmt><decl><type><name>size_t</name></type> <name>line1</name> <init>= <expr><call><name><name>_pEditView</name><operator>-&gt;</operator><name>execute</name></name><argument_list>(<argument><expr><name>SCI_LINEFROMPOSITION</name></expr></argument>, <argument><expr><call><name><name>_pEditView</name><operator>-&gt;</operator><name>execute</name></name><argument_list>(<argument><expr><name>SCI_GETSELECTIONNSTART</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>size_t</name></type> <name>line2</name> <init>= <expr><call><name><name>_pEditView</name><operator>-&gt;</operator><name>execute</name></name><argument_list>(<argument><expr><name>SCI_LINEFROMPOSITION</name></expr></argument>, <argument><expr><call><name><name>_pEditView</name><operator>-&gt;</operator><name>execute</name></name><argument_list>(<argument><expr><name>SCI_GETSELECTIONNEND</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<for>for <control>(<init><decl><type><name>size_t</name></type> <name>j</name> <init>= <expr><name>line1</name></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;=</operator> <name>line2</name></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control>
			<block>{<block_content>
				<decl_stmt><decl><type><name>size_t</name></type> <name>stpos</name> <init>= <expr><call><name><name>_pEditView</name><operator>-&gt;</operator><name>execute</name></name><argument_list>(<argument><expr><name>SCI_GETLINESELSTARTPOSITION</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<if_stmt><if>if <condition>(<expr><cast type="static">static_cast<argument_list type="generic">&lt;<argument><expr><name>intptr_t</name></expr></argument>&gt;</argument_list><argument_list>(<argument><expr><name>stpos</name></expr></argument>)</argument_list></cast> <operator>!=</operator> <name>INVALID_POSITION</name></expr>)</condition>
				<block>{<block_content>
					<decl_stmt><decl><type><name>size_t</name></type> <name>endpos</name> <init>= <expr><call><name><name>_pEditView</name><operator>-&gt;</operator><name>execute</name></name><argument_list>(<argument><expr><name>SCI_GETLINESELENDPOSITION</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
					<for>for <control>(<init><decl><type><name>size_t</name></type> <name>pos</name> <init>= <expr><name>stpos</name></expr></init></decl>;</init> <condition><expr><name>pos</name> <operator>&lt;</operator> <name>endpos</name></expr>;</condition> <incr><expr><operator>++</operator><name>pos</name></expr></incr>)</control>
					<block>{<block_content>
						<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>c</name> <init>= <expr><literal type="number">0xf0</literal> <operator>&amp;</operator> <cast type="static">static_cast<argument_list type="generic">&lt;<argument><expr><name>unsigned</name> <name>char</name></expr></argument>&gt;</argument_list><argument_list>(<argument><expr><call><name><name>_pEditView</name><operator>-&gt;</operator><name>execute</name></name><argument_list>(<argument><expr><name>SCI_GETCHARAT</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></cast></expr></init></decl>;</decl_stmt>
						<if_stmt><if>if <condition>(<expr><name>c</name> <operator>&gt;=</operator> <literal type="number">0xc0</literal></expr>)</condition><block type="pseudo"><block_content>
							<expr_stmt><expr><name>pos</name> <operator>+=</operator> <name><name>utflen</name><index>[<expr><operator>(</operator><name>c</name> <operator>&amp;</operator> <literal type="number">0x30</literal><operator>)</operator> <operator>&gt;&gt;</operator>  <literal type="number">4</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
						<expr_stmt><expr><operator>++</operator><name>result</name></expr>;</expr_stmt>
					</block_content>}</block></for>
				</block_content>}</block></if></if_stmt>
			</block_content>}</block></for>
		</block_content>}</block></for>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>numSel</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
		<block>{<block_content>
			<decl_stmt><decl><type><name>size_t</name></type> <name>stpos</name> <init>= <expr><call><name><name>_pEditView</name><operator>-&gt;</operator><name>execute</name></name><argument_list>(<argument><expr><name>SCI_GETSELECTIONNSTART</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>size_t</name></type> <name>endpos</name> <init>= <expr><call><name><name>_pEditView</name><operator>-&gt;</operator><name>execute</name></name><argument_list>(<argument><expr><name>SCI_GETSELECTIONNEND</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><name>result</name> <operator>+=</operator> <operator>(</operator><name>endpos</name> <operator>-</operator> <name>stpos</name><operator>)</operator></expr>;</expr_stmt>
			<decl_stmt><decl><type><name>size_t</name></type> <name>line1</name> <init>= <expr><call><name><name>_pEditView</name><operator>-&gt;</operator><name>execute</name></name><argument_list>(<argument><expr><name>SCI_LINEFROMPOSITION</name></expr></argument>, <argument><expr><name>stpos</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>size_t</name></type> <name>line2</name> <init>= <expr><call><name><name>_pEditView</name><operator>-&gt;</operator><name>execute</name></name><argument_list>(<argument><expr><name>SCI_LINEFROMPOSITION</name></expr></argument>, <argument><expr><name>endpos</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><name>line2</name> <operator>-=</operator> <name>line1</name></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><call><name><name>_pEditView</name><operator>-&gt;</operator><name>execute</name></name><argument_list>(<argument><expr><name>SCI_GETEOLMODE</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>SC_EOL_CRLF</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>line2</name> <operator>*=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<expr_stmt><expr><name>result</name> <operator>-=</operator> <name>line2</name></expr>;</expr_stmt>
		</block_content>}</block></for>
		<if_stmt><if>if <condition>(<expr><name>u</name> <operator>!=</operator> <name>uni8Bit</name> <operator>&amp;&amp;</operator> <name>u</name> <operator>!=</operator> <name>uni7Bit</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>result</name> <operator>*=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></else></if_stmt>
	<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>


<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>_OPENMP</name></cpp:ifdef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;omp.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>size_t</name></type> <name>countUtf8Characters</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>pos</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>endpos</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>size_t</name></type> <name>result</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<while>while <condition>(<expr><name>pos</name> <operator>&lt;</operator> <name>endpos</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>c</name> <init>= <expr><name><name>buf</name><index>[<expr><name>pos</name><operator>++</operator></expr>]</index></name></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if <condition>(<expr><operator>(</operator><name>c</name><operator>&amp;</operator><literal type="number">0xc0</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x80</literal> <comment type="line">// do not count unexpected continuation bytes (this handles the case where an UTF-8 character is split in the middle)</comment>
			<operator>||</operator> <name>c</name> <operator>==</operator> <literal type="char">'\n'</literal> <operator>||</operator> <name>c</name> <operator>==</operator> <literal type="char">'\r'</literal></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt> <comment type="line">// do not count end of lines</comment>
		<if_stmt><if>if <condition>(<expr><name>c</name> <operator>&gt;=</operator> <literal type="number">0xc0</literal></expr>)</condition><block type="pseudo"><block_content> 
			<expr_stmt><expr><name>pos</name> <operator>+=</operator> <name><name>utflen</name><index>[<expr><operator>(</operator><name>c</name> <operator>&amp;</operator> <literal type="number">0x30</literal><operator>)</operator> <operator>&gt;&gt;</operator>  <literal type="number">4</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<expr_stmt><expr><operator>++</operator><name>result</name></expr>;</expr_stmt>
	</block_content>}</block></while>
	<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>size_t</name></type> <name><name>Notepad_plus</name><operator>::</operator><name>getCurrentDocCharCount</name></name><parameter_list>(<parameter><decl><type><name>UniMode</name></type> <name>u</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>u</name> <operator>!=</operator> <name>uniUTF8</name> <operator>&amp;&amp;</operator> <name>u</name> <operator>!=</operator> <name>uniCookie</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>size_t</name></type> <name>numLines</name> <init>= <expr><call><name><name>_pEditView</name><operator>-&gt;</operator><name>execute</name></name><argument_list>(<argument><expr><name>SCI_GETLINECOUNT</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>auto</name></type> <name>result</name> <init>= <expr><call><name><name>_pEditView</name><operator>-&gt;</operator><name>execute</name></name><argument_list>(<argument><expr><name>SCI_GETLENGTH</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>size_t</name></type> <name>lines</name> <init>= <expr><ternary><condition><expr><name>numLines</name><operator>==</operator><literal type="number">0</literal></expr>?</condition><then><expr><literal type="number">0</literal></expr></then><else>:<expr><name>numLines</name><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if <condition>(<expr><call><name><name>_pEditView</name><operator>-&gt;</operator><name>execute</name></name><argument_list>(<argument><expr><name>SCI_GETEOLMODE</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>SC_EOL_CRLF</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>lines</name> <operator>*=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<expr_stmt><expr><name>result</name> <operator>-=</operator> <name>lines</name></expr>;</expr_stmt>
		<return>return <expr><ternary><condition><expr><operator>(</operator><name>result</name> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name>result</name></expr></else></ternary></expr>;</return>
	</block_content>}</block></if>
 	<else>else
 	<block>{<block_content>
		<comment type="line">// Note that counting is not well defined for invalid UTF-8 characters.</comment>
		<comment type="line">// This method is O(filelength) regardless of the number of characters we count (due to SCI_GETCHARACTERPOINTER);</comment>
		<comment type="line">// it would not be appropriate for counting characters in a small selection.</comment>
		<decl_stmt><decl><type><name>size_t</name></type> <name>result</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

		<decl_stmt><decl><type><name>size_t</name></type> <name>endpos</name> <init>= <expr><call><name><name>_pEditView</name><operator>-&gt;</operator><name>execute</name></name><argument_list>(<argument><expr><name>SCI_GETLENGTH</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>unsigned</name> <name>char</name><modifier>*</modifier></type> <name>buf</name> <init>= <expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator><call><name><name>_pEditView</name><operator>-&gt;</operator><name>execute</name></name><argument_list>(<argument><expr><name>SCI_GETCHARACTERPOINTER</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="line">// Scintilla doc said the pointer can be invalidated by any other "execute"</comment>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>_OPENMP</name></cpp:ifdef> <comment type="line">// parallel counting of characters with OpenMP</comment>
		<if_stmt><if>if <condition>(<expr><name>endpos</name> <operator>&gt;</operator> <literal type="number">50000</literal></expr>)</condition> <comment type="line">// starting threads takes time; for small files it is better to simply count in one thread</comment>
		<block>{<block_content>
			<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <omp:directive>omp <omp:name>parallel</omp:name> <omp:clause><omp:name>reduction</omp:name><omp:argument_list>(<omp:argument><omp:expr>+: result</omp:expr></omp:argument>)</omp:argument_list></omp:clause></omp:directive></cpp:pragma>
			<block>{<block_content>
				<comment type="line">// split in chunks of same size (except last chunk if it's not evenly divisible)</comment>
				<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>num_threads</name> <init>= <expr><call><name>omp_get_num_threads</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>thread_num</name> <init>= <expr><call><name>omp_get_thread_num</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>size_t</name></type> <name>chunk_size</name> <init>= <expr><name>endpos</name><operator>/</operator><name>num_threads</name></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>size_t</name></type> <name>pos</name> <init>= <expr><name>chunk_size</name><operator>*</operator><name>thread_num</name></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>size_t</name></type> <name>endpos_local</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>thread_num</name> <operator>==</operator> <name>num_threads</name><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr> ?</condition><then> <expr><name>endpos</name></expr> </then><else>: <expr><name>pos</name><operator>+</operator><name>chunk_size</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
				<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>countUtf8Characters</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>, <argument><expr><name>endpos_local</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block>
		</block_content>}</block></if>
		<else>else
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
		<block>{<block_content>
			<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>countUtf8Characters</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>endpos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
 		<return>return <expr><name>result</name></expr>;</return>
 	</block_content>}</block></else></if_stmt>
</block_content>}</block></function>


<function><type><name>bool</name></type> <name><name>Notepad_plus</name><operator>::</operator><name>isFormatUnicode</name></name><parameter_list>(<parameter><decl><type><name>UniMode</name></type> <name>u</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><operator>(</operator><name>u</name> <operator>!=</operator> <name>uni8Bit</name> <operator>&amp;&amp;</operator> <name>u</name> <operator>!=</operator> <name>uni7Bit</name> <operator>&amp;&amp;</operator> <name>u</name> <operator>!=</operator> <name>uniUTF8</name> <operator>&amp;&amp;</operator> <name>u</name> <operator>!=</operator> <name>uniCookie</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name><name>Notepad_plus</name><operator>::</operator><name>getBOMSize</name></name><parameter_list>(<parameter><decl><type><name>UniMode</name></type> <name>u</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<switch>switch<condition>(<expr><name>u</name></expr>)</condition>
	<block>{<block_content>
		<case>case <expr><name>uni16LE</name></expr>:</case>
		<case>case <expr><name>uni16BE</name></expr>:</case>
			<return>return <expr><literal type="number">2</literal></expr>;</return>
		<case>case <expr><name>uniUTF8</name></expr>:</case>
			<return>return <expr><literal type="number">3</literal></expr>;</return>
		<default>default:</default>
			<return>return <expr><literal type="number">0</literal></expr>;</return>
	</block_content>}</block></switch>
</block_content>}</block></function>

<function><type><name>size_t</name></type> <name><name>Notepad_plus</name><operator>::</operator><name>getSelectedAreas</name></name><parameter_list>()</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>size_t</name></type> <name>numSel</name> <init>= <expr><call><name><name>_pEditView</name><operator>-&gt;</operator><name>execute</name></name><argument_list>(<argument><expr><name>SCI_GETSELECTIONS</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><name>numSel</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <comment type="line">// either 0 or 1 selection</comment>
		<return>return <expr><ternary><condition><expr><operator>(</operator><call><name><name>_pEditView</name><operator>-&gt;</operator><name>execute</name></name><argument_list>(<argument><expr><name>SCI_GETSELECTIONNSTART</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <call><name><name>_pEditView</name><operator>-&gt;</operator><name>execute</name></name><argument_list>(<argument><expr><name>SCI_GETSELECTIONNEND</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr>;</return></block_content></block></if></if_stmt>
	<return>return <expr><ternary><condition><expr><operator>(</operator><call><name><name>_pEditView</name><operator>-&gt;</operator><name>execute</name></name><argument_list>(<argument><expr><name>SCI_SELECTIONISRECTANGLE</name></expr></argument>)</argument_list></call><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><name>numSel</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><name>size_t</name></type> <name><name>Notepad_plus</name><operator>::</operator><name>getSelectedBytes</name></name><parameter_list>()</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>size_t</name></type> <name>numSel</name> <init>= <expr><call><name><name>_pEditView</name><operator>-&gt;</operator><name>execute</name></name><argument_list>(<argument><expr><name>SCI_GETSELECTIONS</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>result</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>numSel</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>
		<expr_stmt><expr><name>result</name> <operator>+=</operator> <operator>(</operator><call><name><name>_pEditView</name><operator>-&gt;</operator><name>execute</name></name><argument_list>(<argument><expr><name>SCI_GETSELECTIONNEND</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call> <operator>-</operator> <call><name><name>_pEditView</name><operator>-&gt;</operator><name>execute</name></name><argument_list>(<argument><expr><name>SCI_GETSELECTIONNSTART</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt></block_content></block></for>
	<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name><name>Notepad_plus</name><operator>::</operator><name>wordCount</name></name><parameter_list>()</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>FindOption</name></type> <name>env</name></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>env</name><operator>.</operator><name>_str2Search</name></name> <operator>=</operator> <call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"[^ 	\\\\.,;:!?()+\\r\\n\\-\\*/=\\]\\[{}&amp;~\"'`|@$%&lt;&gt;\\^]+"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>env</name><operator>.</operator><name>_searchType</name></name> <operator>=</operator> <name>FindRegex</name></expr>;</expr_stmt>
    <return>return <expr><call><name><name>_findReplaceDlg</name><operator>.</operator><name>processAll</name></name><argument_list>(<argument><expr><name>ProcessCountAll</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>env</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name><name>Notepad_plus</name><operator>::</operator><name>updateStatusBar</name></name><parameter_list>()</parameter_list>
<block>{<block_content>
	<comment type="line">// these sections of status bar NOT updated by this function:</comment>
	<comment type="line">// STATUSBAR_DOC_TYPE , STATUSBAR_EOF_FORMAT , STATUSBAR_UNICODE_TYPE</comment>

	<decl_stmt><decl><type><name>TCHAR</name></type> <name><name>strDocLen</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>docLen</name> <init>= <expr><call><name><name>_pEditView</name><operator>-&gt;</operator><name>getCurrentDocLen</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>intptr_t</name></type> <name>nbLine</name> <init>= <expr><call><name><name>_pEditView</name><operator>-&gt;</operator><name>execute</name></name><argument_list>(<argument><expr><name>SCI_GETLINECOUNT</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>wsprintf</name><argument_list>(<argument><expr><name>strDocLen</name></expr></argument>, <argument><expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"length : %s    lines : %s"</literal></expr></argument>)</argument_list></call></expr></argument>,
		<argument><expr><call><name>commafyInt</name><argument_list>(<argument><expr><name>docLen</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>c_str</name><argument_list>()</argument_list></call></expr></argument>,
		<argument><expr><call><name>commafyInt</name><argument_list>(<argument><expr><name>nbLine</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>c_str</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name>_statusBar</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><name>strDocLen</name></expr></argument>, <argument><expr><name>STATUSBAR_DOC_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>TCHAR</name></type> <name><name>strSel</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>size_t</name></type> <name>numSelections</name> <init>= <expr><call><name><name>_pEditView</name><operator>-&gt;</operator><name>execute</name></name><argument_list>(<argument><expr><name>SCI_GETSELECTIONS</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><name>numSelections</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><call><name><name>_pEditView</name><operator>-&gt;</operator><name>execute</name></name><argument_list>(<argument><expr><name>SCI_GETSELECTIONEMPTY</name></expr></argument>)</argument_list></call></expr>)</condition>
		<block>{<block_content>
			<decl_stmt><decl><type><name>size_t</name></type> <name>currPos</name> <init>= <expr><call><name><name>_pEditView</name><operator>-&gt;</operator><name>execute</name></name><argument_list>(<argument><expr><name>SCI_GETCURRENTPOS</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name>wsprintf</name><argument_list>(<argument><expr><name>strSel</name></expr></argument>, <argument><expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"Pos : %s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>commafyInt</name><argument_list>(<argument><expr><name>currPos</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>c_str</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if>
		<else>else
		<block>{<block_content>
			<decl_stmt><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>size_t</name></expr></argument>, <argument><expr><name>size_t</name></expr></argument>&gt;</argument_list></name></type> <name>oneSelCharsAndLines</name> <init>= <expr><call><name><name>_pEditView</name><operator>-&gt;</operator><name>getSelectedCharsAndLinesCount</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name>wsprintf</name><argument_list>(<argument><expr><name>strSel</name></expr></argument>, <argument><expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"Sel : %s | %s"</literal></expr></argument>)</argument_list></call></expr></argument>,
				<argument><expr><call><name>commafyInt</name><argument_list>(<argument><expr><name><name>oneSelCharsAndLines</name><operator>.</operator><name>first</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>c_str</name><argument_list>()</argument_list></call></expr></argument>,
				<argument><expr><call><name>commafyInt</name><argument_list>(<argument><expr><name><name>oneSelCharsAndLines</name><operator>.</operator><name>second</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>c_str</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><call><name><name>_pEditView</name><operator>-&gt;</operator><name>execute</name></name><argument_list>(<argument><expr><name>SCI_SELECTIONISRECTANGLE</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>size_t</name></expr></argument>, <argument><expr><name>size_t</name></expr></argument>&gt;</argument_list></name></type> <name>rectSelCharsAndLines</name> <init>= <expr><call><name><name>_pEditView</name><operator>-&gt;</operator><name>getSelectedCharsAndLinesCount</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

		<decl_stmt><decl><type><name>bool</name></type> <name>sameCharCountOnEveryLine</name> <init>= <expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>size_t</name></type> <name>maxLineCharCount</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

		<for>for <control>(<init><decl><type><name>size_t</name></type> <name>sel</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>sel</name> <operator>&lt;</operator> <name>numSelections</name></expr>;</condition> <incr><expr><operator>++</operator><name>sel</name></expr></incr>)</control>
		<block>{<block_content>
			<decl_stmt><decl><type><name>size_t</name></type> <name>start</name> <init>= <expr><call><name><name>_pEditView</name><operator>-&gt;</operator><name>execute</name></name><argument_list>(<argument><expr><name>SCI_GETSELECTIONNSTART</name></expr></argument>, <argument><expr><name>sel</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>size_t</name></type> <name>end</name> <init>= <expr><call><name><name>_pEditView</name><operator>-&gt;</operator><name>execute</name></name><argument_list>(<argument><expr><name>SCI_GETSELECTIONNEND</name></expr></argument>, <argument><expr><name>sel</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>size_t</name></type> <name>lineCharCount</name> <init>= <expr><call><name><name>_pEditView</name><operator>-&gt;</operator><name>execute</name></name><argument_list>(<argument><expr><name>SCI_COUNTCHARACTERS</name></expr></argument>, <argument><expr><name>start</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

			<if_stmt><if>if <condition>(<expr><name>sel</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><name>maxLineCharCount</name> <operator>=</operator> <name>lineCharCount</name></expr>;</expr_stmt>
			</block_content>}</block></if>
			<else>else 
			<block>{<block_content>
				<if_stmt><if>if <condition>(<expr><name>lineCharCount</name> <operator>!=</operator> <name>maxLineCharCount</name></expr>)</condition>
				<block>{<block_content>
					<expr_stmt><expr><name>sameCharCountOnEveryLine</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
					<if_stmt><if>if <condition>(<expr><name>lineCharCount</name> <operator>&gt;</operator> <name>maxLineCharCount</name></expr>)</condition>
					<block>{<block_content>
						<expr_stmt><expr><name>maxLineCharCount</name> <operator>=</operator> <name>lineCharCount</name></expr>;</expr_stmt>
					</block_content>}</block></if></if_stmt>
				</block_content>}</block></if></if_stmt>
			</block_content>}</block></else></if_stmt>
		</block_content>}</block></for>

		<expr_stmt><expr><call><name>wsprintf</name><argument_list>(<argument><expr><name>strSel</name></expr></argument>, <argument><expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"Sel : %sx%s %s %s"</literal></expr></argument>)</argument_list></call></expr></argument>,
			<argument><expr><call><name>commafyInt</name><argument_list>(<argument><expr><name>numSelections</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>c_str</name><argument_list>()</argument_list></call></expr></argument>,  <comment type="line">// lines (rows) in rectangular selection</comment>
			<argument><expr><call><name>commafyInt</name><argument_list>(<argument><expr><name>maxLineCharCount</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>c_str</name><argument_list>()</argument_list></call></expr></argument>,  <comment type="line">// show maximum width for columns</comment>
			<argument><expr><ternary><condition><expr><name>sameCharCountOnEveryLine</name></expr> ?</condition><then> <expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"="</literal></expr></argument>)</argument_list></call></expr> </then><else>: <expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"-&gt;"</literal></expr></argument>)</argument_list></call></expr></else></ternary></expr></argument>,
			<argument><expr><call><name>commafyInt</name><argument_list>(<argument><expr><name><name>rectSelCharsAndLines</name><operator>.</operator><name>first</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>c_str</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else  <comment type="line">// multiple stream selections</comment>
	<block>{<block_content>
		<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>maxSelsToProcessLineCount</name> <init>= <expr><literal type="number">99</literal></expr></init></decl>;</decl_stmt>  <comment type="line">// limit the number of selections to process, for performance reasons</comment>
		<decl_stmt><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>size_t</name></expr></argument>, <argument><expr><name>size_t</name></expr></argument>&gt;</argument_list></name></type> <name>multipleSelCharsAndLines</name> <init>= <expr><call><name><name>_pEditView</name><operator>-&gt;</operator><name>getSelectedCharsAndLinesCount</name></name><argument_list>(<argument><expr><name>maxSelsToProcessLineCount</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><call><name>wsprintf</name><argument_list>(<argument><expr><name>strSel</name></expr></argument>, <argument><expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"Sel %s : %s | %s"</literal></expr></argument>)</argument_list></call></expr></argument>,
			<argument><expr><call><name>commafyInt</name><argument_list>(<argument><expr><name>numSelections</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>c_str</name><argument_list>()</argument_list></call></expr></argument>,
			<argument><expr><call><name>commafyInt</name><argument_list>(<argument><expr><name><name>multipleSelCharsAndLines</name><operator>.</operator><name>first</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>c_str</name><argument_list>()</argument_list></call></expr></argument>,
			<argument><expr><ternary><condition><expr><name>numSelections</name> <operator>&lt;=</operator> <name>maxSelsToProcessLineCount</name></expr> ?</condition><then>
				<expr><call><name>commafyInt</name><argument_list>(<argument><expr><name><name>multipleSelCharsAndLines</name><operator>.</operator><name>second</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>c_str</name><argument_list>()</argument_list></call></expr> </then><else>:
				<expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"..."</literal></expr></argument>)</argument_list></call></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="line">// show ellipsis for line count if too many selections are active</comment>
	</block_content>}</block></else></if_stmt>

	<decl_stmt><decl><type><name>TCHAR</name></type> <name><name>strLnColSel</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>intptr_t</name></type> <name>curLN</name> <init>= <expr><call><name><name>_pEditView</name><operator>-&gt;</operator><name>getCurrentLineNumber</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>intptr_t</name></type> <name>curCN</name> <init>= <expr><call><name><name>_pEditView</name><operator>-&gt;</operator><name>getCurrentColumnNumber</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>wsprintf</name><argument_list>(<argument><expr><name>strLnColSel</name></expr></argument>, <argument><expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"Ln : %s    Col : %s    %s"</literal></expr></argument>)</argument_list></call></expr></argument>,
		<argument><expr><call><name>commafyInt</name><argument_list>(<argument><expr><name>curLN</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>c_str</name><argument_list>()</argument_list></call></expr></argument>,
		<argument><expr><call><name>commafyInt</name><argument_list>(<argument><expr><name>curCN</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>c_str</name><argument_list>()</argument_list></call></expr></argument>,
		<argument><expr><name>strSel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name>_statusBar</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><name>strLnColSel</name></expr></argument>, <argument><expr><name>STATUSBAR_CUR_POS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name><name>_statusBar</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><ternary><condition><expr><call><name><name>_pEditView</name><operator>-&gt;</operator><name>execute</name></name><argument_list>(<argument><expr><name>SCI_GETOVERTYPE</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"OVR"</literal></expr></argument>)</argument_list></call></expr> </then><else>: <expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"INS"</literal></expr></argument>)</argument_list></call></expr></else></ternary></expr></argument>, <argument><expr><name>STATUSBAR_TYPING_MODE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	
	<if_stmt><if>if <condition>(<expr><call><name><name>_goToLineDlg</name><operator>.</operator><name>isCreated</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>_goToLineDlg</name><operator>.</operator><name>isVisible</name></name><argument_list>()</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name><name>_goToLineDlg</name><operator>.</operator><name>updateLinesNumbers</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name><name>Notepad_plus</name><operator>::</operator><name>dropFiles</name></name><parameter_list>(<parameter><decl><type><name>HDROP</name></type> <name>hdrop</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>hdrop</name></expr>)</condition>
	<block>{<block_content>
		<comment type="line">// Determinate in which view the file(s) is (are) dropped</comment>
		<decl_stmt><decl><type><name>POINT</name></type> <name>p</name></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><operator>::</operator><name>DragQueryPoint</name></name><argument_list>(<argument><expr><name>hdrop</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<decl_stmt><decl><type><name>HWND</name></type> <name>hWin</name> <init>= <expr><call><name><operator>::</operator><name>ChildWindowFromPointEx</name></name><argument_list>(<argument><expr><call><name><name>_pPublicInterface</name><operator>-&gt;</operator><name>getHSelf</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>CWP_SKIPINVISIBLE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><name>hWin</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><operator>(</operator><call><name><name>_subEditView</name><operator>.</operator><name>getHSelf</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name>hWin</name><operator>)</operator> <operator>||</operator> <operator>(</operator><call><name><name>_subDocTab</name><operator>.</operator><name>getHSelf</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name>hWin</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>switchEditViewTo</name><argument_list>(<argument><expr><name>SUB_VIEW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>switchEditViewTo</name><argument_list>(<argument><expr><name>MAIN_VIEW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

		<decl_stmt><decl><type><name>int</name></type> <name>filesDropped</name> <init>= <expr><call><name><operator>::</operator><name>DragQueryFile</name></name><argument_list>(<argument><expr><name>hdrop</name></expr></argument>, <argument><expr><literal type="number">0xffffffff</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>generic_string</name></expr></argument>&gt;</argument_list></name></type> <name>folderPaths</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>generic_string</name></expr></argument>&gt;</argument_list></name></type> <name>filePaths</name></decl>;</decl_stmt>
		<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>filesDropped</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
		<block>{<block_content>
			<decl_stmt><decl><type><name>TCHAR</name></type> <name><name>pathDropped</name><index>[<expr><name>MAX_PATH</name></expr>]</index></name></decl>;</decl_stmt>
			<expr_stmt><expr><call><name><operator>::</operator><name>DragQueryFile</name></name><argument_list>(<argument><expr><name>hdrop</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>pathDropped</name></expr></argument>, <argument><expr><name>MAX_PATH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><call><name><operator>::</operator><name>PathIsDirectory</name></name><argument_list>(<argument><expr><name>pathDropped</name></expr></argument>)</argument_list></call></expr>)</condition>
			<block>{<block_content>
				<decl_stmt><decl><type><name>size_t</name></type> <name>len</name> <init>= <expr><call><name>lstrlen</name><argument_list>(<argument><expr><name>pathDropped</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>pathDropped</name><index>[<expr><name>len</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <call><name>TCHAR</name><argument_list>(<argument><expr><literal type="char">'\\'</literal></expr></argument>)</argument_list></call></expr>)</condition>
				<block>{<block_content>
					<expr_stmt><expr><name><name>pathDropped</name><index>[<expr><name>len</name></expr>]</index></name> <operator>=</operator> <call><name>TCHAR</name><argument_list>(<argument><expr><literal type="char">'\\'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name><name>pathDropped</name><index>[<expr><name>len</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>TCHAR</name><argument_list>(<argument><expr><literal type="char">'\0'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block></if></if_stmt>
				<expr_stmt><expr><call><name><name>folderPaths</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>pathDropped</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if>
			<else>else
			<block>{<block_content>
				<expr_stmt><expr><call><name><name>filePaths</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>pathDropped</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></else></if_stmt>
		</block_content>}</block></for>
		
		<decl_stmt><decl><type><name>NppParameters</name><modifier>&amp;</modifier></type> <name>nppParam</name> <init>= <expr><call><name><name>NppParameters</name><operator>::</operator><name>getInstance</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>bool</name></type> <name>isOldMode</name> <init>= <expr><call><name><name>nppParam</name><operator>.</operator><name>getNppGUI</name></name><argument_list>()</argument_list></call><operator>.</operator><name>_isFolderDroppedOpenFiles</name></expr></init></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><name>isOldMode</name> <operator>||</operator> <call><name><name>folderPaths</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <comment type="line">// old mode or new mode + only files</comment>
		<block>{<block_content>
			<decl_stmt><decl><type><name>BufferID</name></type> <name>lastOpened</name> <init>= <expr><name>BUFFER_INVALID</name></expr></init></decl>;</decl_stmt>
			<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>filesDropped</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
			<block>{<block_content>
				<decl_stmt><decl><type><name>TCHAR</name></type> <name><name>pathDropped</name><index>[<expr><name>MAX_PATH</name></expr>]</index></name></decl>;</decl_stmt>
				<expr_stmt><expr><call><name><operator>::</operator><name>DragQueryFile</name></name><argument_list>(<argument><expr><name>hdrop</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>pathDropped</name></expr></argument>, <argument><expr><name>MAX_PATH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<decl_stmt><decl><type><name>BufferID</name></type> <name>test</name> <init>= <expr><call><name>doOpen</name><argument_list>(<argument><expr><name>pathDropped</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<if_stmt><if>if <condition>(<expr><name>test</name> <operator>!=</operator> <name>BUFFER_INVALID</name></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><name>lastOpened</name> <operator>=</operator> <name>test</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
			</block_content>}</block></for>

			<if_stmt><if>if <condition>(<expr><name>lastOpened</name> <operator>!=</operator> <name>BUFFER_INVALID</name></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><call><name>switchToFile</name><argument_list>(<argument><expr><name>lastOpened</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></if>
		<if type="elseif">else if <condition>(<expr><operator>!</operator><name>isOldMode</name> <operator>&amp;&amp;</operator> <operator>(</operator><call><name><name>folderPaths</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name><name>filePaths</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <comment type="line">// new mode &amp;&amp; both folders &amp; files</comment>
		<block>{<block_content>
			<comment type="line">// display error &amp; do nothing</comment>
			<expr_stmt><expr><call><name><name>_nativeLangSpeaker</name><operator>.</operator><name>messageBox</name></name><argument_list>(<argument><expr><literal type="string">"DroppingFolderAsProjectModeWarning"</literal></expr></argument>,
				<argument><expr><call><name><name>_pPublicInterface</name><operator>-&gt;</operator><name>getHSelf</name></name><argument_list>()</argument_list></call></expr></argument>,
				<argument><expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"You can only drop files or folders but not both, because you're in dropping Folder as Project mode.\ryou have to enable \"Open all files of folder instead of launching Folder as Workspace on folder dropping\" in \"Default Directory\" section of Preferences dialog to make this operation work."</literal></expr></argument>)</argument_list></call></expr></argument>,
				<argument><expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"Invalid action"</literal></expr></argument>)</argument_list></call></expr></argument>,
				<argument><expr><name>MB_OK</name> <operator>|</operator> <name>MB_APPLMODAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if>
		<if type="elseif">else if <condition>(<expr><operator>!</operator><name>isOldMode</name> <operator>&amp;&amp;</operator> <operator>(</operator><call><name><name>folderPaths</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name><name>filePaths</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <comment type="line">// new mode &amp;&amp; only folders</comment>
		<block>{<block_content>
			<comment type="line">// process new mode</comment>
			<decl_stmt><decl><type><name>generic_string</name></type> <name>emptyStr</name></decl>;</decl_stmt>
			<expr_stmt><expr><call><name>launchFileBrowser</name><argument_list>(<argument><expr><name>folderPaths</name></expr></argument>, <argument><expr><name>emptyStr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><call><name><operator>::</operator><name>DragFinish</name></name><argument_list>(<argument><expr><name>hdrop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="line">// Put Notepad_plus to forefront</comment>
		<comment type="line">// May not work for Win2k, but OK for lower versions</comment>
		<comment type="line">// Note: how to drop a file to an iconic window?</comment>
		<comment type="line">// Actually, it is the Send To command that generates a drop.</comment>
		<if_stmt><if>if <condition>(<expr><call><name><operator>::</operator><name>IsIconic</name></name><argument_list>(<argument><expr><call><name><name>_pPublicInterface</name><operator>-&gt;</operator><name>getHSelf</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name><operator>::</operator><name>ShowWindow</name></name><argument_list>(<argument><expr><call><name><name>_pPublicInterface</name><operator>-&gt;</operator><name>getHSelf</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>SW_RESTORE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><call><name><operator>::</operator><name>SetForegroundWindow</name></name><argument_list>(<argument><expr><call><name><name>_pPublicInterface</name><operator>-&gt;</operator><name>getHSelf</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name><name>Notepad_plus</name><operator>::</operator><name>checkModifiedDocument</name></name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>bCheckOnlyCurrentBuffer</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="line">//this will trigger buffer updates. If the status changes, Notepad++ will be informed and can do its magic</comment>
	<expr_stmt><expr><call><name><name>MainFileManager</name><operator>.</operator><name>checkFilesystemChanges</name></name><argument_list>(<argument><expr><name>bCheckOnlyCurrentBuffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name><name>Notepad_plus</name><operator>::</operator><name>getMainClientRect</name></name><parameter_list>(<parameter><decl><type><name>RECT</name> <modifier>&amp;</modifier></type><name>rc</name></decl></parameter>)</parameter_list> <specifier>const</specifier>
<block>{<block_content>
    <expr_stmt><expr><call><name><name>_pPublicInterface</name><operator>-&gt;</operator><name>getClientRect</name></name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>rc</name><operator>.</operator><name>top</name></name> <operator>+=</operator> <call><name><name>_rebarTop</name><operator>.</operator><name>getHeight</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>rc</name><operator>.</operator><name>bottom</name></name> <operator>-=</operator> <name><name>rc</name><operator>.</operator><name>top</name></name> <operator>+</operator> <call><name><name>_rebarBottom</name><operator>.</operator><name>getHeight</name></name><argument_list>()</argument_list></call> <operator>+</operator> <call><name><name>_statusBar</name><operator>.</operator><name>getHeight</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name><name>Notepad_plus</name><operator>::</operator><name>showView</name></name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>whichOne</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><call><name>viewVisible</name><argument_list>(<argument><expr><name>whichOne</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>	<comment type="line">//no use making visible view visible</comment>
		<return>return;</return></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>_mainWindowStatus</name> <operator>&amp;</operator> <name>WindowUserActive</name></expr>)</condition>
	<block>{<block_content>
		 <expr_stmt><expr><call><name><name>_pMainSplitter</name><operator>-&gt;</operator><name>setWin0</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>_subSplitter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		 <expr_stmt><expr><name>_pMainWindow</name> <operator>=</operator> <name>_pMainSplitter</name></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<expr_stmt><expr><name>_pMainWindow</name> <operator>=</operator> <operator>&amp;</operator><name>_subSplitter</name></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>whichOne</name> <operator>==</operator> <name>MAIN_VIEW</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name><name>_mainEditView</name><operator>.</operator><name>display</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>_mainDocTab</name><operator>.</operator><name>display</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><name>whichOne</name> <operator>==</operator> <name>SUB_VIEW</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name><name>_subEditView</name><operator>.</operator><name>display</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>_subDocTab</name><operator>.</operator><name>display</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name><name>_pMainWindow</name><operator>-&gt;</operator><name>display</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>_mainWindowStatus</name> <operator>|=</operator> <ternary><condition><expr><operator>(</operator><name>whichOne</name><operator>==</operator><name>MAIN_VIEW</name><operator>)</operator></expr>?</condition><then><expr><name>WindowMainActive</name></expr></then><else>:<expr><name>WindowSubActive</name></expr></else></ternary></expr>;</expr_stmt>

	<comment type="line">//Send sizing info to make windows fit</comment>
	<expr_stmt><expr><call><name><operator>::</operator><name>SendMessage</name></name><argument_list>(<argument><expr><call><name><name>_pPublicInterface</name><operator>-&gt;</operator><name>getHSelf</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>WM_SIZE</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name><name>Notepad_plus</name><operator>::</operator><name>viewVisible</name></name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>whichOne</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>viewToCheck</name> <init>= <expr><operator>(</operator><ternary><condition><expr><name>whichOne</name> <operator>==</operator> <name>SUB_VIEW</name></expr>?</condition><then><expr><name>WindowSubActive</name></expr></then><else>:<expr><name>WindowMainActive</name></expr></else></ternary><operator>)</operator></expr></init></decl>;</decl_stmt>
	<return>return <expr><operator>(</operator><name>_mainWindowStatus</name> <operator>&amp;</operator> <name>viewToCheck</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name><name>Notepad_plus</name><operator>::</operator><name>hideCurrentView</name></name><parameter_list>()</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>hideView</name><argument_list>(<argument><expr><call><name>currentView</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name><name>Notepad_plus</name><operator>::</operator><name>hideView</name></name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>whichOne</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>bothActive</name><argument_list>()</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>	<comment type="line">//cannot close if not both views visible</comment>
		<return>return;</return></block_content></block></if></if_stmt>

	<decl_stmt><decl><type><name>Window</name> <modifier>*</modifier></type> <name>windowToSet</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>whichOne</name> <operator>==</operator> <name>MAIN_VIEW</name><operator>)</operator></expr>?</condition><then><expr><operator>&amp;</operator><name>_subDocTab</name></expr></then><else>:<expr><operator>&amp;</operator><name>_mainDocTab</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><operator>(</operator><name>_mainWindowStatus</name> <operator>&amp;</operator> <name>WindowUserActive</name><operator>)</operator> <operator>==</operator> <name>WindowUserActive</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name><name>_pMainSplitter</name><operator>-&gt;</operator><name>setWin0</name></name><argument_list>(<argument><expr><name>windowToSet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<comment type="line">// otherwise the main window is the spltter container that we just created</comment>
		<expr_stmt><expr><name>_pMainWindow</name> <operator>=</operator> <name>windowToSet</name></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<expr_stmt><expr><call><name><name>_subSplitter</name><operator>.</operator><name>display</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>	<comment type="line">//hide splitter</comment>
	<comment type="line">//hide scintilla and doctab</comment>
	<if_stmt><if>if <condition>(<expr><name>whichOne</name> <operator>==</operator> <name>MAIN_VIEW</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name><name>_mainEditView</name><operator>.</operator><name>display</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>_mainDocTab</name><operator>.</operator><name>display</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><name>whichOne</name> <operator>==</operator> <name>SUB_VIEW</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name><name>_subEditView</name><operator>.</operator><name>display</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>_subDocTab</name><operator>.</operator><name>display</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="line">// resize the main window</comment>
	<expr_stmt><expr><call><name><operator>::</operator><name>SendMessage</name></name><argument_list>(<argument><expr><call><name><name>_pPublicInterface</name><operator>-&gt;</operator><name>getHSelf</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>WM_SIZE</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>switchEditViewTo</name><argument_list>(<argument><expr><call><name>otherFromView</name><argument_list>(<argument><expr><name>whichOne</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>auto</name></type> <name>viewToDisable</name> <init>= <expr><cast type="static">static_cast<argument_list type="generic">&lt;<argument><expr><name>UCHAR</name></expr></argument>&gt;</argument_list><argument_list>(<argument><expr><ternary><condition><expr><name>whichOne</name> <operator>==</operator> <name>SUB_VIEW</name></expr> ?</condition><then> <expr><name>WindowSubActive</name></expr> </then><else>: <expr><name>WindowMainActive</name></expr></else></ternary></expr></argument>)</argument_list></cast></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name>_mainWindowStatus</name> <operator>&amp;=</operator> <operator>~</operator><name>viewToDisable</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name><name>Notepad_plus</name><operator>::</operator><name>loadStyles</name></name><parameter_list>()</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>NppParameters</name><modifier>&amp;</modifier></type> <name>nppParam</name> <init>= <expr><call><name><name>NppParameters</name><operator>::</operator><name>getInstance</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<return>return <expr><call><name><name>nppParam</name><operator>.</operator><name>reloadStylers</name></name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name><name>Notepad_plus</name><operator>::</operator><name>canHideView</name></name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>whichOne</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>viewVisible</name><argument_list>(<argument><expr><name>whichOne</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>	<comment type="line">//cannot hide hidden view</comment>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>bothActive</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>	<comment type="line">//cannot hide only window</comment>
	<decl_stmt><decl><type><name>DocTabView</name> <modifier>*</modifier></type> <name>tabToCheck</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>whichOne</name> <operator>==</operator> <name>MAIN_VIEW</name><operator>)</operator></expr>?</condition><then><expr><operator>&amp;</operator><name>_mainDocTab</name></expr></then><else>:<expr><operator>&amp;</operator><name>_subDocTab</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Buffer</name> <modifier>*</modifier></type> <name>buf</name> <init>= <expr><call><name><name>MainFileManager</name><operator>.</operator><name>getBufferByID</name></name><argument_list>(<argument><expr><call><name><name>tabToCheck</name><operator>-&gt;</operator><name>getBufferByIndex</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name>canHide</name> <init>= <expr><operator>(</operator><operator>(</operator><call><name><name>tabToCheck</name><operator>-&gt;</operator><name>nbItem</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>buf</name><operator>-&gt;</operator><name>isDirty</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>buf</name><operator>-&gt;</operator><name>isUntitled</name></name><argument_list>()</argument_list></call><operator>)</operator></expr></init></decl>;</decl_stmt>
	<return>return <expr><name>canHide</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name><name>Notepad_plus</name><operator>::</operator><name>isEmpty</name></name><parameter_list>()</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><call><name>bothActive</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>

	<decl_stmt><decl><type><name>DocTabView</name> <modifier>*</modifier></type> <name>tabToCheck</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>_mainWindowStatus</name> <operator>&amp;</operator> <name>WindowMainActive</name><operator>)</operator></expr> ?</condition><then> <expr><operator>&amp;</operator><name>_mainDocTab</name></expr> </then><else>: <expr><operator>&amp;</operator><name>_subDocTab</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
	
	<decl_stmt><decl><type><name>Buffer</name> <modifier>*</modifier></type> <name>buf</name> <init>= <expr><call><name><name>MainFileManager</name><operator>.</operator><name>getBufferByID</name></name><argument_list>(<argument><expr><call><name><name>tabToCheck</name><operator>-&gt;</operator><name>getBufferByIndex</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name>isEmpty</name> <init>= <expr><operator>(</operator><operator>(</operator><call><name><name>tabToCheck</name><operator>-&gt;</operator><name>nbItem</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>buf</name><operator>-&gt;</operator><name>isDirty</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>buf</name><operator>-&gt;</operator><name>isUntitled</name></name><argument_list>()</argument_list></call><operator>)</operator></expr></init></decl>;</decl_stmt>
	<return>return <expr><name>isEmpty</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name><name>Notepad_plus</name><operator>::</operator><name>loadBufferIntoView</name></name><parameter_list>(<parameter><decl><type><name>BufferID</name></type> <name>id</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>whichOne</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>dontClose</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>DocTabView</name> <modifier>*</modifier></type> <name>tabToOpen</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>whichOne</name> <operator>==</operator> <name>MAIN_VIEW</name><operator>)</operator></expr>?</condition><then><expr><operator>&amp;</operator><name>_mainDocTab</name></expr></then><else>:<expr><operator>&amp;</operator><name>_subDocTab</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ScintillaEditView</name> <modifier>*</modifier></type> <name>viewToOpen</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>whichOne</name> <operator>==</operator> <name>MAIN_VIEW</name><operator>)</operator></expr>?</condition><then><expr><operator>&amp;</operator><name>_mainEditView</name></expr></then><else>:<expr><operator>&amp;</operator><name>_subEditView</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

	<comment type="line">//check if buffer exists</comment>
	<decl_stmt><decl><type><name>int</name></type> <name>index</name> <init>= <expr><call><name><name>tabToOpen</name><operator>-&gt;</operator><name>getIndexByBuffer</name></name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><name>index</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>	<comment type="line">//already open, done</comment>
		<return>return;</return></block_content></block></if></if_stmt>

	<decl_stmt><decl><type><name>BufferID</name></type> <name>idToClose</name> <init>= <expr><name>BUFFER_INVALID</name></expr></init></decl>;</decl_stmt>
	<comment type="line">//Check if the tab has a single clean buffer. Close it if so</comment>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>dontClose</name> <operator>&amp;&amp;</operator> <call><name><name>tabToOpen</name><operator>-&gt;</operator><name>nbItem</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>idToClose</name> <operator>=</operator> <call><name><name>tabToOpen</name><operator>-&gt;</operator><name>getBufferByIndex</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<decl_stmt><decl><type><name>Buffer</name> <modifier>*</modifier></type> <name>buf</name> <init>= <expr><call><name><name>MainFileManager</name><operator>.</operator><name>getBufferByID</name></name><argument_list>(<argument><expr><name>idToClose</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if <condition>(<expr><call><name><name>buf</name><operator>-&gt;</operator><name>isDirty</name></name><argument_list>()</argument_list></call> <operator>||</operator> <operator>!</operator><call><name><name>buf</name><operator>-&gt;</operator><name>isUntitled</name></name><argument_list>()</argument_list></call></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name>idToClose</name> <operator>=</operator> <name>BUFFER_INVALID</name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name><name>MainFileManager</name><operator>.</operator><name>addBufferReference</name></name><argument_list>(<argument><expr><name>id</name></expr></argument>, <argument><expr><name>viewToOpen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">//close clean doc. Use special logic to prevent flicker of tab showing then hiding</comment>
	<if_stmt><if>if <condition>(<expr><name>idToClose</name> <operator>!=</operator> <name>BUFFER_INVALID</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name><name>tabToOpen</name><operator>-&gt;</operator><name>setBuffer</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>	<comment type="line">//index 0 since only one open</comment>
		<expr_stmt><expr><call><name>activateBuffer</name><argument_list>(<argument><expr><name>id</name></expr></argument>, <argument><expr><name>whichOne</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>	<comment type="line">//activate. DocTab already activated but not a problem</comment>
		<expr_stmt><expr><call><name><name>MainFileManager</name><operator>.</operator><name>closeBuffer</name></name><argument_list>(<argument><expr><name>idToClose</name></expr></argument>, <argument><expr><name>viewToOpen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>	<comment type="line">//delete the buffer</comment>
		<if_stmt><if>if <condition>(<expr><name>_pDocumentListPanel</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name><name>_pDocumentListPanel</name><operator>-&gt;</operator><name>closeItem</name></name><argument_list>(<argument><expr><name>idToClose</name></expr></argument>, <argument><expr><name>whichOne</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<expr_stmt><expr><call><name><name>tabToOpen</name><operator>-&gt;</operator><name>addBuffer</name></name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name><name>Notepad_plus</name><operator>::</operator><name>removeBufferFromView</name></name><parameter_list>(<parameter><decl><type><name>BufferID</name></type> <name>id</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>whichOne</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>DocTabView</name> <modifier>*</modifier></type> <name>tabToClose</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>whichOne</name> <operator>==</operator> <name>MAIN_VIEW</name><operator>)</operator></expr> ?</condition><then> <expr><operator>&amp;</operator><name>_mainDocTab</name></expr> </then><else>: <expr><operator>&amp;</operator><name>_subDocTab</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ScintillaEditView</name> <modifier>*</modifier></type> <name>viewToClose</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>whichOne</name> <operator>==</operator> <name>MAIN_VIEW</name><operator>)</operator></expr> ?</condition><then> <expr><operator>&amp;</operator><name>_mainEditView</name></expr> </then><else>: <expr><operator>&amp;</operator><name>_subEditView</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

	<comment type="line">//check if buffer exists</comment>
	<decl_stmt><decl><type><name>int</name></type> <name>index</name> <init>= <expr><call><name><name>tabToClose</name><operator>-&gt;</operator><name>getIndexByBuffer</name></name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><name>index</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>        <comment type="line">//doesn't exist, done</comment>
		<return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>

	<decl_stmt><decl><type><name>Buffer</name> <modifier>*</modifier></type> <name>buf</name> <init>= <expr><call><name><name>MainFileManager</name><operator>.</operator><name>getBufferByID</name></name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<comment type="line">//Cannot close doc if last and clean</comment>
	<if_stmt><if>if <condition>(<expr><call><name><name>tabToClose</name><operator>-&gt;</operator><name>nbItem</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>buf</name><operator>-&gt;</operator><name>isDirty</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>buf</name><operator>-&gt;</operator><name>isUntitled</name></name><argument_list>()</argument_list></call></expr>)</condition>
		<block>{<block_content>
			<return>return <expr><literal type="boolean">false</literal></expr>;</return>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<decl_stmt><decl><type><name>int</name></type> <name>active</name> <init>= <expr><call><name><name>tabToClose</name><operator>-&gt;</operator><name>getCurrentTabIndex</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><name>active</name> <operator>==</operator> <name>index</name></expr>)</condition> <comment type="line">//need an alternative (close real doc, put empty one back)</comment>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><call><name><name>tabToClose</name><operator>-&gt;</operator><name>nbItem</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr>)</condition>  <comment type="line">//need alternative doc, add new one. Use special logic to prevent flicker of adding new tab then closing other</comment>
		<block>{<block_content>
			<decl_stmt><decl><type><name>BufferID</name></type> <name>newID</name> <init>= <expr><call><name><name>MainFileManager</name><operator>.</operator><name>newEmptyDocument</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name><name>MainFileManager</name><operator>.</operator><name>addBufferReference</name></name><argument_list>(<argument><expr><name>newID</name></expr></argument>, <argument><expr><name>viewToClose</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>tabToClose</name><operator>-&gt;</operator><name>setBuffer</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>newID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>        <comment type="line">//can safely use id 0, last (only) tab open</comment>
			<expr_stmt><expr><call><name>activateBuffer</name><argument_list>(<argument><expr><name>newID</name></expr></argument>, <argument><expr><name>whichOne</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>        <comment type="line">//activate. DocTab already activated but not a problem</comment>
		</block_content>}</block></if>
		<else>else
		<block>{<block_content>
			<decl_stmt><decl><type><name>int</name></type> <name>toActivate</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
			<comment type="line">//activate next doc, otherwise prev if not possible</comment>
			<if_stmt><if>if <condition>(<expr><call><name>size_t</name><argument_list>(<argument><expr><name>active</name></expr></argument>)</argument_list></call> <operator>==</operator> <call><name><name>tabToClose</name><operator>-&gt;</operator><name>nbItem</name></name><argument_list>()</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>)</condition> <comment type="line">//prev</comment>
			<block>{<block_content>
				<expr_stmt><expr><name>toActivate</name> <operator>=</operator> <name>active</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
			</block_content>}</block></if>
			<else>else
			<block>{<block_content>
				<expr_stmt><expr><name>toActivate</name> <operator>=</operator> <name>active</name></expr>;</expr_stmt>    <comment type="line">//activate the 'active' index. Since we remove the tab first, the indices shift (on the right side)</comment>
			</block_content>}</block></else></if_stmt>

			<if_stmt><if>if <condition>(<expr><call><name><name>NppParameters</name><operator>::</operator><name>getInstance</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getNppGUI</name><argument_list>()</argument_list></call><operator>.</operator><name>_styleMRU</name></expr>)</condition>
			<block>{<block_content>
				<comment type="line">// After closing a file choose the file to activate based on MRU list and not just last file in the list.</comment>
				<decl_stmt><decl><type><name>TaskListInfo</name></type> <name>taskListInfo</name></decl>;</decl_stmt>
				<expr_stmt><expr><call><name><operator>::</operator><name>SendMessage</name></name><argument_list>(<argument><expr><call><name><name>_pPublicInterface</name><operator>-&gt;</operator><name>getHSelf</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>WM_GETTASKLISTINFO</name></expr></argument>, <argument><expr><cast type="reinterpret">reinterpret_cast<argument_list type="generic">&lt;<argument><expr><name>WPARAM</name></expr></argument>&gt;</argument_list><argument_list>(<argument><expr><operator>&amp;</operator><name>taskListInfo</name></expr></argument>)</argument_list></cast></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>n</name> <init>= <expr><call><name><name>taskListInfo</name><operator>.</operator><name>_tlfsLst</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
				<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
				<block>{<block_content>
					<decl_stmt><decl><type><name>TaskLstFnStatus</name><modifier>&amp;</modifier></type> <name>tfs</name> <init>= <expr><name><name>taskListInfo</name><operator>.</operator><name>_tlfsLst</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
					<if_stmt><if>if <condition>(<expr><name><name>tfs</name><operator>.</operator><name>_iView</name></name> <operator>!=</operator> <name>whichOne</name> <operator>||</operator> <name><name>tfs</name><operator>.</operator><name>_bufID</name></name> <operator>==</operator> <name>id</name></expr>)</condition><block type="pseudo"><block_content>
						<continue>continue;</continue></block_content></block></if></if_stmt>
					<expr_stmt><expr><name>toActivate</name> <operator>=</operator> <ternary><condition><expr><name><name>tfs</name><operator>.</operator><name>_docIndex</name></name> <operator>&gt;=</operator> <name>active</name></expr> ?</condition><then> <expr><name><name>tfs</name><operator>.</operator><name>_docIndex</name></name> <operator>-</operator> <literal type="number">1</literal></expr> </then><else>: <expr><name><name>tfs</name><operator>.</operator><name>_docIndex</name></name></expr></else></ternary></expr>;</expr_stmt>
					<break>break;</break>
				</block_content>}</block></for>
			</block_content>}</block></if></if_stmt>

			<expr_stmt><expr><call><name><name>tabToClose</name><operator>-&gt;</operator><name>deletItemAt</name></name><argument_list>(<argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">//delete first</comment>
			<expr_stmt><expr><name>_isFolding</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt> <comment type="line">// So we can ignore events while folding is taking place</comment>
			<expr_stmt><expr><call><name>activateBuffer</name><argument_list>(<argument><expr><call><name><name>tabToClose</name><operator>-&gt;</operator><name>getBufferByIndex</name></name><argument_list>(<argument><expr><name>toActivate</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>whichOne</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>     <comment type="line">//then activate. The prevent jumpy tab behaviour</comment>
			<expr_stmt><expr><name>_isFolding</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<expr_stmt><expr><call><name><name>tabToClose</name><operator>-&gt;</operator><name>deletItemAt</name></name><argument_list>(<argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<expr_stmt><expr><call><name><name>MainFileManager</name><operator>.</operator><name>closeBuffer</name></name><argument_list>(<argument><expr><name>id</name></expr></argument>, <argument><expr><name>viewToClose</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><literal type="boolean">true</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name><name>Notepad_plus</name><operator>::</operator><name>switchEditViewTo</name></name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>gid</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><call><name>currentView</name><argument_list>()</argument_list></call> <operator>==</operator> <name>gid</name></expr>)</condition>
	<block>{<block_content>
		<comment type="line">//make sure focus is ok, then leave</comment>
		<expr_stmt><expr><call><name><name>_pEditView</name><operator>-&gt;</operator><name>getFocus</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>	<comment type="line">//set the focus</comment>
		<return>return <expr><name>gid</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>viewVisible</name><argument_list>(<argument><expr><name>gid</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><call><name>currentView</name><argument_list>()</argument_list></call></expr>;</return></block_content></block></if></if_stmt>	<comment type="line">//cannot activate invisible view</comment>

	<decl_stmt><decl><type><name>int</name></type> <name>oldView</name> <init>= <expr><call><name>currentView</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>newView</name> <init>= <expr><call><name>otherView</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name>_activeView</name> <operator>=</operator> <name>newView</name></expr>;</expr_stmt>
	<comment type="line">//Good old switcheroo</comment>
	<expr_stmt><expr><call><name><name>std</name><operator>::</operator><name>swap</name></name><argument_list>(<argument><expr><name>_pDocTab</name></expr></argument>, <argument><expr><name>_pNonDocTab</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name>std</name><operator>::</operator><name>swap</name></name><argument_list>(<argument><expr><name>_pEditView</name></expr></argument>, <argument><expr><name>_pNonEditView</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name><name>_pEditView</name><operator>-&gt;</operator><name>beSwitched</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>_pEditView</name><operator>-&gt;</operator><name>getFocus</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>	<comment type="line">//set the focus</comment>

	<if_stmt><if>if <condition>(<expr><name>_pDocMap</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name><name>_pDocMap</name><operator>-&gt;</operator><name>initWrapMap</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><call><name><name>NppParameters</name><operator>::</operator><name>getInstance</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getNppGUI</name><argument_list>()</argument_list></call><operator>.</operator><call><name>isSnapshotMode</name><argument_list>()</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<comment type="line">// Before switching off, synchronize backup file</comment>
		<expr_stmt><expr><call><name><name>MainFileManager</name><operator>.</operator><name>backupCurrentBuffer</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>notifyBufferActivated</name><argument_list>(<argument><expr><call><name><name>_pEditView</name><operator>-&gt;</operator><name>getCurrentBufferID</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>currentView</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>oldView</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name><name>Notepad_plus</name><operator>::</operator><name>dockUserDlg</name></name><parameter_list>()</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>_pMainSplitter</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>_pMainSplitter</name> <operator>=</operator> <operator>new</operator> <name>SplitterContainer</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>_pMainSplitter</name><operator>-&gt;</operator><name>init</name></name><argument_list>(<argument><expr><call><name><name>_pPublicInterface</name><operator>-&gt;</operator><name>getHinst</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>_pPublicInterface</name><operator>-&gt;</operator><name>getHSelf</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>Window</name> <modifier>*</modifier></type><name>pWindow</name></decl>;</decl_stmt>
		<if_stmt><if>if <condition>(<expr><name>_mainWindowStatus</name> <operator>&amp;</operator> <operator>(</operator><name>WindowMainActive</name> <operator>|</operator> <name>WindowSubActive</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>pWindow</name> <operator>=</operator> <operator>&amp;</operator><name>_subSplitter</name></expr>;</expr_stmt></block_content></block></if>
        <else>else<block type="pseudo"><block_content>
            <expr_stmt><expr><name>pWindow</name> <operator>=</operator> <name>_pDocTab</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>splitterSizeDyn</name> <init>= <expr><call><name><name>NppParameters</name><operator>::</operator><name>getInstance</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name><name>_dpiManager</name><operator>.</operator><name>scaleX</name></name><argument_list>(<argument><expr><name>splitterSize</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>_pMainSplitter</name><operator>-&gt;</operator><name>create</name></name><argument_list>(<argument><expr><name>pWindow</name></expr></argument>, <argument><expr><call><name><name>ScintillaEditView</name><operator>::</operator><name>getUserDefineDlg</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>splitterSizeDyn</name></expr></argument>, <argument><expr><name><name>SplitterMode</name><operator>::</operator><name>RIGHT_FIX</name></name></expr></argument>, <argument><expr><literal type="number">45</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>bothActive</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name><name>_pMainSplitter</name><operator>-&gt;</operator><name>setWin0</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>_subSplitter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
    <else>else<block type="pseudo"><block_content>
        <expr_stmt><expr><call><name><name>_pMainSplitter</name><operator>-&gt;</operator><name>setWin0</name></name><argument_list>(<argument><expr><name>_pDocTab</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

    <expr_stmt><expr><call><name><name>_pMainSplitter</name><operator>-&gt;</operator><name>display</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>_mainWindowStatus</name> <operator>|=</operator> <name>WindowUserActive</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>_pMainWindow</name> <operator>=</operator> <name>_pMainSplitter</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name><operator>::</operator><name>SendMessage</name></name><argument_list>(<argument><expr><call><name><name>_pPublicInterface</name><operator>-&gt;</operator><name>getHSelf</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>WM_SIZE</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name><name>Notepad_plus</name><operator>::</operator><name>undockUserDlg</name></name><parameter_list>()</parameter_list>
<block>{<block_content>
    <comment type="line">// a cause de surchargement de "display"</comment>
    <expr_stmt><expr><call><name><operator>::</operator><name>ShowWindow</name></name><argument_list>(<argument><expr><call><name><name>_pMainSplitter</name><operator>-&gt;</operator><name>getHSelf</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>SW_HIDE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>bothActive</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>_pMainWindow</name> <operator>=</operator> <operator>&amp;</operator><name>_subSplitter</name></expr>;</expr_stmt></block_content></block></if>
    <else>else<block type="pseudo"><block_content>
        <expr_stmt><expr><name>_pMainWindow</name> <operator>=</operator> <name>_pDocTab</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

    <expr_stmt><expr><call><name><operator>::</operator><name>SendMessage</name></name><argument_list>(<argument><expr><call><name><name>_pPublicInterface</name><operator>-&gt;</operator><name>getHSelf</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>WM_SIZE</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>_mainWindowStatus</name> <operator>&amp;=</operator> <operator>~</operator><name>WindowUserActive</name></expr>;</expr_stmt>
    <expr_stmt><expr><operator>(</operator><call><name><name>ScintillaEditView</name><operator>::</operator><name>getUserDefineDlg</name></name><argument_list>()</argument_list></call><operator>)</operator><operator>-&gt;</operator><call><name>display</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name><name>Notepad_plus</name><operator>::</operator><name>docOpenInNewInstance</name></name><parameter_list>(<parameter><decl><type><name>FileTransferMode</name></type> <name>mode</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>BufferID</name></type> <name>bufferID</name> <init>= <expr><call><name><name>_pEditView</name><operator>-&gt;</operator><name>getCurrentBufferID</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Buffer</name> <modifier>*</modifier></type> <name>buf</name> <init>= <expr><call><name><name>MainFileManager</name><operator>.</operator><name>getBufferByID</name></name><argument_list>(<argument><expr><name>bufferID</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><call><name><name>buf</name><operator>-&gt;</operator><name>isUntitled</name></name><argument_list>()</argument_list></call> <operator>||</operator> <call><name><name>buf</name><operator>-&gt;</operator><name>isDirty</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<return>return;</return></block_content></block></if></if_stmt>

	<decl_stmt><decl><type><name>TCHAR</name></type> <name><name>nppName</name><index>[<expr><name>MAX_PATH</name></expr>]</index></name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name><operator>::</operator><name>GetModuleFileName</name></name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>nppName</name></expr></argument>, <argument><expr><name>MAX_PATH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>generic_string</name></type> <name>command</name> <init>= <expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"\""</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name>command</name> <operator>+=</operator> <name>nppName</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>command</name> <operator>+=</operator> <call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"\""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>command</name> <operator>+=</operator> <call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">" \"$(FULL_CURRENT_PATH)\" -multiInst -nosession"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>x</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>TCHAR</name></type> <name><name>pX</name><index>[<expr><literal type="number">10</literal></expr>]</index></name><argument_list>{}</argument_list></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>_itow</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>pX</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>command</name> <operator>+=</operator> <call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">" -x"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>command</name> <operator>+=</operator> <name>pX</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>y</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>TCHAR</name></type> <name><name>pY</name><index>[<expr><literal type="number">10</literal></expr>]</index></name><argument_list>{}</argument_list></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>_itow</name><argument_list>(<argument><expr><name>y</name></expr></argument>, <argument><expr><name>pY</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>command</name> <operator>+=</operator> <call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">" -y"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>command</name> <operator>+=</operator> <name>pY</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<decl_stmt><decl><type><name>LangType</name></type> <name>lt</name> <init>= <expr><call><name><name>buf</name><operator>-&gt;</operator><name>getLangType</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

	<comment type="line">// In case of UDL, "-lLANG" argument part is ignored.</comment>
	<comment type="line">// We let new instance detect the user lang type via file extension -</comment>
	<comment type="line">// it works in the most of case, except if user applies an UDL manually. </comment>
	<comment type="line">// For example,  this workaround won't work under the following situation:</comment>
	<comment type="line">// user applies Markdown to a file named "myMarkdown.abc".</comment>
	<if_stmt><if>if <condition>(<expr><name>lt</name> <operator>!=</operator> <name>L_USER</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>command</name> <operator>+=</operator> <call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">" -l"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>command</name> <operator>+=</operator> <name><name>ScintillaEditView</name><operator>::</operator><name>_langNameInfoArray</name><index>[<expr><name>lt</name></expr>]</index></name><operator>.</operator><name>_langName</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name>command</name> <operator>+=</operator> <call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">" -n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>command</name> <operator>+=</operator> <call><name>to_wstring</name><argument_list>(<argument><expr><call><name><name>_pEditView</name><operator>-&gt;</operator><name>getCurrentLineNumber</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>command</name> <operator>+=</operator> <call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">" -c"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>command</name> <operator>+=</operator> <call><name>to_wstring</name><argument_list>(<argument><expr><call><name><name>_pEditView</name><operator>-&gt;</operator><name>getCurrentColumnNumber</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>Command</name></type> <name>cmd</name><argument_list>(<argument><expr><name>command</name></expr></argument>)</argument_list></decl>;</decl_stmt>
	<expr_stmt><expr><call><name><name>cmd</name><operator>.</operator><name>run</name></name><argument_list>(<argument><expr><call><name><name>_pPublicInterface</name><operator>-&gt;</operator><name>getHSelf</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>mode</name> <operator>==</operator> <name>TransferMove</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>doClose</name><argument_list>(<argument><expr><name>bufferID</name></expr></argument>, <argument><expr><call><name>currentView</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><call><name>noOpenedDoc</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name><operator>::</operator><name>SendMessage</name></name><argument_list>(<argument><expr><call><name><name>_pPublicInterface</name><operator>-&gt;</operator><name>getHSelf</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>WM_CLOSE</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name><name>Notepad_plus</name><operator>::</operator><name>docGotoAnotherEditView</name></name><parameter_list>(<parameter><decl><type><name>FileTransferMode</name></type> <name>mode</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="line">// Test if it's only doc to transfer on the hidden view</comment>
	<comment type="line">// If so then do nothing</comment>
	<if_stmt><if>if <condition>(<expr><name>mode</name> <operator>==</operator> <name>TransferMove</name></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><call><name><name>_pDocTab</name><operator>-&gt;</operator><name>nbItem</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr>)</condition>
		<block>{<block_content>
			<decl_stmt><decl><type><name>ScintillaEditView</name> <modifier>*</modifier></type><name>pOtherView</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
			<if_stmt><if>if <condition>(<expr><name>_pEditView</name> <operator>==</operator> <operator>&amp;</operator><name>_mainEditView</name></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><name>pOtherView</name> <operator>=</operator> <operator>&amp;</operator><name>_subEditView</name></expr>;</expr_stmt>
			</block_content>}</block></if>
			<if type="elseif">else if <condition>(<expr><name>_pEditView</name> <operator>==</operator> <operator>&amp;</operator><name>_subEditView</name></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><name>pOtherView</name> <operator>=</operator> <operator>&amp;</operator><name>_mainEditView</name></expr>;</expr_stmt>
			</block_content>}</block></if>
			<else>else<block type="pseudo"><block_content>
				<return>return;</return></block_content></block></else></if_stmt>

			<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>pOtherView</name><operator>-&gt;</operator><name>isVisible</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
				<return>return;</return></block_content></block></if></if_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="line">//First put the doc in the other view if not present (if it is, activate it).</comment>
	<comment type="line">//Then if needed close in the original tab</comment>
	<decl_stmt><decl><type><name>BufferID</name></type> <name>current</name> <init>= <expr><call><name><name>_pEditView</name><operator>-&gt;</operator><name>getCurrentBufferID</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>viewToGo</name> <init>= <expr><call><name>otherView</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>indexFound</name> <init>= <expr><call><name><name>_pNonDocTab</name><operator>-&gt;</operator><name>getIndexByBuffer</name></name><argument_list>(<argument><expr><name>current</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><name>indexFound</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>	<comment type="line">//activate it</comment>
	<block>{<block_content>
		<expr_stmt><expr><call><name>activateBuffer</name><argument_list>(<argument><expr><name>current</name></expr></argument>, <argument><expr><call><name>otherView</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else	<comment type="line">//open the document, also copying the position</comment>
	<block>{<block_content>
		<comment type="line">// If both the views are visible then first save the position of non-edit view</comment>
		<comment type="line">// So that moving document between views does not lose caret position</comment>
		<comment type="line">// How it works =&gt;</comment>
		<comment type="line">//		non-edit view becomes edit view as document from edit view is sent to non edit view</comment>
		<comment type="line">//		restoreCurrentPos is called on non-edit view, which will restore the position of</comment>
		<comment type="line">//		active document/tab on non-edit view  (whatever position we set in below if condition)</comment>
		<if_stmt><if>if <condition>(<expr><call><name><name>_pEditView</name><operator>-&gt;</operator><name>isVisible</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>_pNonEditView</name><operator>-&gt;</operator><name>isVisible</name></name><argument_list>()</argument_list></call></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name><name>_pNonEditView</name><operator>-&gt;</operator><name>saveCurrentPos</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><call><name>loadBufferIntoView</name><argument_list>(<argument><expr><name>current</name></expr></argument>, <argument><expr><name>viewToGo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<decl_stmt><decl><type><name>Buffer</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><call><name><name>MainFileManager</name><operator>.</operator><name>getBufferByID</name></name><argument_list>(<argument><expr><name>current</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>_pEditView</name><operator>-&gt;</operator><name>saveCurrentPos</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>	<comment type="line">//allow copying of position</comment>
		<expr_stmt><expr><call><name><name>buf</name><operator>-&gt;</operator><name>setPosition</name></name><argument_list>(<argument><expr><call><name><name>buf</name><operator>-&gt;</operator><name>getPosition</name></name><argument_list>(<argument><expr><name>_pEditView</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>_pNonEditView</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>_pNonEditView</name><operator>-&gt;</operator><name>restoreCurrentPosPreStep</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>	<comment type="line">//set position</comment>
		<expr_stmt><expr><call><name>activateBuffer</name><argument_list>(<argument><expr><name>current</name></expr></argument>, <argument><expr><name>viewToGo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<comment type="line">//Open the view if it was hidden</comment>
	<decl_stmt><decl><type><name>int</name></type> <name>viewToOpen</name> <init>= <expr><operator>(</operator><ternary><condition><expr><name>viewToGo</name> <operator>==</operator> <name>SUB_VIEW</name></expr>?</condition><then><expr><name>WindowSubActive</name></expr></then><else>:<expr><name>WindowMainActive</name></expr></else></ternary><operator>)</operator></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>_mainWindowStatus</name> <operator>&amp;</operator> <name>viewToOpen</name><operator>)</operator></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>showView</name><argument_list>(<argument><expr><name>viewToGo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<decl_stmt><decl><type><name>bool</name></type> <name>monitoringWasOn</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>

	<comment type="line">//Close the document if we transfered the document instead of cloning it</comment>
	<if_stmt><if>if <condition>(<expr><name>mode</name> <operator>==</operator> <name>TransferMove</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>Buffer</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><call><name><name>MainFileManager</name><operator>.</operator><name>getBufferByID</name></name><argument_list>(<argument><expr><name>current</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name>monitoringWasOn</name> <operator>=</operator> <call><name><name>buf</name><operator>-&gt;</operator><name>isMonitoringOn</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

		<comment type="line">//just close the activate document, since thats the one we moved (no search)</comment>
		<expr_stmt><expr><call><name>doClose</name><argument_list>(<argument><expr><call><name><name>_pEditView</name><operator>-&gt;</operator><name>getCurrentBufferID</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>currentView</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt> <comment type="line">// else it was cone, so leave it</comment>

	<comment type="line">//Activate the other view since thats where the document went</comment>
	<expr_stmt><expr><call><name>switchEditViewTo</name><argument_list>(<argument><expr><name>viewToGo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>monitoringWasOn</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>command</name><argument_list>(<argument><expr><name>IDM_VIEW_MONITORING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>_pDocumentListPanel</name> <operator>!=</operator> <literal type="null">nullptr</literal></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>Buffer</name><modifier>*</modifier></type> <name>buf</name> <init>= <expr><call><name><name>MainFileManager</name><operator>.</operator><name>getBufferByID</name></name><argument_list>(<argument><expr><name>current</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>_pDocumentListPanel</name><operator>-&gt;</operator><name>setItemColor</name></name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name><name>Notepad_plus</name><operator>::</operator><name>activateBuffer</name></name><parameter_list>(<parameter><decl><type><name>BufferID</name></type> <name>id</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>whichOne</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>forceApplyHilite</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>NppGUI</name><modifier>&amp;</modifier></type> <name>nppGui</name> <init>= <expr><call><name><name>NppParameters</name><operator>::</operator><name>getInstance</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getNppGUI</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name>isSnapshotMode</name> <init>= <expr><call><name><name>nppGui</name><operator>.</operator><name>isSnapshotMode</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><name>isSnapshotMode</name></expr>)</condition>
	<block>{<block_content>
		<comment type="line">// Before switching off, synchronize backup file</comment>
		<expr_stmt><expr><call><name><name>MainFileManager</name><operator>.</operator><name>backupCurrentBuffer</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<decl_stmt><decl><type><name>Buffer</name> <modifier>*</modifier></type> <name>pBuf</name> <init>= <expr><call><name><name>MainFileManager</name><operator>.</operator><name>getBufferByID</name></name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name>reload</name> <init>= <expr><call><name><name>pBuf</name><operator>-&gt;</operator><name>getNeedReload</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><name>reload</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name><name>MainFileManager</name><operator>.</operator><name>reloadBuffer</name></name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>pBuf</name><operator>-&gt;</operator><name>setNeedReload</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>whichOne</name> <operator>==</operator> <name>MAIN_VIEW</name></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><call><name><name>_mainDocTab</name><operator>.</operator><name>activateBuffer</name></name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>)</condition>	<comment type="line">//only activate if possible</comment>
		<block>{<block_content>
			<expr_stmt><expr><name>_isFolding</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>_mainEditView</name><operator>.</operator><name>activateBuffer</name></name><argument_list>(<argument><expr><name>id</name></expr></argument>, <argument><expr><name>forceApplyHilite</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>_isFolding</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
		</block_content>}</block></if>
		<else>else<block type="pseudo"><block_content>
			<return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></else></if_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><call><name><name>_subDocTab</name><operator>.</operator><name>activateBuffer</name></name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name>_isFolding</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>_subEditView</name><operator>.</operator><name>activateBuffer</name></name><argument_list>(<argument><expr><name>id</name></expr></argument>, <argument><expr><name>forceApplyHilite</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>_isFolding</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
		</block_content>}</block></if>
		<else>else<block type="pseudo"><block_content>
			<return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></else></if_stmt>
	</block_content>}</block></else></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>reload</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>performPostReload</name><argument_list>(<argument><expr><name>whichOne</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>notifyBufferActivated</name><argument_list>(<argument><expr><name>id</name></expr></argument>, <argument><expr><name>whichOne</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>bool</name></type> <name>isCurrBuffDetection</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name><name>nppGui</name><operator>.</operator><name>_fileAutoDetection</name></name> <operator>&amp;</operator> <name>cdEnabledNew</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="boolean">true</literal></expr> </then><else>: <expr><literal type="boolean">false</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>reload</name> <operator>&amp;&amp;</operator> <name>isCurrBuffDetection</name></expr>)</condition>
	<block>{<block_content>
		<comment type="line">// Buffer has been activated, now check for file modification</comment>
		<comment type="line">// If enabled for current buffer</comment>
		<expr_stmt><expr><call><name><name>pBuf</name><operator>-&gt;</operator><name>checkFileState</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><literal type="boolean">true</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name><name>Notepad_plus</name><operator>::</operator><name>performPostReload</name></name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>whichOne</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>NppParameters</name><modifier>&amp;</modifier></type> <name>nppParam</name> <init>= <expr><call><name><name>NppParameters</name><operator>::</operator><name>getInstance</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>NppGUI</name> <modifier>&amp;</modifier></type> <name>nppGUI</name> <init>= <expr><call><name><name>nppParam</name><operator>.</operator><name>getNppGUI</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name>toEnd</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name><name>nppGUI</name><operator>.</operator><name>_fileAutoDetection</name></name> <operator>&amp;</operator> <name>cdGo2end</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="boolean">true</literal></expr> </then><else>: <expr><literal type="boolean">false</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>toEnd</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return;</return></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>whichOne</name> <operator>==</operator> <name>MAIN_VIEW</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name><name>_mainEditView</name><operator>.</operator><name>setPositionRestoreNeeded</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>_mainEditView</name><operator>.</operator><name>execute</name></name><argument_list>(<argument><expr><name>SCI_DOCUMENTEND</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<expr_stmt><expr><call><name><name>_subEditView</name><operator>.</operator><name>setPositionRestoreNeeded</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>_subEditView</name><operator>.</operator><name>execute</name></name><argument_list>(<argument><expr><name>SCI_DOCUMENTEND</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name><name>Notepad_plus</name><operator>::</operator><name>bookmarkNext</name></name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>forwardScan</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>size_t</name></type> <name>lineno</name> <init>= <expr><call><name><name>_pEditView</name><operator>-&gt;</operator><name>getCurrentLineNumber</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>sci_marker</name> <init>= <expr><name>SCI_MARKERNEXT</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>lineStart</name> <init>= <expr><name>lineno</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>	<comment type="line">//Scan starting from next line</comment>
	<decl_stmt><decl><type><name>intptr_t</name></type> <name>lineRetry</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>				<comment type="line">//If not found, try from the beginning</comment>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>forwardScan</name></expr>)</condition>
    <block>{<block_content>
		<expr_stmt><expr><name>lineStart</name> <operator>=</operator> <name>lineno</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>		<comment type="line">//Scan starting from previous line</comment>
		<expr_stmt><expr><name>lineRetry</name> <operator>=</operator> <call><name><name>_pEditView</name><operator>-&gt;</operator><name>execute</name></name><argument_list>(<argument><expr><name>SCI_GETLINECOUNT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>	<comment type="line">//If not found, try from the end</comment>
		<expr_stmt><expr><name>sci_marker</name> <operator>=</operator> <name>SCI_MARKERPREVIOUS</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<decl_stmt><decl><type><name>intptr_t</name></type> <name>nextLine</name> <init>= <expr><call><name><name>_pEditView</name><operator>-&gt;</operator><name>execute</name></name><argument_list>(<argument><expr><name>sci_marker</name></expr></argument>, <argument><expr><name>lineStart</name></expr></argument>, <argument><expr><cast type="static">static_cast<argument_list type="generic">&lt;<argument><expr><name>LPARAM</name></expr></argument>&gt;</argument_list><argument_list>(<argument><expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>MARK_BOOKMARK</name></expr></argument>)</argument_list></cast></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><name>nextLine</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>nextLine</name> <operator>=</operator> <call><name><name>_pEditView</name><operator>-&gt;</operator><name>execute</name></name><argument_list>(<argument><expr><name>sci_marker</name></expr></argument>, <argument><expr><name>lineRetry</name></expr></argument>, <argument><expr><cast type="static">static_cast<argument_list type="generic">&lt;<argument><expr><name>LPARAM</name></expr></argument>&gt;</argument_list><argument_list>(<argument><expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>MARK_BOOKMARK</name></expr></argument>)</argument_list></cast></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>nextLine</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name><name>_pEditView</name><operator>-&gt;</operator><name>execute</name></name><argument_list>(<argument><expr><name>SCI_ENSUREVISIBLEENFORCEPOLICY</name></expr></argument>, <argument><expr><name>nextLine</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name>_pEditView</name><operator>-&gt;</operator><name>execute</name></name><argument_list>(<argument><expr><name>SCI_GOTOLINE</name></expr></argument>, <argument><expr><name>nextLine</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name><name>Notepad_plus</name><operator>::</operator><name>staticCheckMenuAndTB</name></name><parameter_list>()</parameter_list> <specifier>const</specifier>
<block>{<block_content>
	<comment type="line">// Visibility of invisible characters</comment>
	<decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>wsTabShow</name> <init>= <expr><call><name><name>_pEditView</name><operator>-&gt;</operator><name>isShownSpaceAndTab</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>eolShow</name> <init>= <expr><call><name><name>_pEditView</name><operator>-&gt;</operator><name>isShownEol</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>npcShow</name> <init>= <expr><call><name><name>_pEditView</name><operator>-&gt;</operator><name>isShownNpc</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>ccUniEolShow</name> <init>= <expr><call><name><name>_pEditView</name><operator>-&gt;</operator><name>isShownCcUniEol</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>allShow</name> <init>= <expr><name>wsTabShow</name> <operator>&amp;&amp;</operator> <name>eolShow</name> <operator>&amp;&amp;</operator> <name>npcShow</name> <operator>&amp;&amp;</operator> <name>ccUniEolShow</name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>checkMenuItem</name><argument_list>(<argument><expr><name>IDM_VIEW_TAB_SPACE</name></expr></argument>, <argument><expr><name>wsTabShow</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>checkMenuItem</name><argument_list>(<argument><expr><name>IDM_VIEW_EOL</name></expr></argument>, <argument><expr><name>eolShow</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>checkMenuItem</name><argument_list>(<argument><expr><name>IDM_VIEW_NPC</name></expr></argument>, <argument><expr><name>npcShow</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>checkMenuItem</name><argument_list>(<argument><expr><name>IDM_VIEW_NPC_CCUNIEOL</name></expr></argument>, <argument><expr><name>ccUniEolShow</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>checkMenuItem</name><argument_list>(<argument><expr><name>IDM_VIEW_ALL_CHARACTERS</name></expr></argument>, <argument><expr><name>allShow</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name>_toolBar</name><operator>.</operator><name>setCheck</name></name><argument_list>(<argument><expr><name>IDM_VIEW_ALL_CHARACTERS</name></expr></argument>, <argument><expr><name>allShow</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// Visibility of the indentation guide line</comment>
	<decl_stmt><decl><type><name>bool</name></type> <name>b</name> <init>= <expr><call><name><name>_pEditView</name><operator>-&gt;</operator><name>isShownIndentGuide</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>checkMenuItem</name><argument_list>(<argument><expr><name>IDM_VIEW_INDENT_GUIDE</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name>_toolBar</name><operator>.</operator><name>setCheck</name></name><argument_list>(<argument><expr><name>IDM_VIEW_INDENT_GUIDE</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


	<comment type="line">// Wrap</comment>
	<expr_stmt><expr><name>b</name> <operator>=</operator> <call><name><name>_pEditView</name><operator>-&gt;</operator><name>isWrap</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>checkMenuItem</name><argument_list>(<argument><expr><name>IDM_VIEW_WRAP</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name>_toolBar</name><operator>.</operator><name>setCheck</name></name><argument_list>(<argument><expr><name>IDM_VIEW_WRAP</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>checkMenuItem</name><argument_list>(<argument><expr><name>IDM_VIEW_WRAP_SYMBOL</name></expr></argument>, <argument><expr><call><name><name>_pEditView</name><operator>-&gt;</operator><name>isWrapSymbolVisible</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type> <name><name>Notepad_plus</name><operator>::</operator><name>dynamicCheckMenuAndTB</name></name><parameter_list>()</parameter_list> <specifier>const</specifier>
<block>{<block_content>
	<comment type="line">//Format conversion</comment>
	<expr_stmt><expr><call><name>enableConvertMenuItems</name><argument_list>(<argument><expr><call><name><name>_pEditView</name><operator>-&gt;</operator><name>getCurrentBuffer</name></name><argument_list>()</argument_list></call><operator>-&gt;</operator><call><name>getEolFormat</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>checkUnicodeMenuItems</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type> <name><name>Notepad_plus</name><operator>::</operator><name>enableConvertMenuItems</name></name><parameter_list>(<parameter><decl><type><name>EolType</name></type> <name>format</name></decl></parameter>)</parameter_list> <specifier>const</specifier>
<block>{<block_content>
	<expr_stmt><expr><call><name>enableCommand</name><argument_list>(<argument><expr><name>IDM_FORMAT_TODOS</name></expr></argument>, <argument><expr><operator>(</operator><name>format</name> <operator>!=</operator> <name><name>EolType</name><operator>::</operator><name>windows</name></name><operator>)</operator></expr></argument>, <argument><expr><name>MENU</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>enableCommand</name><argument_list>(<argument><expr><name>IDM_FORMAT_TOUNIX</name></expr></argument>, <argument><expr><operator>(</operator><name>format</name> <operator>!=</operator> <name><name>EolType</name><operator>::</operator><name>unix</name></name><operator>)</operator></expr></argument>, <argument><expr><name>MENU</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>enableCommand</name><argument_list>(<argument><expr><name>IDM_FORMAT_TOMAC</name></expr></argument>, <argument><expr><operator>(</operator><name>format</name> <operator>!=</operator> <name><name>EolType</name><operator>::</operator><name>macos</name></name><operator>)</operator></expr></argument>, <argument><expr><name>MENU</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type> <name><name>Notepad_plus</name><operator>::</operator><name>checkUnicodeMenuItems</name></name><parameter_list>()</parameter_list> <specifier>const</specifier>
<block>{<block_content>
	<decl_stmt><decl><type><name>Buffer</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><call><name><name>_pEditView</name><operator>-&gt;</operator><name>getCurrentBuffer</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>UniMode</name></type> <name>um</name> <init>= <expr><call><name><name>buf</name><operator>-&gt;</operator><name>getUnicodeMode</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>encoding</name> <init>= <expr><call><name><name>buf</name><operator>-&gt;</operator><name>getEncoding</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>int</name></type> <name>id</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	<switch>switch <condition>(<expr><name>um</name></expr>)</condition>
	<block>{<block_content>
		<case>case <expr><name>uniUTF8</name></expr>   :</case> <expr_stmt><expr><name>id</name> <operator>=</operator> <name>IDM_FORMAT_UTF_8</name></expr>;</expr_stmt> <break>break;</break>
		<case>case <expr><name>uni16BE</name></expr>   :</case> <expr_stmt><expr><name>id</name> <operator>=</operator> <name>IDM_FORMAT_UTF_16BE</name></expr>;</expr_stmt> <break>break;</break>
		<case>case <expr><name>uni16LE</name></expr>   :</case> <expr_stmt><expr><name>id</name> <operator>=</operator> <name>IDM_FORMAT_UTF_16LE</name></expr>;</expr_stmt> <break>break;</break>
		<case>case <expr><name>uniCookie</name></expr> :</case> <expr_stmt><expr><name>id</name> <operator>=</operator> <name>IDM_FORMAT_AS_UTF_8</name></expr>;</expr_stmt> <break>break;</break>
		<case>case <expr><name>uni8Bit</name></expr>   :</case> <expr_stmt><expr><name>id</name> <operator>=</operator> <name>IDM_FORMAT_ANSI</name></expr>;</expr_stmt> <break>break;</break>

		<case>case <expr><name>uni7Bit</name></expr>:</case>
		<case>case <expr><name>uni16BE_NoBOM</name></expr>:</case>
		<case>case <expr><name>uni16LE_NoBOM</name></expr>:</case>
		<case>case <expr><name>uniEnd</name></expr>:</case>
		<default>default:</default>
			<break>break;</break>
	</block_content>}</block></switch>

	<if_stmt><if>if <condition>(<expr><name>encoding</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
	<block>{<block_content>
		<comment type="line">// Uncheck all in the sub encoding menu</comment>
        <decl_stmt><decl><type><name>HMENU</name></type> <name>_formatMenuHandle</name> <init>= <expr><call><name><operator>::</operator><name>GetSubMenu</name></name><argument_list>(<argument><expr><name>_mainMenuHandle</name></expr></argument>, <argument><expr><name>MENUINDEX_FORMAT</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>doCheck</name><argument_list>(<argument><expr><name>_formatMenuHandle</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name>id</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <comment type="line">//um == uni16BE_NoBOM || um == uni16LE_NoBOM</comment>
		<block>{<block_content>
			<comment type="line">// Uncheck all in the main encoding menu</comment>
			<expr_stmt><expr><call><name><operator>::</operator><name>CheckMenuRadioItem</name></name><argument_list>(<argument><expr><name>_mainMenuHandle</name></expr></argument>, <argument><expr><name>IDM_FORMAT_ANSI</name></expr></argument>, <argument><expr><name>IDM_FORMAT_AS_UTF_8</name></expr></argument>, <argument><expr><name>IDM_FORMAT_ANSI</name></expr></argument>, <argument><expr><name>MF_BYCOMMAND</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><operator>::</operator><name>CheckMenuItem</name></name><argument_list>(<argument><expr><name>_mainMenuHandle</name></expr></argument>, <argument><expr><name>IDM_FORMAT_ANSI</name></expr></argument>, <argument><expr><name>MF_UNCHECKED</name> <operator>|</operator> <name>MF_BYCOMMAND</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if>
		<else>else
		<block>{<block_content>
			<expr_stmt><expr><call><name><operator>::</operator><name>CheckMenuRadioItem</name></name><argument_list>(<argument><expr><name>_mainMenuHandle</name></expr></argument>, <argument><expr><name>IDM_FORMAT_ANSI</name></expr></argument>, <argument><expr><name>IDM_FORMAT_AS_UTF_8</name></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr><name>MF_BYCOMMAND</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<decl_stmt><decl><type><name>EncodingMapper</name><modifier>&amp;</modifier></type> <name>em</name> <init>= <expr><call><name><name>EncodingMapper</name><operator>::</operator><name>getInstance</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>cmdID</name> <init>= <expr><call><name><name>em</name><operator>.</operator><name>getIndexFromEncoding</name></name><argument_list>(<argument><expr><name>encoding</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if <condition>(<expr><name>cmdID</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
		<block>{<block_content>
			<comment type="line">//printStr(TEXT("Encoding problem. Encoding is not added in encoding_table?"));</comment>
			<return>return;</return>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><name>cmdID</name> <operator>+=</operator> <name>IDM_FORMAT_ENCODE</name></expr>;</expr_stmt>

		<comment type="line">// Uncheck all in the main encoding menu</comment>
		<expr_stmt><expr><call><name><operator>::</operator><name>CheckMenuRadioItem</name></name><argument_list>(<argument><expr><name>_mainMenuHandle</name></expr></argument>, <argument><expr><name>IDM_FORMAT_ANSI</name></expr></argument>, <argument><expr><name>IDM_FORMAT_AS_UTF_8</name></expr></argument>, <argument><expr><name>IDM_FORMAT_ANSI</name></expr></argument>, <argument><expr><name>MF_BYCOMMAND</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><operator>::</operator><name>CheckMenuItem</name></name><argument_list>(<argument><expr><name>_mainMenuHandle</name></expr></argument>, <argument><expr><name>IDM_FORMAT_ANSI</name></expr></argument>, <argument><expr><name>MF_UNCHECKED</name> <operator>|</operator> <name>MF_BYCOMMAND</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="line">// Check the encoding item</comment>
        <decl_stmt><decl><type><name>HMENU</name></type> <name>_formatMenuHandle</name> <init>= <expr><call><name><operator>::</operator><name>GetSubMenu</name></name><argument_list>(<argument><expr><name>_mainMenuHandle</name></expr></argument>, <argument><expr><name>MENUINDEX_FORMAT</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>doCheck</name><argument_list>(<argument><expr><name>_formatMenuHandle</name></expr></argument>, <argument><expr><name>cmdID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name><name>Notepad_plus</name><operator>::</operator><name>showAutoComp</name></name><parameter_list>()</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>bool</name></type> <name>isFromPrimary</name> <init>= <expr><name>_pEditView</name> <operator>==</operator> <operator>&amp;</operator><name>_mainEditView</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>AutoCompletion</name> <modifier>*</modifier></type> <name>autoC</name> <init>= <expr><ternary><condition><expr><name>isFromPrimary</name></expr>?</condition><then><expr><operator>&amp;</operator><name>_autoCompleteMain</name></expr></then><else>:<expr><operator>&amp;</operator><name>_autoCompleteSub</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name><name>autoC</name><operator>-&gt;</operator><name>showApiComplete</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name><name>Notepad_plus</name><operator>::</operator><name>showPathCompletion</name></name><parameter_list>()</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>bool</name></type> <name>isFromPrimary</name> <init>= <expr><name>_pEditView</name> <operator>==</operator> <operator>&amp;</operator><name>_mainEditView</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>AutoCompletion</name> <modifier>*</modifier></type> <name>autoC</name> <init>= <expr><ternary><condition><expr><name>isFromPrimary</name></expr>?</condition><then><expr><operator>&amp;</operator><name>_autoCompleteMain</name></expr></then><else>:<expr><operator>&amp;</operator><name>_autoCompleteSub</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name><name>autoC</name><operator>-&gt;</operator><name>showPathCompletion</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name><name>Notepad_plus</name><operator>::</operator><name>autoCompFromCurrentFile</name></name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>autoInsert</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>bool</name></type> <name>isFromPrimary</name> <init>= <expr><name>_pEditView</name> <operator>==</operator> <operator>&amp;</operator><name>_mainEditView</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>AutoCompletion</name> <modifier>*</modifier></type> <name>autoC</name> <init>= <expr><ternary><condition><expr><name>isFromPrimary</name></expr>?</condition><then><expr><operator>&amp;</operator><name>_autoCompleteMain</name></expr></then><else>:<expr><operator>&amp;</operator><name>_autoCompleteSub</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name><name>autoC</name><operator>-&gt;</operator><name>showWordComplete</name></name><argument_list>(<argument><expr><name>autoInsert</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name><name>Notepad_plus</name><operator>::</operator><name>showFunctionComp</name></name><parameter_list>()</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>bool</name></type> <name>isFromPrimary</name> <init>= <expr><name>_pEditView</name> <operator>==</operator> <operator>&amp;</operator><name>_mainEditView</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>AutoCompletion</name> <modifier>*</modifier></type> <name>autoC</name> <init>= <expr><ternary><condition><expr><name>isFromPrimary</name></expr>?</condition><then><expr><operator>&amp;</operator><name>_autoCompleteMain</name></expr></then><else>:<expr><operator>&amp;</operator><name>_autoCompleteSub</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name><name>autoC</name><operator>-&gt;</operator><name>showFunctionComplete</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name><name>Notepad_plus</name><operator>::</operator><name>showFunctionNextHint</name></name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>isNext</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>bool</name></type> <name>isFromPrimary</name> <init>= <expr><name>_pEditView</name> <operator>==</operator> <operator>&amp;</operator><name>_mainEditView</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>AutoCompletion</name><modifier>*</modifier></type> <name>autoC</name> <init>= <expr><ternary><condition><expr><name>isFromPrimary</name></expr> ?</condition><then> <expr><operator>&amp;</operator><name>_autoCompleteMain</name></expr> </then><else>: <expr><operator>&amp;</operator><name>_autoCompleteSub</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><name>isNext</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name><name>autoC</name><operator>-&gt;</operator><name>callTipClick</name></name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><call><name><name>autoC</name><operator>-&gt;</operator><name>callTipClick</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>generic_string</name></type> <name>extractSymbol</name><parameter_list>(<parameter><decl><type><name>TCHAR</name></type> <name>firstChar</name></decl></parameter>, <parameter><decl><type><name>TCHAR</name></type> <name>secondChar</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>TCHAR</name> <modifier>*</modifier></type><name>str2extract</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>bool</name></type> <name>found</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>extractedLen</name> <init>= <expr><literal type="number">128</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>TCHAR</name></type> <name><name>extracted</name><index>[<expr><name>extractedLen</name></expr>]</index></name> <init>= <expr><block>{<expr><literal type="char">'\0'</literal></expr>}</block></expr></init></decl>;</decl_stmt>

	<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>len</name> <init>= <expr><call><name>lstrlen</name><argument_list>(<argument><expr><name>str2extract</name></expr></argument>)</argument_list></call></expr></init></decl> ;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name> <operator>&amp;&amp;</operator> <name>j</name> <operator>&lt;</operator> <name>extractedLen</name> <operator>-</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>found</name></expr>)</condition>
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>str2extract</name><index>[<expr><name>i</name></expr>]</index></name> <operator>||</operator> <name><name>str2extract</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">' '</literal></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><name><name>extracted</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
				<return>return <expr><call><name>generic_string</name><argument_list>(<argument><expr><name>extracted</name></expr></argument>)</argument_list></call></expr>;</return>
			</block_content>}</block></if></if_stmt>
			<expr_stmt><expr><name><name>extracted</name><index>[<expr><name>j</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name><name>str2extract</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
		</block_content>}</block></if>
		<else>else
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>str2extract</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
				<return>return <expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

			<if_stmt><if>if <condition>(<expr><name><name>str2extract</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>firstChar</name> <operator>&amp;&amp;</operator> <name><name>str2extract</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <name>secondChar</name></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><name>found</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
				<expr_stmt><expr><operator>++</operator><name>i</name></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></for>
	<return>return  <expr><call><name>generic_string</name><argument_list>(<argument><expr><name>extracted</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name><name>Notepad_plus</name><operator>::</operator><name>doBlockComment</name></name><parameter_list>(<parameter><decl><type><name>comment_mode</name></type> <name>currCommentMode</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Buffer</name> <modifier>*</modifier></type> <name>buf</name> <init>= <expr><call><name><name>_pEditView</name><operator>-&gt;</operator><name>getCurrentBuffer</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<comment type="line">// Avoid side-effects (e.g. cursor moves number of comment-characters) when file is read-only.</comment>
	<if_stmt><if>if <condition>(<expr><call><name><name>buf</name><operator>-&gt;</operator><name>isReadOnly</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>

	<comment type="line">//-- BlockToStreamComment:</comment>
	<decl_stmt><decl><type><specifier>const</specifier> <name>TCHAR</name> <modifier>*</modifier></type><name>commentStart</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>TCHAR</name> <modifier>*</modifier></type><name>commentEnd</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>generic_string</name></type> <name>symbolStart</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>generic_string</name></type> <name>symbolEnd</name></decl>;</decl_stmt>

	<decl_stmt><decl><type><specifier>const</specifier> <name>TCHAR</name> <modifier>*</modifier></type><name>commentLineSymbol</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>generic_string</name></type> <name>symbol</name></decl>;</decl_stmt>

	<comment type="line">//Single Line Comment/Uncomment/Toggle can have two modes:</comment>
	<comment type="line">// * a NORMAL MODE which uses a commentLineSymbol to comment/uncomment code per line, and</comment>
	<comment type="line">// * an ADVANCED MODE which uses commentStart and commentEnd symbols to comment/uncomment code per line.</comment>
	<comment type="line">//The NORMAL MODE is used for all Lexers which have a commentLineSymbol defined.</comment>
	<comment type="line">//The ADVANCED MODE is only available for Lexers which do not have a commentLineSymbol but commentStreamSymbols (start/end) defined.</comment>
	<comment type="line">//The ADVANCED MODE behaves the same way as the NORMAL MODE (comment/uncomment every single line in the selection range separately)</comment>
	<comment type="line">//but uses two symbols to accomplish this.</comment>
	<decl_stmt><decl><type><name>bool</name></type> <name>isSingleLineAdvancedMode</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><call><name><name>buf</name><operator>-&gt;</operator><name>getLangType</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name>L_USER</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>UserLangContainer</name> <modifier>*</modifier></type> <name>userLangContainer</name> <init>= <expr><call><name><name>NppParameters</name><operator>::</operator><name>getInstance</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getULCFromName</name><argument_list>(<argument><expr><call><name><name>buf</name><operator>-&gt;</operator><name>getUserDefineLangName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><name>userLangContainer</name></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>

		<expr_stmt><expr><name>symbol</name> <operator>=</operator> <call><name>extractSymbol</name><argument_list>(<argument><expr><literal type="char">'0'</literal></expr></argument>, <argument><expr><literal type="char">'0'</literal></expr></argument>, <argument><expr><name><name>userLangContainer</name><operator>-&gt;</operator><name>_keywordLists</name><index>[<expr><name>SCE_USER_KWLIST_COMMENTS</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>commentLineSymbol</name> <operator>=</operator> <call><name><name>symbol</name><operator>.</operator><name>c_str</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<comment type="line">// BlockToStreamComment: Needed to decide, if stream-comment can be called below!</comment>
		<expr_stmt><expr><name>symbolStart</name> <operator>=</operator> <call><name>extractSymbol</name><argument_list>(<argument><expr><literal type="char">'0'</literal></expr></argument>, <argument><expr><literal type="char">'3'</literal></expr></argument>, <argument><expr><name><name>userLangContainer</name><operator>-&gt;</operator><name>_keywordLists</name><index>[<expr><name>SCE_USER_KWLIST_COMMENTS</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>commentStart</name> <operator>=</operator> <call><name><name>symbolStart</name><operator>.</operator><name>c_str</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>symbolEnd</name> <operator>=</operator> <call><name>extractSymbol</name><argument_list>(<argument><expr><literal type="char">'0'</literal></expr></argument>, <argument><expr><literal type="char">'4'</literal></expr></argument>, <argument><expr><name><name>userLangContainer</name><operator>-&gt;</operator><name>_keywordLists</name><index>[<expr><name>SCE_USER_KWLIST_COMMENTS</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>commentEnd</name> <operator>=</operator> <call><name><name>symbolEnd</name><operator>.</operator><name>c_str</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<expr_stmt><expr><name>commentLineSymbol</name> <operator>=</operator> <call><name><name>buf</name><operator>-&gt;</operator><name>getCommentLineSymbol</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<comment type="line">// BlockToStreamComment: Needed to decide, if stream-comment can be called below!</comment>
		<expr_stmt><expr><name>commentStart</name> <operator>=</operator> <call><name><name>buf</name><operator>-&gt;</operator><name>getCommentStart</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>commentEnd</name> <operator>=</operator> <call><name><name>buf</name><operator>-&gt;</operator><name>getCommentEnd</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>!</operator><name>commentLineSymbol</name><operator>)</operator> <operator>||</operator> <operator>(</operator><operator>!</operator><name><name>commentLineSymbol</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>commentLineSymbol</name> <operator>==</operator> <name>NULL</name><operator>)</operator></expr>)</condition>
	<block>{<block_content>
	<comment type="line">// BlockToStreamComment: If there is no block-comment symbol, try the stream comment:</comment>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><operator>!</operator><name>commentStart</name> <operator>||</operator> <operator>!</operator><name><name>commentStart</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>||</operator> <name>commentStart</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>!</operator><name>commentEnd</name> <operator>||</operator> <operator>!</operator><name><name>commentEnd</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>||</operator> <name>commentEnd</name> <operator>==</operator> <name>NULL</name><operator>)</operator></expr>)</condition>
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name>currCommentMode</name> <operator>==</operator> <name>cm_comment</name></expr>)</condition>
			<block>{<block_content>
				<comment type="line">//Do an advanced "Single Line Comment" by using stream-comment symbols (start/end) per line in this case.</comment>
				<expr_stmt><expr><name>isSingleLineAdvancedMode</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
				<comment type="line">//return doStreamComment(); //Use "Block Comment" for this.</comment>
			</block_content>}</block></if>
			<if type="elseif">else if <condition>(<expr><name>currCommentMode</name> <operator>==</operator> <name>cm_uncomment</name></expr>)</condition>
			<block>{<block_content>
				<comment type="line">//"undoStreamComment()" can be more flexible than "isSingleLineAdvancedMode = true", </comment>
				<comment type="line">//since it can uncomment more embedded levels at once and the commentEnd symbol can be located everywhere. </comment>
				<comment type="line">//But, depending on the selection start/end position, the first/last selected line may not be uncommented properly!</comment>
				<return>return <expr><call><name>undoStreamComment</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</return>
				<comment type="line">//isSingleLineAdvancedMode = true;</comment>
			</block_content>}</block></if>
			<if type="elseif">else if <condition>(<expr><name>currCommentMode</name> <operator>==</operator> <name>cm_toggle</name></expr>)</condition>
			<block>{<block_content>
				<comment type="line">//Do an advanced "Toggle Single Line Comment" by using stream-comment symbols (start/end) per line in this case.</comment>
				<expr_stmt><expr><name>isSingleLineAdvancedMode</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
			</block_content>}</block></if>
			<else>else<block type="pseudo"><block_content>
				<return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></else></if_stmt>
		</block_content>}</block></if>
		<else>else<block type="pseudo"><block_content>
			<return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></else></if_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="line">//For Single Line NORMAL MODE</comment>
	<decl_stmt><decl><type><name>generic_string</name></type> <name>comment</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>comment_length</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

	<comment type="line">//For Single Line ADVANCED MODE</comment>
	<decl_stmt><decl><type><name>generic_string</name></type> <name>advCommentStart</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>generic_string</name></type> <name>advCommentEnd</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>advCommentStart_length</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>advCommentEnd_length</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><specifier>const</specifier> <name>TCHAR</name></type> <name><name>aSpace</name><index>[]</index></name> <argument_list>{ <argument><expr><macro><name>TEXT</name><argument_list>(<argument><literal type="string">" "</literal></argument>)</argument_list></macro></expr></argument> }</argument_list></decl>;</decl_stmt>

	<comment type="line">//Only values that have passed through will be assigned, to be sure they are valid!</comment>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>isSingleLineAdvancedMode</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>comment</name> <operator>=</operator> <name>commentLineSymbol</name></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name><name>buf</name><operator>-&gt;</operator><name>getLangType</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name>L_BAANC</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <comment type="line">// BaanC standardization - no space.</comment>
			<expr_stmt><expr><name>comment</name> <operator>+=</operator> <name>aSpace</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<expr_stmt><expr><name>comment_length</name> <operator>=</operator> <call><name><name>comment</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else <comment type="line">// isSingleLineAdvancedMode</comment>
	<block>{<block_content>
		<expr_stmt><expr><name>advCommentStart</name> <operator>=</operator> <name>commentStart</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>advCommentStart</name> <operator>+=</operator> <name>aSpace</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>advCommentEnd</name> <operator>=</operator> <name>aSpace</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>advCommentEnd</name> <operator>+=</operator> <name>commentEnd</name></expr>;</expr_stmt>

		<expr_stmt><expr><name>advCommentStart_length</name> <operator>=</operator> <call><name><name>advCommentStart</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>advCommentEnd_length</name> <operator>=</operator> <call><name><name>advCommentEnd</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

    <decl_stmt><decl><type><name>size_t</name></type> <name>selectionStart</name> <init>= <expr><call><name><name>_pEditView</name><operator>-&gt;</operator><name>execute</name></name><argument_list>(<argument><expr><name>SCI_GETSELECTIONSTART</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>selectionEnd</name> <init>= <expr><call><name><name>_pEditView</name><operator>-&gt;</operator><name>execute</name></name><argument_list>(<argument><expr><name>SCI_GETSELECTIONEND</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>caretPosition</name> <init>= <expr><call><name><name>_pEditView</name><operator>-&gt;</operator><name>execute</name></name><argument_list>(<argument><expr><name>SCI_GETCURRENTPOS</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <comment type="line">// checking if caret is located in _beginning_ of selected block</comment>
    <decl_stmt><decl><type><name>bool</name></type> <name>move_caret</name> <init>= <expr><name>caretPosition</name> <operator>&lt;</operator> <name>selectionEnd</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>intptr_t</name></type> <name>selStartLine</name> <init>= <expr><call><name><name>_pEditView</name><operator>-&gt;</operator><name>execute</name></name><argument_list>(<argument><expr><name>SCI_LINEFROMPOSITION</name></expr></argument>, <argument><expr><name>selectionStart</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>intptr_t</name></type> <name>selEndLine</name> <init>= <expr><call><name><name>_pEditView</name><operator>-&gt;</operator><name>execute</name></name><argument_list>(<argument><expr><name>SCI_LINEFROMPOSITION</name></expr></argument>, <argument><expr><name>selectionEnd</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>intptr_t</name></type> <name>lines</name> <init>= <expr><name>selEndLine</name> <operator>-</operator> <name>selStartLine</name></expr></init></decl>;</decl_stmt>
    <comment type="line">// "caret return" is part of the last selected line</comment>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>lines</name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>selectionEnd</name> <operator>==</operator> <cast type="static">static_cast<argument_list type="generic">&lt;<argument><expr><name>size_t</name></expr></argument>&gt;</argument_list><argument_list>(<argument><expr><call><name><name>_pEditView</name><operator>-&gt;</operator><name>execute</name></name><argument_list>(<argument><expr><name>SCI_POSITIONFROMLINE</name></expr></argument>, <argument><expr><name>selEndLine</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></cast><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>selEndLine</name><operator>--</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<comment type="line">// count lines which were un-commented to decide if undoStreamComment() shall be called.</comment>
	<decl_stmt><decl><type><name>int</name></type> <name>nUncomments</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<comment type="line">//Some Lexers need line-comments at the beginning of a line.</comment>
	<decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>avoidIndent</name> <init>= <expr><operator>(</operator><call><name><name>buf</name><operator>-&gt;</operator><name>getLangType</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name>L_FORTRAN_77</name> <operator>||</operator> <call><name><name>buf</name><operator>-&gt;</operator><name>getLangType</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name>L_BAANC</name><operator>)</operator></expr></init></decl>;</decl_stmt>
	<comment type="line">//Some Lexers comment blank lines, per their standards.</comment>
	<decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>commentEmptyLines</name> <init>= <expr><operator>(</operator><call><name><name>buf</name><operator>-&gt;</operator><name>getLangType</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name>L_BAANC</name><operator>)</operator></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name><name>_pEditView</name><operator>-&gt;</operator><name>execute</name></name><argument_list>(<argument><expr><name>SCI_BEGINUNDOACTION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for>for <control>(<init><decl><type><name>intptr_t</name></type> <name>i</name> <init>= <expr><name>selStartLine</name></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>selEndLine</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
	<block>{<block_content>
		<decl_stmt><decl><type><name>size_t</name></type> <name>lineStart</name> <init>= <expr><call><name><name>_pEditView</name><operator>-&gt;</operator><name>execute</name></name><argument_list>(<argument><expr><name>SCI_POSITIONFROMLINE</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>size_t</name></type> <name>lineIndent</name> <init>= <expr><call><name><name>_pEditView</name><operator>-&gt;</operator><name>execute</name></name><argument_list>(<argument><expr><name>SCI_GETLINEINDENTPOSITION</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>size_t</name></type> <name>lineEnd</name> <init>= <expr><call><name><name>_pEditView</name><operator>-&gt;</operator><name>execute</name></name><argument_list>(<argument><expr><name>SCI_GETLINEENDPOSITION</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<comment type="line">// empty lines are not commented, unless required by the language.</comment>
		<if_stmt><if>if <condition>(<expr><name>lineIndent</name> <operator>==</operator> <name>lineEnd</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>commentEmptyLines</name></expr>)</condition><block type="pseudo"><block_content>
			<continue>continue;</continue></block_content></block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><name>avoidIndent</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>lineIndent</name> <operator>=</operator> <name>lineStart</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<decl_stmt><decl><type><name>size_t</name></type> <name>linebufferSize</name> <init>= <expr><name>lineEnd</name> <operator>-</operator> <name>lineIndent</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>TCHAR</name><modifier>*</modifier></type> <name>linebuf</name> <init>= <expr><operator>new</operator> <name><name>TCHAR</name><index>[<expr><name>linebufferSize</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><call><name><name>_pEditView</name><operator>-&gt;</operator><name>getGenericText</name></name><argument_list>(<argument><expr><name>linebuf</name></expr></argument>, <argument><expr><name>linebufferSize</name></expr></argument>, <argument><expr><name>lineIndent</name></expr></argument>, <argument><expr><name>lineEnd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>generic_string</name></type> <name>linebufStr</name> <init>= <expr><name>linebuf</name></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><operator>delete</operator> <index>[]</index> <name>linebuf</name></expr>;</expr_stmt>

   		<if_stmt><if>if <condition>(<expr><name>currCommentMode</name> <operator>!=</operator> <name>cm_comment</name></expr>)</condition> <comment type="line">// uncomment/toggle</comment>
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><operator>!</operator><name>isSingleLineAdvancedMode</name></expr>)</condition>
			<block>{<block_content>
				<comment type="line">// In order to do get case insensitive comparison use strnicmp() instead case-sensitive comparison.</comment>
				<comment type="line">//      Case insensitive comparison is needed e.g. for "REM" and "rem" in Batchfiles.</comment>
				<if_stmt><if>if <condition>(<expr><call><name>wcsnicmp</name><argument_list>(<argument><expr><call><name><name>linebufStr</name><operator>.</operator><name>c_str</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>comment</name><operator>.</operator><name>c_str</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><ternary><condition><expr><operator>!</operator><operator>(</operator><call><name><name>buf</name><operator>-&gt;</operator><name>getLangType</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name>L_BAANC</name><operator>)</operator></expr> ?</condition><then> <expr><name>comment_length</name> <operator>-</operator> <literal type="number">1</literal></expr> </then><else>: <expr><name>comment_length</name></expr></else></ternary></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
				<block>{<block_content>
					<decl_stmt><decl><type><name>size_t</name></type> <name>len</name> <init>= <expr><ternary><condition><expr><name><name>linebufStr</name><index>[<expr><name>comment_length</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <name><name>aSpace</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr> ?</condition><then> <expr><name>comment_length</name></expr> </then><else>: <expr><ternary><condition><expr><operator>!</operator><operator>(</operator><call><name><name>buf</name><operator>-&gt;</operator><name>getLangType</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name>L_BAANC</name><operator>)</operator></expr> ?</condition><then> <expr><name>comment_length</name> <operator>-</operator> <literal type="number">1</literal></expr> </then><else>: <expr><name>comment_length</name></expr></else></ternary></expr></else></ternary></expr></init></decl>;</decl_stmt>

					<expr_stmt><expr><call><name><name>_pEditView</name><operator>-&gt;</operator><name>execute</name></name><argument_list>(<argument><expr><name>SCI_SETSEL</name></expr></argument>, <argument><expr><name>lineIndent</name></expr></argument>, <argument><expr><name>lineIndent</name> <operator>+</operator> <name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name>_pEditView</name><operator>-&gt;</operator><name>replaceSelWith</name></name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

					<comment type="line">// SELECTION RANGE ADJUSTMENT .......................</comment>
					<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <name>selStartLine</name></expr>)</condition> <comment type="line">// first selected line</comment>
					<block>{<block_content>
						<if_stmt><if>if <condition>(<expr><name>selectionStart</name> <operator>&gt;</operator> <name>lineIndent</name> <operator>+</operator> <name>len</name></expr>)</condition><block type="pseudo"><block_content>
							<expr_stmt><expr><name>selectionStart</name> <operator>-=</operator> <name>len</name></expr>;</expr_stmt></block_content></block></if>
						<if type="elseif">else if <condition>(<expr><name>selectionStart</name> <operator>&gt;</operator> <name>lineIndent</name></expr>)</condition><block type="pseudo"><block_content>
							<expr_stmt><expr><name>selectionStart</name> <operator>=</operator> <name>lineIndent</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
					</block_content>}</block></if></if_stmt> <comment type="line">// ................................................</comment>
					<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <name>selEndLine</name></expr>)</condition> <comment type="line">// last selected line</comment>
					<block>{<block_content>
						<if_stmt><if>if <condition>(<expr><name>selectionEnd</name> <operator>&gt;</operator> <name>lineIndent</name> <operator>+</operator> <name>len</name></expr>)</condition><block type="pseudo"><block_content>
							<expr_stmt><expr><name>selectionEnd</name> <operator>-=</operator> <name>len</name></expr>;</expr_stmt></block_content></block></if>
						<if type="elseif">else if <condition>(<expr><name>selectionEnd</name> <operator>&gt;</operator> <name>lineIndent</name></expr>)</condition>
						<block>{<block_content>
							<expr_stmt><expr><name>selectionEnd</name> <operator>=</operator> <name>lineIndent</name></expr>;</expr_stmt>
							<if_stmt><if>if <condition>(<expr><name>lineIndent</name> <operator>==</operator> <name>lineStart</name> <operator>&amp;&amp;</operator> <name>i</name> <operator>!=</operator> <name>selStartLine</name></expr>)</condition><block type="pseudo"><block_content>
								<expr_stmt><expr><operator>++</operator><name>selectionEnd</name></expr>;</expr_stmt></block_content></block></if></if_stmt> <comment type="line">// avoid caret return in this case</comment>
						</block_content>}</block></if></if_stmt>
					</block_content>}</block></if> <comment type="line">// ................................................</comment>
					<else>else<block type="pseudo"><block_content> <comment type="line">// every iteration except the last selected line</comment>
						<expr_stmt><expr><name>selectionEnd</name> <operator>-=</operator> <name>len</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
					<comment type="line">// ..................................................</comment>

					<expr_stmt><expr><operator>++</operator><name>nUncomments</name></expr>;</expr_stmt>
					<continue>continue;</continue>
				</block_content>}</block></if></if_stmt>
			</block_content>}</block></if>
			<else>else <comment type="line">// isSingleLineAdvancedMode</comment>
			<block>{<block_content>
				<if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>wcsnicmp</name><argument_list>(<argument><expr><call><name><name>linebufStr</name><operator>.</operator><name>c_str</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>advCommentStart</name><operator>.</operator><name>c_str</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>advCommentStart_length</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator>
					<operator>(</operator><call><name>wcsnicmp</name><argument_list>(<argument><expr><call><name><name>linebufStr</name><operator>.</operator><name>substr</name></name><argument_list>(<argument><expr><call><name><name>linebufStr</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call> <operator>-</operator> <name>advCommentEnd_length</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>advCommentEnd_length</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>c_str</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>advCommentEnd</name><operator>.</operator><name>substr</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>advCommentEnd_length</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>c_str</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>advCommentEnd_length</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition>
				<block>{<block_content>
					<decl_stmt><decl><type><name>size_t</name></type> <name>startLen</name> <init>= <expr><ternary><condition><expr><name><name>linebufStr</name><index>[<expr><name>advCommentStart_length</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <name><name>aSpace</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr> ?</condition><then> <expr><name>advCommentStart_length</name></expr> </then><else>: <expr><name>advCommentStart_length</name> <operator>-</operator> <literal type="number">1</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
					<decl_stmt><decl><type><name>size_t</name></type> <name>endLen</name> <init>= <expr><ternary><condition><expr><name><name>linebufStr</name><index>[<expr><call><name><name>linebufStr</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call> <operator>-</operator> <name>advCommentEnd_length</name></expr>]</index></name> <operator>==</operator> <name><name>aSpace</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr> ?</condition><then> <expr><name>advCommentEnd_length</name></expr> </then><else>: <expr><name>advCommentEnd_length</name> <operator>-</operator> <literal type="number">1</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

					<expr_stmt><expr><call><name><name>_pEditView</name><operator>-&gt;</operator><name>execute</name></name><argument_list>(<argument><expr><name>SCI_SETSEL</name></expr></argument>, <argument><expr><name>lineIndent</name></expr></argument>, <argument><expr><name>lineIndent</name> <operator>+</operator> <name>startLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name>_pEditView</name><operator>-&gt;</operator><name>replaceSelWith</name></name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name>_pEditView</name><operator>-&gt;</operator><name>execute</name></name><argument_list>(<argument><expr><name>SCI_SETSEL</name></expr></argument>, <argument><expr><name>lineEnd</name> <operator>-</operator> <name>startLen</name> <operator>-</operator> <name>endLen</name></expr></argument>, <argument><expr><name>lineEnd</name> <operator>-</operator> <name>startLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name>_pEditView</name><operator>-&gt;</operator><name>replaceSelWith</name></name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

					<comment type="line">// SELECTION RANGE ADJUSTMENT .......................</comment>
					<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <name>selStartLine</name></expr>)</condition> <comment type="line">// first selected line</comment>
					<block>{<block_content>
						<if_stmt><if>if <condition>(<expr><name>selectionStart</name> <operator>&gt;</operator> <name>lineEnd</name> <operator>-</operator> <name>endLen</name></expr>)</condition><block type="pseudo"><block_content>
							<expr_stmt><expr><name>selectionStart</name> <operator>=</operator> <name>lineEnd</name> <operator>-</operator> <name>startLen</name> <operator>-</operator> <name>endLen</name></expr>;</expr_stmt></block_content></block></if>
						<if type="elseif">else if <condition>(<expr><name>selectionStart</name> <operator>&gt;</operator> <name>lineIndent</name> <operator>+</operator> <name>startLen</name></expr>)</condition><block type="pseudo"><block_content>
							<expr_stmt><expr><name>selectionStart</name> <operator>-=</operator> <name>startLen</name></expr>;</expr_stmt></block_content></block></if>
						<if type="elseif">else if <condition>(<expr><name>selectionStart</name> <operator>&gt;</operator> <name>lineIndent</name></expr>)</condition><block type="pseudo"><block_content>
							<expr_stmt><expr><name>selectionStart</name> <operator>=</operator> <name>lineIndent</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
					</block_content>}</block></if></if_stmt> <comment type="line">// ................................................</comment>
					<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <name>selEndLine</name></expr>)</condition> <comment type="line">// last selected line</comment>
					<block>{<block_content>
						<if_stmt><if>if <condition>(<expr><name>selectionEnd</name> <operator>&gt;</operator> <name>lineEnd</name></expr>)</condition><block type="pseudo"><block_content>
							<expr_stmt><expr><name>selectionEnd</name> <operator>-=</operator> <operator>(</operator><name>startLen</name> <operator>+</operator> <name>endLen</name><operator>)</operator></expr>;</expr_stmt></block_content></block></if>
						<if type="elseif">else if <condition>(<expr><name>selectionEnd</name> <operator>&gt;</operator> <name>lineEnd</name> <operator>-</operator> <name>endLen</name></expr>)</condition><block type="pseudo"><block_content>
							<expr_stmt><expr><name>selectionEnd</name> <operator>=</operator> <name>lineEnd</name> <operator>-</operator> <name>startLen</name> <operator>-</operator> <name>endLen</name></expr>;</expr_stmt></block_content></block></if>
						<if type="elseif">else if <condition>(<expr><name>selectionEnd</name> <operator>&gt;</operator> <name>lineIndent</name> <operator>+</operator> <name>startLen</name></expr>)</condition><block type="pseudo"><block_content>
							<expr_stmt><expr><name>selectionEnd</name> <operator>-=</operator> <name>startLen</name></expr>;</expr_stmt></block_content></block></if>
						<if type="elseif">else if <condition>(<expr><name>selectionEnd</name> <operator>&gt;</operator> <name>lineIndent</name></expr>)</condition>
						<block>{<block_content>
							<expr_stmt><expr><name>selectionEnd</name> <operator>=</operator> <name>lineIndent</name></expr>;</expr_stmt>
							<if_stmt><if>if <condition>(<expr><name>lineIndent</name> <operator>==</operator> <name>lineStart</name> <operator>&amp;&amp;</operator> <name>i</name> <operator>!=</operator> <name>selStartLine</name></expr>)</condition><block type="pseudo"><block_content>
								<expr_stmt><expr><operator>++</operator><name>selectionEnd</name></expr>;</expr_stmt></block_content></block></if></if_stmt> <comment type="line">// avoid caret return in this case</comment>
						</block_content>}</block></if></if_stmt>
					</block_content>}</block></if> <comment type="line">// ................................................</comment>
					<else>else<block type="pseudo"><block_content> <comment type="line">// every iteration except the last selected line</comment>
						<expr_stmt><expr><name>selectionEnd</name> <operator>-=</operator> <operator>(</operator><name>startLen</name> <operator>+</operator> <name>endLen</name><operator>)</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>
					<comment type="line">// ..................................................</comment>

					<expr_stmt><expr><operator>++</operator><name>nUncomments</name></expr>;</expr_stmt>
					<continue>continue;</continue>
				</block_content>}</block></if></if_stmt>
			</block_content>}</block></else></if_stmt>
		</block_content>}</block></if></if_stmt> <comment type="line">// uncomment/toggle</comment>

		<if_stmt><if>if <condition>(<expr><name>currCommentMode</name> <operator>!=</operator> <name>cm_uncomment</name></expr>)</condition> <comment type="line">// comment/toggle</comment>
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><operator>!</operator><name>isSingleLineAdvancedMode</name></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><call><name><name>_pEditView</name><operator>-&gt;</operator><name>insertGenericTextFrom</name></name><argument_list>(<argument><expr><name>lineIndent</name></expr></argument>, <argument><expr><call><name><name>comment</name><operator>.</operator><name>c_str</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<comment type="line">// SELECTION RANGE ADJUSTMENT .......................</comment>
				<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <name>selStartLine</name></expr>)</condition> <comment type="line">// first selected line</comment>
				<block>{<block_content>
					<if_stmt><if>if <condition>(<expr><name>selectionStart</name> <operator>&gt;=</operator> <name>lineIndent</name></expr>)</condition><block type="pseudo"><block_content>
						<expr_stmt><expr><name>selectionStart</name> <operator>+=</operator> <name>comment_length</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
				</block_content>}</block></if></if_stmt> <comment type="line">// ................................................</comment>
				<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <name>selEndLine</name></expr>)</condition> <comment type="line">// last selected line</comment>
				<block>{<block_content>
					<if_stmt><if>if <condition>(<expr><name>selectionEnd</name> <operator>&gt;=</operator> <name>lineIndent</name></expr>)</condition><block type="pseudo"><block_content>
						<expr_stmt><expr><name>selectionEnd</name> <operator>+=</operator> <name>comment_length</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
				</block_content>}</block></if> <comment type="line">// ................................................</comment>
				<else>else<block type="pseudo"><block_content> <comment type="line">// every iteration except the last selected line</comment>
					<expr_stmt><expr><name>selectionEnd</name> <operator>+=</operator> <name>comment_length</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
				<comment type="line">// ..................................................</comment>
			</block_content>}</block></if>
			<else>else <comment type="line">// isSingleLineAdvancedMode</comment>
			<block>{<block_content>
				<expr_stmt><expr><call><name><name>_pEditView</name><operator>-&gt;</operator><name>insertGenericTextFrom</name></name><argument_list>(<argument><expr><name>lineIndent</name></expr></argument>, <argument><expr><call><name><name>advCommentStart</name><operator>.</operator><name>c_str</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name>_pEditView</name><operator>-&gt;</operator><name>insertGenericTextFrom</name></name><argument_list>(<argument><expr><name>lineEnd</name> <operator>+</operator> <name>advCommentStart_length</name></expr></argument>, <argument><expr><call><name><name>advCommentEnd</name><operator>.</operator><name>c_str</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<comment type="line">// SELECTION RANGE ADJUSTMENT .......................</comment>
				<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <name>selStartLine</name></expr>)</condition> <comment type="line">// first selected line</comment>
				<block>{<block_content>
					<if_stmt><if>if <condition>(<expr><name>selectionStart</name> <operator>&gt;=</operator> <name>lineIndent</name></expr>)</condition><block type="pseudo"><block_content>
						<expr_stmt><expr><name>selectionStart</name> <operator>+=</operator> <name>advCommentStart_length</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
				</block_content>}</block></if></if_stmt> <comment type="line">// ................................................</comment>
				<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <name>selEndLine</name></expr>)</condition> <comment type="line">// last selected line</comment>
				<block>{<block_content>
					<if_stmt><if>if <condition>(<expr><name>selectionEnd</name> <operator>&gt;</operator> <name>lineEnd</name></expr>)</condition><block type="pseudo"><block_content>
						<expr_stmt><expr><name>selectionEnd</name> <operator>+=</operator> <operator>(</operator><name>advCommentStart_length</name> <operator>+</operator> <name>advCommentEnd_length</name><operator>)</operator></expr>;</expr_stmt></block_content></block></if>
					<if type="elseif">else if <condition>(<expr><name>selectionEnd</name> <operator>&gt;=</operator> <name>lineIndent</name></expr>)</condition><block type="pseudo"><block_content>
						<expr_stmt><expr><name>selectionEnd</name> <operator>+=</operator> <name>advCommentStart_length</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
				</block_content>}</block></if> <comment type="line">// ................................................</comment>
				<else>else<block type="pseudo"><block_content> <comment type="line">// every iteration except the last selected line</comment>
					<expr_stmt><expr><name>selectionEnd</name> <operator>+=</operator> <operator>(</operator><name>advCommentStart_length</name> <operator>+</operator> <name>advCommentEnd_length</name><operator>)</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>
				<comment type="line">// ..................................................</comment>
			</block_content>}</block></else></if_stmt>
		</block_content>}</block></if></if_stmt> <comment type="line">// comment/toggle</comment>
	</block_content>}</block></for> <comment type="line">// for (...)</comment>

    <if_stmt><if>if <condition>(<expr><name>move_caret</name></expr>)</condition>
	<block>{<block_content>
        <comment type="line">// moving caret to the beginning of selected block</comment>
        <expr_stmt><expr><call><name><name>_pEditView</name><operator>-&gt;</operator><name>execute</name></name><argument_list>(<argument><expr><name>SCI_GOTOPOS</name></expr></argument>, <argument><expr><name>selectionEnd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>_pEditView</name><operator>-&gt;</operator><name>execute</name></name><argument_list>(<argument><expr><name>SCI_SETCURRENTPOS</name></expr></argument>, <argument><expr><name>selectionStart</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if>
	<else>else
	<block>{<block_content>
        <expr_stmt><expr><call><name><name>_pEditView</name><operator>-&gt;</operator><name>execute</name></name><argument_list>(<argument><expr><name>SCI_SETSEL</name></expr></argument>, <argument><expr><name>selectionStart</name></expr></argument>, <argument><expr><name>selectionEnd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <expr_stmt><expr><call><name><name>_pEditView</name><operator>-&gt;</operator><name>execute</name></name><argument_list>(<argument><expr><name>SCI_ENDUNDOACTION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// undoStreamComment: If there were no block-comments to un-comment try uncommenting of stream-comment.</comment>
	<if_stmt><if>if <condition>(<expr><operator>(</operator><name>currCommentMode</name> <operator>==</operator> <name>cm_uncomment</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>nUncomments</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition>
	<block>{<block_content>
		<return>return <expr><call><name>undoStreamComment</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</return>
	</block_content>}</block></if></if_stmt>
    <return>return <expr><literal type="boolean">true</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name><name>Notepad_plus</name><operator>::</operator><name>doStreamComment</name></name><parameter_list>()</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>TCHAR</name> <modifier>*</modifier></type><name>commentStart</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>TCHAR</name> <modifier>*</modifier></type><name>commentEnd</name></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>generic_string</name></type> <name>symbolStart</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>generic_string</name></type> <name>symbolEnd</name></decl>;</decl_stmt>

	<comment type="line">// BlockToStreamComment:</comment>
	<decl_stmt><decl><type><specifier>const</specifier> <name>TCHAR</name> <modifier>*</modifier></type><name>commentLineSymbol</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>generic_string</name></type> <name>symbol</name></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>Buffer</name> <modifier>*</modifier></type> <name>buf</name> <init>= <expr><call><name><name>_pEditView</name><operator>-&gt;</operator><name>getCurrentBuffer</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<comment type="line">// Avoid side-effects (e.g. cursor moves number of comment-characters) when file is read-only.</comment>
	<if_stmt><if>if <condition>(<expr><call><name><name>buf</name><operator>-&gt;</operator><name>isReadOnly</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><call><name><name>buf</name><operator>-&gt;</operator><name>getLangType</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name>L_USER</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>UserLangContainer</name> <modifier>*</modifier></type> <name>userLangContainer</name> <init>= <expr><call><name><name>NppParameters</name><operator>::</operator><name>getInstance</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getULCFromName</name><argument_list>(<argument><expr><call><name><name>buf</name><operator>-&gt;</operator><name>getUserDefineLangName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><operator>!</operator><name>userLangContainer</name></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>

		<comment type="line">// BlockToStreamComment: Next two lines needed to decide, if block-comment can be called below!</comment>
		<expr_stmt><expr><name>symbol</name> <operator>=</operator> <call><name>extractSymbol</name><argument_list>(<argument><expr><literal type="char">'0'</literal></expr></argument>, <argument><expr><literal type="char">'0'</literal></expr></argument>, <argument><expr><name><name>userLangContainer</name><operator>-&gt;</operator><name>_keywordLists</name><index>[<expr><name>SCE_USER_KWLIST_COMMENTS</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>commentLineSymbol</name> <operator>=</operator> <call><name><name>symbol</name><operator>.</operator><name>c_str</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name>symbolStart</name> <operator>=</operator> <call><name>extractSymbol</name><argument_list>(<argument><expr><literal type="char">'0'</literal></expr></argument>, <argument><expr><literal type="char">'3'</literal></expr></argument>, <argument><expr><name><name>userLangContainer</name><operator>-&gt;</operator><name>_keywordLists</name><index>[<expr><name>SCE_USER_KWLIST_COMMENTS</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>commentStart</name> <operator>=</operator> <call><name><name>symbolStart</name><operator>.</operator><name>c_str</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>symbolEnd</name> <operator>=</operator> <call><name>extractSymbol</name><argument_list>(<argument><expr><literal type="char">'0'</literal></expr></argument>, <argument><expr><literal type="char">'4'</literal></expr></argument>, <argument><expr><name><name>userLangContainer</name><operator>-&gt;</operator><name>_keywordLists</name><index>[<expr><name>SCE_USER_KWLIST_COMMENTS</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>commentEnd</name> <operator>=</operator> <call><name><name>symbolEnd</name><operator>.</operator><name>c_str</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<comment type="line">// BlockToStreamComment: Next line needed to decide, if block-comment can be called below!</comment>
		<expr_stmt><expr><name>commentLineSymbol</name> <operator>=</operator> <call><name><name>buf</name><operator>-&gt;</operator><name>getCommentLineSymbol</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>commentStart</name> <operator>=</operator> <call><name><name>buf</name><operator>-&gt;</operator><name>getCommentStart</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>commentEnd</name> <operator>=</operator> <call><name><name>buf</name><operator>-&gt;</operator><name>getCommentEnd</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<comment type="line">// BlockToStreamComment: If there is no stream-comment symbol, try the block comment:</comment>
	<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>!</operator><name>commentStart</name><operator>)</operator> <operator>||</operator> <operator>(</operator><operator>!</operator><name><name>commentStart</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>commentStart</name> <operator>==</operator> <name>NULL</name><operator>)</operator> <operator>||</operator> <operator>(</operator><operator>!</operator><name>commentEnd</name><operator>)</operator> <operator>||</operator> <operator>(</operator><operator>!</operator><name><name>commentEnd</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>commentEnd</name> <operator>==</operator> <name>NULL</name><operator>)</operator></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><operator>!</operator><name>commentLineSymbol</name> <operator>||</operator> <operator>!</operator><name><name>commentLineSymbol</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>||</operator> <name>commentLineSymbol</name> <operator>==</operator> <name>NULL</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><call><name>doBlockComment</name><argument_list>(<argument><expr><name>cm_comment</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>
		<else>else<block type="pseudo"><block_content>
		<return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></else></if_stmt>
	</block_content>}</block></if></if_stmt>

	<decl_stmt><decl><type><name>generic_string</name></type> <name>start_comment</name><argument_list>(<argument><expr><name>commentStart</name></expr></argument>)</argument_list></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>generic_string</name></type> <name>end_comment</name><argument_list>(<argument><expr><name>commentEnd</name></expr></argument>)</argument_list></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>generic_string</name></type> <name>white_space</name><argument_list>(<argument><expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">" "</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>

	<expr_stmt><expr><name>start_comment</name> <operator>+=</operator> <name>white_space</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>white_space</name> <operator>+=</operator> <name>end_comment</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>end_comment</name> <operator>=</operator> <name>white_space</name></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>start_comment_length</name> <init>= <expr><call><name><name>start_comment</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>selectionStart</name> <init>= <expr><call><name><name>_pEditView</name><operator>-&gt;</operator><name>execute</name></name><argument_list>(<argument><expr><name>SCI_GETSELECTIONSTART</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>selectionEnd</name> <init>= <expr><call><name><name>_pEditView</name><operator>-&gt;</operator><name>execute</name></name><argument_list>(<argument><expr><name>SCI_GETSELECTIONEND</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>caretPosition</name> <init>= <expr><call><name><name>_pEditView</name><operator>-&gt;</operator><name>execute</name></name><argument_list>(<argument><expr><name>SCI_GETCURRENTPOS</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<comment type="line">// checking if caret is located in _beginning_ of selected block</comment>
	<decl_stmt><decl><type><name>bool</name></type> <name>move_caret</name> <init>= <expr><name>caretPosition</name> <operator>&lt;</operator> <name>selectionEnd</name></expr></init></decl>;</decl_stmt>

	<comment type="line">// if there is no selection?</comment>
	<if_stmt><if>if <condition>(<expr><name>selectionEnd</name> <operator>-</operator> <name>selectionStart</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>auto</name></type> <name>selLine</name> <init>= <expr><call><name><name>_pEditView</name><operator>-&gt;</operator><name>execute</name></name><argument_list>(<argument><expr><name>SCI_LINEFROMPOSITION</name></expr></argument>, <argument><expr><name>selectionStart</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name>selectionStart</name> <operator>=</operator> <call><name><name>_pEditView</name><operator>-&gt;</operator><name>execute</name></name><argument_list>(<argument><expr><name>SCI_GETLINEINDENTPOSITION</name></expr></argument>, <argument><expr><name>selLine</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>selectionEnd</name> <operator>=</operator> <call><name><name>_pEditView</name><operator>-&gt;</operator><name>execute</name></name><argument_list>(<argument><expr><name>SCI_GETLINEENDPOSITION</name></expr></argument>, <argument><expr><name>selLine</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name><name>_pEditView</name><operator>-&gt;</operator><name>execute</name></name><argument_list>(<argument><expr><name>SCI_BEGINUNDOACTION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name>_pEditView</name><operator>-&gt;</operator><name>insertGenericTextFrom</name></name><argument_list>(<argument><expr><name>selectionStart</name></expr></argument>, <argument><expr><call><name><name>start_comment</name><operator>.</operator><name>c_str</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>selectionEnd</name> <operator>+=</operator> <name>start_comment_length</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>selectionStart</name> <operator>+=</operator> <name>start_comment_length</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name>_pEditView</name><operator>-&gt;</operator><name>insertGenericTextFrom</name></name><argument_list>(<argument><expr><name>selectionEnd</name></expr></argument>, <argument><expr><call><name><name>end_comment</name><operator>.</operator><name>c_str</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>move_caret</name></expr>)</condition>
	<block>{<block_content>
		<comment type="line">// moving caret to the beginning of selected block</comment>
		<expr_stmt><expr><call><name><name>_pEditView</name><operator>-&gt;</operator><name>execute</name></name><argument_list>(<argument><expr><name>SCI_GOTOPOS</name></expr></argument>, <argument><expr><name>selectionEnd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>_pEditView</name><operator>-&gt;</operator><name>execute</name></name><argument_list>(<argument><expr><name>SCI_SETCURRENTPOS</name></expr></argument>, <argument><expr><name>selectionStart</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<expr_stmt><expr><call><name><name>_pEditView</name><operator>-&gt;</operator><name>execute</name></name><argument_list>(<argument><expr><name>SCI_SETSEL</name></expr></argument>, <argument><expr><name>selectionStart</name></expr></argument>, <argument><expr><name>selectionEnd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
	<expr_stmt><expr><call><name><name>_pEditView</name><operator>-&gt;</operator><name>execute</name></name><argument_list>(<argument><expr><name>SCI_ENDUNDOACTION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><literal type="boolean">true</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name><name>Notepad_plus</name><operator>::</operator><name>saveScintillasZoom</name></name><parameter_list>()</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>NppParameters</name><modifier>&amp;</modifier></type> <name>nppParam</name> <init>= <expr><call><name><name>NppParameters</name><operator>::</operator><name>getInstance</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ScintillaViewParams</name> <modifier>&amp;</modifier></type> <name>svp</name> <init>= <expr><operator>(</operator><name>ScintillaViewParams</name> <operator>&amp;</operator><operator>)</operator><call><name><name>nppParam</name><operator>.</operator><name>getSVP</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name><name>svp</name><operator>.</operator><name>_zoom</name></name> <operator>=</operator> <call><name><name>_mainEditView</name><operator>.</operator><name>execute</name></name><argument_list>(<argument><expr><name>SCI_GETZOOM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>svp</name><operator>.</operator><name>_zoom2</name></name> <operator>=</operator> <call><name><name>_subEditView</name><operator>.</operator><name>execute</name></name><argument_list>(<argument><expr><name>SCI_GETZOOM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name><name>Notepad_plus</name><operator>::</operator><name>addCurrentMacro</name></name><parameter_list>()</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>NppParameters</name><modifier>&amp;</modifier></type> <name>nppParams</name> <init>= <expr><call><name><name>NppParameters</name><operator>::</operator><name>getInstance</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>MacroShortcut</name></expr></argument>&gt;</argument_list></name> <modifier>&amp;</modifier></type> <name>theMacros</name> <init>= <expr><call><name><name>nppParams</name><operator>.</operator><name>getMacroList</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>int</name></type> <name>nbMacro</name> <init>= <expr><cast type="static">static_cast<argument_list type="generic">&lt;<argument><expr><name>int32_t</name></expr></argument>&gt;</argument_list><argument_list>(<argument><expr><call><name><name>theMacros</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></cast></expr></init></decl>;</decl_stmt>
	
	<decl_stmt><decl><type><name>DynamicMenu</name><modifier>&amp;</modifier></type> <name>macroMenu</name> <init>= <expr><call><name><name>nppParams</name><operator>.</operator><name>getMacroMenuItems</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>nbTopLevelItem</name> <init>= <expr><call><name><name>macroMenu</name><operator>.</operator><name>getTopLevelItemNumber</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>cmdID</name> <init>= <expr><name>ID_MACRO</name> <operator>+</operator> <name>nbMacro</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>MacroShortcut</name></type> <name>ms</name><argument_list>(<argument><expr><call><name>Shortcut</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>_macro</name></expr></argument>, <argument><expr><name>cmdID</name></expr></argument>)</argument_list></decl>;</decl_stmt>
	<expr_stmt><expr><call><name><name>ms</name><operator>.</operator><name>init</name></name><argument_list>(<argument><expr><call><name><name>_pPublicInterface</name><operator>-&gt;</operator><name>getHinst</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>_pPublicInterface</name><operator>-&gt;</operator><name>getHSelf</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><call><name><name>ms</name><operator>.</operator><name>doDialog</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>HMENU</name></type> <name>hMacroMenu</name> <init>= <expr><call><name><operator>::</operator><name>GetSubMenu</name></name><argument_list>(<argument><expr><name>_mainMenuHandle</name></expr></argument>, <argument><expr><name>MENUINDEX_MACRO</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>posBase</name> <init>= <expr><call><name><name>macroMenu</name><operator>.</operator><name>getPosBase</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if <condition>(<expr><name>nbTopLevelItem</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name><operator>::</operator><name>InsertMenu</name></name><argument_list>(<argument><expr><name>hMacroMenu</name></expr></argument>, <argument><expr><name>posBase</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>MF_BYPOSITION</name></expr></argument>, <argument><expr><cast type="static">static_cast<argument_list type="generic">&lt;<argument><expr><name>UINT</name></expr></argument>&gt;</argument_list><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></cast></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>	<comment type="line">//no separator yet, add one</comment>

            <comment type="line">// Insert the separator and modify/delete command</comment>
			<expr_stmt><expr><call><name><operator>::</operator><name>InsertMenu</name></name><argument_list>(<argument><expr><name>hMacroMenu</name></expr></argument>, <argument><expr><name>posBase</name> <operator>+</operator> <name>nbTopLevelItem</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>MF_BYPOSITION</name></expr></argument>, <argument><expr><cast type="static">static_cast<argument_list type="generic">&lt;<argument><expr><name>UINT</name></expr></argument>&gt;</argument_list><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></cast></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<decl_stmt><decl><type><name>NativeLangSpeaker</name> <modifier>*</modifier></type><name>pNativeLangSpeaker</name> <init>= <expr><call><name><name>nppParams</name><operator>.</operator><name>getNativeLangSpeaker</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>generic_string</name></type> <name>nativeLangShortcutMapperMacro</name> <init>= <expr><call><name><name>pNativeLangSpeaker</name><operator>-&gt;</operator><name>getNativeLangMenuString</name></name><argument_list>(<argument><expr><name>IDM_SETTING_SHORTCUT_MAPPER_MACRO</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<if_stmt><if>if <condition>(<expr><name>nativeLangShortcutMapperMacro</name> <operator>==</operator> <call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name>nativeLangShortcutMapperMacro</name> <operator>=</operator> <call><name><name>macroMenu</name><operator>.</operator><name>getLastCmdLabel</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

			<expr_stmt><expr><call><name><operator>::</operator><name>InsertMenu</name></name><argument_list>(<argument><expr><name>hMacroMenu</name></expr></argument>, <argument><expr><name>posBase</name> <operator>+</operator> <name>nbTopLevelItem</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>MF_BYCOMMAND</name></expr></argument>, <argument><expr><name>IDM_SETTING_SHORTCUT_MAPPER_MACRO</name></expr></argument>, <argument><expr><call><name><name>nativeLangShortcutMapperMacro</name><operator>.</operator><name>c_str</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
		<expr_stmt><expr><call><name><name>theMacros</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>ms</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>macroMenu</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><call><name>MenuItemUnit</name><argument_list>(<argument><expr><name>cmdID</name></expr></argument>, <argument><expr><call><name>string2wstring</name><argument_list>(<argument><expr><call><name><name>ms</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>CP_UTF8</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><operator>::</operator><name>InsertMenu</name></name><argument_list>(<argument><expr><name>hMacroMenu</name></expr></argument>, <argument><expr><cast type="static">static_cast<argument_list type="generic">&lt;<argument><expr><name>UINT</name></expr></argument>&gt;</argument_list><argument_list>(<argument><expr><name>posBase</name> <operator>+</operator> <name>nbTopLevelItem</name></expr></argument>)</argument_list></cast></expr></argument>, <argument><expr><name>MF_BYPOSITION</name></expr></argument>, <argument><expr><name>cmdID</name></expr></argument>, <argument><expr><call><name>string2wstring</name><argument_list>(<argument><expr><call><name><name>ms</name><operator>.</operator><name>toMenuItemString</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>CP_UTF8</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>c_str</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>_accelerator</name><operator>.</operator><name>updateShortcuts</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>nppParams</name><operator>.</operator><name>setShortcutDirty</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><literal type="boolean">true</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><literal type="boolean">false</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name><name>Notepad_plus</name><operator>::</operator><name>switchToFile</name></name><parameter_list>(<parameter><decl><type><name>BufferID</name></type> <name>id</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>iView</name> <init>= <expr><call><name>currentView</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><name>id</name> <operator>==</operator> <name>BUFFER_INVALID</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><operator>(</operator><name>i</name> <operator>=</operator> <call><name><name>_pDocTab</name><operator>-&gt;</operator><name>getIndexByBuffer</name></name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>iView</name> <operator>=</operator> <call><name>currentView</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><operator>(</operator><name>i</name> <operator>=</operator> <call><name><name>_pNonDocTab</name><operator>-&gt;</operator><name>getIndexByBuffer</name></name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>iView</name> <operator>=</operator> <call><name>otherView</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>i</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>switchEditViewTo</name><argument_list>(<argument><expr><name>iView</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>activateBuffer</name><argument_list>(<argument><expr><name>id</name></expr></argument>, <argument><expr><call><name>currentView</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><literal type="boolean">true</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><literal type="boolean">false</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name><name>Notepad_plus</name><operator>::</operator><name>getTaskListInfo</name></name><parameter_list>(<parameter><decl><type><name>TaskListInfo</name> <modifier>*</modifier></type><name>tli</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>currentNbDoc</name> <init>= <expr><cast type="static">static_cast<argument_list type="generic">&lt;<argument><expr><name>int32_t</name></expr></argument>&gt;</argument_list><argument_list>(<argument><expr><call><name><name>_pDocTab</name><operator>-&gt;</operator><name>nbItem</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></cast></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>nonCurrentNbDoc</name> <init>= <expr><cast type="static">static_cast<argument_list type="generic">&lt;<argument><expr><name>int32_t</name></expr></argument>&gt;</argument_list><argument_list>(<argument><expr><call><name><name>_pNonDocTab</name><operator>-&gt;</operator><name>nbItem</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></cast></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>tli</name><operator>-&gt;</operator><name>_currentIndex</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>viewVisible</name><argument_list>(<argument><expr><call><name>otherView</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>nonCurrentNbDoc</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>currentNbDoc</name></expr> ;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
	<block>{<block_content>
		<decl_stmt><decl><type><name>BufferID</name></type> <name>bufID</name> <init>= <expr><call><name><name>_pDocTab</name><operator>-&gt;</operator><name>getBufferByIndex</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>Buffer</name> <modifier>*</modifier></type> <name>b</name> <init>= <expr><call><name><name>MainFileManager</name><operator>.</operator><name>getBufferByID</name></name><argument_list>(<argument><expr><name>bufID</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>status</name> <init>= <expr><ternary><condition><expr><call><name><name>b</name><operator>-&gt;</operator><name>isMonitoringOn</name></name><argument_list>()</argument_list></call></expr>?</condition><then><expr><name>tb_monitored</name></expr></then><else>:<expr><operator>(</operator><ternary><condition><expr><call><name><name>b</name><operator>-&gt;</operator><name>isReadOnly</name></name><argument_list>()</argument_list></call></expr>?</condition><then><expr><name>tb_ro</name></expr></then><else>:<expr><operator>(</operator><ternary><condition><expr><call><name><name>b</name><operator>-&gt;</operator><name>isDirty</name></name><argument_list>()</argument_list></call></expr>?</condition><then><expr><name>tb_unsaved</name></expr></then><else>:<expr><name>tb_saved</name></expr></else></ternary><operator>)</operator></expr></else></ternary><operator>)</operator></expr></else></ternary></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>tli</name><operator>-&gt;</operator><name>_tlfsLst</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><call><name>TaskLstFnStatus</name><argument_list>(<argument><expr><call><name>currentView</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><call><name><name>b</name><operator>-&gt;</operator><name>getFullPathName</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>status</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>bufID</name></expr></argument>, <argument><expr><call><name><name>b</name><operator>-&gt;</operator><name>getDocColorId</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nonCurrentNbDoc</name></expr> ;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
	<block>{<block_content>
		<decl_stmt><decl><type><name>BufferID</name></type> <name>bufID</name> <init>= <expr><call><name><name>_pNonDocTab</name><operator>-&gt;</operator><name>getBufferByIndex</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>Buffer</name> <modifier>*</modifier></type> <name>b</name> <init>= <expr><call><name><name>MainFileManager</name><operator>.</operator><name>getBufferByID</name></name><argument_list>(<argument><expr><name>bufID</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>status</name> <init>= <expr><ternary><condition><expr><call><name><name>b</name><operator>-&gt;</operator><name>isMonitoringOn</name></name><argument_list>()</argument_list></call></expr>?</condition><then><expr><name>tb_monitored</name></expr></then><else>:<expr><operator>(</operator><ternary><condition><expr><call><name><name>b</name><operator>-&gt;</operator><name>isReadOnly</name></name><argument_list>()</argument_list></call></expr>?</condition><then><expr><name>tb_ro</name></expr></then><else>:<expr><operator>(</operator><ternary><condition><expr><call><name><name>b</name><operator>-&gt;</operator><name>isDirty</name></name><argument_list>()</argument_list></call></expr>?</condition><then><expr><name>tb_unsaved</name></expr></then><else>:<expr><name>tb_saved</name></expr></else></ternary><operator>)</operator></expr></else></ternary><operator>)</operator></expr></else></ternary></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>tli</name><operator>-&gt;</operator><name>_tlfsLst</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><call><name>TaskLstFnStatus</name><argument_list>(<argument><expr><call><name>otherView</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><call><name><name>b</name><operator>-&gt;</operator><name>getFullPathName</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>status</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>bufID</name></expr></argument>, <argument><expr><call><name><name>b</name><operator>-&gt;</operator><name>getDocColorId</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>
</block_content>}</block></function>


<function><type><name>bool</name></type> <name><name>Notepad_plus</name><operator>::</operator><name>goToPreviousIndicator</name></name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>indicID2Search</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>isWrap</name></decl></parameter>)</parameter_list> <specifier>const</specifier>
<block>{<block_content>
    <decl_stmt><decl><type><name>auto</name></type> <name>position</name> <init>= <expr><call><name><name>_pEditView</name><operator>-&gt;</operator><name>execute</name></name><argument_list>(<argument><expr><name>SCI_GETCURRENTPOS</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>auto</name></type> <name>docLen</name> <init>= <expr><call><name><name>_pEditView</name><operator>-&gt;</operator><name>getCurrentDocLen</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>bool</name></type> <name>isInIndicator</name> <init>= <expr><call><name><name>_pEditView</name><operator>-&gt;</operator><name>execute</name></name><argument_list>(<argument><expr><name>SCI_INDICATORVALUEAT</name></expr></argument>, <argument><expr><name>indicID2Search</name></expr></argument>,  <argument><expr><name>position</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>posStart</name> <init>= <expr><call><name><name>_pEditView</name><operator>-&gt;</operator><name>execute</name></name><argument_list>(<argument><expr><name>SCI_INDICATORSTART</name></expr></argument>, <argument><expr><name>indicID2Search</name></expr></argument>,  <argument><expr><name>position</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>posEnd</name> <init>= <expr><call><name><name>_pEditView</name><operator>-&gt;</operator><name>execute</name></name><argument_list>(<argument><expr><name>SCI_INDICATOREND</name></expr></argument>, <argument><expr><name>indicID2Search</name></expr></argument>,  <argument><expr><name>position</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<comment type="line">// pre-condition</comment>
	<if_stmt><if>if <condition>(<expr><operator>(</operator><name>posStart</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>posEnd</name> <operator>==</operator> <name>docLen</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>posStart</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><name>isWrap</name></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>

		<expr_stmt><expr><name>isInIndicator</name> <operator>=</operator> <call><name><name>_pEditView</name><operator>-&gt;</operator><name>execute</name></name><argument_list>(<argument><expr><name>SCI_INDICATORVALUEAT</name></expr></argument>, <argument><expr><name>indicID2Search</name></expr></argument>,  <argument><expr><name>docLen</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>posStart</name> <operator>=</operator> <call><name><name>_pEditView</name><operator>-&gt;</operator><name>execute</name></name><argument_list>(<argument><expr><name>SCI_INDICATORSTART</name></expr></argument>, <argument><expr><name>indicID2Search</name></expr></argument>,  <argument><expr><name>docLen</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>isInIndicator</name></expr>)</condition> <comment type="line">// try to get out of indicator</comment>
    <block>{<block_content>
        <expr_stmt><expr><name>posStart</name> <operator>=</operator> <call><name><name>_pEditView</name><operator>-&gt;</operator><name>execute</name></name><argument_list>(<argument><expr><name>SCI_INDICATORSTART</name></expr></argument>, <argument><expr><name>indicID2Search</name></expr></argument>, <argument><expr><name>posStart</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>posStart</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition>
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><operator>!</operator><name>isWrap</name></expr>)</condition><block type="pseudo"><block_content>
				<return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>
			<expr_stmt><expr><name>posStart</name> <operator>=</operator> <call><name><name>_pEditView</name><operator>-&gt;</operator><name>execute</name></name><argument_list>(<argument><expr><name>SCI_INDICATORSTART</name></expr></argument>, <argument><expr><name>indicID2Search</name></expr></argument>,  <argument><expr><name>docLen</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>auto</name></type> <name>newPos</name> <init>= <expr><name>posStart</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>posStart</name> <operator>=</operator> <call><name><name>_pEditView</name><operator>-&gt;</operator><name>execute</name></name><argument_list>(<argument><expr><name>SCI_INDICATORSTART</name></expr></argument>, <argument><expr><name>indicID2Search</name></expr></argument>, <argument><expr><name>newPos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>posEnd</name> <operator>=</operator> <call><name><name>_pEditView</name><operator>-&gt;</operator><name>execute</name></name><argument_list>(<argument><expr><name>SCI_INDICATOREND</name></expr></argument>, <argument><expr><name>indicID2Search</name></expr></argument>, <argument><expr><name>newPos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// found</comment>
	<if_stmt><if>if <condition>(<expr><call><name><name>_pEditView</name><operator>-&gt;</operator><name>execute</name></name><argument_list>(<argument><expr><name>SCI_INDICATORVALUEAT</name></expr></argument>, <argument><expr><name>indicID2Search</name></expr></argument>, <argument><expr><name>posStart</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>NppGUI</name> <modifier>&amp;</modifier></type> <name>nppGUI</name> <init>= <expr><operator>(</operator><call><name><name>NppParameters</name><operator>::</operator><name>getInstance</name></name><argument_list>()</argument_list></call><operator>)</operator><operator>.</operator><call><name>getNppGUI</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name><name>nppGUI</name><operator>.</operator><name>_disableSmartHiliteTmp</name></name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>auto</name></type> <name>currentline</name> <init>= <expr><call><name><name>_pEditView</name><operator>-&gt;</operator><name>execute</name></name><argument_list>(<argument><expr><name>SCI_LINEFROMPOSITION</name></expr></argument>, <argument><expr><name>posEnd</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	    <expr_stmt><expr><call><name><name>_pEditView</name><operator>-&gt;</operator><name>execute</name></name><argument_list>(<argument><expr><name>SCI_ENSUREVISIBLE</name></expr></argument>, <argument><expr><name>currentline</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>	<comment type="line">// make sure target line is unfolded</comment>

		<expr_stmt><expr><call><name><name>_pEditView</name><operator>-&gt;</operator><name>execute</name></name><argument_list>(<argument><expr><name>SCI_SETSEL</name></expr></argument>, <argument><expr><name>posEnd</name></expr></argument>, <argument><expr><name>posStart</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>_pEditView</name><operator>-&gt;</operator><name>execute</name></name><argument_list>(<argument><expr><name>SCI_SCROLLCARET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><literal type="boolean">true</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><literal type="boolean">false</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name><name>Notepad_plus</name><operator>::</operator><name>goToNextIndicator</name></name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>indicID2Search</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>isWrap</name></decl></parameter>)</parameter_list> <specifier>const</specifier>
<block>{<block_content>
    <decl_stmt><decl><type><name>size_t</name></type> <name>position</name> <init>= <expr><call><name><name>_pEditView</name><operator>-&gt;</operator><name>execute</name></name><argument_list>(<argument><expr><name>SCI_GETCURRENTPOS</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>docLen</name> <init>= <expr><call><name><name>_pEditView</name><operator>-&gt;</operator><name>getCurrentDocLen</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>bool</name></type> <name>isInIndicator</name> <init>= <expr><call><name><name>_pEditView</name><operator>-&gt;</operator><name>execute</name></name><argument_list>(<argument><expr><name>SCI_INDICATORVALUEAT</name></expr></argument>, <argument><expr><name>indicID2Search</name></expr></argument>,  <argument><expr><name>position</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>posStart</name> <init>= <expr><call><name><name>_pEditView</name><operator>-&gt;</operator><name>execute</name></name><argument_list>(<argument><expr><name>SCI_INDICATORSTART</name></expr></argument>, <argument><expr><name>indicID2Search</name></expr></argument>,  <argument><expr><name>position</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>posEnd</name> <init>= <expr><call><name><name>_pEditView</name><operator>-&gt;</operator><name>execute</name></name><argument_list>(<argument><expr><name>SCI_INDICATOREND</name></expr></argument>, <argument><expr><name>indicID2Search</name></expr></argument>,  <argument><expr><name>position</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<comment type="line">// pre-condition</comment>
	<if_stmt><if>if <condition>(<expr><operator>(</operator><name>posStart</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>posEnd</name> <operator>==</operator> <name>docLen</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>posEnd</name> <operator>&gt;=</operator> <name>docLen</name></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><name>isWrap</name></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>

		<expr_stmt><expr><name>isInIndicator</name> <operator>=</operator> <call><name><name>_pEditView</name><operator>-&gt;</operator><name>execute</name></name><argument_list>(<argument><expr><name>SCI_INDICATORVALUEAT</name></expr></argument>, <argument><expr><name>indicID2Search</name></expr></argument>,  <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>posEnd</name> <operator>=</operator> <call><name><name>_pEditView</name><operator>-&gt;</operator><name>execute</name></name><argument_list>(<argument><expr><name>SCI_INDICATOREND</name></expr></argument>, <argument><expr><name>indicID2Search</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>isInIndicator</name></expr>)</condition> <comment type="line">// try to get out of indicator</comment>
    <block>{<block_content>
        <expr_stmt><expr><name>posEnd</name> <operator>=</operator> <call><name><name>_pEditView</name><operator>-&gt;</operator><name>execute</name></name><argument_list>(<argument><expr><name>SCI_INDICATOREND</name></expr></argument>, <argument><expr><name>indicID2Search</name></expr></argument>, <argument><expr><name>posEnd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><name>posEnd</name> <operator>&gt;=</operator> <name>docLen</name></expr>)</condition>
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><operator>!</operator><name>isWrap</name></expr>)</condition><block type="pseudo"><block_content>
				<return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>
			<expr_stmt><expr><name>posEnd</name> <operator>=</operator> <call><name><name>_pEditView</name><operator>-&gt;</operator><name>execute</name></name><argument_list>(<argument><expr><name>SCI_INDICATOREND</name></expr></argument>, <argument><expr><name>indicID2Search</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
    <decl_stmt><decl><type><name>auto</name></type> <name>newPos</name> <init>= <expr><name>posEnd</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>posStart</name> <operator>=</operator> <call><name><name>_pEditView</name><operator>-&gt;</operator><name>execute</name></name><argument_list>(<argument><expr><name>SCI_INDICATORSTART</name></expr></argument>, <argument><expr><name>indicID2Search</name></expr></argument>, <argument><expr><name>newPos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>posEnd</name> <operator>=</operator> <call><name><name>_pEditView</name><operator>-&gt;</operator><name>execute</name></name><argument_list>(<argument><expr><name>SCI_INDICATOREND</name></expr></argument>, <argument><expr><name>indicID2Search</name></expr></argument>, <argument><expr><name>newPos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// found</comment>
	<if_stmt><if>if <condition>(<expr><call><name><name>_pEditView</name><operator>-&gt;</operator><name>execute</name></name><argument_list>(<argument><expr><name>SCI_INDICATORVALUEAT</name></expr></argument>, <argument><expr><name>indicID2Search</name></expr></argument>, <argument><expr><name>posStart</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>NppGUI</name> <modifier>&amp;</modifier></type> <name>nppGUI</name> <init>= <expr><operator>(</operator><call><name><name>NppParameters</name><operator>::</operator><name>getInstance</name></name><argument_list>()</argument_list></call><operator>)</operator><operator>.</operator><call><name>getNppGUI</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name><name>nppGUI</name><operator>.</operator><name>_disableSmartHiliteTmp</name></name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>auto</name></type> <name>currentline</name> <init>= <expr><call><name><name>_pEditView</name><operator>-&gt;</operator><name>execute</name></name><argument_list>(<argument><expr><name>SCI_LINEFROMPOSITION</name></expr></argument>, <argument><expr><name>posEnd</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	    <expr_stmt><expr><call><name><name>_pEditView</name><operator>-&gt;</operator><name>execute</name></name><argument_list>(<argument><expr><name>SCI_ENSUREVISIBLE</name></expr></argument>, <argument><expr><name>currentline</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>	<comment type="line">// make sure target line is unfolded</comment>

		<expr_stmt><expr><call><name><name>_pEditView</name><operator>-&gt;</operator><name>execute</name></name><argument_list>(<argument><expr><name>SCI_SETSEL</name></expr></argument>, <argument><expr><name>posStart</name></expr></argument>, <argument><expr><name>posEnd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>_pEditView</name><operator>-&gt;</operator><name>execute</name></name><argument_list>(<argument><expr><name>SCI_SCROLLCARET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><literal type="boolean">true</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><literal type="boolean">false</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name><name>Notepad_plus</name><operator>::</operator><name>fullScreenToggle</name></name><parameter_list>()</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>_beforeSpecialView</name><operator>.</operator><name>_isFullScreen</name></name></expr>)</condition>	<comment type="line">//toggle fullscreen on</comment>
	<block>{<block_content>
		<expr_stmt><expr><name><name>_beforeSpecialView</name><operator>.</operator><name>_winPlace</name><operator>.</operator><name>length</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>_beforeSpecialView</name><operator>.</operator><name>_winPlace</name></name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><operator>::</operator><name>GetWindowPlacement</name></name><argument_list>(<argument><expr><call><name><name>_pPublicInterface</name><operator>-&gt;</operator><name>getHSelf</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>_beforeSpecialView</name><operator>.</operator><name>_winPlace</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<decl_stmt><decl><type><name>RECT</name></type> <name>fullscreenArea</name><argument_list>{}</argument_list></decl>;</decl_stmt>		<comment type="line">//RECT used to calculate window fullscreen size</comment>
		<comment type="line">//Preset view area, in case something fails, primary monitor values</comment>
		<expr_stmt><expr><name><name>fullscreenArea</name><operator>.</operator><name>top</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>fullscreenArea</name><operator>.</operator><name>left</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>fullscreenArea</name><operator>.</operator><name>right</name></name> <operator>=</operator> <call><name>GetSystemMetrics</name><argument_list>(<argument><expr><name>SM_CXSCREEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>fullscreenArea</name><operator>.</operator><name>bottom</name></name> <operator>=</operator> <call><name>GetSystemMetrics</name><argument_list>(<argument><expr><name>SM_CYSCREEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="line">//if (_winVersion != WV_NT)</comment>
		<block>{<block_content>
			<decl_stmt><decl><type><name>HMONITOR</name></type> <name>currentMonitor</name></decl>;</decl_stmt>	<comment type="line">//Handle to monitor where fullscreen should go</comment>
			<decl_stmt><decl><type><name>MONITORINFO</name></type> <name>mi</name><argument_list>{}</argument_list></decl>;</decl_stmt>				<comment type="line">//Info of that monitor</comment>
			<comment type="line">//Caution, this will not work on windows 95, so probably add some checking of some sorts like Unicode checks, IF 95 were to be supported</comment>
			<expr_stmt><expr><name>currentMonitor</name> <operator>=</operator> <call><name><operator>::</operator><name>MonitorFromWindow</name></name><argument_list>(<argument><expr><call><name><name>_pPublicInterface</name><operator>-&gt;</operator><name>getHSelf</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>MONITOR_DEFAULTTONEAREST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>	<comment type="line">//should always be valid monitor handle</comment>
			<expr_stmt><expr><name><name>mi</name><operator>.</operator><name>cbSize</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>MONITORINFO</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><call><name><operator>::</operator><name>GetMonitorInfo</name></name><argument_list>(<argument><expr><name>currentMonitor</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mi</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>FALSE</name></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><name>fullscreenArea</name> <operator>=</operator> <name><name>mi</name><operator>.</operator><name>rcMonitor</name></name></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>fullscreenArea</name><operator>.</operator><name>right</name></name> <operator>-=</operator> <name><name>fullscreenArea</name><operator>.</operator><name>left</name></name></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>fullscreenArea</name><operator>.</operator><name>bottom</name></name> <operator>-=</operator> <name><name>fullscreenArea</name><operator>.</operator><name>top</name></name></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block>

		<comment type="line">//Setup GUI</comment>
        <decl_stmt><decl><type><name>int</name></type> <name>bs</name> <init>= <expr><name>buttonStatus_fullscreen</name></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>_beforeSpecialView</name><operator>.</operator><name>_isPostIt</name></name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name>bs</name> <operator>|=</operator> <name>buttonStatus_postit</name></expr>;</expr_stmt>
        </block_content>}</block></if>
        <else>else
		<block>{<block_content>
			<comment type="line">//only change the GUI if not already done by postit</comment>
			<expr_stmt><expr><name><name>_beforeSpecialView</name><operator>.</operator><name>_isMenuShown</name></name> <operator>=</operator> <call><name><operator>::</operator><name>SendMessage</name></name><argument_list>(<argument><expr><call><name><name>_pPublicInterface</name><operator>-&gt;</operator><name>getHSelf</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>NPPM_ISMENUHIDDEN</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>TRUE</name></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name><name>_beforeSpecialView</name><operator>.</operator><name>_isMenuShown</name></name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name><operator>::</operator><name>SendMessage</name></name><argument_list>(<argument><expr><call><name><name>_pPublicInterface</name><operator>-&gt;</operator><name>getHSelf</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>NPPM_HIDEMENU</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

			<comment type="line">//Hide rebar</comment>
			<expr_stmt><expr><call><name><name>_rebarTop</name><operator>.</operator><name>display</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>_rebarBottom</name><operator>.</operator><name>display</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
        <expr_stmt><expr><call><name><name>_restoreButton</name><operator>.</operator><name>setButtonStatus</name></name><argument_list>(<argument><expr><name>bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="line">//Hide window so windows can properly update it</comment>
		<expr_stmt><expr><call><name><operator>::</operator><name>ShowWindow</name></name><argument_list>(<argument><expr><call><name><name>_pPublicInterface</name><operator>-&gt;</operator><name>getHSelf</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>SW_HIDE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="line">//Set popup style for fullscreen window and store the old style</comment>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>_beforeSpecialView</name><operator>.</operator><name>_isPostIt</name></name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name><name>_beforeSpecialView</name><operator>.</operator><name>_preStyle</name></name> <operator>=</operator> <call><name><operator>::</operator><name>SetWindowLongPtr</name></name><argument_list>(<argument><expr><call><name><name>_pPublicInterface</name><operator>-&gt;</operator><name>getHSelf</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>GWL_STYLE</name></expr></argument>, <argument><expr><name>WS_POPUP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>_beforeSpecialView</name><operator>.</operator><name>_preStyle</name></name></expr>)</condition>
			<block>{<block_content>
				<comment type="line">//something went wrong, use default settings</comment>
				<expr_stmt><expr><name><name>_beforeSpecialView</name><operator>.</operator><name>_preStyle</name></name> <operator>=</operator> <name>WS_OVERLAPPEDWINDOW</name> <operator>|</operator> <name>WS_CLIPCHILDREN</name></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></if></if_stmt>

		<comment type="line">//Set fullscreen window, highest non-top z-order, show the window and redraw it (refreshing the windowmanager cache aswell)</comment>
		<expr_stmt><expr><call><name><operator>::</operator><name>ShowWindow</name></name><argument_list>(<argument><expr><call><name><name>_pPublicInterface</name><operator>-&gt;</operator><name>getHSelf</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>SW_SHOW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><operator>::</operator><name>SetWindowPos</name></name><argument_list>(<argument><expr><call><name><name>_pPublicInterface</name><operator>-&gt;</operator><name>getHSelf</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>HWND_TOP</name></expr></argument>, <argument><expr><name><name>fullscreenArea</name><operator>.</operator><name>left</name></name></expr></argument>, <argument><expr><name><name>fullscreenArea</name><operator>.</operator><name>top</name></name></expr></argument>, <argument><expr><name><name>fullscreenArea</name><operator>.</operator><name>right</name></name></expr></argument>, <argument><expr><name><name>fullscreenArea</name><operator>.</operator><name>bottom</name></name></expr></argument>, <argument><expr><name>SWP_NOZORDER</name><operator>|</operator><name>SWP_DRAWFRAME</name><operator>|</operator><name>SWP_FRAMECHANGED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><operator>::</operator><name>SetForegroundWindow</name></name><argument_list>(<argument><expr><call><name><name>_pPublicInterface</name><operator>-&gt;</operator><name>getHSelf</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// show restore button</comment>
        <expr_stmt><expr><call><name><name>_restoreButton</name><operator>.</operator><name>doDialog</name></name><argument_list>(<argument><expr><call><name><name>_nativeLangSpeaker</name><operator>.</operator><name>isRTL</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>RECT</name></type> <name>rect</name></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>GetWindowRect</name><argument_list>(<argument><expr><call><name><name>_restoreButton</name><operator>.</operator><name>getHSelf</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>rect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <decl_stmt><decl><type><name>int</name></type> <name>w</name> <init>= <expr><name><name>rect</name><operator>.</operator><name>right</name></name> <operator>-</operator> <name><name>rect</name><operator>.</operator><name>left</name></name></expr></init></decl>;</decl_stmt>
	    <decl_stmt><decl><type><name>int</name></type> <name>h</name> <init>= <expr><name><name>rect</name><operator>.</operator><name>bottom</name></name> <operator>-</operator> <name><name>rect</name><operator>.</operator><name>top</name></name></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>RECT</name></type> <name>nppRect</name></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>GetWindowRect</name><argument_list>(<argument><expr><call><name><name>_pPublicInterface</name><operator>-&gt;</operator><name>getHSelf</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>nppRect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>x</name> <init>= <expr><name><name>nppRect</name><operator>.</operator><name>right</name></name> <operator>-</operator> <name>w</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>y</name> <init>= <expr><name><name>nppRect</name><operator>.</operator><name>top</name></name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><operator>::</operator><name>MoveWindow</name></name><argument_list>(<argument><expr><call><name><name>_restoreButton</name><operator>.</operator><name>getHSelf</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>_pEditView</name><operator>-&gt;</operator><name>getFocus</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else	<comment type="line">//toggle fullscreen off</comment>
	<block>{<block_content>
		<comment type="line">//Hide window for updating, restore style and menu then restore position and Z-Order</comment>
		<expr_stmt><expr><call><name><operator>::</operator><name>ShowWindow</name></name><argument_list>(<argument><expr><call><name><name>_pPublicInterface</name><operator>-&gt;</operator><name>getHSelf</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>SW_HIDE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>_restoreButton</name><operator>.</operator><name>setButtonStatus</name></name><argument_list>(<argument><expr><name>buttonStatus_fullscreen</name> <operator>^</operator> <call><name><name>_restoreButton</name><operator>.</operator><name>getButtonStatus</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>_restoreButton</name><operator>.</operator><name>display</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="line">//Setup GUI</comment>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>_beforeSpecialView</name><operator>.</operator><name>_isPostIt</name></name></expr>)</condition>
		<block>{<block_content>
			<comment type="line">//only change the GUI if postit isnt active</comment>
			<if_stmt><if>if <condition>(<expr><name><name>_beforeSpecialView</name><operator>.</operator><name>_isMenuShown</name></name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name><operator>::</operator><name>SendMessage</name></name><argument_list>(<argument><expr><call><name><name>_pPublicInterface</name><operator>-&gt;</operator><name>getHSelf</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>NPPM_HIDEMENU</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

			<comment type="line">//Show rebar</comment>
			<expr_stmt><expr><call><name><name>_rebarTop</name><operator>.</operator><name>display</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>_rebarBottom</name><operator>.</operator><name>display</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<comment type="line">//Set old style if not fullscreen</comment>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>_beforeSpecialView</name><operator>.</operator><name>_isPostIt</name></name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name><operator>::</operator><name>SetWindowLongPtr</name></name><argument_list>( <argument><expr><call><name><name>_pPublicInterface</name><operator>-&gt;</operator><name>getHSelf</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>GWL_STYLE</name></expr></argument>, <argument><expr><name><name>_beforeSpecialView</name><operator>.</operator><name>_preStyle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<comment type="line">//Redraw the window and refresh windowmanager cache, dont do anything else, sizing is done later on</comment>
			<expr_stmt><expr><call><name><operator>::</operator><name>SetWindowPos</name></name><argument_list>(<argument><expr><call><name><name>_pPublicInterface</name><operator>-&gt;</operator><name>getHSelf</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>HWND_TOP</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><name>SWP_NOMOVE</name><operator>|</operator><name>SWP_NOSIZE</name><operator>|</operator><name>SWP_NOZORDER</name><operator>|</operator><name>SWP_DRAWFRAME</name><operator>|</operator><name>SWP_FRAMECHANGED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><operator>::</operator><name>ShowWindow</name></name><argument_list>(<argument><expr><call><name><name>_pPublicInterface</name><operator>-&gt;</operator><name>getHSelf</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>SW_SHOW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><name><name>_beforeSpecialView</name><operator>.</operator><name>_winPlace</name><operator>.</operator><name>length</name></name></expr>)</condition>
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name><name>_beforeSpecialView</name><operator>.</operator><name>_winPlace</name><operator>.</operator><name>showCmd</name></name> <operator>==</operator> <name>SW_SHOWMAXIMIZED</name></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><call><name><operator>::</operator><name>ShowWindow</name></name><argument_list>(<argument><expr><call><name><name>_pPublicInterface</name><operator>-&gt;</operator><name>getHSelf</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>SW_SHOWMAXIMIZED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if>
			<else>else
			<block>{<block_content>
				<expr_stmt><expr><call><name><operator>::</operator><name>SetWindowPlacement</name></name><argument_list>(<argument><expr><call><name><name>_pPublicInterface</name><operator>-&gt;</operator><name>getHSelf</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>_beforeSpecialView</name><operator>.</operator><name>_winPlace</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></else></if_stmt>
		</block_content>}</block></if>
		<else>else	<comment type="line">//fallback</comment>
		<block>{<block_content>
			<expr_stmt><expr><call><name><operator>::</operator><name>ShowWindow</name></name><argument_list>(<argument><expr><call><name><name>_pPublicInterface</name><operator>-&gt;</operator><name>getHSelf</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>SW_SHOW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></else></if_stmt>
	<comment type="line">//::SetForegroundWindow(_pPublicInterface-&gt;getHSelf());</comment>
	<expr_stmt><expr><name><name>_beforeSpecialView</name><operator>.</operator><name>_isFullScreen</name></name> <operator>=</operator> <operator>!</operator><name><name>_beforeSpecialView</name><operator>.</operator><name>_isFullScreen</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><operator>::</operator><name>SendMessage</name></name><argument_list>(<argument><expr><call><name><name>_pPublicInterface</name><operator>-&gt;</operator><name>getHSelf</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>WM_SIZE</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>_beforeSpecialView</name><operator>.</operator><name>_isPostIt</name></name></expr>)</condition>
    <block>{<block_content>
        <comment type="line">// show restore button on the right position</comment>
        <decl_stmt><decl><type><name>RECT</name></type> <name>rect</name></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>GetWindowRect</name><argument_list>(<argument><expr><call><name><name>_restoreButton</name><operator>.</operator><name>getHSelf</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>rect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>w</name> <init>= <expr><name><name>rect</name><operator>.</operator><name>right</name></name> <operator>-</operator> <name><name>rect</name><operator>.</operator><name>left</name></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>h</name> <init>= <expr><name><name>rect</name><operator>.</operator><name>bottom</name></name> <operator>-</operator> <name><name>rect</name><operator>.</operator><name>top</name></name></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>RECT</name></type> <name>nppRect</name></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>GetWindowRect</name><argument_list>(<argument><expr><call><name><name>_pPublicInterface</name><operator>-&gt;</operator><name>getHSelf</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>nppRect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>x</name> <init>= <expr><name><name>nppRect</name><operator>.</operator><name>right</name></name> <operator>-</operator> <name>w</name> <operator>-</operator> <name>w</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>y</name> <init>= <expr><name><name>nppRect</name><operator>.</operator><name>top</name></name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><operator>::</operator><name>MoveWindow</name></name><argument_list>(<argument><expr><call><name><name>_restoreButton</name><operator>.</operator><name>getHSelf</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name><name>Notepad_plus</name><operator>::</operator><name>postItToggle</name></name><parameter_list>()</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>_beforeSpecialView</name><operator>.</operator><name>_isPostIt</name></name></expr>)</condition>	<comment type="line">// PostIt disabled, enable it</comment>
	<block>{<block_content>
		<decl_stmt><decl><type><name>NppGUI</name> <modifier>&amp;</modifier></type> <name>nppGUI</name> <init>= <expr><call><name><name>NppParameters</name><operator>::</operator><name>getInstance</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getNppGUI</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<comment type="line">// get current status before switch to postIt</comment>
		<comment type="line">//check these always</comment>
		<block>{<block_content>
			<expr_stmt><expr><name><name>_beforeSpecialView</name><operator>.</operator><name>_isAlwaysOnTop</name></name> <operator>=</operator> <call><name><operator>::</operator><name>GetMenuState</name></name><argument_list>(<argument><expr><name>_mainMenuHandle</name></expr></argument>, <argument><expr><name>IDM_VIEW_ALWAYSONTOP</name></expr></argument>, <argument><expr><name>MF_BYCOMMAND</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>MF_CHECKED</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>_beforeSpecialView</name><operator>.</operator><name>_isTabbarShown</name></name> <operator>=</operator> <call><name><operator>::</operator><name>SendMessage</name></name><argument_list>(<argument><expr><call><name><name>_pPublicInterface</name><operator>-&gt;</operator><name>getHSelf</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>NPPM_ISTABBARHIDDEN</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>TRUE</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>_beforeSpecialView</name><operator>.</operator><name>_isStatusbarShown</name></name> <operator>=</operator> <name><name>nppGUI</name><operator>.</operator><name>_statusBarShow</name></name></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name><name>nppGUI</name><operator>.</operator><name>_statusBarShow</name></name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name><operator>::</operator><name>SendMessage</name></name><argument_list>(<argument><expr><call><name><name>_pPublicInterface</name><operator>-&gt;</operator><name>getHSelf</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>NPPM_HIDESTATUSBAR</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<if_stmt><if>if <condition>(<expr><name><name>_beforeSpecialView</name><operator>.</operator><name>_isTabbarShown</name></name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name><operator>::</operator><name>SendMessage</name></name><argument_list>(<argument><expr><call><name><name>_pPublicInterface</name><operator>-&gt;</operator><name>getHSelf</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>NPPM_HIDETABBAR</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>_beforeSpecialView</name><operator>.</operator><name>_isAlwaysOnTop</name></name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name><operator>::</operator><name>SendMessage</name></name><argument_list>(<argument><expr><call><name><name>_pPublicInterface</name><operator>-&gt;</operator><name>getHSelf</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>WM_COMMAND</name></expr></argument>, <argument><expr><name>IDM_VIEW_ALWAYSONTOP</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		</block_content>}</block>
		<comment type="line">//Only check these if not fullscreen</comment>
        <decl_stmt><decl><type><name>int</name></type> <name>bs</name> <init>= <expr><name>buttonStatus_postit</name></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>_beforeSpecialView</name><operator>.</operator><name>_isFullScreen</name></name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name>bs</name> <operator>|=</operator> <name>buttonStatus_fullscreen</name></expr>;</expr_stmt>
        </block_content>}</block></if>
        <else>else
		<block>{<block_content>
			<expr_stmt><expr><name><name>_beforeSpecialView</name><operator>.</operator><name>_isMenuShown</name></name> <operator>=</operator> <call><name><operator>::</operator><name>SendMessage</name></name><argument_list>(<argument><expr><call><name><name>_pPublicInterface</name><operator>-&gt;</operator><name>getHSelf</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>NPPM_ISMENUHIDDEN</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>TRUE</name></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name><name>_beforeSpecialView</name><operator>.</operator><name>_isMenuShown</name></name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name><operator>::</operator><name>SendMessage</name></name><argument_list>(<argument><expr><call><name><name>_pPublicInterface</name><operator>-&gt;</operator><name>getHSelf</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>NPPM_HIDEMENU</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

			<comment type="line">//Hide rebar</comment>
			<expr_stmt><expr><call><name><name>_rebarTop</name><operator>.</operator><name>display</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>_rebarBottom</name><operator>.</operator><name>display</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
        <expr_stmt><expr><call><name><name>_restoreButton</name><operator>.</operator><name>setButtonStatus</name></name><argument_list>(<argument><expr><name>bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="line">// PostIt!</comment>

		<comment type="line">//Set popup style for fullscreen window and store the old style</comment>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>_beforeSpecialView</name><operator>.</operator><name>_isFullScreen</name></name></expr>)</condition>
		<block>{<block_content>
			<comment type="line">//Hide window so windows can properly update it</comment>
			<expr_stmt><expr><call><name><operator>::</operator><name>ShowWindow</name></name><argument_list>(<argument><expr><call><name><name>_pPublicInterface</name><operator>-&gt;</operator><name>getHSelf</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>SW_HIDE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>_beforeSpecialView</name><operator>.</operator><name>_preStyle</name></name> <operator>=</operator> <call><name><operator>::</operator><name>SetWindowLongPtr</name></name><argument_list>( <argument><expr><call><name><name>_pPublicInterface</name><operator>-&gt;</operator><name>getHSelf</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>GWL_STYLE</name></expr></argument>, <argument><expr><name>WS_POPUP</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>_beforeSpecialView</name><operator>.</operator><name>_preStyle</name></name></expr>)</condition>
			<block>{<block_content>
				<comment type="line">//something went wrong, use default settings</comment>
				<expr_stmt><expr><name><name>_beforeSpecialView</name><operator>.</operator><name>_preStyle</name></name> <operator>=</operator> <name>WS_OVERLAPPEDWINDOW</name> <operator>|</operator> <name>WS_CLIPCHILDREN</name></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
			<comment type="line">//Redraw the window and refresh windowmanager cache, dont do anything else, sizing is done later on</comment>
			<expr_stmt><expr><call><name><operator>::</operator><name>SetWindowPos</name></name><argument_list>(<argument><expr><call><name><name>_pPublicInterface</name><operator>-&gt;</operator><name>getHSelf</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>HWND_TOPMOST</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><name>SWP_NOMOVE</name><operator>|</operator><name>SWP_NOSIZE</name><operator>|</operator><name>SWP_NOZORDER</name><operator>|</operator><name>SWP_DRAWFRAME</name><operator>|</operator><name>SWP_FRAMECHANGED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><operator>::</operator><name>ShowWindow</name></name><argument_list>(<argument><expr><call><name><name>_pPublicInterface</name><operator>-&gt;</operator><name>getHSelf</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>SW_SHOW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

        <comment type="line">// show restore button</comment>
        <expr_stmt><expr><call><name><name>_restoreButton</name><operator>.</operator><name>doDialog</name></name><argument_list>(<argument><expr><call><name><name>_nativeLangSpeaker</name><operator>.</operator><name>isRTL</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>RECT</name></type> <name>rect</name></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>GetWindowRect</name><argument_list>(<argument><expr><call><name><name>_restoreButton</name><operator>.</operator><name>getHSelf</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>rect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <decl_stmt><decl><type><name>int</name></type> <name>w</name> <init>= <expr><name><name>rect</name><operator>.</operator><name>right</name></name> <operator>-</operator> <name><name>rect</name><operator>.</operator><name>left</name></name></expr></init></decl>;</decl_stmt>
	    <decl_stmt><decl><type><name>int</name></type> <name>h</name> <init>= <expr><name><name>rect</name><operator>.</operator><name>bottom</name></name> <operator>-</operator> <name><name>rect</name><operator>.</operator><name>top</name></name></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>RECT</name></type> <name>nppRect</name></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>GetWindowRect</name><argument_list>(<argument><expr><call><name><name>_pPublicInterface</name><operator>-&gt;</operator><name>getHSelf</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>nppRect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>x</name> <init>= <expr><name><name>nppRect</name><operator>.</operator><name>right</name></name> <operator>-</operator> <name>w</name> <operator>-</operator> <name>w</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>y</name> <init>= <expr><name><name>nppRect</name><operator>.</operator><name>top</name></name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><operator>::</operator><name>MoveWindow</name></name><argument_list>(<argument><expr><call><name><name>_restoreButton</name><operator>.</operator><name>getHSelf</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>_pEditView</name><operator>-&gt;</operator><name>getFocus</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else	<comment type="line">//PostIt enabled, disable it</comment>
	<block>{<block_content>
        <expr_stmt><expr><call><name><name>_restoreButton</name><operator>.</operator><name>setButtonStatus</name></name><argument_list>(<argument><expr><name>buttonStatus_postit</name> <operator>^</operator> <call><name><name>_restoreButton</name><operator>.</operator><name>getButtonStatus</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>_restoreButton</name><operator>.</operator><name>display</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="line">//Setup GUI</comment>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>_beforeSpecialView</name><operator>.</operator><name>_isFullScreen</name></name></expr>)</condition>
		<block>{<block_content>
			<comment type="line">//only change the these parts of GUI if not already done by fullscreen</comment>
			<if_stmt><if>if <condition>(<expr><name><name>_beforeSpecialView</name><operator>.</operator><name>_isMenuShown</name></name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name><operator>::</operator><name>SendMessage</name></name><argument_list>(<argument><expr><call><name><name>_pPublicInterface</name><operator>-&gt;</operator><name>getHSelf</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>NPPM_HIDEMENU</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

			<comment type="line">//Show rebar</comment>
			<expr_stmt><expr><call><name><name>_rebarTop</name><operator>.</operator><name>display</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>_rebarBottom</name><operator>.</operator><name>display</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<comment type="line">//Do this GUI config always</comment>
		<if_stmt><if>if <condition>(<expr><name><name>_beforeSpecialView</name><operator>.</operator><name>_isStatusbarShown</name></name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name><operator>::</operator><name>SendMessage</name></name><argument_list>(<argument><expr><call><name><name>_pPublicInterface</name><operator>-&gt;</operator><name>getHSelf</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>NPPM_HIDESTATUSBAR</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>_beforeSpecialView</name><operator>.</operator><name>_isTabbarShown</name></name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name><operator>::</operator><name>SendMessage</name></name><argument_list>(<argument><expr><call><name><name>_pPublicInterface</name><operator>-&gt;</operator><name>getHSelf</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>NPPM_HIDETABBAR</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>_beforeSpecialView</name><operator>.</operator><name>_isAlwaysOnTop</name></name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name><operator>::</operator><name>SendMessage</name></name><argument_list>(<argument><expr><call><name><name>_pPublicInterface</name><operator>-&gt;</operator><name>getHSelf</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>WM_COMMAND</name></expr></argument>, <argument><expr><name>IDM_VIEW_ALWAYSONTOP</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<comment type="line">//restore window style if not fullscreen</comment>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>_beforeSpecialView</name><operator>.</operator><name>_isFullScreen</name></name></expr>)</condition>
		<block>{<block_content>
			<comment type="line">//dwStyle |= (WS_CAPTION | WS_SIZEBOX);</comment>
			<expr_stmt><expr><call><name><operator>::</operator><name>ShowWindow</name></name><argument_list>(<argument><expr><call><name><name>_pPublicInterface</name><operator>-&gt;</operator><name>getHSelf</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>SW_HIDE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><operator>::</operator><name>SetWindowLongPtr</name></name><argument_list>(<argument><expr><call><name><name>_pPublicInterface</name><operator>-&gt;</operator><name>getHSelf</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>GWL_STYLE</name></expr></argument>, <argument><expr><name><name>_beforeSpecialView</name><operator>.</operator><name>_preStyle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<comment type="line">//Redraw the window and refresh windowmanager cache, dont do anything else, sizing is done later on</comment>
			<expr_stmt><expr><call><name><operator>::</operator><name>SetWindowPos</name></name><argument_list>(<argument><expr><call><name><name>_pPublicInterface</name><operator>-&gt;</operator><name>getHSelf</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>HWND_NOTOPMOST</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><name>SWP_NOMOVE</name><operator>|</operator><name>SWP_NOSIZE</name><operator>|</operator><name>SWP_NOZORDER</name><operator>|</operator><name>SWP_DRAWFRAME</name><operator>|</operator><name>SWP_FRAMECHANGED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><operator>::</operator><name>ShowWindow</name></name><argument_list>(<argument><expr><call><name><name>_pPublicInterface</name><operator>-&gt;</operator><name>getHSelf</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>SW_SHOW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></else></if_stmt>

	<expr_stmt><expr><name><name>_beforeSpecialView</name><operator>.</operator><name>_isPostIt</name></name> <operator>=</operator> <operator>!</operator><name><name>_beforeSpecialView</name><operator>.</operator><name>_isPostIt</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><operator>::</operator><name>SendMessage</name></name><argument_list>(<argument><expr><call><name><name>_pPublicInterface</name><operator>-&gt;</operator><name>getHSelf</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>WM_SIZE</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="line">// Distraction Free mode uses full screen mode + post-it mode + setting padding on the both left &amp; right sides.</comment>
<comment type="line">// In order to keep the coherence of data, when full screen mode or (and) post-it mode is (are) active,</comment>
<comment type="line">// Distraction Free mode should be innaccible, and vice versa.</comment>
<function><type><name>void</name></type> <name><name>Notepad_plus</name><operator>::</operator><name>distractionFreeToggle</name></name><parameter_list>()</parameter_list>
<block>{<block_content>
	<comment type="line">// Toggle Distraction Free Mode</comment>
	<expr_stmt><expr><call><name>fullScreenToggle</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>postItToggle</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// Get padding info</comment>
	<decl_stmt><decl><type><specifier>const</specifier> <name>ScintillaViewParams</name><modifier>&amp;</modifier></type> <name>svp</name> <init>= <expr><call><name><name>NppParameters</name><operator>::</operator><name>getInstance</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getSVP</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>paddingLeft</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>paddingRight</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	

	<comment type="line">// Enable or disable Distraction Free Mode</comment>
	<if_stmt><if>if <condition>(<expr><name><name>_beforeSpecialView</name><operator>.</operator><name>_isDistractionFree</name></name></expr>)</condition> <comment type="line">// disable it</comment>
	<block>{<block_content>
		<comment type="line">// restore another view if 2 views mode was on</comment>
		<if_stmt><if>if <condition>(<expr><name><name>_beforeSpecialView</name><operator>.</operator><name>_was2ViewModeOn</name></name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>showView</name><argument_list>(<argument><expr><call><name>otherView</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>_beforeSpecialView</name><operator>.</operator><name>_was2ViewModeOn</name></name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<comment type="line">// restore dockable panels</comment>
		<for>for <control>(<init><decl><type><name>auto</name></type> <name>i</name> <range>: <expr><name><name>_beforeSpecialView</name><operator>.</operator><name>_pVisibleDockingContainers</name></name></expr></range></decl></init>)</control>
		<block>{<block_content>
			<expr_stmt><expr><call><name><name>i</name><operator>-&gt;</operator><name>display</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></for>
		<expr_stmt><expr><call><name><name>_dockingManager</name><operator>.</operator><name>resize</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

		<comment type="line">// restore padding</comment>
		<expr_stmt><expr><name>paddingLeft</name> <operator>=</operator> <name><name>svp</name><operator>.</operator><name>_paddingLeft</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name>paddingRight</name> <operator>=</operator> <name><name>svp</name><operator>.</operator><name>_paddingRight</name></name></expr>;</expr_stmt>

		<comment type="line">// hide restore button</comment>
		<expr_stmt><expr><call><name><name>_restoreButton</name><operator>.</operator><name>setButtonStatus</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>_restoreButton</name><operator>.</operator><name>display</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else <comment type="line">// enable it</comment>
	<block>{<block_content>
		<comment type="line">// check if 2 views mode is on</comment>
		<decl_stmt><decl><type><name>ScintillaEditView</name> <modifier>&amp;</modifier></type> <name>nonFocusedView</name> <init>= <expr><ternary><condition><expr><operator>(</operator><call><name>otherView</name><argument_list>()</argument_list></call> <operator>==</operator> <name>MAIN_VIEW</name><operator>)</operator></expr> ?</condition><then> <expr><name>_mainEditView</name></expr> </then><else>: <expr><name>_subEditView</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if <condition>(<expr><call><name><name>nonFocusedView</name><operator>.</operator><name>isVisible</name></name><argument_list>()</argument_list></call></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>hideView</name><argument_list>(<argument><expr><call><name>otherView</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>_beforeSpecialView</name><operator>.</operator><name>_was2ViewModeOn</name></name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
		</block_content>}</block></if>
		<else>else
		<block>{<block_content>
			<expr_stmt><expr><name><name>_beforeSpecialView</name><operator>.</operator><name>_was2ViewModeOn</name></name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>

		<comment type="line">// check if any dockable panel is visible</comment>
		<decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>DockingCont</name><modifier>*</modifier></expr></argument>&gt;</argument_list></name> <modifier>&amp;</modifier></type> <name>container</name> <init>= <expr><call><name><name>_dockingManager</name><operator>.</operator><name>getContainerInfo</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>_beforeSpecialView</name><operator>.</operator><name>_pVisibleDockingContainers</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<for>for <control>(<init><decl><type><name>auto</name></type> <name>i</name> <range>: <expr><name>container</name></expr></range></decl></init>)</control>
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><call><name><name>i</name><operator>-&gt;</operator><name>isVisible</name></name><argument_list>()</argument_list></call></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><call><name><name>_beforeSpecialView</name><operator>.</operator><name>_pVisibleDockingContainers</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></for>
		
		<for>for <control>(<init><decl><type><name>auto</name></type> <name>i</name> <range>: <expr><name><name>_beforeSpecialView</name><operator>.</operator><name>_pVisibleDockingContainers</name></name></expr></range></decl></init>)</control>
		<block>{<block_content>
			<expr_stmt><expr><call><name><name>i</name><operator>-&gt;</operator><name>display</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></for>
		<expr_stmt><expr><call><name><name>_dockingManager</name><operator>.</operator><name>resize</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

		<comment type="line">// set padding</comment>
		<expr_stmt><expr><name>paddingLeft</name> <operator>=</operator> <name>paddingRight</name> <operator>=</operator> <call><name><name>svp</name><operator>.</operator><name>getDistractionFreePadding</name></name><argument_list>(<argument><expr><call><name><name>_pEditView</name><operator>-&gt;</operator><name>getWidth</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="line">// set state of restore button (it's already shown by fullScreen &amp; postIt toggling)</comment>
		<expr_stmt><expr><call><name><name>_restoreButton</name><operator>.</operator><name>setButtonStatus</name></name><argument_list>(<argument><expr><name>buttonStatus_distractionFree</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<expr_stmt><expr><name><name>_beforeSpecialView</name><operator>.</operator><name>_isDistractionFree</name></name> <operator>=</operator> <operator>!</operator><name><name>_beforeSpecialView</name><operator>.</operator><name>_isDistractionFree</name></name></expr>;</expr_stmt>

	<comment type="line">// set Distraction Free Mode paddin or restore the normal padding</comment>
	<expr_stmt><expr><call><name><name>_pEditView</name><operator>-&gt;</operator><name>execute</name></name><argument_list>(<argument><expr><name>SCI_SETMARGINLEFT</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>paddingLeft</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name>_pEditView</name><operator>-&gt;</operator><name>execute</name></name><argument_list>(<argument><expr><name>SCI_SETMARGINRIGHT</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>paddingRight</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name><name>Notepad_plus</name><operator>::</operator><name>doSynScorll</name></name><parameter_list>(<parameter><decl><type><name>HWND</name></type> <name>whichView</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>intptr_t</name></type> <name>column</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>intptr_t</name></type> <name>line</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ScintillaEditView</name> <modifier>*</modifier></type><name>pView</name></decl>;</decl_stmt>

	<comment type="line">// var for Line</comment>
	<decl_stmt><decl><type><name>intptr_t</name></type> <name>mainCurrentLine</name></decl>, <decl><type ref="prev"/><name>subCurrentLine</name></decl>;</decl_stmt>

	<comment type="line">// var for Column</comment>
	<decl_stmt><decl><type><name>intptr_t</name></type> <name>mxoffset</name></decl>, <decl><type ref="prev"/><name>sxoffset</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>intptr_t</name></type> <name>pixel</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>intptr_t</name></type> <name>mainColumn</name></decl>, <decl><type ref="prev"/><name>subColumn</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>whichView</name> <operator>==</operator> <call><name><name>_mainEditView</name><operator>.</operator><name>getHSelf</name></name><argument_list>()</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>_syncInfo</name><operator>.</operator><name>_isSynScollV</name></name></expr>)</condition>
		<block>{<block_content>
			<comment type="line">// Compute for Line</comment>
			<expr_stmt><expr><name>mainCurrentLine</name> <operator>=</operator> <call><name><name>_mainEditView</name><operator>.</operator><name>execute</name></name><argument_list>(<argument><expr><name>SCI_GETFIRSTVISIBLELINE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>subCurrentLine</name> <operator>=</operator> <call><name><name>_subEditView</name><operator>.</operator><name>execute</name></name><argument_list>(<argument><expr><name>SCI_GETFIRSTVISIBLELINE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>line</name> <operator>=</operator> <name>mainCurrentLine</name> <operator>-</operator> <name><name>_syncInfo</name><operator>.</operator><name>_line</name></name> <operator>-</operator> <name>subCurrentLine</name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>_syncInfo</name><operator>.</operator><name>_isSynScollH</name></name></expr>)</condition>
		<block>{<block_content>
			<comment type="line">// Compute for Column</comment>
			<expr_stmt><expr><name>mxoffset</name> <operator>=</operator> <call><name><name>_mainEditView</name><operator>.</operator><name>execute</name></name><argument_list>(<argument><expr><name>SCI_GETXOFFSET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>pixel</name> <operator>=</operator> <call><name><name>_mainEditView</name><operator>.</operator><name>execute</name></name><argument_list>(<argument><expr><name>SCI_TEXTWIDTH</name></expr></argument>, <argument><expr><name>STYLE_DEFAULT</name></expr></argument>, <argument><expr><cast type="reinterpret">reinterpret_cast<argument_list type="generic">&lt;<argument><expr><name>LPARAM</name></expr></argument>&gt;</argument_list><argument_list>(<argument><expr><literal type="string">"P"</literal></expr></argument>)</argument_list></cast></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>mainColumn</name> <operator>=</operator> <name>mxoffset</name><operator>/</operator><name>pixel</name></expr>;</expr_stmt>

			<expr_stmt><expr><name>sxoffset</name> <operator>=</operator> <call><name><name>_subEditView</name><operator>.</operator><name>execute</name></name><argument_list>(<argument><expr><name>SCI_GETXOFFSET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>pixel</name> <operator>=</operator> <call><name><name>_subEditView</name><operator>.</operator><name>execute</name></name><argument_list>(<argument><expr><name>SCI_TEXTWIDTH</name></expr></argument>, <argument><expr><name>STYLE_DEFAULT</name></expr></argument>, <argument><expr><cast type="reinterpret">reinterpret_cast<argument_list type="generic">&lt;<argument><expr><name>LPARAM</name></expr></argument>&gt;</argument_list><argument_list>(<argument><expr><literal type="string">"P"</literal></expr></argument>)</argument_list></cast></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>subColumn</name> <operator>=</operator> <name>sxoffset</name><operator>/</operator><name>pixel</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>column</name> <operator>=</operator> <name>mainColumn</name> <operator>-</operator> <name><name>_syncInfo</name><operator>.</operator><name>_column</name></name> <operator>-</operator> <name>subColumn</name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><name>pView</name> <operator>=</operator> <operator>&amp;</operator><name>_subEditView</name></expr>;</expr_stmt>
	</block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><name>whichView</name> <operator>==</operator> <call><name><name>_subEditView</name><operator>.</operator><name>getHSelf</name></name><argument_list>()</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>_syncInfo</name><operator>.</operator><name>_isSynScollV</name></name></expr>)</condition>
		<block>{<block_content>
			<comment type="line">// Compute for Line</comment>
			<expr_stmt><expr><name>mainCurrentLine</name> <operator>=</operator> <call><name><name>_mainEditView</name><operator>.</operator><name>execute</name></name><argument_list>(<argument><expr><name>SCI_GETFIRSTVISIBLELINE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>subCurrentLine</name> <operator>=</operator> <call><name><name>_subEditView</name><operator>.</operator><name>execute</name></name><argument_list>(<argument><expr><name>SCI_GETFIRSTVISIBLELINE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>line</name> <operator>=</operator> <name>subCurrentLine</name> <operator>+</operator> <name><name>_syncInfo</name><operator>.</operator><name>_line</name></name> <operator>-</operator> <name>mainCurrentLine</name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>_syncInfo</name><operator>.</operator><name>_isSynScollH</name></name></expr>)</condition>
		<block>{<block_content>
			<comment type="line">// Compute for Column</comment>
			<expr_stmt><expr><name>mxoffset</name> <operator>=</operator> <call><name><name>_mainEditView</name><operator>.</operator><name>execute</name></name><argument_list>(<argument><expr><name>SCI_GETXOFFSET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>pixel</name> <operator>=</operator> <call><name><name>_mainEditView</name><operator>.</operator><name>execute</name></name><argument_list>(<argument><expr><name>SCI_TEXTWIDTH</name></expr></argument>, <argument><expr><name>STYLE_DEFAULT</name></expr></argument>, <argument><expr><cast type="reinterpret">reinterpret_cast<argument_list type="generic">&lt;<argument><expr><name>LPARAM</name></expr></argument>&gt;</argument_list><argument_list>(<argument><expr><literal type="string">"P"</literal></expr></argument>)</argument_list></cast></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>mainColumn</name> <operator>=</operator> <name>mxoffset</name><operator>/</operator><name>pixel</name></expr>;</expr_stmt>

			<expr_stmt><expr><name>sxoffset</name> <operator>=</operator> <call><name><name>_subEditView</name><operator>.</operator><name>execute</name></name><argument_list>(<argument><expr><name>SCI_GETXOFFSET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>pixel</name> <operator>=</operator> <call><name><name>_subEditView</name><operator>.</operator><name>execute</name></name><argument_list>(<argument><expr><name>SCI_TEXTWIDTH</name></expr></argument>, <argument><expr><name>STYLE_DEFAULT</name></expr></argument>, <argument><expr><cast type="reinterpret">reinterpret_cast<argument_list type="generic">&lt;<argument><expr><name>LPARAM</name></expr></argument>&gt;</argument_list><argument_list>(<argument><expr><literal type="string">"P"</literal></expr></argument>)</argument_list></cast></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>subColumn</name> <operator>=</operator> <name>sxoffset</name><operator>/</operator><name>pixel</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>column</name> <operator>=</operator> <name>subColumn</name> <operator>+</operator> <name><name>_syncInfo</name><operator>.</operator><name>_column</name></name> <operator>-</operator> <name>mainColumn</name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><name>pView</name> <operator>=</operator> <operator>&amp;</operator><name>_mainEditView</name></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else<block type="pseudo"><block_content>
		<return>return;</return></block_content></block></else></if_stmt>

	<expr_stmt><expr><call><name><name>pView</name><operator>-&gt;</operator><name>scroll</name></name><argument_list>(<argument><expr><name>column</name></expr></argument>, <argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name><name>Notepad_plus</name><operator>::</operator><name>getIntegralDockingData</name></name><parameter_list>(<parameter><decl><type><name>tTbData</name> <modifier>&amp;</modifier></type> <name>dockData</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>&amp;</modifier></type> <name>iCont</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>&amp;</modifier></type> <name>isVisible</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>DockingManagerData</name> <modifier>&amp;</modifier></type> <name>dockingData</name> <init>= <expr><operator>(</operator><name>DockingManagerData</name> <operator>&amp;</operator><operator>)</operator><operator>(</operator><call><name><name>NppParameters</name><operator>::</operator><name>getInstance</name></name><argument_list>()</argument_list></call><operator>)</operator><operator>.</operator><call><name>getNppGUI</name><argument_list>()</argument_list></call><operator>.</operator><name>_dockingData</name></expr></init></decl>;</decl_stmt>

	<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>len</name> <init>= <expr><call><name><name>dockingData</name><operator>.</operator><name>_pluginDockInfo</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr> ;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
	<block>{<block_content>
		<decl_stmt><decl><type><specifier>const</specifier> <name>PluginDlgDockingInfo</name> <modifier>&amp;</modifier></type> <name>pddi</name> <init>= <expr><name><name>dockingData</name><operator>.</operator><name>_pluginDockInfo</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>wcsicmp</name><argument_list>(<argument><expr><call><name><name>pddi</name><operator>.</operator><name>_name</name><operator>.</operator><name>c_str</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>dockData</name><operator>.</operator><name>pszModuleName</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>pddi</name><operator>.</operator><name>_internalID</name></name> <operator>==</operator> <name><name>dockData</name><operator>.</operator><name>dlgID</name></name><operator>)</operator></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name>iCont</name>				<operator>=</operator> <name><name>pddi</name><operator>.</operator><name>_currContainer</name></name></expr>;</expr_stmt>
			<expr_stmt><expr><name>isVisible</name>			<operator>=</operator> <name><name>pddi</name><operator>.</operator><name>_isVisible</name></name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>dockData</name><operator>.</operator><name>iPrevCont</name></name>	<operator>=</operator> <name><name>pddi</name><operator>.</operator><name>_prevContainer</name></name></expr>;</expr_stmt>

			<if_stmt><if>if <condition>(<expr><name><name>dockData</name><operator>.</operator><name>iPrevCont</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
			<block>{<block_content>
				<decl_stmt><decl><type><name>int</name></type> <name>cont</name> <init>= <expr><operator>(</operator><ternary><condition><expr><name><name>pddi</name><operator>.</operator><name>_currContainer</name></name> <operator>&lt;</operator> <name>DOCKCONT_MAX</name></expr> ?</condition><then> <expr><name><name>pddi</name><operator>.</operator><name>_prevContainer</name></name></expr> </then><else>: <expr><name><name>pddi</name><operator>.</operator><name>_currContainer</name></name></expr></else></ternary><operator>)</operator></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>RECT</name></type> <name>rc</name></decl>;</decl_stmt>
				<if_stmt><if>if <condition>(<expr><call><name><name>dockingData</name><operator>.</operator><name>getFloatingRCFrom</name></name><argument_list>(<argument><expr><name>cont</name></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><name><name>dockData</name><operator>.</operator><name>rcFloat</name></name> <operator>=</operator> <name>rc</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
			</block_content>}</block></if></if_stmt>
			<return>return <expr><literal type="boolean">true</literal></expr>;</return>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>
	<return>return <expr><literal type="boolean">false</literal></expr>;</return>
</block_content>}</block></function>


<function><type><name>void</name></type> <name><name>Notepad_plus</name><operator>::</operator><name>getCurrentOpenedFiles</name></name><parameter_list>(<parameter><decl><type><name>Session</name> <modifier>&amp;</modifier></type> <name>session</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>includUntitledDoc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name><name>_mainEditView</name><operator>.</operator><name>saveCurrentPos</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>	<comment type="line">//save position so itll be correct in the session</comment>
	<expr_stmt><expr><call><name><name>_subEditView</name><operator>.</operator><name>saveCurrentPos</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>	<comment type="line">//both views</comment>
	<expr_stmt><expr><name><name>session</name><operator>.</operator><name>_activeView</name></name> <operator>=</operator> <call><name>currentView</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>session</name><operator>.</operator><name>_activeMainIndex</name></name> <operator>=</operator> <call><name><name>_mainDocTab</name><operator>.</operator><name>getCurrentTabIndex</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>session</name><operator>.</operator><name>_activeSubIndex</name></name> <operator>=</operator> <call><name><name>_subDocTab</name><operator>.</operator><name>getCurrentTabIndex</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<comment type="line">//Use _invisibleEditView to temporarily open documents to retrieve markers</comment>
	<decl_stmt><decl><type><name>Document</name></type> <name>oldDoc</name> <init>= <expr><call><name><name>_invisibleEditView</name><operator>.</operator><name>execute</name></name><argument_list>(<argument><expr><name>SCI_GETDOCPOINTER</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>nbElem</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>DocTabView</name><modifier>*</modifier></type> <name><name>docTab</name><index>[<expr><name>nbElem</name></expr>]</index></name><argument_list>{}</argument_list></decl>;</decl_stmt>
	<expr_stmt><expr><name><name>docTab</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>&amp;</operator><name>_mainDocTab</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>docTab</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>&amp;</operator><name>_subDocTab</name></expr>;</expr_stmt>
	<for>for <control>(<init><decl><type><name>size_t</name></type> <name>k</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>nbElem</name></expr>;</condition> <incr><expr><operator>++</operator><name>k</name></expr></incr>)</control>
	<block>{<block_content>
		<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>len</name> <init>= <expr><name><name>docTab</name><index>[<expr><name>k</name></expr>]</index></name><operator>-&gt;</operator><call><name>nbItem</name><argument_list>()</argument_list></call></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr> ;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
		<block>{<block_content>
			<decl_stmt><decl><type><name>BufferID</name></type> <name>bufID</name> <init>= <expr><name><name>docTab</name><index>[<expr><name>k</name></expr>]</index></name><operator>-&gt;</operator><call><name>getBufferByIndex</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>ScintillaEditView</name> <modifier>*</modifier></type><name>editView</name> <init>= <expr><ternary><condition><expr><name>k</name> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><operator>&amp;</operator><name>_mainEditView</name></expr> </then><else>: <expr><operator>&amp;</operator><name>_subEditView</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>size_t</name></type> <name>activeIndex</name> <init>= <expr><ternary><condition><expr><name>k</name> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name><name>session</name><operator>.</operator><name>_activeMainIndex</name></name></expr> </then><else>: <expr><name><name>session</name><operator>.</operator><name>_activeSubIndex</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>sessionFileInfo</name></expr></argument>&gt;</argument_list></name> <modifier>*</modifier></type><name>viewFiles</name> <init>= <expr><operator>(</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>sessionFileInfo</name></expr></argument>&gt;</argument_list></name> <operator>*</operator><operator>)</operator><operator>(</operator><ternary><condition><expr><name>k</name> <operator>==</operator> <literal type="number">0</literal></expr>?</condition><then><expr><operator>&amp;</operator><operator>(</operator><name><name>session</name><operator>.</operator><name>_mainViewFiles</name></name><operator>)</operator></expr></then><else>:<expr><operator>&amp;</operator><operator>(</operator><name><name>session</name><operator>.</operator><name>_subViewFiles</name></name><operator>)</operator></expr></else></ternary><operator>)</operator></expr></init></decl>;</decl_stmt>

			<decl_stmt><decl><type><name>Buffer</name> <modifier>*</modifier></type> <name>buf</name> <init>= <expr><call><name><name>MainFileManager</name><operator>.</operator><name>getBufferByID</name></name><argument_list>(<argument><expr><name>bufID</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

			<if_stmt><if>if <condition>(<expr><call><name><name>buf</name><operator>-&gt;</operator><name>isUntitled</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>buf</name><operator>-&gt;</operator><name>docLength</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
				<continue>continue;</continue></block_content></block></if></if_stmt>

			<if_stmt><if>if <condition>(<expr><operator>!</operator><name>includUntitledDoc</name></expr>)</condition><block type="pseudo"><block_content>
				<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>PathFileExists</name><argument_list>(<argument><expr><call><name><name>buf</name><operator>-&gt;</operator><name>getFullPathName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
					<continue>continue;</continue></block_content></block></if></if_stmt></block_content></block></if></if_stmt>


			<decl_stmt><decl><type><name>generic_string</name></type>	<name>languageName</name> <init>= <expr><call><name>getLangFromMenu</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><specifier>const</specifier> <name>TCHAR</name> <modifier>*</modifier></type><name>langName</name> <init>= <expr><call><name><name>languageName</name><operator>.</operator><name>c_str</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>sessionFileInfo</name></type> <name>sfi</name><argument_list>(<argument><expr><call><name><name>buf</name><operator>-&gt;</operator><name>getFullPathName</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>langName</name></expr></argument>, <argument><expr><call><name><name>buf</name><operator>-&gt;</operator><name>getEncoding</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>buf</name><operator>-&gt;</operator><name>getUserReadOnly</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>buf</name><operator>-&gt;</operator><name>getPosition</name></name><argument_list>(<argument><expr><name>editView</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>buf</name><operator>-&gt;</operator><name>getBackupFileName</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>c_str</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>buf</name><operator>-&gt;</operator><name>getLastModifiedTimestamp</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>buf</name><operator>-&gt;</operator><name>getMapPosition</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>

			<expr_stmt><expr><name><name>sfi</name><operator>.</operator><name>_isMonitoring</name></name> <operator>=</operator> <call><name><name>buf</name><operator>-&gt;</operator><name>isMonitoringOn</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>sfi</name><operator>.</operator><name>_individualTabColour</name></name> <operator>=</operator> <name><name>docTab</name><index>[<expr><name>k</name></expr>]</index></name><operator>-&gt;</operator><call><name>getIndividualTabColour</name><argument_list>(<argument><expr><cast type="static">static_cast<argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></cast></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<expr_stmt><expr><call><name><name>_invisibleEditView</name><operator>.</operator><name>execute</name></name><argument_list>(<argument><expr><name>SCI_SETDOCPOINTER</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name><name>buf</name><operator>-&gt;</operator><name>getDocument</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<decl_stmt><decl><type><name>size_t</name></type> <name>maxLine</name> <init>= <expr><cast type="static">static_cast<argument_list type="generic">&lt;<argument><expr><name>size_t</name></expr></argument>&gt;</argument_list><argument_list>(<argument><expr><call><name><name>_invisibleEditView</name><operator>.</operator><name>execute</name></name><argument_list>(<argument><expr><name>SCI_GETLINECOUNT</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></cast></expr></init></decl>;</decl_stmt>

			<for>for <control>(<init><decl><type><name>size_t</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>maxLine</name></expr> ;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control>
			<block>{<block_content>
				<if_stmt><if>if <condition>(<expr><operator>(</operator><call><name><name>_invisibleEditView</name><operator>.</operator><name>execute</name></name><argument_list>(<argument><expr><name>SCI_MARKERGET</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>MARK_BOOKMARK</name><operator>)</operator><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
				<block>{<block_content>
					<expr_stmt><expr><call><name><name>sfi</name><operator>.</operator><name>_marks</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block></if></if_stmt>
			</block_content>}</block></for>

			<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <name>activeIndex</name></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><call><name><name>editView</name><operator>-&gt;</operator><name>getCurrentFoldStates</name></name><argument_list>(<argument><expr><name><name>sfi</name><operator>.</operator><name>_foldStates</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if>
			<else>else
			<block>{<block_content>
				<expr_stmt><expr><name><name>sfi</name><operator>.</operator><name>_foldStates</name></name> <operator>=</operator> <call><name><name>buf</name><operator>-&gt;</operator><name>getHeaderLineState</name></name><argument_list>(<argument><expr><name>editView</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></else></if_stmt>
			<expr_stmt><expr><call><name><name>viewFiles</name><operator>-&gt;</operator><name>push_back</name></name><argument_list>(<argument><expr><name>sfi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></for>
	</block_content>}</block></for>
	<expr_stmt><expr><call><name><name>_invisibleEditView</name><operator>.</operator><name>execute</name></name><argument_list>(<argument><expr><name>SCI_SETDOCPOINTER</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>oldDoc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name><name>Notepad_plus</name><operator>::</operator><name>str2Cliboard</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>generic_string</name> <modifier>&amp;</modifier></type> <name>str2cpy</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>str2Clipboard</name><argument_list>(<argument><expr><name>str2cpy</name></expr></argument>, <argument><expr><call><name><name>_pPublicInterface</name><operator>-&gt;</operator><name>getHSelf</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="line">//ONLY CALL IN CASE OF EMERGENCY: EXCEPTION</comment>
<comment type="line">//This function is destructive</comment>
<function><type><name>bool</name></type> <name><name>Notepad_plus</name><operator>::</operator><name>emergency</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>generic_string</name><modifier>&amp;</modifier></type> <name>emergencySavedDir</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name><operator>::</operator><name>CreateDirectory</name></name><argument_list>(<argument><expr><call><name><name>emergencySavedDir</name><operator>.</operator><name>c_str</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><call><name>dumpFiles</name><argument_list>(<argument><expr><call><name><name>emergencySavedDir</name><operator>.</operator><name>c_str</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"File"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name><name>Notepad_plus</name><operator>::</operator><name>dumpFiles</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>TCHAR</name> <modifier>*</modifier></type> <name>outdir</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>TCHAR</name> <modifier>*</modifier></type> <name>fileprefix</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="line">//start dumping unsaved files to recovery directory</comment>
	<decl_stmt><decl><type><name>bool</name></type> <name>somethingsaved</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name>somedirty</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>TCHAR</name></type> <name><name>savePath</name><index>[<expr><name>MAX_PATH</name></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="char">'\0'</literal></expr> }</block></expr></init></decl>;</decl_stmt>

	<comment type="line">//rescue primary</comment>
	<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>MainFileManager</name><operator>.</operator><name>getNbBuffers</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
	<block>{<block_content>
		<decl_stmt><decl><type><name>Buffer</name> <modifier>*</modifier></type> <name>docbuf</name> <init>= <expr><call><name><name>MainFileManager</name><operator>.</operator><name>getBufferByIndex</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>docbuf</name><operator>-&gt;</operator><name>isDirty</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>	<comment type="line">//skip saved documents</comment>
			<continue>continue;</continue></block_content></block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><name>somedirty</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

		<decl_stmt><decl><type><specifier>const</specifier> <name>TCHAR</name> <modifier>*</modifier></type> <name>unitext</name> <init>= <expr><ternary><condition><expr><operator>(</operator><call><name><name>docbuf</name><operator>-&gt;</operator><name>getUnicodeMode</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <name>uni8Bit</name><operator>)</operator></expr>?</condition><then><expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"_utf8"</literal></expr></argument>)</argument_list></call></expr></then><else>:<expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>wsprintf</name><argument_list>(<argument><expr><name>savePath</name></expr></argument>, <argument><expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"%s\\%s%03d%s.dump"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>outdir</name></expr></argument>, <argument><expr><name>fileprefix</name></expr></argument>, <argument><expr><cast type="static">static_cast<argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></cast></expr></argument>, <argument><expr><name>unitext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<decl_stmt><decl><type><name>SavingStatus</name></type> <name>res</name> <init>= <expr><call><name><name>MainFileManager</name><operator>.</operator><name>saveBuffer</name></name><argument_list>(<argument><expr><call><name><name>docbuf</name><operator>-&gt;</operator><name>getID</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>savePath</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><name>somethingsaved</name> <operator>|=</operator> <operator>(</operator><name>res</name> <operator>==</operator> <name><name>SavingStatus</name><operator>::</operator><name>SaveOK</name></name><operator>)</operator></expr>;</expr_stmt>
	</block_content>}</block></for>

	<return>return <expr><name>somethingsaved</name> <operator>||</operator> <operator>!</operator><name>somedirty</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name><name>Notepad_plus</name><operator>::</operator><name>drawTabbarColoursFromStylerArray</name></name><parameter_list>()</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Style</name> <modifier>*</modifier></type><name>stActText</name> <init>= <expr><call><name>getStyleFromName</name><argument_list>(<argument><expr><name>TABBAR_ACTIVETEXT</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><name>stActText</name> <operator>&amp;&amp;</operator> <cast type="static">static_cast<argument_list type="generic">&lt;<argument><expr><name>long</name></expr></argument>&gt;</argument_list><argument_list>(<argument><expr><name><name>stActText</name><operator>-&gt;</operator><name>_fgColor</name></name></expr></argument>)</argument_list></cast> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name><name>TabBarPlus</name><operator>::</operator><name>setColour</name></name><argument_list>(<argument><expr><name><name>stActText</name><operator>-&gt;</operator><name>_fgColor</name></name></expr></argument>, <argument><expr><name><name>TabBarPlus</name><operator>::</operator><name>activeText</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<decl_stmt><decl><type><name>Style</name> <modifier>*</modifier></type><name>stActfocusTop</name> <init>= <expr><call><name>getStyleFromName</name><argument_list>(<argument><expr><name>TABBAR_ACTIVEFOCUSEDINDCATOR</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><name>stActfocusTop</name> <operator>&amp;&amp;</operator> <cast type="static">static_cast<argument_list type="generic">&lt;<argument><expr><name>long</name></expr></argument>&gt;</argument_list><argument_list>(<argument><expr><name><name>stActfocusTop</name><operator>-&gt;</operator><name>_fgColor</name></name></expr></argument>)</argument_list></cast> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name><name>TabBarPlus</name><operator>::</operator><name>setColour</name></name><argument_list>(<argument><expr><name><name>stActfocusTop</name><operator>-&gt;</operator><name>_fgColor</name></name></expr></argument>, <argument><expr><name><name>TabBarPlus</name><operator>::</operator><name>activeFocusedTop</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<decl_stmt><decl><type><name>Style</name> <modifier>*</modifier></type><name>stActunfocusTop</name> <init>= <expr><call><name>getStyleFromName</name><argument_list>(<argument><expr><name>TABBAR_ACTIVEUNFOCUSEDINDCATOR</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><name>stActunfocusTop</name> <operator>&amp;&amp;</operator> <cast type="static">static_cast<argument_list type="generic">&lt;<argument><expr><name>long</name></expr></argument>&gt;</argument_list><argument_list>(<argument><expr><name><name>stActunfocusTop</name><operator>-&gt;</operator><name>_fgColor</name></name></expr></argument>)</argument_list></cast> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name><name>TabBarPlus</name><operator>::</operator><name>setColour</name></name><argument_list>(<argument><expr><name><name>stActunfocusTop</name><operator>-&gt;</operator><name>_fgColor</name></name></expr></argument>, <argument><expr><name><name>TabBarPlus</name><operator>::</operator><name>activeUnfocusedTop</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<decl_stmt><decl><type><name>Style</name> <modifier>*</modifier></type><name>stInact</name> <init>= <expr><call><name>getStyleFromName</name><argument_list>(<argument><expr><name>TABBAR_INACTIVETEXT</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><name>stInact</name> <operator>&amp;&amp;</operator> <cast type="static">static_cast<argument_list type="generic">&lt;<argument><expr><name>long</name></expr></argument>&gt;</argument_list><argument_list>(<argument><expr><name><name>stInact</name><operator>-&gt;</operator><name>_fgColor</name></name></expr></argument>)</argument_list></cast> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name><name>TabBarPlus</name><operator>::</operator><name>setColour</name></name><argument_list>(<argument><expr><name><name>stInact</name><operator>-&gt;</operator><name>_fgColor</name></name></expr></argument>, <argument><expr><name><name>TabBarPlus</name><operator>::</operator><name>inactiveText</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>stInact</name> <operator>&amp;&amp;</operator> <cast type="static">static_cast<argument_list type="generic">&lt;<argument><expr><name>long</name></expr></argument>&gt;</argument_list><argument_list>(<argument><expr><name><name>stInact</name><operator>-&gt;</operator><name>_bgColor</name></name></expr></argument>)</argument_list></cast> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name><name>TabBarPlus</name><operator>::</operator><name>setColour</name></name><argument_list>(<argument><expr><name><name>stInact</name><operator>-&gt;</operator><name>_bgColor</name></name></expr></argument>, <argument><expr><name><name>TabBarPlus</name><operator>::</operator><name>inactiveBg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name><name>Notepad_plus</name><operator>::</operator><name>drawAutocompleteColoursFromTheme</name></name><parameter_list>(<parameter><decl><type><name>COLORREF</name></type> <name>fgColor</name></decl></parameter>, <parameter><decl><type><name>COLORREF</name></type> <name>bgColor</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>bgColor</name> <operator>==</operator> <literal type="number">0xFFFFFF</literal></expr>)</condition>
	<block>{<block_content>
		<comment type="line">// default colors from PlatWin.cxx void ListBoxX::Draw(DRAWITEMSTRUCT *pDrawItem)</comment>
		<decl_stmt><decl><type><name>COLORREF</name></type> <name>autocompleteBg</name> <init>= <expr><call><name><operator>::</operator><name>GetSysColor</name></name><argument_list>(<argument><expr><name>COLOR_WINDOW</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>COLORREF</name></type> <name>selectedBg</name> <init>= <expr><call><name><operator>::</operator><name>GetSysColor</name></name><argument_list>(<argument><expr><name>COLOR_HIGHLIGHT</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>COLORREF</name></type> <name>autocompleteText</name> <init>= <expr><call><name><operator>::</operator><name>GetSysColor</name></name><argument_list>(<argument><expr><name>COLOR_WINDOWTEXT</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>COLORREF</name></type> <name>selectedText</name> <init>= <expr><call><name><operator>::</operator><name>GetSysColor</name></name><argument_list>(<argument><expr><name>COLOR_HIGHLIGHTTEXT</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><call><name><name>AutoCompletion</name><operator>::</operator><name>setColour</name></name><argument_list>(<argument><expr><name>autocompleteBg</name></expr></argument>, <argument><expr><name><name>AutoCompletion</name><operator>::</operator><name>AutocompleteColorIndex</name><operator>::</operator><name>autocompleteBg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>AutoCompletion</name><operator>::</operator><name>setColour</name></name><argument_list>(<argument><expr><name>selectedBg</name></expr></argument>, <argument><expr><name><name>AutoCompletion</name><operator>::</operator><name>AutocompleteColorIndex</name><operator>::</operator><name>selectedBg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>AutoCompletion</name><operator>::</operator><name>setColour</name></name><argument_list>(<argument><expr><name>autocompleteText</name></expr></argument>, <argument><expr><name><name>AutoCompletion</name><operator>::</operator><name>AutocompleteColorIndex</name><operator>::</operator><name>autocompleteText</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>AutoCompletion</name><operator>::</operator><name>setColour</name></name><argument_list>(<argument><expr><name>selectedText</name></expr></argument>, <argument><expr><name><name>AutoCompletion</name><operator>::</operator><name>AutocompleteColorIndex</name><operator>::</operator><name>selectedText</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="line">// default colors from CallTip.cxx CallTip::CallTip() noexcept</comment>
		<decl_stmt><decl><type><name>COLORREF</name></type> <name>colourBG</name> <init>= <expr><name>bgColor</name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>COLORREF</name></type> <name>colourUnSel</name> <init>= <expr><call><name>RGB</name><argument_list>(<argument><expr><literal type="number">0x80</literal></expr></argument>, <argument><expr><literal type="number">0x80</literal></expr></argument>, <argument><expr><literal type="number">0x80</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>COLORREF</name></type> <name>colourSel</name> <init>= <expr><call><name>RGB</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0x80</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><call><name><name>AutoCompletion</name><operator>::</operator><name>setColour</name></name><argument_list>(<argument><expr><name>colourBG</name></expr></argument>, <argument><expr><name><name>AutoCompletion</name><operator>::</operator><name>AutocompleteColorIndex</name><operator>::</operator><name>calltipBg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>AutoCompletion</name><operator>::</operator><name>setColour</name></name><argument_list>(<argument><expr><name>colourUnSel</name></expr></argument>, <argument><expr><name><name>AutoCompletion</name><operator>::</operator><name>AutocompleteColorIndex</name><operator>::</operator><name>calltipText</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>AutoCompletion</name><operator>::</operator><name>setColour</name></name><argument_list>(<argument><expr><name>colourSel</name></expr></argument>, <argument><expr><name><name>AutoCompletion</name><operator>::</operator><name>AutocompleteColorIndex</name><operator>::</operator><name>calltipHighlight</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<decl_stmt><decl><type><name>int</name></type> <name>rbv</name> <init>= <expr><call><name>GetRValue</name><argument_list>(<argument><expr><name>bgColor</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>gbv</name> <init>= <expr><call><name>GetGValue</name><argument_list>(<argument><expr><name>bgColor</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>bbv</name> <init>= <expr><call><name>GetBValue</name><argument_list>(<argument><expr><name>bgColor</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>int</name></type> <name>rfv</name> <init>= <expr><call><name>GetRValue</name><argument_list>(<argument><expr><name>fgColor</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>gfv</name> <init>= <expr><call><name>GetGValue</name><argument_list>(<argument><expr><name>fgColor</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>bfv</name> <init>= <expr><call><name>GetBValue</name><argument_list>(<argument><expr><name>fgColor</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>COLORREF</name></type> <name>bgDarker</name> <init>= <expr><call><name>RGB</name><argument_list>(<argument><expr><ternary><condition><expr><name>rbv</name> <operator>-</operator> <literal type="number">20</literal> <operator>&lt;=</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name>rbv</name> <operator>-</operator> <literal type="number">20</literal></expr></else></ternary></expr></argument>, <argument><expr><ternary><condition><expr><name>gbv</name> <operator>-</operator> <literal type="number">20</literal> <operator>&lt;=</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name>gbv</name> <operator>-</operator> <literal type="number">20</literal></expr></else></ternary></expr></argument>, <argument><expr><ternary><condition><expr><name>bbv</name> <operator>-</operator> <literal type="number">20</literal> <operator>&lt;=</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name>bbv</name> <operator>-</operator> <literal type="number">20</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>bgColor</name> <operator>==</operator> <call><name>RGB</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <comment type="line">// if the bg is pure black</comment>
		<expr_stmt><expr><name>bgDarker</name> <operator>=</operator> <call><name>RGB</name><argument_list>(<argument><expr><literal type="number">20</literal></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt> <comment type="line">// make bgDarker lighter for distinguishing between both</comment>

	<decl_stmt><decl><type><name>COLORREF</name></type> <name>fgDarker</name> <init>= <expr><call><name>RGB</name><argument_list>(<argument><expr><ternary><condition><expr><name>rfv</name> <operator>-</operator> <literal type="number">20</literal> <operator>&lt;=</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name>rfv</name> <operator>-</operator> <literal type="number">20</literal></expr></else></ternary></expr></argument>, <argument><expr><ternary><condition><expr><name>gfv</name> <operator>-</operator> <literal type="number">20</literal> <operator>&lt;=</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name>gfv</name> <operator>-</operator> <literal type="number">20</literal></expr></else></ternary></expr></argument>, <argument><expr><ternary><condition><expr><name>bfv</name> <operator>-</operator> <literal type="number">20</literal> <operator>&lt;=</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name>bfv</name> <operator>-</operator> <literal type="number">20</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>COLORREF</name></type> <name>fgLigher</name> <init>= <expr><call><name>RGB</name><argument_list>(<argument><expr><ternary><condition><expr><name>rfv</name> <operator>+</operator> <literal type="number">20</literal> <operator>&gt;=</operator> <literal type="number">255</literal></expr> ?</condition><then> <expr><literal type="number">255</literal></expr> </then><else>: <expr><name>rfv</name> <operator>+</operator> <literal type="number">20</literal></expr></else></ternary></expr></argument>, <argument><expr><ternary><condition><expr><name>gfv</name> <operator>+</operator> <literal type="number">20</literal> <operator>&gt;=</operator> <literal type="number">255</literal></expr> ?</condition><then> <expr><literal type="number">255</literal></expr> </then><else>: <expr><name>gfv</name> <operator>+</operator> <literal type="number">20</literal></expr></else></ternary></expr></argument>, <argument><expr><ternary><condition><expr><name>bfv</name> <operator>+</operator> <literal type="number">20</literal> <operator>&gt;=</operator> <literal type="number">255</literal></expr> ?</condition><then> <expr><literal type="number">255</literal></expr> </then><else>: <expr><name>bfv</name> <operator>+</operator> <literal type="number">20</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name><name>AutoCompletion</name><operator>::</operator><name>setColour</name></name><argument_list>(<argument><expr><name>bgDarker</name></expr></argument>, <argument><expr><name><name>AutoCompletion</name><operator>::</operator><name>AutocompleteColorIndex</name><operator>::</operator><name>autocompleteBg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name>AutoCompletion</name><operator>::</operator><name>setColour</name></name><argument_list>(<argument><expr><name>bgColor</name></expr></argument>, <argument><expr><name><name>AutoCompletion</name><operator>::</operator><name>AutocompleteColorIndex</name><operator>::</operator><name>selectedBg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name>AutoCompletion</name><operator>::</operator><name>setColour</name></name><argument_list>(<argument><expr><name>fgDarker</name></expr></argument>, <argument><expr><name><name>AutoCompletion</name><operator>::</operator><name>AutocompleteColorIndex</name><operator>::</operator><name>autocompleteText</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name>AutoCompletion</name><operator>::</operator><name>setColour</name></name><argument_list>(<argument><expr><name>fgColor</name></expr></argument>, <argument><expr><name><name>AutoCompletion</name><operator>::</operator><name>AutocompleteColorIndex</name><operator>::</operator><name>selectedText</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name><name>AutoCompletion</name><operator>::</operator><name>setColour</name></name><argument_list>(<argument><expr><name>bgDarker</name></expr></argument>, <argument><expr><name><name>AutoCompletion</name><operator>::</operator><name>AutocompleteColorIndex</name><operator>::</operator><name>calltipBg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name>AutoCompletion</name><operator>::</operator><name>setColour</name></name><argument_list>(<argument><expr><name>fgDarker</name></expr></argument>, <argument><expr><name><name>AutoCompletion</name><operator>::</operator><name>AutocompleteColorIndex</name><operator>::</operator><name>calltipText</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name>AutoCompletion</name><operator>::</operator><name>setColour</name></name><argument_list>(<argument><expr><name>fgLigher</name></expr></argument>, <argument><expr><name><name>AutoCompletion</name><operator>::</operator><name>AutocompleteColorIndex</name><operator>::</operator><name>calltipHighlight</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	
</block_content>}</block></function>

<function><type><name>void</name></type> <name><name>Notepad_plus</name><operator>::</operator><name>drawDocumentMapColoursFromStylerArray</name></name><parameter_list>()</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Style</name><modifier>*</modifier></type> <name>docMap</name> <init>= <expr><call><name>getStyleFromName</name><argument_list>(<argument><expr><name>VIEWZONE_DOCUMENTMAP</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><name>docMap</name> <operator>&amp;&amp;</operator> <cast type="static">static_cast<argument_list type="generic">&lt;<argument><expr><name>long</name></expr></argument>&gt;</argument_list><argument_list>(<argument><expr><name><name>docMap</name><operator>-&gt;</operator><name>_fgColor</name></name></expr></argument>)</argument_list></cast> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name><name>ViewZoneDlg</name><operator>::</operator><name>setColour</name></name><argument_list>(<argument><expr><name><name>docMap</name><operator>-&gt;</operator><name>_fgColor</name></name></expr></argument>, <argument><expr><name><name>ViewZoneDlg</name><operator>::</operator><name>ViewZoneColorIndex</name><operator>::</operator><name>focus</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>docMap</name> <operator>&amp;&amp;</operator> <cast type="static">static_cast<argument_list type="generic">&lt;<argument><expr><name>long</name></expr></argument>&gt;</argument_list><argument_list>(<argument><expr><name><name>docMap</name><operator>-&gt;</operator><name>_bgColor</name></name></expr></argument>)</argument_list></cast> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name><name>ViewZoneDlg</name><operator>::</operator><name>setColour</name></name><argument_list>(<argument><expr><name><name>docMap</name><operator>-&gt;</operator><name>_bgColor</name></name></expr></argument>, <argument><expr><name><name>ViewZoneDlg</name><operator>::</operator><name>ViewZoneColorIndex</name><operator>::</operator><name>frost</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name><name>Notepad_plus</name><operator>::</operator><name>prepareBufferChangedDialog</name></name><parameter_list>(<parameter><decl><type><name>Buffer</name> <modifier>*</modifier></type> <name>buffer</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="line">// immediately show window if it was minimized before</comment>
	<if_stmt><if>if <condition>(<expr><call><name><operator>::</operator><name>IsIconic</name></name><argument_list>(<argument><expr><call><name><name>_pPublicInterface</name><operator>-&gt;</operator><name>getHSelf</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name><operator>::</operator><name>ShowWindow</name></name><argument_list>(<argument><expr><call><name><name>_pPublicInterface</name><operator>-&gt;</operator><name>getHSelf</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>SW_RESTORE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="line">// switch to the file that changed</comment>
	<decl_stmt><decl><type><name>int</name></type> <name>index</name> <init>= <expr><call><name><name>_pDocTab</name><operator>-&gt;</operator><name>getIndexByBuffer</name></name><argument_list>(<argument><expr><call><name><name>buffer</name><operator>-&gt;</operator><name>getID</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>iView</name> <init>= <expr><call><name>currentView</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><name>index</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>iView</name> <operator>=</operator> <call><name>otherView</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<expr_stmt><expr><call><name>activateBuffer</name><argument_list>(<argument><expr><call><name><name>buffer</name><operator>-&gt;</operator><name>getID</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>iView</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>	<comment type="line">//activate the buffer in the first view possible</comment>

	<comment type="line">// prevent flickering issue by "manually" clicking and activating the _pEditView</comment>
	<comment type="line">// (mouse events seem to get lost / improperly handled when showing the dialog)</comment>
	<decl_stmt><decl><type><name>auto</name></type> <name>curPos</name> <init>= <expr><call><name><name>_pEditView</name><operator>-&gt;</operator><name>execute</name></name><argument_list>(<argument><expr><name>SCI_GETCURRENTPOS</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name><operator>::</operator><name>PostMessage</name></name><argument_list>(<argument><expr><call><name><name>_pEditView</name><operator>-&gt;</operator><name>getHSelf</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>WM_LBUTTONDOWN</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><operator>::</operator><name>PostMessage</name></name><argument_list>(<argument><expr><call><name><name>_pEditView</name><operator>-&gt;</operator><name>getHSelf</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>WM_LBUTTONUP</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><operator>::</operator><name>PostMessage</name></name><argument_list>(<argument><expr><call><name><name>_pEditView</name><operator>-&gt;</operator><name>getHSelf</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>SCI_SETSEL</name></expr></argument>, <argument><expr><name>curPos</name></expr></argument>, <argument><expr><name>curPos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name><name>Notepad_plus</name><operator>::</operator><name>notifyBufferChanged</name></name><parameter_list>(<parameter><decl><type><name>Buffer</name> <modifier>*</modifier></type> <name>buffer</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mask</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>NppParameters</name><modifier>&amp;</modifier></type> <name>nppParam</name> <init>= <expr><call><name><name>NppParameters</name><operator>::</operator><name>getInstance</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>NppGUI</name> <modifier>&amp;</modifier></type> <name>nppGUI</name> <init>= <expr><call><name><name>nppParam</name><operator>.</operator><name>getNppGUI</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name><name>_mainEditView</name><operator>.</operator><name>bufferUpdated</name></name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name>_subEditView</name><operator>.</operator><name>bufferUpdated</name></name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name>_mainDocTab</name><operator>.</operator><name>bufferUpdated</name></name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name>_subDocTab</name><operator>.</operator><name>bufferUpdated</name></name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>bool</name></type> <name>mainActive</name> <init>= <expr><operator>(</operator><call><name><name>_mainEditView</name><operator>.</operator><name>getCurrentBuffer</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name>buffer</name><operator>)</operator></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name>subActive</name> <init>= <expr><operator>(</operator><call><name><name>_subEditView</name><operator>.</operator><name>getCurrentBuffer</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name>buffer</name><operator>)</operator></expr></init></decl>;</decl_stmt>

	<comment type="line">//Only event that applies to non-active Buffers</comment>
	<if_stmt><if>if <condition>(<expr><name>mask</name> <operator>&amp;</operator> <name>BufferChangeStatus</name></expr>)</condition>
	<block>{<block_content>	<comment type="line">//reload etc</comment>
		<switch>switch<condition>(<expr><call><name><name>buffer</name><operator>-&gt;</operator><name>getStatus</name></name><argument_list>()</argument_list></call></expr>)</condition>
		<block>{<block_content>
			<case>case <expr><name>DOC_UNNAMED</name></expr>:</case> 	<comment type="line">//nothing todo</comment>
			<case>case <expr><name>DOC_REGULAR</name></expr>:</case> 	<comment type="line">//nothing todo</comment>
			<block>{<block_content>
				<break>break;</break>
			</block_content>}</block>
			<case>case <expr><name>DOC_MODIFIED</name></expr>:</case>	<comment type="line">//ask for reloading</comment>
			<block>{<block_content>
				<comment type="line">// Since it is being monitored DOC_NEEDRELOAD is going to handle the change.</comment>
				<if_stmt><if>if <condition>(<expr><call><name><name>buffer</name><operator>-&gt;</operator><name>isMonitoringOn</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
					<break>break;</break></block_content></block></if></if_stmt>

				<decl_stmt><decl><type><name>bool</name></type> <name>autoUpdate</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name><name>nppGUI</name><operator>.</operator><name>_fileAutoDetection</name></name> <operator>&amp;</operator> <name>cdAutoUpdate</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="boolean">true</literal></expr> </then><else>: <expr><literal type="boolean">false</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
				<if_stmt><if>if <condition>(<expr><operator>!</operator><name>autoUpdate</name> <operator>||</operator> <call><name><name>buffer</name><operator>-&gt;</operator><name>isDirty</name></name><argument_list>()</argument_list></call></expr>)</condition>
				<block>{<block_content>
					<expr_stmt><expr><call><name>prepareBufferChangedDialog</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

					<comment type="line">// Then we ask user to update</comment>
					<if_stmt><if>if <condition>(<expr><call><name>doReloadOrNot</name><argument_list>(<argument><expr><call><name><name>buffer</name><operator>-&gt;</operator><name>getFullPathName</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>buffer</name><operator>-&gt;</operator><name>isDirty</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>!=</operator> <name>IDYES</name></expr>)</condition>
					<block>{<block_content>
						<comment type="line">// Since the file content has changed but the user doesn't want to reload it, set state to dirty</comment>
						<expr_stmt><expr><call><name><name>buffer</name><operator>-&gt;</operator><name>setDirty</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

						<comment type="line">// buffer in Notepad++ is not syncronized anymore with the file on disk</comment>
						<expr_stmt><expr><call><name><name>buffer</name><operator>-&gt;</operator><name>setUnsync</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

						<break>break;</break>	<comment type="line">//abort</comment>
					</block_content>}</block></if></if_stmt>
				</block_content>}</block></if></if_stmt>
				<comment type="line">// Set _isLoadedDirty false so when the document clean state is reached the icon will be set to blue</comment>
				<expr_stmt><expr><call><name><name>buffer</name><operator>-&gt;</operator><name>setLoadedDirty</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<comment type="line">// buffer in Notepad++ is syncronized with the file on disk</comment>
				<expr_stmt><expr><call><name><name>buffer</name><operator>-&gt;</operator><name>setUnsync</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<expr_stmt><expr><call><name>doReload</name><argument_list>(<argument><expr><call><name><name>buffer</name><operator>-&gt;</operator><name>getID</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<if_stmt><if>if <condition>(<expr><name>mainActive</name> <operator>||</operator> <name>subActive</name></expr>)</condition>
				<block>{<block_content>
					<expr_stmt><expr><call><name>performPostReload</name><argument_list>(<argument><expr><ternary><condition><expr><name>mainActive</name></expr>?</condition><then><expr><name>MAIN_VIEW</name></expr></then><else>:<expr><name>SUB_VIEW</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block></if></if_stmt>
				<break>break;</break>
			</block_content>}</block>
			<case>case <expr><name>DOC_NEEDRELOAD</name></expr>:</case> <comment type="line">// by log monitoring</comment>
			<block>{<block_content>
				<expr_stmt><expr><call><name>doReload</name><argument_list>(<argument><expr><call><name><name>buffer</name><operator>-&gt;</operator><name>getID</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<comment type="line">// not only test main view</comment>
				<if_stmt><if>if <condition>(<expr><name>buffer</name> <operator>==</operator> <call><name><name>_mainEditView</name><operator>.</operator><name>getCurrentBuffer</name></name><argument_list>()</argument_list></call></expr>)</condition>
				<block>{<block_content>
					<expr_stmt><expr><call><name><name>_mainEditView</name><operator>.</operator><name>setPositionRestoreNeeded</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name>_mainEditView</name><operator>.</operator><name>execute</name></name><argument_list>(<argument><expr><name>SCI_DOCUMENTEND</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block></if></if_stmt>
				<comment type="line">// but also test sub-view, because the buffer could be clonned</comment>
				<if_stmt><if>if <condition>(<expr><name>buffer</name> <operator>==</operator> <call><name><name>_subEditView</name><operator>.</operator><name>getCurrentBuffer</name></name><argument_list>()</argument_list></call></expr>)</condition>
				<block>{<block_content>
					<expr_stmt><expr><call><name><name>_subEditView</name><operator>.</operator><name>setPositionRestoreNeeded</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name>_subEditView</name><operator>.</operator><name>execute</name></name><argument_list>(<argument><expr><name>SCI_DOCUMENTEND</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block></if></if_stmt>

				<break>break;</break>
			</block_content>}</block>
			<case>case <expr><name>DOC_DELETED</name></expr>:</case> 	<comment type="line">//ask for keep</comment>
			<block>{<block_content>
				<expr_stmt><expr><call><name>prepareBufferChangedDialog</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<decl_stmt><decl><type><name>SCNotification</name></type> <name>scnN</name><argument_list>{}</argument_list></decl>;</decl_stmt>
				<expr_stmt><expr><name><name>scnN</name><operator>.</operator><name>nmhdr</name><operator>.</operator><name>code</name></name> <operator>=</operator> <name>NPPN_FILEDELETED</name></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>scnN</name><operator>.</operator><name>nmhdr</name><operator>.</operator><name>hwndFrom</name></name> <operator>=</operator> <call><name><name>_pPublicInterface</name><operator>-&gt;</operator><name>getHSelf</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>scnN</name><operator>.</operator><name>nmhdr</name><operator>.</operator><name>idFrom</name></name> <operator>=</operator> <operator>(</operator><name>uptr_t</name><operator>)</operator><call><name><name>buffer</name><operator>-&gt;</operator><name>getID</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name>_pluginsManager</name><operator>.</operator><name>notify</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>scnN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<decl_stmt><decl><type><name>int</name></type> <name>doCloseDoc</name> <init>= <expr><call><name>doCloseOrNot</name><argument_list>(<argument><expr><call><name><name>buffer</name><operator>-&gt;</operator><name>getFullPathName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <name>IDNO</name></expr></init></decl>;</decl_stmt>
				<if_stmt><if>if <condition>(<expr><name>doCloseDoc</name></expr>)</condition>
				<block>{<block_content>
					<comment type="line">//close in both views, doing current view last since that has to remain opened</comment>
					<decl_stmt><decl><type><name>bool</name></type> <name>isSnapshotMode</name> <init>= <expr><call><name><name>nppGUI</name><operator>.</operator><name>isSnapshotMode</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
					<expr_stmt><expr><call><name>doClose</name><argument_list>(<argument><expr><call><name><name>buffer</name><operator>-&gt;</operator><name>getID</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>otherView</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>isSnapshotMode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name>doClose</name><argument_list>(<argument><expr><call><name><name>buffer</name><operator>-&gt;</operator><name>getID</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>currentView</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>isSnapshotMode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<return>return;</return>
				</block_content>}</block></if>
				<else>else
				<block>{<block_content>
					<comment type="line">// buffer in Notepad++ is not syncronized anymore with the file on disk</comment>
					<expr_stmt><expr><call><name><name>buffer</name><operator>-&gt;</operator><name>setUnsync</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block></else></if_stmt>

				<break>break;</break>
			</block_content>}</block>
		</block_content>}</block></switch>
	</block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>mask</name> <operator>&amp;</operator> <operator>(</operator><name>BufferChangeReadonly</name><operator>)</operator></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>checkDocState</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

		<decl_stmt><decl><type><name>bool</name></type> <name>isSysReadOnly</name> <init>= <expr><call><name><name>buffer</name><operator>-&gt;</operator><name>getFileReadOnly</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>bool</name></type> <name>isUserReadOnly</name> <init>= <expr><call><name><name>buffer</name><operator>-&gt;</operator><name>getUserReadOnly</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>bool</name></type> <name>isDirty</name> <init>= <expr><call><name><name>buffer</name><operator>-&gt;</operator><name>isDirty</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

		<comment type="line">// To notify plugins ro status is changed</comment>
		<decl_stmt><decl><type><name>SCNotification</name></type> <name>scnN</name><argument_list>{}</argument_list></decl>;</decl_stmt>
		<expr_stmt><expr><name><name>scnN</name><operator>.</operator><name>nmhdr</name><operator>.</operator><name>hwndFrom</name></name> <operator>=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><call><name><name>buffer</name><operator>-&gt;</operator><name>getID</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>scnN</name><operator>.</operator><name>nmhdr</name><operator>.</operator><name>idFrom</name></name> <operator>=</operator> <operator>(</operator><name>uptr_t</name><operator>)</operator>  <operator>(</operator><operator>(</operator><ternary><condition><expr><name>isSysReadOnly</name> <operator>||</operator> <name>isUserReadOnly</name></expr>?</condition><then> <expr><name>DOCSTATUS_READONLY</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator> <operator>|</operator> <operator>(</operator><ternary><condition><expr><name>isDirty</name></expr> ?</condition><then> <expr><name>DOCSTATUS_BUFFERDIRTY</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>scnN</name><operator>.</operator><name>nmhdr</name><operator>.</operator><name>code</name></name> <operator>=</operator> <name>NPPN_READONLYCHANGED</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>_pluginsManager</name><operator>.</operator><name>notify</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>scnN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>_pDocumentListPanel</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name><name>_pDocumentListPanel</name><operator>-&gt;</operator><name>setItemIconStatus</name></name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>mainActive</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>subActive</name></expr>)</condition>
	<block>{<block_content>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>mask</name> <operator>&amp;</operator> <operator>(</operator><name>BufferChangeLanguage</name><operator>)</operator></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>mainActive</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name><name>_autoCompleteMain</name><operator>.</operator><name>setLanguage</name></name><argument_list>(<argument><expr><call><name><name>buffer</name><operator>-&gt;</operator><name>getLangType</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><name>subActive</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name><name>_autoCompleteSub</name><operator>.</operator><name>setLanguage</name></name><argument_list>(<argument><expr><call><name><name>buffer</name><operator>-&gt;</operator><name>getLangType</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>currentView</name><argument_list>()</argument_list></call> <operator>==</operator> <name>MAIN_VIEW</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><name>mainActive</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return;</return></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>currentView</name><argument_list>()</argument_list></call> <operator>==</operator> <name>SUB_VIEW</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><name>subActive</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return;</return></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>mask</name> <operator>&amp;</operator> <operator>(</operator><name>BufferChangeDirty</name><operator>|</operator><name>BufferChangeFilename</name><operator>)</operator></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>mask</name> <operator>&amp;</operator> <name>BufferChangeFilename</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>command</name><argument_list>(<argument><expr><name>IDM_VIEW_REFRESHTABAR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<expr_stmt><expr><call><name>checkDocState</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>setTitle</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<decl_stmt><decl><type><name>generic_string</name></type> <name>dir</name><argument_list>(<argument><expr><call><name><name>buffer</name><operator>-&gt;</operator><name>getFullPathName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>PathRemoveFileSpec</name><argument_list>(<argument><expr><name>dir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>setWorkingDir</name><argument_list>(<argument><expr><call><name><name>dir</name><operator>.</operator><name>c_str</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>mask</name> <operator>&amp;</operator> <operator>(</operator><name>BufferChangeLanguage</name><operator>)</operator></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>checkLangsMenu</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>	<comment type="line">//let Notepad++ do search for the item</comment>
		<expr_stmt><expr><call><name>setLangStatus</name><argument_list>(<argument><expr><call><name><name>buffer</name><operator>-&gt;</operator><name>getLangType</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><call><name><name>_mainEditView</name><operator>.</operator><name>getCurrentBuffer</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name>buffer</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name><name>_autoCompleteMain</name><operator>.</operator><name>setLanguage</name></name><argument_list>(<argument><expr><call><name><name>buffer</name><operator>-&gt;</operator><name>getLangType</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
		<if type="elseif">else if <condition>(<expr><call><name><name>_subEditView</name><operator>.</operator><name>getCurrentBuffer</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name>buffer</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name><name>_autoCompleteSub</name><operator>.</operator><name>setLanguage</name></name><argument_list>(<argument><expr><call><name><name>buffer</name><operator>-&gt;</operator><name>getLangType</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<decl_stmt><decl><type><name>SCNotification</name></type> <name>scnN</name><argument_list>{}</argument_list></decl>;</decl_stmt>
		<expr_stmt><expr><name><name>scnN</name><operator>.</operator><name>nmhdr</name><operator>.</operator><name>code</name></name> <operator>=</operator> <name>NPPN_LANGCHANGED</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>scnN</name><operator>.</operator><name>nmhdr</name><operator>.</operator><name>hwndFrom</name></name> <operator>=</operator> <call><name><name>_pPublicInterface</name><operator>-&gt;</operator><name>getHSelf</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>scnN</name><operator>.</operator><name>nmhdr</name><operator>.</operator><name>idFrom</name></name> <operator>=</operator> <operator>(</operator><name>uptr_t</name><operator>)</operator><call><name><name>_pEditView</name><operator>-&gt;</operator><name>getCurrentBufferID</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>_pluginsManager</name><operator>.</operator><name>notify</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>scnN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>mask</name> <operator>&amp;</operator> <operator>(</operator><name>BufferChangeFormat</name><operator>|</operator><name>BufferChangeLanguage</name><operator>|</operator><name>BufferChangeUnicode</name><operator>)</operator></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>updateStatusBar</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>checkUnicodeMenuItems</name><argument_list>(<comment type="block">/*buffer-&gt;getUnicodeMode()*/</comment>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>setUniModeText</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>setDisplayFormat</name><argument_list>(<argument><expr><call><name><name>buffer</name><operator>-&gt;</operator><name>getEolFormat</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>enableConvertMenuItems</name><argument_list>(<argument><expr><call><name><name>buffer</name><operator>-&gt;</operator><name>getEolFormat</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>mask</name> <operator>&amp;</operator> <operator>(</operator><name>BufferChangeUnicode</name><operator>)</operator></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name><name>_mainEditView</name><operator>.</operator><name>maintainStateForNpc</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>_subEditView</name><operator>.</operator><name>maintainStateForNpc</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name><name>Notepad_plus</name><operator>::</operator><name>notifyBufferActivated</name></name><parameter_list>(<parameter><decl><type><name>BufferID</name></type> <name>bufid</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>view</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Buffer</name> <modifier>*</modifier></type> <name>buf</name> <init>= <expr><call><name><name>MainFileManager</name><operator>.</operator><name>getBufferByID</name></name><argument_list>(<argument><expr><name>bufid</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name><name>buf</name><operator>-&gt;</operator><name>increaseRecentTag</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>view</name> <operator>==</operator> <name>MAIN_VIEW</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name><name>_autoCompleteMain</name><operator>.</operator><name>setLanguage</name></name><argument_list>(<argument><expr><call><name><name>buf</name><operator>-&gt;</operator><name>getLangType</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><name>view</name> <operator>==</operator> <name>SUB_VIEW</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name><name>_autoCompleteSub</name><operator>.</operator><name>setLanguage</name></name><argument_list>(<argument><expr><call><name><name>buf</name><operator>-&gt;</operator><name>getLangType</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>view</name> <operator>!=</operator> <call><name>currentView</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<return>return;</return></block_content></block></if></if_stmt>	<comment type="line">//dont care if another view did something</comment>


	<expr_stmt><expr><call><name>checkDocState</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>dynamicCheckMenuAndTB</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>setLangStatus</name><argument_list>(<argument><expr><call><name><name>buf</name><operator>-&gt;</operator><name>getLangType</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>updateStatusBar</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>checkUnicodeMenuItems</name><argument_list>(<comment type="block">/*buf-&gt;getUnicodeMode()*/</comment>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>setUniModeText</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>setDisplayFormat</name><argument_list>(<argument><expr><call><name><name>buf</name><operator>-&gt;</operator><name>getEolFormat</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>enableConvertMenuItems</name><argument_list>(<argument><expr><call><name><name>buf</name><operator>-&gt;</operator><name>getEolFormat</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>generic_string</name></type> <name>dir</name><argument_list>(<argument><expr><call><name><name>buf</name><operator>-&gt;</operator><name>getFullPathName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>PathRemoveFileSpec</name><argument_list>(<argument><expr><name>dir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>setWorkingDir</name><argument_list>(<argument><expr><call><name><name>dir</name><operator>.</operator><name>c_str</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>setTitle</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<comment type="line">//Make sure the colors of the tab controls match</comment>
	<expr_stmt><expr><call><name><operator>::</operator><name>InvalidateRect</name></name><argument_list>(<argument><expr><call><name><name>_mainDocTab</name><operator>.</operator><name>getHSelf</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><operator>::</operator><name>InvalidateRect</name></name><argument_list>(<argument><expr><call><name><name>_subDocTab</name><operator>.</operator><name>getHSelf</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>SCNotification</name></type> <name>scnN</name><argument_list>{}</argument_list></decl>;</decl_stmt>
	<expr_stmt><expr><name><name>scnN</name><operator>.</operator><name>nmhdr</name><operator>.</operator><name>code</name></name> <operator>=</operator> <name>NPPN_BUFFERACTIVATED</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>scnN</name><operator>.</operator><name>nmhdr</name><operator>.</operator><name>hwndFrom</name></name> <operator>=</operator> <call><name><name>_pPublicInterface</name><operator>-&gt;</operator><name>getHSelf</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>scnN</name><operator>.</operator><name>nmhdr</name><operator>.</operator><name>idFrom</name></name> <operator>=</operator> <operator>(</operator><name>uptr_t</name><operator>)</operator><name>bufid</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name>_pluginsManager</name><operator>.</operator><name>notify</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>scnN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>_pDocumentListPanel</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name><name>_pDocumentListPanel</name><operator>-&gt;</operator><name>activateItem</name></name><argument_list>(<argument><expr><name>bufid</name></expr></argument>, <argument><expr><call><name>currentView</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>_pDocMap</name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><call><name><name>_pDocMap</name><operator>-&gt;</operator><name>isClosed</name></name><argument_list>()</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator> <call><name><name>_pDocMap</name><operator>-&gt;</operator><name>isVisible</name></name><argument_list>()</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name><name>_pDocMap</name><operator>-&gt;</operator><name>reloadMap</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>_pDocMap</name><operator>-&gt;</operator><name>setSyntaxHiliting</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>_pFuncList</name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><call><name><name>_pFuncList</name><operator>-&gt;</operator><name>isClosed</name></name><argument_list>()</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator> <call><name><name>_pFuncList</name><operator>-&gt;</operator><name>isVisible</name></name><argument_list>()</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name><name>_pFuncList</name><operator>-&gt;</operator><name>reload</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>_linkTriggered</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>generic_string</name></expr></argument>&gt;</argument_list></name></type> <name><name>Notepad_plus</name><operator>::</operator><name>loadCommandlineParams</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>TCHAR</name> <modifier>*</modifier></type> <name>commandLine</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>CmdLineParamsDTO</name> <modifier>*</modifier></type> <name>pCmdParams</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>commandLine</name> <operator>||</operator> <operator>!</operator> <name>pCmdParams</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><call><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>generic_string</name></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

	<decl_stmt><decl><type><name>NppParameters</name><modifier>&amp;</modifier></type> <name>nppParams</name> <init>= <expr><call><name><name>NppParameters</name><operator>::</operator><name>getInstance</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>NppGUI</name><modifier>&amp;</modifier></type> <name>nppGUI</name> <init>= <expr><call><name><name>nppParams</name><operator>.</operator><name>getNppGUI</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>FileNameStringSplitter</name></type> <name>fnss</name><argument_list>(<argument><expr><name>commandLine</name></expr></argument>)</argument_list></decl>;</decl_stmt>

	<comment type="line">// loading file as session file is allowed only when there is only one file</comment>
	<if_stmt><if>if <condition>(<expr><name><name>pCmdParams</name><operator>-&gt;</operator><name>_isSessionFile</name></name> <operator>&amp;&amp;</operator> <call><name><name>fnss</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>Session</name></type> <name>session2Load</name></decl>;</decl_stmt>
		<if_stmt><if>if <condition>(<expr><call><name><name>nppParams</name><operator>.</operator><name>loadSession</name></name><argument_list>(<argument><expr><name>session2Load</name></expr></argument>, <argument><expr><call><name><name>fnss</name><operator>.</operator><name>getFileName</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition>
		<block>{<block_content>
			<decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>isSnapshotMode</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>shouldLoadFileBrowser</name> <init>= <expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt>

			<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>nppGUI</name><operator>.</operator><name>_multiInstSetting</name></name> <operator>==</operator> <name>multiInstOnSession</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>nppGUI</name><operator>.</operator><name>_multiInstSetting</name></name> <operator>==</operator> <name>multiInst</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name><name>nppParams</name><operator>.</operator><name>setLoadedSessionFilePath</name></name><argument_list>(<argument><expr><call><name><name>fnss</name><operator>.</operator><name>getFileName</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<expr_stmt><expr><call><name>loadSession</name><argument_list>(<argument><expr><name>session2Load</name></expr></argument>, <argument><expr><name>isSnapshotMode</name></expr></argument>, <argument><expr><name>shouldLoadFileBrowser</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<return>return <expr><call><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>generic_string</name></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</return>
	</block_content>}</block></if></if_stmt>

 	<decl_stmt><decl><type><name>LangType</name></type> <name>lt</name> <init>= <expr><name><name>pCmdParams</name><operator>-&gt;</operator><name>_langType</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>generic_string</name></type> <name>udl</name> <init>= <expr><name><name>pCmdParams</name><operator>-&gt;</operator><name>_udlName</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>intptr_t</name></type> <name>lineNumber</name> <init>=  <expr><name><name>pCmdParams</name><operator>-&gt;</operator><name>_line2go</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>intptr_t</name></type> <name>columnNumber</name> <init>= <expr><name><name>pCmdParams</name><operator>-&gt;</operator><name>_column2go</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>intptr_t</name></type> <name>positionNumber</name> <init>= <expr><name><name>pCmdParams</name><operator>-&gt;</operator><name>_pos2go</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name>recursive</name> <init>= <expr><name><name>pCmdParams</name><operator>-&gt;</operator><name>_isRecursive</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name>readOnly</name> <init>= <expr><name><name>pCmdParams</name><operator>-&gt;</operator><name>_isReadOnly</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name>openFoldersAsWorkspace</name> <init>= <expr><name><name>pCmdParams</name><operator>-&gt;</operator><name>_openFoldersAsWorkspace</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name>monitorFiles</name> <init>= <expr><name><name>pCmdParams</name><operator>-&gt;</operator><name>_monitorFiles</name></name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>openFoldersAsWorkspace</name></expr>)</condition>
	<block>{<block_content>
		<comment type="line">// All the filepath in argument will be used as folder in workspace</comment>
		<comment type="line">// call launchFileBrowser later with fnss</comment>
		<return>return <expr><call><name><name>fnss</name><operator>.</operator><name>getFileNames</name></name><argument_list>()</argument_list></call></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<decl_stmt><decl><type><name>BufferID</name></type> <name>lastOpened</name> <init>= <expr><name>BUFFER_INVALID</name></expr></init></decl>;</decl_stmt>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>len</name> <init>= <expr><call><name><name>fnss</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr> ;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
	<block>{<block_content>
		<decl_stmt><decl><type><specifier>const</specifier> <name>TCHAR</name> <modifier>*</modifier></type><name>pFn</name> <init>= <expr><call><name><name>fnss</name><operator>.</operator><name>getFileName</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><name>pFn</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>generic_string</name></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

		<decl_stmt><decl><type><name>BufferID</name></type> <name>bufID</name> <init>= <expr><call><name>doOpen</name><argument_list>(<argument><expr><name>pFn</name></expr></argument>, <argument><expr><name>recursive</name></expr></argument>, <argument><expr><name>readOnly</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if <condition>(<expr><name>bufID</name> <operator>==</operator> <name>BUFFER_INVALID</name></expr>)</condition><block type="pseudo"><block_content>	<comment type="line">//cannot open file</comment>
			<continue>continue;</continue></block_content></block></if></if_stmt>

		<expr_stmt><expr><name>lastOpened</name> <operator>=</operator> <name>bufID</name></expr>;</expr_stmt>
		<decl_stmt><decl><type><name>Buffer</name><modifier>*</modifier></type> <name>pBuf</name> <init>= <expr><call><name><name>MainFileManager</name><operator>.</operator><name>getBufferByID</name></name><argument_list>(<argument><expr><name>bufID</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>udl</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name><name>pBuf</name><operator>-&gt;</operator><name>setLangType</name></name><argument_list>(<argument><expr><name>L_USER</name></expr></argument>, <argument><expr><call><name><name>udl</name><operator>.</operator><name>c_str</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if>
		<if type="elseif">else if <condition>(<expr><name>lt</name> <operator>!=</operator> <name>L_EXTERNAL</name> <operator>&amp;&amp;</operator> <name>lt</name> <operator>&lt;</operator> <name><name>nppParams</name><operator>.</operator><name>L_END</name></name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name><name>pBuf</name><operator>-&gt;</operator><name>setLangType</name></name><argument_list>(<argument><expr><name>lt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><name>lineNumber</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>||</operator> <name>positionNumber</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition>
		<block>{<block_content>
			<comment type="line">//we have to move the cursor manually</comment>
			<decl_stmt><decl><type><name>int</name></type> <name>iView</name> <init>= <expr><call><name>currentView</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>	<comment type="line">//store view since fileswitch can cause it to change</comment>
			<expr_stmt><expr><call><name>switchToFile</name><argument_list>(<argument><expr><name>bufID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>	<comment type="line">//switch to the file. No deferred loading, but this way we can easily move the cursor to the right position</comment>

			<if_stmt><if>if <condition>(<expr><name>positionNumber</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition>
			<block>{<block_content>
				<if_stmt><if>if <condition>(<expr><name>positionNumber</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
				<block>{<block_content>
					<comment type="line">// make sure not jumping into the middle of a multibyte character</comment>
					<comment type="line">// or into the middle of a CR/LF pair for Windows files</comment>
					<decl_stmt><decl><type><name>auto</name></type> <name>before</name> <init>= <expr><call><name><name>_pEditView</name><operator>-&gt;</operator><name>execute</name></name><argument_list>(<argument><expr><name>SCI_POSITIONBEFORE</name></expr></argument>, <argument><expr><name>positionNumber</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
					<expr_stmt><expr><name>positionNumber</name> <operator>=</operator> <call><name><name>_pEditView</name><operator>-&gt;</operator><name>execute</name></name><argument_list>(<argument><expr><name>SCI_POSITIONAFTER</name></expr></argument>, <argument><expr><name>before</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block></if></if_stmt>
				<expr_stmt><expr><call><name><name>_pEditView</name><operator>-&gt;</operator><name>execute</name></name><argument_list>(<argument><expr><name>SCI_GOTOPOS</name></expr></argument>, <argument><expr><name>positionNumber</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if>
			<if type="elseif">else if <condition>(<expr><name>columnNumber</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><call><name><name>_pEditView</name><operator>-&gt;</operator><name>execute</name></name><argument_list>(<argument><expr><name>SCI_GOTOLINE</name></expr></argument>, <argument><expr><name>lineNumber</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if>
			<else>else
			<block>{<block_content>
				<decl_stmt><decl><type><name>auto</name></type> <name>pos</name> <init>= <expr><call><name><name>_pEditView</name><operator>-&gt;</operator><name>execute</name></name><argument_list>(<argument><expr><name>SCI_FINDCOLUMN</name></expr></argument>, <argument><expr><name>lineNumber</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>columnNumber</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<expr_stmt><expr><call><name><name>_pEditView</name><operator>-&gt;</operator><name>execute</name></name><argument_list>(<argument><expr><name>SCI_GOTOPOS</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></else></if_stmt>

			<expr_stmt><expr><call><name><name>_pEditView</name><operator>-&gt;</operator><name>scrollPosToCenter</name></name><argument_list>(<argument><expr><call><name><name>_pEditView</name><operator>-&gt;</operator><name>execute</name></name><argument_list>(<argument><expr><name>SCI_GETCURRENTPOS</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<expr_stmt><expr><call><name>switchEditViewTo</name><argument_list>(<argument><expr><name>iView</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>	<comment type="line">//restore view</comment>
		</block_content>}</block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><name>monitorFiles</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>monitoringStartOrStopAndUpdateUI</name><argument_list>(<argument><expr><name>pBuf</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>createMonitoringThread</name><argument_list>(<argument><expr><name>pBuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>
	<if_stmt><if>if <condition>(<expr><name>lastOpened</name> <operator>!=</operator> <name>BUFFER_INVALID</name></expr>)</condition>
    <block>{<block_content>
		<expr_stmt><expr><call><name>switchToFile</name><argument_list>(<argument><expr><name>lastOpened</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><call><name><name>fnss</name><operator>.</operator><name>getFileNames</name></name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></function>


<function><type><name>void</name></type> <name><name>Notepad_plus</name><operator>::</operator><name>setFindReplaceFolderFilter</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>TCHAR</name> <modifier>*</modifier></type><name>dir</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>TCHAR</name> <modifier>*</modifier></type><name>filter</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>generic_string</name></type> <name>fltr</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>NppParameters</name><modifier>&amp;</modifier></type> <name>nppParam</name> <init>= <expr><call><name><name>NppParameters</name><operator>::</operator><name>getInstance</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>FindHistory</name> <modifier>&amp;</modifier></type> <name>findHistory</name> <init>= <expr><call><name><name>nppParam</name><operator>.</operator><name>getFindHistory</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

	<comment type="line">// get current directory in case it's not provided.</comment>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>dir</name> <operator>&amp;&amp;</operator> <name><name>findHistory</name><operator>.</operator><name>_isFolderFollowDoc</name></name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>dir</name> <operator>=</operator> <call><name><name>nppParam</name><operator>.</operator><name>getWorkingDir</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="line">// get current language file extensions in case it's not provided.</comment>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>filter</name> <operator>&amp;&amp;</operator> <name><name>findHistory</name><operator>.</operator><name>_isFilterFollowDoc</name></name></expr>)</condition>
	<block>{<block_content>
		<comment type="line">// Get current language file extensions</comment>
		<decl_stmt><decl><type><specifier>const</specifier> <name>TCHAR</name> <modifier>*</modifier></type><name>ext</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>LangType</name></type> <name>lt</name> <init>= <expr><call><name><name>_pEditView</name><operator>-&gt;</operator><name>getCurrentBuffer</name></name><argument_list>()</argument_list></call><operator>-&gt;</operator><call><name>getLangType</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><name>lt</name> <operator>==</operator> <name>L_USER</name></expr>)</condition>
		<block>{<block_content>
			<decl_stmt><decl><type><name>Buffer</name> <modifier>*</modifier></type> <name>buf</name> <init>= <expr><call><name><name>_pEditView</name><operator>-&gt;</operator><name>getCurrentBuffer</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>UserLangContainer</name> <modifier>*</modifier></type> <name>userLangContainer</name> <init>= <expr><call><name><name>nppParam</name><operator>.</operator><name>getULCFromName</name></name><argument_list>(<argument><expr><call><name><name>buf</name><operator>-&gt;</operator><name>getUserDefineLangName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<if_stmt><if>if <condition>(<expr><name>userLangContainer</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name>ext</name> <operator>=</operator> <call><name><name>userLangContainer</name><operator>-&gt;</operator><name>getExtention</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		</block_content>}</block></if>
		<else>else
		<block>{<block_content>
			<expr_stmt><expr><name>ext</name> <operator>=</operator> <call><name><name>nppParam</name><operator>.</operator><name>getLangExtFromLangType</name></name><argument_list>(<argument><expr><name>lt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>

		<if_stmt><if>if <condition>(<expr><name>ext</name> <operator>&amp;&amp;</operator> <name><name>ext</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name>fltr</name> <operator>=</operator> <call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>generic_string</name></expr></argument>&gt;</argument_list></name></type> <name>vStr</name></decl>;</decl_stmt>
			<expr_stmt><expr><call><name>cutString</name><argument_list>(<argument><expr><name>ext</name></expr></argument>, <argument><expr><name>vStr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ,<decl><type ref="prev"/><name>len</name> <init>= <expr><call><name><name>vStr</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
			<block>{<block_content>
				<expr_stmt><expr><name>fltr</name> <operator>+=</operator> <call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"*."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>fltr</name> <operator>+=</operator> <name><name>vStr</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">" "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></for>
		</block_content>}</block></if>
		<else>else
		<block>{<block_content>
			<expr_stmt><expr><name>fltr</name> <operator>=</operator> <call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"*.*"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
		<expr_stmt><expr><name>filter</name> <operator>=</operator> <call><name><name>fltr</name><operator>.</operator><name>c_str</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name><name>_findReplaceDlg</name><operator>.</operator><name>setFindInFilesDirFilter</name></name><argument_list>(<argument><expr><name>dir</name></expr></argument>, <argument><expr><name>filter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>generic_string</name></expr></argument>&gt;</argument_list></name></type> <name><name>Notepad_plus</name><operator>::</operator><name>addNppComponents</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>TCHAR</name> <modifier>*</modifier></type><name>destDir</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>TCHAR</name> <modifier>*</modifier></type><name>extFilterName</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>TCHAR</name> <modifier>*</modifier></type><name>extFilter</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>CustomFileDialog</name></type> <name>fDlg</name><argument_list>(<argument><expr><call><name><name>_pPublicInterface</name><operator>-&gt;</operator><name>getHSelf</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
	<expr_stmt><expr><call><name><name>fDlg</name><operator>.</operator><name>setExtFilter</name></name><argument_list>(<argument><expr><name>extFilterName</name></expr></argument>, <argument><expr><name>extFilter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>generic_string</name></expr></argument>&gt;</argument_list></name></type> <name>copiedFiles</name></decl>;</decl_stmt>

	<decl_stmt><decl><type><specifier>const</specifier> <specifier>auto</specifier><modifier>&amp;</modifier></type> <name>fns</name> <init>= <expr><call><name><name>fDlg</name><operator>.</operator><name>doOpenMultiFilesDlg</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>fns</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <comment type="line">// Get plugins dir</comment>
		<decl_stmt><decl><type><name>generic_string</name></type> <name>destDirName</name> <init>= <expr><operator>(</operator><call><name><name>NppParameters</name><operator>::</operator><name>getInstance</name></name><argument_list>()</argument_list></call><operator>)</operator><operator>.</operator><call><name>getNppPath</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>pathAppend</name><argument_list>(<argument><expr><name>destDirName</name></expr></argument>, <argument><expr><name>destDir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><operator>::</operator><name>PathFileExists</name></name><argument_list>(<argument><expr><call><name><name>destDirName</name><operator>.</operator><name>c_str</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name><operator>::</operator><name>CreateDirectory</name></name><argument_list>(<argument><expr><call><name><name>destDirName</name><operator>.</operator><name>c_str</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><name>destDirName</name> <operator>+=</operator> <call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"\\"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>size_t</name></type> <name>sz</name> <init>= <expr><call><name><name>fns</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>sz</name></expr> ;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name><operator>::</operator><name>PathFileExists</name></name><argument_list>(<argument><expr><call><name><name>fns</name><operator>.</operator><name>at</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>c_str</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition>
            <block>{<block_content>
                <comment type="line">// copy to plugins directory</comment>
                <decl_stmt><decl><type><name>generic_string</name></type> <name>destName</name> <init>= <expr><name>destDirName</name></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><name>destName</name> <operator>+=</operator> <call><name><operator>::</operator><name>PathFindFileName</name></name><argument_list>(<argument><expr><call><name><name>fns</name><operator>.</operator><name>at</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>c_str</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><call><name><operator>::</operator><name>CopyFile</name></name><argument_list>(<argument><expr><call><name><name>fns</name><operator>.</operator><name>at</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>c_str</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>destName</name><operator>.</operator><name>c_str</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                    <expr_stmt><expr><call><name><name>copiedFiles</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><call><name><name>destName</name><operator>.</operator><name>c_str</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></for>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name>copiedFiles</name></expr>;</return>
</block_content>}</block></function>

<function><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>generic_string</name></expr></argument>&gt;</argument_list></name></type> <name><name>Notepad_plus</name><operator>::</operator><name>addNppPlugins</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>TCHAR</name> <modifier>*</modifier></type><name>extFilterName</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>TCHAR</name> <modifier>*</modifier></type><name>extFilter</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>CustomFileDialog</name></type> <name>fDlg</name><argument_list>(<argument><expr><call><name><name>_pPublicInterface</name><operator>-&gt;</operator><name>getHSelf</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>fDlg</name><operator>.</operator><name>setExtFilter</name></name><argument_list>(<argument><expr><name>extFilterName</name></expr></argument>, <argument><expr><name>extFilter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>generic_string</name></expr></argument>&gt;</argument_list></name></type> <name>copiedFiles</name></decl>;</decl_stmt>

	<decl_stmt><decl><type><specifier>const</specifier> <specifier>auto</specifier><modifier>&amp;</modifier></type> <name>fns</name> <init>= <expr><call><name><name>fDlg</name><operator>.</operator><name>doOpenMultiFilesDlg</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>fns</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <comment type="line">// Get plugins dir</comment>
		<decl_stmt><decl><type><name>generic_string</name></type> <name>destDirName</name> <init>= <expr><operator>(</operator><call><name><name>NppParameters</name><operator>::</operator><name>getInstance</name></name><argument_list>()</argument_list></call><operator>)</operator><operator>.</operator><call><name>getPluginRootDir</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><operator>::</operator><name>PathFileExists</name></name><argument_list>(<argument><expr><call><name><name>destDirName</name><operator>.</operator><name>c_str</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name><operator>::</operator><name>CreateDirectory</name></name><argument_list>(<argument><expr><call><name><name>destDirName</name><operator>.</operator><name>c_str</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <decl_stmt><decl><type><name>size_t</name></type> <name>sz</name> <init>= <expr><call><name><name>fns</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>sz</name></expr> ;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name><operator>::</operator><name>PathFileExists</name></name><argument_list>(<argument><expr><call><name><name>fns</name><operator>.</operator><name>at</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>c_str</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition>
            <block>{<block_content>
                <comment type="line">// copy to plugins directory</comment>
                <decl_stmt><decl><type><name>generic_string</name></type> <name>destName</name> <init>= <expr><name>destDirName</name></expr></init></decl>;</decl_stmt>
				
				<decl_stmt><decl><type><name>generic_string</name></type> <name>nameExt</name> <init>= <expr><call><name><operator>::</operator><name>PathFindFileName</name></name><argument_list>(<argument><expr><call><name><name>fns</name><operator>.</operator><name>at</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>c_str</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>auto</name></type> <name>pos</name> <init>= <expr><call><name><name>nameExt</name><operator>.</operator><name>find_last_of</name></name><argument_list>(<argument><expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"."</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<if_stmt><if>if <condition>(<expr><name>pos</name> <operator>==</operator> <name><name>generic_string</name><operator>::</operator><name>npos</name></name></expr>)</condition><block type="pseudo"><block_content>
					<continue>continue;</continue></block_content></block></if></if_stmt>

				<decl_stmt><decl><type><name>generic_string</name></type> <name>name</name> <init>= <expr><call><name><name>nameExt</name><operator>.</operator><name>substr</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<expr_stmt><expr><call><name>pathAppend</name><argument_list>(<argument><expr><name>destName</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><operator>::</operator><name>PathFileExists</name></name><argument_list>(<argument><expr><call><name><name>destName</name><operator>.</operator><name>c_str</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition>
				<block>{<block_content>
					<expr_stmt><expr><call><name><operator>::</operator><name>CreateDirectory</name></name><argument_list>(<argument><expr><call><name><name>destName</name><operator>.</operator><name>c_str</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block></if></if_stmt>
				<expr_stmt><expr><call><name>pathAppend</name><argument_list>(<argument><expr><name>destName</name></expr></argument>, <argument><expr><name>nameExt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt><if>if <condition>(<expr><call><name><operator>::</operator><name>CopyFile</name></name><argument_list>(<argument><expr><call><name><name>fns</name><operator>.</operator><name>at</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>c_str</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>destName</name><operator>.</operator><name>c_str</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                    <expr_stmt><expr><call><name><name>copiedFiles</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><call><name><name>destName</name><operator>.</operator><name>c_str</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></for>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name>copiedFiles</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name><name>Notepad_plus</name><operator>::</operator><name>setWorkingDir</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>TCHAR</name> <modifier>*</modifier></type><name>dir</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>NppParameters</name><modifier>&amp;</modifier></type> <name>params</name> <init>= <expr><call><name><name>NppParameters</name><operator>::</operator><name>getInstance</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><call><name><name>params</name><operator>.</operator><name>getNppGUI</name></name><argument_list>()</argument_list></call><operator>.</operator><name>_openSaveDir</name> <operator>==</operator> <name>dir_last</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return;</return></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><call><name><name>params</name><operator>.</operator><name>getNppGUI</name></name><argument_list>()</argument_list></call><operator>.</operator><name>_openSaveDir</name> <operator>==</operator> <name>dir_userDef</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name><name>params</name><operator>.</operator><name>setWorkingDir</name></name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><name>dir</name> <operator>&amp;&amp;</operator> <call><name>PathIsDirectory</name><argument_list>(<argument><expr><name>dir</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name><name>params</name><operator>.</operator><name>setWorkingDir</name></name><argument_list>(<argument><expr><name>dir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name><name>Notepad_plus</name><operator>::</operator><name>getLangFromMenuName</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>TCHAR</name> <modifier>*</modifier></type> <name>langName</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>	<name>id</name>	<init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>TCHAR</name></type> <name><name>menuLangName</name><index>[<expr><name>menuItemStrLenMax</name></expr>]</index></name></decl>;</decl_stmt>

	<for>for <control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name>IDM_LANG_C</name></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>IDM_LANG_USER</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr> )</control><block type="pseudo"><block_content>
		<if_stmt><if>if <condition>( <expr><call><name><operator>::</operator><name>GetMenuString</name></name><argument_list>( <argument><expr><name>_mainMenuHandle</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>menuLangName</name></expr></argument>, <argument><expr><name>menuItemStrLenMax</name></expr></argument>, <argument><expr><name>MF_BYCOMMAND</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
			<if_stmt><if>if <condition>( <expr><operator>!</operator><call><name>lstrcmp</name><argument_list>( <argument><expr><name>langName</name></expr></argument>, <argument><expr><name>menuLangName</name></expr></argument> )</argument_list></call></expr> )</condition>
			<block>{<block_content>
				<expr_stmt><expr><name>id</name>	<operator>=</operator> <name>i</name></expr>;</expr_stmt>
				<break>break;</break>
			</block_content>}</block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></for>

	<if_stmt><if>if <condition>( <expr><name>id</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition>
	<block>{<block_content>
		<for>for <control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name>IDM_LANG_USER</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>IDM_LANG_USER_LIMIT</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr> )</control><block type="pseudo"><block_content>
			<if_stmt><if>if <condition>( <expr><call><name><operator>::</operator><name>GetMenuString</name></name><argument_list>( <argument><expr><name>_mainMenuHandle</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>menuLangName</name></expr></argument>, <argument><expr><name>menuItemStrLenMax</name></expr></argument>, <argument><expr><name>MF_BYCOMMAND</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
				<if_stmt><if>if <condition>( <expr><operator>!</operator><call><name>lstrcmp</name><argument_list>( <argument><expr><name>langName</name></expr></argument>, <argument><expr><name>menuLangName</name></expr></argument> )</argument_list></call></expr> )</condition>
				<block>{<block_content>
					<expr_stmt><expr><name>id</name>	<operator>=</operator> <name>i</name></expr>;</expr_stmt>
					<break>break;</break>
				</block_content>}</block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></for>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><name>id</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>generic_string</name></type> <name><name>Notepad_plus</name><operator>::</operator><name>getLangFromMenu</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Buffer</name> <modifier>*</modifier></type> <name>buf</name></decl></parameter>)</parameter_list>
<block>{<block_content>

	<decl_stmt><decl><type><name>int</name></type>	<name>id</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>generic_string</name></type> <name>userLangName</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>TCHAR</name></type> <name><name>menuLangName</name><index>[<expr><name>menuItemStrLenMax</name></expr>]</index></name><argument_list>{}</argument_list></decl>;</decl_stmt>

	<expr_stmt><expr><name>id</name> <operator>=</operator> <operator>(</operator><call><name><name>NppParameters</name><operator>::</operator><name>getInstance</name></name><argument_list>()</argument_list></call><operator>)</operator><operator>.</operator><call><name>langTypeToCommandID</name><argument_list>( <argument><expr><call><name><name>buf</name><operator>-&gt;</operator><name>getLangType</name></name><argument_list>()</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>( <expr><operator>(</operator> <name>id</name> <operator>!=</operator> <name>IDM_LANG_USER</name> <operator>)</operator> <operator>||</operator> <operator>!</operator><operator>(</operator> <call><name><name>buf</name><operator>-&gt;</operator><name>isUserDefineLangExt</name></name><argument_list>()</argument_list></call> <operator>)</operator></expr> )</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name><operator>::</operator><name>GetMenuString</name></name><argument_list>(<argument><expr><name>_mainMenuHandle</name></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr><name>menuLangName</name></expr></argument>, <argument><expr><name>menuItemStrLenMax</name></expr></argument>, <argument><expr><name>MF_BYCOMMAND</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>userLangName</name> <operator>=</operator> <name>menuLangName</name></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<expr_stmt><expr><name>userLangName</name> <operator>=</operator> <call><name><name>buf</name><operator>-&gt;</operator><name>getUserDefineLangName</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
	<return>return	<expr><name>userLangName</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>Style</name> <modifier>*</modifier></type> <name><name>Notepad_plus</name><operator>::</operator><name>getStyleFromName</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>TCHAR</name> <modifier>*</modifier></type><name>styleName</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name><name>NppParameters</name><operator>::</operator><name>getInstance</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getMiscStylerArray</name><argument_list>()</argument_list></call><operator>.</operator><call><name>findByName</name><argument_list>(<argument><expr><name>styleName</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name><name>Notepad_plus</name><operator>::</operator><name>noOpenedDoc</name></name><parameter_list>()</parameter_list> <specifier>const</specifier>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><call><name><name>_mainDocTab</name><operator>.</operator><name>isVisible</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>_subDocTab</name><operator>.</operator><name>isVisible</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><call><name><name>_pDocTab</name><operator>-&gt;</operator><name>nbItem</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>BufferID</name></type> <name>buffer</name> <init>= <expr><call><name><name>_pDocTab</name><operator>-&gt;</operator><name>getBufferByIndex</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>Buffer</name> <modifier>*</modifier></type> <name>buf</name> <init>= <expr><call><name><name>MainFileManager</name><operator>.</operator><name>getBufferByID</name></name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>buf</name><operator>-&gt;</operator><name>isDirty</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>buf</name><operator>-&gt;</operator><name>isUntitled</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><literal type="boolean">true</literal></expr>;</return></block_content></block></if></if_stmt>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><literal type="boolean">false</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name><name>Notepad_plus</name><operator>::</operator><name>reloadLang</name></name><parameter_list>()</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>NppParameters</name><modifier>&amp;</modifier></type> <name>nppParam</name> <init>= <expr><call><name><name>NppParameters</name><operator>::</operator><name>getInstance</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>nppParam</name><operator>.</operator><name>reloadLang</name></name><argument_list>()</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<return>return <expr><literal type="boolean">false</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<decl_stmt><decl><type><name>TiXmlDocumentA</name> <modifier>*</modifier></type><name>nativeLangDocRootA</name> <init>= <expr><call><name><name>nppParam</name><operator>.</operator><name>getNativeLangA</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>nativeLangDocRootA</name></expr>)</condition>
	<block>{<block_content>
		<return>return <expr><literal type="boolean">false</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name><name>_nativeLangSpeaker</name><operator>.</operator><name>init</name></name><argument_list>(<argument><expr><name>nativeLangDocRootA</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>nppParam</name><operator>.</operator><name>reloadContextMenuFromXmlTree</name></name><argument_list>(<argument><expr><name>_mainMenuHandle</name></expr></argument>, <argument><expr><call><name><name>_pluginsManager</name><operator>.</operator><name>getMenuHandle</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name><name>_nativeLangSpeaker</name><operator>.</operator><name>changeMenuLang</name></name><argument_list>(<argument><expr><name>_mainMenuHandle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><operator>::</operator><name>DrawMenuBar</name></name><argument_list>(<argument><expr><call><name><name>_pPublicInterface</name><operator>-&gt;</operator><name>getHSelf</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// Update scintilla context menu strings</comment>
	<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>MenuItemUnit</name></expr></argument>&gt;</argument_list></name> <modifier>&amp;</modifier></type> <name>tmp</name> <init>= <expr><call><name><name>nppParam</name><operator>.</operator><name>getContextMenuItems</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>len</name> <init>= <expr><call><name><name>tmp</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>TCHAR</name></type> <name><name>menuName</name><index>[<expr><name>menuItemStrLenMax</name></expr>]</index></name></decl>;</decl_stmt>
	<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr> ;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>tmp</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>_itemName</name> <operator>==</operator> <call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name><operator>::</operator><name>GetMenuString</name></name><argument_list>(<argument><expr><name>_mainMenuHandle</name></expr></argument>, <argument><expr><name><name>tmp</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>_cmdID</name></expr></argument>, <argument><expr><name>menuName</name></expr></argument>, <argument><expr><name>menuItemStrLenMax</name></expr></argument>, <argument><expr><name>MF_BYCOMMAND</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>tmp</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>_itemName</name> <operator>=</operator> <call><name>purgeMenuItemString</name><argument_list>(<argument><expr><name>menuName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>

	<expr_stmt><expr><call><name>updateCommandShortcuts</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name><name>_accelerator</name><operator>.</operator><name>updateFullMenu</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name><name>_scintaccelerator</name><operator>.</operator><name>updateKeys</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>


	<if_stmt><if>if <condition>(<expr><call><name><name>_tabPopupMenu</name><operator>.</operator><name>isCreated</name></name><argument_list>()</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name><name>_nativeLangSpeaker</name><operator>.</operator><name>changeLangTabContextMenu</name></name><argument_list>(<argument><expr><call><name><name>_tabPopupMenu</name><operator>.</operator><name>getMenuHandle</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><call><name><name>_tabPopupDropMenu</name><operator>.</operator><name>isCreated</name></name><argument_list>()</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name><name>_nativeLangSpeaker</name><operator>.</operator><name>changeLangTabDropContextMenu</name></name><argument_list>(<argument><expr><call><name><name>_tabPopupDropMenu</name><operator>.</operator><name>getMenuHandle</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><call><name><name>_fileSwitcherMultiFilePopupMenu</name><operator>.</operator><name>isCreated</name></name><argument_list>()</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<comment type="line">//_nativeLangSpeaker.changeLangTabDropContextMenu(_fileSwitcherMultiFilePopupMenu.getMenuHandle());</comment>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><call><name><name>_preference</name><operator>.</operator><name>isCreated</name></name><argument_list>()</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name><name>_nativeLangSpeaker</name><operator>.</operator><name>changePrefereceDlgLang</name></name><argument_list>(<argument><expr><name>_preference</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><call><name><name>_configStyleDlg</name><operator>.</operator><name>isCreated</name></name><argument_list>()</argument_list></call></expr>)</condition>
	<block>{<block_content>
        <expr_stmt><expr><call><name><name>_nativeLangSpeaker</name><operator>.</operator><name>changeConfigLang</name></name><argument_list>(<argument><expr><call><name><name>_configStyleDlg</name><operator>.</operator><name>getHSelf</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><call><name><name>_findReplaceDlg</name><operator>.</operator><name>isCreated</name></name><argument_list>()</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name><name>_nativeLangSpeaker</name><operator>.</operator><name>changeFindReplaceDlgLang</name></name><argument_list>(<argument><expr><name>_findReplaceDlg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><call><name><name>_goToLineDlg</name><operator>.</operator><name>isCreated</name></name><argument_list>()</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name><name>_nativeLangSpeaker</name><operator>.</operator><name>changeDlgLang</name></name><argument_list>(<argument><expr><call><name><name>_goToLineDlg</name><operator>.</operator><name>getHSelf</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"GoToLine"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><call><name><name>_runDlg</name><operator>.</operator><name>isCreated</name></name><argument_list>()</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name><name>_nativeLangSpeaker</name><operator>.</operator><name>changeDlgLang</name></name><argument_list>(<argument><expr><call><name><name>_runDlg</name><operator>.</operator><name>getHSelf</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"Run"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><call><name><name>_md5FromFilesDlg</name><operator>.</operator><name>isCreated</name></name><argument_list>()</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name><name>_nativeLangSpeaker</name><operator>.</operator><name>changeDlgLang</name></name><argument_list>(<argument><expr><call><name><name>_md5FromFilesDlg</name><operator>.</operator><name>getHSelf</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"MD5FromFilesDlg"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><call><name><name>_md5FromTextDlg</name><operator>.</operator><name>isCreated</name></name><argument_list>()</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name><name>_nativeLangSpeaker</name><operator>.</operator><name>changeDlgLang</name></name><argument_list>(<argument><expr><call><name><name>_md5FromTextDlg</name><operator>.</operator><name>getHSelf</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"MD5FromTextDlg"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><call><name><name>_sha2FromFilesDlg</name><operator>.</operator><name>isCreated</name></name><argument_list>()</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name><name>_nativeLangSpeaker</name><operator>.</operator><name>changeDlgLang</name></name><argument_list>(<argument><expr><call><name><name>_sha2FromFilesDlg</name><operator>.</operator><name>getHSelf</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"SHA256FromFilesDlg"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><call><name><name>_sha2FromTextDlg</name><operator>.</operator><name>isCreated</name></name><argument_list>()</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name><name>_nativeLangSpeaker</name><operator>.</operator><name>changeDlgLang</name></name><argument_list>(<argument><expr><call><name><name>_sha2FromTextDlg</name><operator>.</operator><name>getHSelf</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"SHA256FromTextDlg"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><call><name><name>_runMacroDlg</name><operator>.</operator><name>isCreated</name></name><argument_list>()</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name><name>_nativeLangSpeaker</name><operator>.</operator><name>changeDlgLang</name></name><argument_list>(<argument><expr><call><name><name>_runMacroDlg</name><operator>.</operator><name>getHSelf</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"MultiMacro"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><call><name><name>_incrementFindDlg</name><operator>.</operator><name>isCreated</name></name><argument_list>()</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name><name>_nativeLangSpeaker</name><operator>.</operator><name>changeDlgLang</name></name><argument_list>(<argument><expr><call><name><name>_incrementFindDlg</name><operator>.</operator><name>getHSelf</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"IncrementalFind"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><call><name><name>_findCharsInRangeDlg</name><operator>.</operator><name>isCreated</name></name><argument_list>()</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name><name>_nativeLangSpeaker</name><operator>.</operator><name>changeDlgLang</name></name><argument_list>(<argument><expr><call><name><name>_findCharsInRangeDlg</name><operator>.</operator><name>getHSelf</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"FindCharsInRange"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><call><name><name>_colEditorDlg</name><operator>.</operator><name>isCreated</name></name><argument_list>()</argument_list></call></expr>)</condition>
	<block>{<block_content>
        <expr_stmt><expr><call><name><name>_nativeLangSpeaker</name><operator>.</operator><name>changeDlgLang</name></name><argument_list>(<argument><expr><call><name><name>_colEditorDlg</name><operator>.</operator><name>getHSelf</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"ColumnEditor"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><call><name><name>_pluginsAdminDlg</name><operator>.</operator><name>isCreated</name></name><argument_list>()</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name><name>_nativeLangSpeaker</name><operator>.</operator><name>changePluginsAdminDlgLang</name></name><argument_list>(<argument><expr><name>_pluginsAdminDlg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<decl_stmt><decl><type><name>UserDefineDialog</name> <modifier>*</modifier></type><name>udd</name> <init>= <expr><call><name><name>_pEditView</name><operator>-&gt;</operator><name>getUserDefineDlg</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><call><name><name>udd</name><operator>-&gt;</operator><name>isCreated</name></name><argument_list>()</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name><name>_nativeLangSpeaker</name><operator>.</operator><name>changeUserDefineLang</name></name><argument_list>(<argument><expr><name>udd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name><name>_lastRecentFileList</name><operator>.</operator><name>setLangEncoding</name></name><argument_list>(<argument><expr><call><name><name>_nativeLangSpeaker</name><operator>.</operator><name>getLangEncoding</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><literal type="boolean">true</literal></expr>;</return>
</block_content>}</block></function>


<function><type><name>void</name></type> <name><name>Notepad_plus</name><operator>::</operator><name>launchClipboardHistoryPanel</name></name><parameter_list>()</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>NppParameters</name><modifier>&amp;</modifier></type> <name>nppParams</name> <init>= <expr><call><name><name>NppParameters</name><operator>::</operator><name>getInstance</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>_pClipboardHistoryPanel</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>_pClipboardHistoryPanel</name> <operator>=</operator> <operator>new</operator> <call><name>ClipboardHistoryPanel</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name><name>_pClipboardHistoryPanel</name><operator>-&gt;</operator><name>init</name></name><argument_list>(<argument><expr><call><name><name>_pPublicInterface</name><operator>-&gt;</operator><name>getHinst</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>_pPublicInterface</name><operator>-&gt;</operator><name>getHSelf</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>_pEditView</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<decl_stmt><decl><type><name>NativeLangSpeaker</name> <modifier>*</modifier></type><name>pNativeSpeaker</name> <init>= <expr><call><name><name>nppParams</name><operator>.</operator><name>getNativeLangSpeaker</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>bool</name></type> <name>isRTL</name> <init>= <expr><call><name><name>pNativeSpeaker</name><operator>-&gt;</operator><name>isRTL</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>tTbData</name></type>	<name>data</name> <init>= <expr><block>{}</block></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>_pClipboardHistoryPanel</name><operator>-&gt;</operator><name>create</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>data</name></expr></argument>, <argument><expr><name>isRTL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name><operator>::</operator><name>SendMessage</name></name><argument_list>(<argument><expr><call><name><name>_pPublicInterface</name><operator>-&gt;</operator><name>getHSelf</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>NPPM_MODELESSDIALOG</name></expr></argument>, <argument><expr><name>MODELESSDIALOGREMOVE</name></expr></argument>, <argument><expr><cast type="reinterpret">reinterpret_cast<argument_list type="generic">&lt;<argument><expr><name>LPARAM</name></expr></argument>&gt;</argument_list><argument_list>(<argument><expr><call><name><name>_pClipboardHistoryPanel</name><operator>-&gt;</operator><name>getHSelf</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></cast></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="line">// define the default docking behaviour</comment>
		<expr_stmt><expr><name><name>data</name><operator>.</operator><name>uMask</name></name> <operator>=</operator> <name>DWS_DF_CONT_RIGHT</name> <operator>|</operator> <name>DWS_ICONTAB</name> <operator>|</operator> <name>DWS_USEOWNDARKMODE</name></expr>;</expr_stmt>

		<decl_stmt><decl><type><name>int</name></type> <name>icoID</name> <init>= <expr><name>IDR_CLIPBOARDPANEL_ICO</name></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if <condition>(<expr><call><name><name>NppDarkMode</name><operator>::</operator><name>isEnabled</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>icoID</name> <operator>=</operator> <name>IDR_CLIPBOARDPANEL_ICO_DM</name></expr>;</expr_stmt></block_content></block></if>
		<if type="elseif">else if <condition>(<expr><call><name><name>nppParams</name><operator>.</operator><name>getNppGUI</name></name><argument_list>()</argument_list></call><operator>.</operator><name>_toolBarStatus</name> <operator>!=</operator> <name>TB_STANDARD</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>icoID</name> <operator>=</operator> <name>IDR_CLIPBOARDPANEL_ICO2</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<expr_stmt><expr><name><name>data</name><operator>.</operator><name>hIconTab</name></name> <operator>=</operator> <operator>(</operator><name>HICON</name><operator>)</operator><call><name><operator>::</operator><name>LoadImage</name></name><argument_list>(<argument><expr><call><name><name>_pPublicInterface</name><operator>-&gt;</operator><name>getHinst</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>MAKEINTRESOURCE</name><argument_list>(<argument><expr><name>icoID</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>IMAGE_ICON</name></expr></argument>, <argument><expr><literal type="number">14</literal></expr></argument>, <argument><expr><literal type="number">14</literal></expr></argument>, <argument><expr><name>LR_LOADMAP3DCOLORS</name> <operator>|</operator> <name>LR_LOADTRANSPARENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>data</name><operator>.</operator><name>pszModuleName</name></name> <operator>=</operator> <name>NPP_INTERNAL_FUCTION_STR</name></expr>;</expr_stmt>

		<comment type="line">// the dlgDlg should be the index of funcItem where the current function pointer is</comment>
		<comment type="line">// in this case is DOCKABLE_DEMO_INDEX</comment>
		<comment type="line">// In the case of Notepad++ internal function, it'll be the command ID which triggers this dialog</comment>
		<expr_stmt><expr><name><name>data</name><operator>.</operator><name>dlgID</name></name> <operator>=</operator> <name>IDM_EDIT_CLIPBOARDHISTORY_PANEL</name></expr>;</expr_stmt>

		<decl_stmt><decl><type><name>generic_string</name></type> <name>title_temp</name> <init>= <expr><call><name><name>pNativeSpeaker</name><operator>-&gt;</operator><name>getAttrNameStr</name></name><argument_list>(<argument><expr><name>CH_PROJECTPANELTITLE</name></expr></argument>, <argument><expr><literal type="string">"ClipboardHistory"</literal></expr></argument>, <argument><expr><literal type="string">"PanelTitle"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><specifier>static</specifier> <name>TCHAR</name></type> <name><name>title</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>
		<if_stmt><if>if <condition>(<expr><call><name><name>title_temp</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call> <operator>&lt;</operator> <literal type="number">32</literal></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>wcscpy_s</name><argument_list>(<argument><expr><name>title</name></expr></argument>, <argument><expr><call><name><name>title_temp</name><operator>.</operator><name>c_str</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>data</name><operator>.</operator><name>pszName</name></name> <operator>=</operator> <name>title</name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><call><name><operator>::</operator><name>SendMessage</name></name><argument_list>(<argument><expr><call><name><name>_pPublicInterface</name><operator>-&gt;</operator><name>getHSelf</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>NPPM_DMMREGASDCKDLG</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><cast type="reinterpret">reinterpret_cast<argument_list type="generic">&lt;<argument><expr><name>LPARAM</name></expr></argument>&gt;</argument_list><argument_list>(<argument><expr><operator>&amp;</operator><name>data</name></expr></argument>)</argument_list></cast></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<decl_stmt><decl><type><name>COLORREF</name></type> <name>fgColor</name> <init>= <expr><call><name><name>nppParams</name><operator>.</operator><name>getCurrentDefaultFgColor</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>COLORREF</name></type> <name>bgColor</name> <init>= <expr><call><name><name>nppParams</name><operator>.</operator><name>getCurrentDefaultBgColor</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><call><name><name>_pClipboardHistoryPanel</name><operator>-&gt;</operator><name>setBackgroundColor</name></name><argument_list>(<argument><expr><name>bgColor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>_pClipboardHistoryPanel</name><operator>-&gt;</operator><name>setForegroundColor</name></name><argument_list>(<argument><expr><name>fgColor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name><name>_pClipboardHistoryPanel</name><operator>-&gt;</operator><name>display</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type> <name><name>Notepad_plus</name><operator>::</operator><name>launchDocumentListPanel</name></name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>changeFromBtnCmd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>_pDocumentListPanel</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>NppParameters</name><modifier>&amp;</modifier></type> <name>nppParams</name> <init>= <expr><call><name><name>NppParameters</name><operator>::</operator><name>getInstance</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>tabBarStatus</name> <init>= <expr><call><name><name>nppParams</name><operator>.</operator><name>getNppGUI</name></name><argument_list>()</argument_list></call><operator>.</operator><name>_tabStatus</name></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><name>_pDocumentListPanel</name> <operator>=</operator> <operator>new</operator> <name>VerticalFileSwitcher</name></expr>;</expr_stmt>

		<decl_stmt><decl><type><name>HIMAGELIST</name></type> <name>hImgLst</name> <init>= <expr><literal type="null">nullptr</literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>tabIconSet</name> <init>= <expr><ternary><condition><expr><name>changeFromBtnCmd</name></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><call><name><name>NppDarkMode</name><operator>::</operator><name>getTabIconSet</name></name><argument_list>(<argument><expr><call><name><name>NppDarkMode</name><operator>::</operator><name>isEnabled</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>
		<switch>switch <condition>(<expr><name>tabIconSet</name></expr>)</condition>
		<block>{<block_content>
			<case>case <expr><literal type="number">0</literal></expr>:</case>
			<block>{<block_content>
				<expr_stmt><expr><name>hImgLst</name> <operator>=</operator> <call><name><name>_docTabIconList</name><operator>.</operator><name>getHandle</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
			</block_content>}</block>
			<case>case <expr><literal type="number">1</literal></expr>:</case>
			<block>{<block_content>
				<expr_stmt><expr><name>hImgLst</name> <operator>=</operator> <call><name><name>_docTabIconListAlt</name><operator>.</operator><name>getHandle</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
			</block_content>}</block>
			<case>case <expr><literal type="number">2</literal></expr>:</case>
			<block>{<block_content>
				<expr_stmt><expr><name>hImgLst</name> <operator>=</operator> <call><name><name>_docTabIconListDarkMode</name><operator>.</operator><name>getHandle</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
			</block_content>}</block>
			<comment type="line">//case -1:</comment>
			<default>default:</default>
				<expr_stmt><expr><name>hImgLst</name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><operator>(</operator><operator>(</operator><name>tabBarStatus</name> <operator>&amp;</operator> <name>TAB_ALTICONS</name><operator>)</operator> <operator>==</operator> <name>TAB_ALTICONS</name><operator>)</operator></expr> ?</condition><then> <expr><call><name><name>_docTabIconListAlt</name><operator>.</operator><name>getHandle</name></name><argument_list>()</argument_list></call></expr> </then><else>: <expr><ternary><condition><expr><call><name><name>NppDarkMode</name><operator>::</operator><name>isEnabled</name></name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><call><name><name>_docTabIconListDarkMode</name><operator>.</operator><name>getHandle</name></name><argument_list>()</argument_list></call></expr> </then><else>: <expr><call><name><name>_docTabIconList</name><operator>.</operator><name>getHandle</name></name><argument_list>()</argument_list></call></expr></else></ternary></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
		</block_content>}</block></switch>

		<expr_stmt><expr><call><name><name>_pDocumentListPanel</name><operator>-&gt;</operator><name>init</name></name><argument_list>(<argument><expr><call><name><name>_pPublicInterface</name><operator>-&gt;</operator><name>getHinst</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>_pPublicInterface</name><operator>-&gt;</operator><name>getHSelf</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>hImgLst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<decl_stmt><decl><type><name>NativeLangSpeaker</name> <modifier>*</modifier></type><name>pNativeSpeaker</name> <init>= <expr><call><name><name>nppParams</name><operator>.</operator><name>getNativeLangSpeaker</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>bool</name></type> <name>isRTL</name> <init>= <expr><call><name><name>pNativeSpeaker</name><operator>-&gt;</operator><name>isRTL</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>tTbData</name></type>	<name>data</name> <init>= <expr><block>{}</block></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>_pDocumentListPanel</name><operator>-&gt;</operator><name>create</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>data</name></expr></argument>, <argument><expr><name>isRTL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name><operator>::</operator><name>SendMessage</name></name><argument_list>(<argument><expr><call><name><name>_pPublicInterface</name><operator>-&gt;</operator><name>getHSelf</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>NPPM_MODELESSDIALOG</name></expr></argument>, <argument><expr><name>MODELESSDIALOGREMOVE</name></expr></argument>, <argument><expr><cast type="reinterpret">reinterpret_cast<argument_list type="generic">&lt;<argument><expr><name>LPARAM</name></expr></argument>&gt;</argument_list><argument_list>(<argument><expr><call><name><name>_pDocumentListPanel</name><operator>-&gt;</operator><name>getHSelf</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></cast></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="line">// define the default docking behaviour</comment>
		<expr_stmt><expr><name><name>data</name><operator>.</operator><name>uMask</name></name> <operator>=</operator> <name>DWS_DF_CONT_LEFT</name> <operator>|</operator> <name>DWS_ICONTAB</name> <operator>|</operator> <name>DWS_USEOWNDARKMODE</name></expr>;</expr_stmt>

		<decl_stmt><decl><type><name>int</name></type> <name>icoID</name> <init>= <expr><name>IDR_DOCLIST_ICO</name></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if <condition>(<expr><call><name><name>NppDarkMode</name><operator>::</operator><name>isEnabled</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>icoID</name> <operator>=</operator> <name>IDR_DOCLIST_ICO_DM</name></expr>;</expr_stmt></block_content></block></if>
		<if type="elseif">else if <condition>(<expr><call><name><name>nppParams</name><operator>.</operator><name>getNppGUI</name></name><argument_list>()</argument_list></call><operator>.</operator><name>_toolBarStatus</name> <operator>!=</operator> <name>TB_STANDARD</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>icoID</name> <operator>=</operator> <name>IDR_DOCLIST_ICO2</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<expr_stmt><expr><name><name>data</name><operator>.</operator><name>hIconTab</name></name> <operator>=</operator> <operator>(</operator><name>HICON</name><operator>)</operator><call><name><operator>::</operator><name>LoadImage</name></name><argument_list>(<argument><expr><call><name><name>_pPublicInterface</name><operator>-&gt;</operator><name>getHinst</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>MAKEINTRESOURCE</name><argument_list>(<argument><expr><name>icoID</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>IMAGE_ICON</name></expr></argument>, <argument><expr><literal type="number">14</literal></expr></argument>, <argument><expr><literal type="number">14</literal></expr></argument>, <argument><expr><name>LR_LOADMAP3DCOLORS</name> <operator>|</operator> <name>LR_LOADTRANSPARENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>data</name><operator>.</operator><name>pszModuleName</name></name> <operator>=</operator> <name>NPP_INTERNAL_FUCTION_STR</name></expr>;</expr_stmt>

		<comment type="line">// the dlgDlg should be the index of funcItem where the current function pointer is</comment>
		<comment type="line">// in this case is DOCKABLE_DEMO_INDEX</comment>
		<comment type="line">// In the case of Notepad++ internal function, it'll be the command ID which triggers this dialog</comment>
		<expr_stmt><expr><name><name>data</name><operator>.</operator><name>dlgID</name></name> <operator>=</operator> <name>IDM_VIEW_DOCLIST</name></expr>;</expr_stmt>

		<decl_stmt><decl><type><name>generic_string</name></type> <name>title_temp</name> <init>= <expr><call><name><name>pNativeSpeaker</name><operator>-&gt;</operator><name>getAttrNameStr</name></name><argument_list>(<argument><expr><name>FS_PROJECTPANELTITLE</name></expr></argument>, <argument><expr><literal type="string">"DocList"</literal></expr></argument>, <argument><expr><literal type="string">"PanelTitle"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><specifier>static</specifier> <name>TCHAR</name></type> <name><name>title</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>
		<if_stmt><if>if <condition>(<expr><call><name><name>title_temp</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call> <operator>&lt;</operator> <literal type="number">32</literal></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>wcscpy_s</name><argument_list>(<argument><expr><name>title</name></expr></argument>, <argument><expr><call><name><name>title_temp</name><operator>.</operator><name>c_str</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>data</name><operator>.</operator><name>pszName</name></name> <operator>=</operator> <name>title</name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><call><name><operator>::</operator><name>SendMessage</name></name><argument_list>(<argument><expr><call><name><name>_pPublicInterface</name><operator>-&gt;</operator><name>getHSelf</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>NPPM_DMMREGASDCKDLG</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><cast type="reinterpret">reinterpret_cast<argument_list type="generic">&lt;<argument><expr><name>LPARAM</name></expr></argument>&gt;</argument_list><argument_list>(<argument><expr><operator>&amp;</operator><name>data</name></expr></argument>)</argument_list></cast></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<decl_stmt><decl><type><name>COLORREF</name></type> <name>fgColor</name> <init>= <expr><call><name><name>nppParams</name><operator>.</operator><name>getCurrentDefaultFgColor</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>COLORREF</name></type> <name>bgColor</name> <init>= <expr><call><name><name>nppParams</name><operator>.</operator><name>getCurrentDefaultBgColor</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><call><name><name>_pDocumentListPanel</name><operator>-&gt;</operator><name>setBackgroundColor</name></name><argument_list>(<argument><expr><name>bgColor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>_pDocumentListPanel</name><operator>-&gt;</operator><name>setForegroundColor</name></name><argument_list>(<argument><expr><name>fgColor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name><name>_pDocumentListPanel</name><operator>-&gt;</operator><name>display</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type> <name><name>Notepad_plus</name><operator>::</operator><name>launchAnsiCharPanel</name></name><parameter_list>()</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>_pAnsiCharPanel</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>_pAnsiCharPanel</name> <operator>=</operator> <operator>new</operator> <call><name>AnsiCharPanel</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>_pAnsiCharPanel</name><operator>-&gt;</operator><name>init</name></name><argument_list>(<argument><expr><call><name><name>_pPublicInterface</name><operator>-&gt;</operator><name>getHinst</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>_pPublicInterface</name><operator>-&gt;</operator><name>getHSelf</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>_pEditView</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<decl_stmt><decl><type><name>NppParameters</name><modifier>&amp;</modifier></type> <name>nppParams</name> <init>= <expr><call><name><name>NppParameters</name><operator>::</operator><name>getInstance</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

		<decl_stmt><decl><type><name>NativeLangSpeaker</name> <modifier>*</modifier></type><name>pNativeSpeaker</name> <init>= <expr><call><name><name>nppParams</name><operator>.</operator><name>getNativeLangSpeaker</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>bool</name></type> <name>isRTL</name> <init>= <expr><call><name><name>pNativeSpeaker</name><operator>-&gt;</operator><name>isRTL</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>tTbData</name></type>	<name>data</name> <init>= <expr><block>{}</block></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>_pAnsiCharPanel</name><operator>-&gt;</operator><name>create</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>data</name></expr></argument>, <argument><expr><name>isRTL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name><operator>::</operator><name>SendMessage</name></name><argument_list>(<argument><expr><call><name><name>_pPublicInterface</name><operator>-&gt;</operator><name>getHSelf</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>NPPM_MODELESSDIALOG</name></expr></argument>, <argument><expr><name>MODELESSDIALOGREMOVE</name></expr></argument>, <argument><expr><cast type="reinterpret">reinterpret_cast<argument_list type="generic">&lt;<argument><expr><name>LPARAM</name></expr></argument>&gt;</argument_list><argument_list>(<argument><expr><call><name><name>_pAnsiCharPanel</name><operator>-&gt;</operator><name>getHSelf</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></cast></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="line">// define the default docking behaviour</comment>
		<expr_stmt><expr><name><name>data</name><operator>.</operator><name>uMask</name></name> <operator>=</operator> <name>DWS_DF_CONT_RIGHT</name> <operator>|</operator> <name>DWS_ICONTAB</name> <operator>|</operator> <name>DWS_USEOWNDARKMODE</name></expr>;</expr_stmt>

		<decl_stmt><decl><type><name>int</name></type> <name>icoID</name> <init>= <expr><name>IDR_ASCIIPANEL_ICO</name></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if <condition>(<expr><call><name><name>NppDarkMode</name><operator>::</operator><name>isEnabled</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>icoID</name> <operator>=</operator> <name>IDR_ASCIIPANEL_ICO_DM</name></expr>;</expr_stmt></block_content></block></if>
		<if type="elseif">else if <condition>(<expr><call><name><name>nppParams</name><operator>.</operator><name>getNppGUI</name></name><argument_list>()</argument_list></call><operator>.</operator><name>_toolBarStatus</name> <operator>!=</operator> <name>TB_STANDARD</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>icoID</name> <operator>=</operator> <name>IDR_ASCIIPANEL_ICO2</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<expr_stmt><expr><name><name>data</name><operator>.</operator><name>hIconTab</name></name> <operator>=</operator> <operator>(</operator><name>HICON</name><operator>)</operator><call><name><operator>::</operator><name>LoadImage</name></name><argument_list>(<argument><expr><call><name><name>_pPublicInterface</name><operator>-&gt;</operator><name>getHinst</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>MAKEINTRESOURCE</name><argument_list>(<argument><expr><name>icoID</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>IMAGE_ICON</name></expr></argument>, <argument><expr><literal type="number">14</literal></expr></argument>, <argument><expr><literal type="number">14</literal></expr></argument>, <argument><expr><name>LR_LOADMAP3DCOLORS</name> <operator>|</operator> <name>LR_LOADTRANSPARENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>data</name><operator>.</operator><name>pszModuleName</name></name> <operator>=</operator> <name>NPP_INTERNAL_FUCTION_STR</name></expr>;</expr_stmt>

		<comment type="line">// the dlgDlg should be the index of funcItem where the current function pointer is</comment>
		<comment type="line">// in this case is DOCKABLE_DEMO_INDEX</comment>
		<comment type="line">// In the case of Notepad++ internal function, it'll be the command ID which triggers this dialog</comment>
		<expr_stmt><expr><name><name>data</name><operator>.</operator><name>dlgID</name></name> <operator>=</operator> <name>IDM_EDIT_CHAR_PANEL</name></expr>;</expr_stmt>

		<decl_stmt><decl><type><name>generic_string</name></type> <name>title_temp</name> <init>= <expr><call><name><name>pNativeSpeaker</name><operator>-&gt;</operator><name>getAttrNameStr</name></name><argument_list>(<argument><expr><name>AI_PROJECTPANELTITLE</name></expr></argument>, <argument><expr><literal type="string">"AsciiInsertion"</literal></expr></argument>, <argument><expr><literal type="string">"PanelTitle"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><specifier>static</specifier> <name>TCHAR</name></type> <name><name>title</name><index>[<expr><literal type="number">85</literal></expr>]</index></name></decl>;</decl_stmt>
		<if_stmt><if>if <condition>(<expr><call><name><name>title_temp</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call> <operator>&lt;</operator> <literal type="number">85</literal></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>wcscpy_s</name><argument_list>(<argument><expr><name>title</name></expr></argument>, <argument><expr><call><name><name>title_temp</name><operator>.</operator><name>c_str</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>data</name><operator>.</operator><name>pszName</name></name> <operator>=</operator> <name>title</name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><call><name><operator>::</operator><name>SendMessage</name></name><argument_list>(<argument><expr><call><name><name>_pPublicInterface</name><operator>-&gt;</operator><name>getHSelf</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>NPPM_DMMREGASDCKDLG</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><cast type="reinterpret">reinterpret_cast<argument_list type="generic">&lt;<argument><expr><name>LPARAM</name></expr></argument>&gt;</argument_list><argument_list>(<argument><expr><operator>&amp;</operator><name>data</name></expr></argument>)</argument_list></cast></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<decl_stmt><decl><type><name>COLORREF</name></type> <name>fgColor</name> <init>= <expr><call><name><name>nppParams</name><operator>.</operator><name>getCurrentDefaultFgColor</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>COLORREF</name></type> <name>bgColor</name> <init>= <expr><call><name><name>nppParams</name><operator>.</operator><name>getCurrentDefaultBgColor</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><call><name><name>_pAnsiCharPanel</name><operator>-&gt;</operator><name>setBackgroundColor</name></name><argument_list>(<argument><expr><name>bgColor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>_pAnsiCharPanel</name><operator>-&gt;</operator><name>setForegroundColor</name></name><argument_list>(<argument><expr><name>fgColor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name><name>_pAnsiCharPanel</name><operator>-&gt;</operator><name>display</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name><name>Notepad_plus</name><operator>::</operator><name>launchFileBrowser</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>generic_string</name></expr></argument>&gt;</argument_list></name> <modifier>&amp;</modifier></type> <name>folders</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>generic_string</name><modifier>&amp;</modifier></type> <name>selectedItemPath</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>fromScratch</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>_pFileBrowser</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>_pFileBrowser</name> <operator>=</operator> <operator>new</operator> <name>FileBrowser</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>_pFileBrowser</name><operator>-&gt;</operator><name>init</name></name><argument_list>(<argument><expr><call><name><name>_pPublicInterface</name><operator>-&gt;</operator><name>getHinst</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>_pPublicInterface</name><operator>-&gt;</operator><name>getHSelf</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<decl_stmt><decl><type><name>tTbData</name></type>	<name>data</name> <init>= <expr><block>{}</block></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>_pFileBrowser</name><operator>-&gt;</operator><name>create</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>data</name></expr></argument>, <argument><expr><call><name><name>_nativeLangSpeaker</name><operator>.</operator><name>isRTL</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>data</name><operator>.</operator><name>pszName</name></name> <operator>=</operator> <call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"ST"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<decl_stmt><decl><type><name>NppParameters</name><modifier>&amp;</modifier></type> <name>nppParams</name> <init>= <expr><call><name><name>NppParameters</name><operator>::</operator><name>getInstance</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><call><name><operator>::</operator><name>SendMessage</name></name><argument_list>(<argument><expr><call><name><name>_pPublicInterface</name><operator>-&gt;</operator><name>getHSelf</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>NPPM_MODELESSDIALOG</name></expr></argument>, <argument><expr><name>MODELESSDIALOGREMOVE</name></expr></argument>, <argument><expr><cast type="reinterpret">reinterpret_cast<argument_list type="generic">&lt;<argument><expr><name>LPARAM</name></expr></argument>&gt;</argument_list><argument_list>(<argument><expr><call><name><name>_pFileBrowser</name><operator>-&gt;</operator><name>getHSelf</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></cast></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="line">// define the default docking behaviour</comment>
		<expr_stmt><expr><name><name>data</name><operator>.</operator><name>uMask</name></name> <operator>=</operator> <name>DWS_DF_CONT_LEFT</name> <operator>|</operator> <name>DWS_ICONTAB</name> <operator>|</operator> <name>DWS_USEOWNDARKMODE</name></expr>;</expr_stmt>
		
		<decl_stmt><decl><type><name>int</name></type> <name>icoID</name> <init>= <expr><name>IDR_FILEBROWSER_ICO</name></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if <condition>(<expr><call><name><name>NppDarkMode</name><operator>::</operator><name>isEnabled</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>icoID</name> <operator>=</operator> <name>IDR_FILEBROWSER_ICO_DM</name></expr>;</expr_stmt></block_content></block></if>
		<if type="elseif">else if <condition>(<expr><call><name><name>nppParams</name><operator>.</operator><name>getNppGUI</name></name><argument_list>()</argument_list></call><operator>.</operator><name>_toolBarStatus</name> <operator>!=</operator> <name>TB_STANDARD</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>icoID</name> <operator>=</operator> <name>IDR_FILEBROWSER_ICO2</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<expr_stmt><expr><name><name>data</name><operator>.</operator><name>hIconTab</name></name> <operator>=</operator> <operator>(</operator><name>HICON</name><operator>)</operator><call><name><operator>::</operator><name>LoadImage</name></name><argument_list>(<argument><expr><call><name><name>_pPublicInterface</name><operator>-&gt;</operator><name>getHinst</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>MAKEINTRESOURCE</name><argument_list>(<argument><expr><name>icoID</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>IMAGE_ICON</name></expr></argument>, <argument><expr><literal type="number">14</literal></expr></argument>, <argument><expr><literal type="number">14</literal></expr></argument>, <argument><expr><name>LR_LOADMAP3DCOLORS</name> <operator>|</operator> <name>LR_LOADTRANSPARENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>data</name><operator>.</operator><name>pszModuleName</name></name> <operator>=</operator> <name>NPP_INTERNAL_FUCTION_STR</name></expr>;</expr_stmt>

		<comment type="line">// the dlgDlg should be the index of funcItem where the current function pointer is</comment>
		<comment type="line">// in this case is DOCKABLE_DEMO_INDEX</comment>
		<comment type="line">// In the case of Notepad++ internal function, it'll be the command ID which triggers this dialog</comment>
		<expr_stmt><expr><name><name>data</name><operator>.</operator><name>dlgID</name></name> <operator>=</operator> <name>IDM_VIEW_FILEBROWSER</name></expr>;</expr_stmt>

		<decl_stmt><decl><type><name>NativeLangSpeaker</name> <modifier>*</modifier></type><name>pNativeSpeaker</name> <init>= <expr><call><name><name>nppParams</name><operator>.</operator><name>getNativeLangSpeaker</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>generic_string</name></type> <name>title_temp</name> <init>= <expr><call><name><name>pNativeSpeaker</name><operator>-&gt;</operator><name>getAttrNameStr</name></name><argument_list>(<argument><expr><name>FB_PANELTITLE</name></expr></argument>, <argument><expr><name>FOLDERASWORKSPACE_NODE</name></expr></argument>, <argument><expr><literal type="string">"PanelTitle"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<decl_stmt><decl><type><specifier>static</specifier> <name>TCHAR</name></type> <name><name>title</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>
		<if_stmt><if>if <condition>(<expr><call><name><name>title_temp</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call> <operator>&lt;</operator> <literal type="number">32</literal></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>wcscpy_s</name><argument_list>(<argument><expr><name>title</name></expr></argument>, <argument><expr><call><name><name>title_temp</name><operator>.</operator><name>c_str</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>data</name><operator>.</operator><name>pszName</name></name> <operator>=</operator> <name>title</name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><call><name><operator>::</operator><name>SendMessage</name></name><argument_list>(<argument><expr><call><name><name>_pPublicInterface</name><operator>-&gt;</operator><name>getHSelf</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>NPPM_DMMREGASDCKDLG</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><cast type="reinterpret">reinterpret_cast<argument_list type="generic">&lt;<argument><expr><name>LPARAM</name></expr></argument>&gt;</argument_list><argument_list>(<argument><expr><operator>&amp;</operator><name>data</name></expr></argument>)</argument_list></cast></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<decl_stmt><decl><type><name>COLORREF</name></type> <name>fgColor</name> <init>= <expr><call><name><name>nppParams</name><operator>.</operator><name>getCurrentDefaultFgColor</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>COLORREF</name></type> <name>bgColor</name> <init>= <expr><call><name><name>nppParams</name><operator>.</operator><name>getCurrentDefaultBgColor</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><call><name><name>_pFileBrowser</name><operator>-&gt;</operator><name>setBackgroundColor</name></name><argument_list>(<argument><expr><name>bgColor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>_pFileBrowser</name><operator>-&gt;</operator><name>setForegroundColor</name></name><argument_list>(<argument><expr><name>fgColor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>fromScratch</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name><name>_pFileBrowser</name><operator>-&gt;</operator><name>deleteAllFromTree</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator><call><name><name>folders</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
	<block>{<block_content>
		<expr_stmt><expr><call><name><name>_pFileBrowser</name><operator>-&gt;</operator><name>addRootFolder</name></name><argument_list>(<argument><expr><name><name>folders</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>

	<expr_stmt><expr><call><name><name>_pFileBrowser</name><operator>-&gt;</operator><name>display</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name>_pFileBrowser</name><operator>-&gt;</operator><name>selectItemFromPath</name></name><argument_list>(<argument><expr><name>selectedItemPath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>checkMenuItem</name><argument_list>(<argument><expr><name>IDM_VIEW_FILEBROWSER</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name>_toolBar</name><operator>.</operator><name>setCheck</name></name><argument_list>(<argument><expr><name>IDM_VIEW_FILEBROWSER</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name>_pFileBrowser</name><operator>-&gt;</operator><name>setClosed</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name><name>Notepad_plus</name><operator>::</operator><name>checkProjectMenuItem</name></name><parameter_list>()</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>HMENU</name></type> <name>viewMenu</name> <init>= <expr><call><name><operator>::</operator><name>GetSubMenu</name></name><argument_list>(<argument><expr><name>_mainMenuHandle</name></expr></argument>, <argument><expr><name>MENUINDEX_VIEW</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>viewMenuCount</name> <init>= <expr><call><name><operator>::</operator><name>GetMenuItemCount</name></name><argument_list>(<argument><expr><name>viewMenu</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>viewMenuCount</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<decl_stmt><decl><type><name>HMENU</name></type> <name>subMenu</name> <init>= <expr><call><name><operator>::</operator><name>GetSubMenu</name></name><argument_list>(<argument><expr><name>viewMenu</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if <condition>(<expr><name>subMenu</name></expr>)</condition>
		<block>{<block_content>
			<decl_stmt><decl><type><name>int</name></type> <name>subMenuCount</name> <init>= <expr><call><name><operator>::</operator><name>GetMenuItemCount</name></name><argument_list>(<argument><expr><name>subMenu</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>bool</name></type> <name>found</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>bool</name></type> <name>checked</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
			<for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>subMenuCount</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
			<block>{<block_content>
				<decl_stmt><decl><type><name>UINT</name> <specifier>const</specifier></type> <name><name>ids</name> <index>[]</index></name> <init>= <expr><block>{<expr><name>IDM_VIEW_PROJECT_PANEL_1</name></expr>, <expr><name>IDM_VIEW_PROJECT_PANEL_2</name></expr>, <expr><name>IDM_VIEW_PROJECT_PANEL_3</name></expr>}</block></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>UINT</name></type> <name>id</name> <init>= <expr><call><name>GetMenuItemID</name> <argument_list>(<argument><expr><name>subMenu</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<for>for <control>(<init><decl><type><name>size_t</name></type> <name>k</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <call><name>_countof</name><argument_list>(<argument><expr><name>ids</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control>
				<block>{<block_content>
					<if_stmt><if>if <condition>(<expr><name>id</name> <operator>==</operator> <name><name>ids</name> <index>[<expr><name>k</name></expr>]</index></name></expr>)</condition>
					<block>{<block_content>
						<expr_stmt><expr><name>found</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
						<decl_stmt><decl><type><name>UINT</name></type> <name>s</name> <init>= <expr><call><name>GetMenuState</name><argument_list>(<argument><expr><name>subMenu</name></expr></argument>, <argument><expr><name>j</name></expr></argument>, <argument><expr><name>MF_BYPOSITION</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
						<if_stmt><if>if <condition>(<expr><name>s</name> <operator>&amp;</operator> <name>MF_CHECKED</name></expr>)</condition>
						<block>{<block_content>
							<expr_stmt><expr><name>checked</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
							<break>break;</break>
						</block_content>}</block></if></if_stmt>
					</block_content>}</block></if></if_stmt>
				</block_content>}</block></for>
			</block_content>}</block></for>
			<if_stmt><if>if <condition>(<expr><name>found</name></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><call><name>CheckMenuItem</name><argument_list>(<argument><expr><name>viewMenu</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><operator>(</operator><ternary><condition><expr><name>checked</name></expr> ?</condition><then> <expr><name>MF_CHECKED</name></expr> </then><else>: <expr><name>MF_UNCHECKED</name></expr></else></ternary><operator>)</operator> <operator>|</operator> <name>MF_BYPOSITION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>
</block_content>}</block></function>

<function><type><name>void</name></type> <name><name>Notepad_plus</name><operator>::</operator><name>launchProjectPanel</name></name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>cmdID</name></decl></parameter>, <parameter><decl><type><name>ProjectPanel</name> <modifier>*</modifier><modifier>*</modifier></type> <name>pProjPanel</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>panelID</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>NppParameters</name><modifier>&amp;</modifier></type> <name>nppParam</name> <init>= <expr><call><name><name>NppParameters</name><operator>::</operator><name>getInstance</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><operator>*</operator><name>pProjPanel</name><operator>)</operator></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><operator>(</operator><operator>*</operator><name>pProjPanel</name><operator>)</operator> <operator>=</operator> <operator>new</operator> <name>ProjectPanel</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><operator>(</operator><operator>*</operator><name>pProjPanel</name><operator>)</operator><operator>-&gt;</operator><name>init</name></name><argument_list>(<argument><expr><call><name><name>_pPublicInterface</name><operator>-&gt;</operator><name>getHinst</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>_pPublicInterface</name><operator>-&gt;</operator><name>getHSelf</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>panelID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><operator>(</operator><operator>*</operator><name>pProjPanel</name><operator>)</operator><operator>-&gt;</operator><name>setWorkSpaceFilePath</name></name><argument_list>(<argument><expr><call><name><name>nppParam</name><operator>.</operator><name>getWorkSpaceFilePath</name></name><argument_list>(<argument><expr><name>panelID</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<decl_stmt><decl><type><name>NativeLangSpeaker</name> <modifier>*</modifier></type><name>pNativeSpeaker</name> <init>= <expr><call><name><name>nppParam</name><operator>.</operator><name>getNativeLangSpeaker</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>bool</name></type> <name>isRTL</name> <init>= <expr><call><name><name>pNativeSpeaker</name><operator>-&gt;</operator><name>isRTL</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>tTbData</name></type>	<name>data</name> <init>= <expr><block>{}</block></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><operator>(</operator><operator>*</operator><name>pProjPanel</name><operator>)</operator><operator>-&gt;</operator><name>create</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>data</name></expr></argument>, <argument><expr><name>isRTL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>data</name><operator>.</operator><name>pszName</name></name> <operator>=</operator> <call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"ST"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name><operator>::</operator><name>SendMessage</name></name><argument_list>(<argument><expr><call><name><name>_pPublicInterface</name><operator>-&gt;</operator><name>getHSelf</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>NPPM_MODELESSDIALOG</name></expr></argument>, <argument><expr><name>MODELESSDIALOGREMOVE</name></expr></argument>, <argument><expr><cast type="reinterpret">reinterpret_cast<argument_list type="generic">&lt;<argument><expr><name>LPARAM</name></expr></argument>&gt;</argument_list><argument_list>(<argument><expr><call><name><operator>(</operator><operator>*</operator><name>pProjPanel</name><operator>)</operator><operator>-&gt;</operator><name>getHSelf</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></cast></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="line">// define the default docking behaviour</comment>
		<expr_stmt><expr><name><name>data</name><operator>.</operator><name>uMask</name></name> <operator>=</operator> <name>DWS_DF_CONT_LEFT</name> <operator>|</operator> <name>DWS_ICONTAB</name> <operator>|</operator> <name>DWS_USEOWNDARKMODE</name></expr>;</expr_stmt>

		<decl_stmt><decl><type><name>int</name></type> <name>icoID</name> <init>= <expr><name>IDR_PROJECTPANEL_ICO</name></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if <condition>(<expr><call><name><name>NppDarkMode</name><operator>::</operator><name>isEnabled</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>icoID</name> <operator>=</operator> <name>IDR_PROJECTPANEL_ICO_DM</name></expr>;</expr_stmt></block_content></block></if>
		<if type="elseif">else if <condition>(<expr><call><name><name>nppParam</name><operator>.</operator><name>getNppGUI</name></name><argument_list>()</argument_list></call><operator>.</operator><name>_toolBarStatus</name> <operator>!=</operator> <name>TB_STANDARD</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>icoID</name> <operator>=</operator> <name>IDR_PROJECTPANEL_ICO2</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<expr_stmt><expr><name><name>data</name><operator>.</operator><name>hIconTab</name></name> <operator>=</operator> <operator>(</operator><name>HICON</name><operator>)</operator><call><name><operator>::</operator><name>LoadImage</name></name><argument_list>(<argument><expr><call><name><name>_pPublicInterface</name><operator>-&gt;</operator><name>getHinst</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>MAKEINTRESOURCE</name><argument_list>(<argument><expr><name>icoID</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>IMAGE_ICON</name></expr></argument>, <argument><expr><literal type="number">14</literal></expr></argument>, <argument><expr><literal type="number">14</literal></expr></argument>, <argument><expr><name>LR_LOADMAP3DCOLORS</name> <operator>|</operator> <name>LR_LOADTRANSPARENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>data</name><operator>.</operator><name>pszModuleName</name></name> <operator>=</operator> <name>NPP_INTERNAL_FUCTION_STR</name></expr>;</expr_stmt>

		<comment type="line">// the dlgDlg should be the index of funcItem where the current function pointer is</comment>
		<comment type="line">// in this case is DOCKABLE_DEMO_INDEX</comment>
		<comment type="line">// In the case of Notepad++ internal function, it'll be the command ID which triggers this dialog</comment>
		<expr_stmt><expr><name><name>data</name><operator>.</operator><name>dlgID</name></name> <operator>=</operator> <name>cmdID</name></expr>;</expr_stmt>

		<decl_stmt><decl><type><name>generic_string</name></type> <name>title_no</name> <init>= <expr><call><name>to_wstring</name> <argument_list>(<argument><expr><name>panelID</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>generic_string</name></type> <name>title_temp</name> <init>= <expr><call><name><name>pNativeSpeaker</name><operator>-&gt;</operator><name>getAttrNameStr</name></name><argument_list>(<argument><expr><name>PM_PROJECTPANELTITLE</name></expr></argument>, <argument><expr><literal type="string">"ProjectManager"</literal></expr></argument>, <argument><expr><literal type="string">"PanelTitle"</literal></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">" "</literal></expr></argument>)</argument_list></call> <operator>+</operator> <name>title_no</name></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><operator>(</operator><operator>*</operator><name>pProjPanel</name><operator>)</operator><operator>-&gt;</operator><name>setPanelTitle</name></name><argument_list>(<argument><expr><name>title_temp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>data</name><operator>.</operator><name>pszName</name></name> <operator>=</operator> <call><name><operator>(</operator><operator>*</operator><name>pProjPanel</name><operator>)</operator><operator>-&gt;</operator><name>getPanelTitle</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><operator>::</operator><name>SendMessage</name></name><argument_list>(<argument><expr><call><name><name>_pPublicInterface</name><operator>-&gt;</operator><name>getHSelf</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>NPPM_DMMREGASDCKDLG</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><cast type="reinterpret">reinterpret_cast<argument_list type="generic">&lt;<argument><expr><name>LPARAM</name></expr></argument>&gt;</argument_list><argument_list>(<argument><expr><operator>&amp;</operator><name>data</name></expr></argument>)</argument_list></cast></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<decl_stmt><decl><type><name>COLORREF</name></type> <name>fgColor</name> <init>= <expr><call><name><name>nppParam</name><operator>.</operator><name>getCurrentDefaultFgColor</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>COLORREF</name></type> <name>bgColor</name> <init>= <expr><call><name><name>nppParam</name><operator>.</operator><name>getCurrentDefaultBgColor</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><call><name><operator>(</operator><operator>*</operator><name>pProjPanel</name><operator>)</operator><operator>-&gt;</operator><name>setBackgroundColor</name></name><argument_list>(<argument><expr><name>bgColor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><operator>(</operator><operator>*</operator><name>pProjPanel</name><operator>)</operator><operator>-&gt;</operator><name>setForegroundColor</name></name><argument_list>(<argument><expr><name>fgColor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<expr_stmt><expr><call><name><operator>(</operator><operator>*</operator><name>pProjPanel</name><operator>)</operator><operator>-&gt;</operator><name>openWorkSpace</name></name><argument_list>(<argument><expr><call><name><name>nppParam</name><operator>.</operator><name>getWorkSpaceFilePath</name></name><argument_list>(<argument><expr><name>panelID</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
	<expr_stmt><expr><call><name><operator>(</operator><operator>*</operator><name>pProjPanel</name><operator>)</operator><operator>-&gt;</operator><name>display</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>checkMenuItem</name><argument_list>(<argument><expr><name>cmdID</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>checkProjectMenuItem</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><operator>(</operator><operator>*</operator><name>pProjPanel</name><operator>)</operator><operator>-&gt;</operator><name>setClosed</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type> <name><name>Notepad_plus</name><operator>::</operator><name>launchDocMap</name></name><parameter_list>()</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>NppParameters</name><modifier>&amp;</modifier></type> <name>nppParam</name> <init>= <expr><call><name><name>NppParameters</name><operator>::</operator><name>getInstance</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>nppParam</name><operator>.</operator><name>isTransparentAvailable</name></name><argument_list>()</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name><name>_nativeLangSpeaker</name><operator>.</operator><name>messageBox</name></name><argument_list>(<argument><expr><literal type="string">"PrehistoricSystemDetected"</literal></expr></argument>,
			<argument><expr><call><name><name>_pPublicInterface</name><operator>-&gt;</operator><name>getHSelf</name></name><argument_list>()</argument_list></call></expr></argument>,
			<argument><expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"It seems you still use a prehistoric system. This feature works only on a modern system, sorry."</literal></expr></argument>)</argument_list></call></expr></argument>,
			<argument><expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"Prehistoric system detected"</literal></expr></argument>)</argument_list></call></expr></argument>,
			<argument><expr><name>MB_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>_pDocMap</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>_pDocMap</name> <operator>=</operator> <operator>new</operator> <call><name>DocumentMap</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>_pDocMap</name><operator>-&gt;</operator><name>init</name></name><argument_list>(<argument><expr><call><name><name>_pPublicInterface</name><operator>-&gt;</operator><name>getHinst</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>_pPublicInterface</name><operator>-&gt;</operator><name>getHSelf</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>_pEditView</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<decl_stmt><decl><type><name>tTbData</name></type>	<name>data</name> <init>= <expr><block>{}</block></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>_pDocMap</name><operator>-&gt;</operator><name>create</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name><operator>::</operator><name>SendMessage</name></name><argument_list>(<argument><expr><call><name><name>_pPublicInterface</name><operator>-&gt;</operator><name>getHSelf</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>NPPM_MODELESSDIALOG</name></expr></argument>, <argument><expr><name>MODELESSDIALOGREMOVE</name></expr></argument>, <argument><expr><cast type="reinterpret">reinterpret_cast<argument_list type="generic">&lt;<argument><expr><name>LPARAM</name></expr></argument>&gt;</argument_list><argument_list>(<argument><expr><call><name><name>_pDocMap</name><operator>-&gt;</operator><name>getHSelf</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></cast></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="line">// define the default docking behaviour</comment>
		<expr_stmt><expr><name><name>data</name><operator>.</operator><name>uMask</name></name> <operator>=</operator> <name>DWS_DF_CONT_RIGHT</name> <operator>|</operator> <name>DWS_ICONTAB</name> <operator>|</operator> <name>DWS_USEOWNDARKMODE</name></expr>;</expr_stmt>

		<decl_stmt><decl><type><name>int</name></type> <name>icoID</name> <init>= <expr><name>IDR_DOCMAP_ICO</name></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if <condition>(<expr><call><name><name>NppDarkMode</name><operator>::</operator><name>isEnabled</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>icoID</name> <operator>=</operator> <name>IDR_DOCMAP_ICO_DM</name></expr>;</expr_stmt></block_content></block></if>
		<if type="elseif">else if <condition>(<expr><call><name><name>nppParam</name><operator>.</operator><name>getNppGUI</name></name><argument_list>()</argument_list></call><operator>.</operator><name>_toolBarStatus</name> <operator>!=</operator> <name>TB_STANDARD</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>icoID</name> <operator>=</operator> <name>IDR_DOCMAP_ICO2</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<expr_stmt><expr><name><name>data</name><operator>.</operator><name>hIconTab</name></name> <operator>=</operator> <operator>(</operator><name>HICON</name><operator>)</operator><call><name><operator>::</operator><name>LoadImage</name></name><argument_list>(<argument><expr><call><name><name>_pPublicInterface</name><operator>-&gt;</operator><name>getHinst</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>MAKEINTRESOURCE</name><argument_list>(<argument><expr><name>icoID</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>IMAGE_ICON</name></expr></argument>, <argument><expr><literal type="number">14</literal></expr></argument>, <argument><expr><literal type="number">14</literal></expr></argument>, <argument><expr><name>LR_LOADMAP3DCOLORS</name> <operator>|</operator> <name>LR_LOADTRANSPARENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>data</name><operator>.</operator><name>pszModuleName</name></name> <operator>=</operator> <name>NPP_INTERNAL_FUCTION_STR</name></expr>;</expr_stmt>

		<comment type="line">// the dlgDlg should be the index of funcItem where the current function pointer is</comment>
		<comment type="line">// in this case is DOCKABLE_DEMO_INDEX</comment>
		<comment type="line">// In the case of Notepad++ internal function, it'll be the command ID which triggers this dialog</comment>
		<expr_stmt><expr><name><name>data</name><operator>.</operator><name>dlgID</name></name> <operator>=</operator> <name>IDM_VIEW_DOC_MAP</name></expr>;</expr_stmt>

		<decl_stmt><decl><type><name>NativeLangSpeaker</name> <modifier>*</modifier></type><name>pNativeSpeaker</name> <init>= <expr><call><name><name>nppParam</name><operator>.</operator><name>getNativeLangSpeaker</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>generic_string</name></type> <name>title_temp</name> <init>= <expr><call><name><name>pNativeSpeaker</name><operator>-&gt;</operator><name>getAttrNameStr</name></name><argument_list>(<argument><expr><name>DM_PANELTITLE</name></expr></argument>, <argument><expr><literal type="string">"DocumentMap"</literal></expr></argument>, <argument><expr><literal type="string">"PanelTitle"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><specifier>static</specifier> <name>TCHAR</name></type> <name><name>title</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>
		<if_stmt><if>if <condition>(<expr><call><name><name>title_temp</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call> <operator>&lt;</operator> <literal type="number">32</literal></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>wcscpy_s</name><argument_list>(<argument><expr><name>title</name></expr></argument>, <argument><expr><call><name><name>title_temp</name><operator>.</operator><name>c_str</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>data</name><operator>.</operator><name>pszName</name></name> <operator>=</operator> <name>title</name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><call><name><operator>::</operator><name>SendMessage</name></name><argument_list>(<argument><expr><call><name><name>_pPublicInterface</name><operator>-&gt;</operator><name>getHSelf</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>NPPM_DMMREGASDCKDLG</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><cast type="reinterpret">reinterpret_cast<argument_list type="generic">&lt;<argument><expr><name>LPARAM</name></expr></argument>&gt;</argument_list><argument_list>(<argument><expr><operator>&amp;</operator><name>data</name></expr></argument>)</argument_list></cast></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name><name>_pDocMap</name><operator>-&gt;</operator><name>initWrapMap</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name>_pDocMap</name><operator>-&gt;</operator><name>wrapMap</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name>_pDocMap</name><operator>-&gt;</operator><name>display</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name><name>_pEditView</name><operator>-&gt;</operator><name>getFocus</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type> <name><name>Notepad_plus</name><operator>::</operator><name>launchFunctionList</name></name><parameter_list>()</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>_pFuncList</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>_pFuncList</name> <operator>=</operator> <operator>new</operator> <call><name>FunctionListPanel</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>_pFuncList</name><operator>-&gt;</operator><name>init</name></name><argument_list>(<argument><expr><call><name><name>_pPublicInterface</name><operator>-&gt;</operator><name>getHinst</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>_pPublicInterface</name><operator>-&gt;</operator><name>getHSelf</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>_pEditView</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<decl_stmt><decl><type><name>tTbData</name></type>	<name>data</name> <init>= <expr><block>{}</block></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>_pFuncList</name><operator>-&gt;</operator><name>create</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name><operator>::</operator><name>SendMessage</name></name><argument_list>(<argument><expr><call><name><name>_pPublicInterface</name><operator>-&gt;</operator><name>getHSelf</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>NPPM_MODELESSDIALOG</name></expr></argument>, <argument><expr><name>MODELESSDIALOGREMOVE</name></expr></argument>, <argument><expr><cast type="reinterpret">reinterpret_cast<argument_list type="generic">&lt;<argument><expr><name>LPARAM</name></expr></argument>&gt;</argument_list><argument_list>(<argument><expr><call><name><name>_pFuncList</name><operator>-&gt;</operator><name>getHSelf</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></cast></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="line">// define the default docking behaviour</comment>
		<expr_stmt><expr><name><name>data</name><operator>.</operator><name>uMask</name></name> <operator>=</operator> <name>DWS_DF_CONT_RIGHT</name> <operator>|</operator> <name>DWS_ICONTAB</name> <operator>|</operator> <name>DWS_USEOWNDARKMODE</name></expr>;</expr_stmt>
		
		<decl_stmt><decl><type><name>NppParameters</name><modifier>&amp;</modifier></type> <name>nppParam</name> <init>= <expr><call><name><name>NppParameters</name><operator>::</operator><name>getInstance</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

		<decl_stmt><decl><type><name>int</name></type> <name>icoID</name> <init>= <expr><name>IDR_FUNC_LIST_ICO</name></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if <condition>(<expr><call><name><name>NppDarkMode</name><operator>::</operator><name>isEnabled</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>icoID</name> <operator>=</operator> <name>IDR_FUNC_LIST_ICO_DM</name></expr>;</expr_stmt></block_content></block></if>
		<if type="elseif">else if <condition>(<expr><call><name><name>nppParam</name><operator>.</operator><name>getNppGUI</name></name><argument_list>()</argument_list></call><operator>.</operator><name>_toolBarStatus</name> <operator>!=</operator> <name>TB_STANDARD</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>icoID</name> <operator>=</operator> <name>IDR_FUNC_LIST_ICO2</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<expr_stmt><expr><name><name>data</name><operator>.</operator><name>hIconTab</name></name> <operator>=</operator> <operator>(</operator><name>HICON</name><operator>)</operator><call><name><operator>::</operator><name>LoadImage</name></name><argument_list>(<argument><expr><call><name><name>_pPublicInterface</name><operator>-&gt;</operator><name>getHinst</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>MAKEINTRESOURCE</name><argument_list>(<argument><expr><name>icoID</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>IMAGE_ICON</name></expr></argument>, <argument><expr><literal type="number">14</literal></expr></argument>, <argument><expr><literal type="number">14</literal></expr></argument>, <argument><expr><name>LR_LOADMAP3DCOLORS</name> <operator>|</operator> <name>LR_LOADTRANSPARENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>data</name><operator>.</operator><name>pszModuleName</name></name> <operator>=</operator> <name>NPP_INTERNAL_FUCTION_STR</name></expr>;</expr_stmt>

		<comment type="line">// the dlgDlg should be the index of funcItem where the current function pointer is</comment>
		<comment type="line">// in this case is DOCKABLE_DEMO_INDEX</comment>
		<comment type="line">// In the case of Notepad++ internal function, it'll be the command ID which triggers this dialog</comment>
		<expr_stmt><expr><name><name>data</name><operator>.</operator><name>dlgID</name></name> <operator>=</operator> <name>IDM_VIEW_FUNC_LIST</name></expr>;</expr_stmt>

		<decl_stmt><decl><type><name>NativeLangSpeaker</name> <modifier>*</modifier></type><name>pNativeSpeaker</name> <init>= <expr><call><name><name>nppParam</name><operator>.</operator><name>getNativeLangSpeaker</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>generic_string</name></type> <name>title_temp</name> <init>= <expr><call><name><name>pNativeSpeaker</name><operator>-&gt;</operator><name>getAttrNameStr</name></name><argument_list>(<argument><expr><name>FL_PANELTITLE</name></expr></argument>, <argument><expr><name>FL_FUCTIONLISTROOTNODE</name></expr></argument>, <argument><expr><literal type="string">"PanelTitle"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<decl_stmt><decl><type><specifier>static</specifier> <name>TCHAR</name></type> <name><name>title</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>
		<if_stmt><if>if <condition>(<expr><call><name><name>title_temp</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call> <operator>&lt;</operator> <literal type="number">32</literal></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>wcscpy_s</name><argument_list>(<argument><expr><name>title</name></expr></argument>, <argument><expr><call><name><name>title_temp</name><operator>.</operator><name>c_str</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>data</name><operator>.</operator><name>pszName</name></name> <operator>=</operator> <name>title</name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><call><name><operator>::</operator><name>SendMessage</name></name><argument_list>(<argument><expr><call><name><name>_pPublicInterface</name><operator>-&gt;</operator><name>getHSelf</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>NPPM_DMMREGASDCKDLG</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><cast type="reinterpret">reinterpret_cast<argument_list type="generic">&lt;<argument><expr><name>LPARAM</name></expr></argument>&gt;</argument_list><argument_list>(<argument><expr><operator>&amp;</operator><name>data</name></expr></argument>)</argument_list></cast></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<decl_stmt><decl><type><name>COLORREF</name></type> <name>fgColor</name> <init>= <expr><call><name><name>nppParam</name><operator>.</operator><name>getCurrentDefaultFgColor</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>COLORREF</name></type> <name>bgColor</name> <init>= <expr><call><name><name>nppParam</name><operator>.</operator><name>getCurrentDefaultBgColor</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><call><name><name>_pFuncList</name><operator>-&gt;</operator><name>setBackgroundColor</name></name><argument_list>(<argument><expr><name>bgColor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>_pFuncList</name><operator>-&gt;</operator><name>setForegroundColor</name></name><argument_list>(<argument><expr><name>fgColor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name><name>_pFuncList</name><operator>-&gt;</operator><name>display</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<struct>struct <name>TextPlayerParams</name>
<block>{<public type="default">
	<decl_stmt><decl><type><name>HWND</name></type> <name>_nppHandle</name> <init>= <expr><literal type="null">nullptr</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ScintillaEditView</name><modifier>*</modifier></type> <name>_pCurrentView</name> <init>= <expr><literal type="null">nullptr</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>QuoteParams</name><modifier>*</modifier></type> <name>_quotParams</name> <init>= <expr><literal type="null">nullptr</literal></expr></init></decl>;</decl_stmt>
</public>}</block>;</struct>

<struct>struct <name>TextTrollerParams</name>
<block>{<public type="default">
	<decl_stmt><decl><type><name>ScintillaEditView</name> <modifier>*</modifier></type><name>_pCurrentView</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>wchar_t</name><modifier>*</modifier></type><name>_text2display</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>BufferID</name></type> <name>_targetBufID</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>HANDLE</name></type> <name>_mutex</name></decl>;</decl_stmt>
</public>}</block>;</struct>


<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>QuoteParams</name></type> <name><name>quotes</name><index>[]</index></name> <init>=
<expr><block>{
	<expr><block>{<expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"Notepad++"</literal></expr></argument>)</argument_list></call></expr>, <expr><name><name>QuoteParams</name><operator>::</operator><name>rapid</name></name></expr>, <expr><literal type="boolean">true</literal></expr>, <expr><name>SC_CP_UTF8</name></expr>, <expr><name>L_TEXT</name></expr>, <macro><name>TEXT</name><argument_list>(<argument><literal type="string">"The creation of Notepad++ is due to my need for a decent editor to edit the source code of Notepad++"</literal></argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"Notepad++ #1"</literal></expr></argument>)</argument_list></call></expr>, <expr><name><name>QuoteParams</name><operator>::</operator><name>rapid</name></name></expr>, <expr><literal type="boolean">true</literal></expr>, <expr><name>SC_CP_UTF8</name></expr>, <expr><name>L_TEXT</name></expr>, <macro><name>TEXT</name><argument_list>(<argument><literal type="string">"I hate reading other people's code.\nSo I wrote mine, made it as open source project, and watch others suffer."</literal></argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"Notepad++ #2"</literal></expr></argument>)</argument_list></call></expr>, <expr><name><name>QuoteParams</name><operator>::</operator><name>rapid</name></name></expr>, <expr><literal type="boolean">true</literal></expr>, <expr><name>SC_CP_UTF8</name></expr>, <expr><name>L_TEXT</name></expr>, <macro><name>TEXT</name><argument_list>(<argument><literal type="string">"Good programmers use Notepad++ to code.\nExtreme programmers use MS Word to code, in Comic Sans, center aligned."</literal></argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"Notepad++ #3"</literal></expr></argument>)</argument_list></call></expr>, <expr><name><name>QuoteParams</name><operator>::</operator><name>rapid</name></name></expr>, <expr><literal type="boolean">true</literal></expr>, <expr><name>SC_CP_UTF8</name></expr>, <expr><name>L_TEXT</name></expr>, <macro><name>TEXT</name><argument_list>(<argument><literal type="string">"The best things in life are free.\nNotepad++ is free.\nSo Notepad++ is the best.\n"</literal></argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"Richard Stallman"</literal></expr></argument>)</argument_list></call></expr>, <expr><name><name>QuoteParams</name><operator>::</operator><name>rapid</name></name></expr>, <expr><literal type="boolean">true</literal></expr>, <expr><name>SC_CP_UTF8</name></expr>, <expr><name>L_TEXT</name></expr>, <macro><name>TEXT</name><argument_list>(<argument><literal type="string">"If I'm the Father of Open Source, it was conceived through artificial insemination using stolen sperm without my knowledge or consent."</literal></argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"Martin Golding"</literal></expr></argument>)</argument_list></call></expr>, <expr><name><name>QuoteParams</name><operator>::</operator><name>rapid</name></name></expr>, <expr><literal type="boolean">true</literal></expr>, <expr><name>SC_CP_UTF8</name></expr>, <expr><name>L_TEXT</name></expr>, <macro><name>TEXT</name><argument_list>(<argument><literal type="string">"Always code as if the guy who ends up maintaining your code will be a violent psychopath who knows where you live."</literal></argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"L. Peter Deutsch"</literal></expr></argument>)</argument_list></call></expr>, <expr><name><name>QuoteParams</name><operator>::</operator><name>slow</name></name></expr>, <expr><literal type="boolean">false</literal></expr>, <expr><name>SC_CP_UTF8</name></expr>, <expr><name>L_TEXT</name></expr>, <macro><name>TEXT</name><argument_list>(<argument><literal type="string">"To iterate is human, to recurse divine."</literal></argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"Seymour Cray"</literal></expr></argument>)</argument_list></call></expr>, <expr><name><name>QuoteParams</name><operator>::</operator><name>rapid</name></name></expr>, <expr><literal type="boolean">true</literal></expr>, <expr><name>SC_CP_UTF8</name></expr>, <expr><name>L_TEXT</name></expr>, <macro><name>TEXT</name><argument_list>(<argument><literal type="string">"The trouble with programmers is that you can never tell what a programmer is doing until it's too late."</literal></argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"Brian Kernighan"</literal></expr></argument>)</argument_list></call></expr>, <expr><name><name>QuoteParams</name><operator>::</operator><name>rapid</name></name></expr>, <expr><literal type="boolean">true</literal></expr>, <expr><name>SC_CP_UTF8</name></expr>, <expr><name>L_TEXT</name></expr>, <macro><name>TEXT</name><argument_list>(<argument><literal type="string">"Debugging is twice as hard as writing the code in the first place. Therefore, if you write the code as cleverly as possible, you are, by definition, not smart enough to debug it."</literal></argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"Alan Kay"</literal></expr></argument>)</argument_list></call></expr>, <expr><name><name>QuoteParams</name><operator>::</operator><name>rapid</name></name></expr>, <expr><literal type="boolean">true</literal></expr>, <expr><name>SC_CP_UTF8</name></expr>, <expr><name>L_TEXT</name></expr>, <macro><name>TEXT</name><argument_list>(<argument><literal type="string">"Most software today is very much like an Egyptian pyramid with millions of bricks piled on top of each other, with no structural integrity, but just done by brute force and thousands of slaves."</literal></argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"Bill Gates"</literal></expr></argument>)</argument_list></call></expr>, <expr><name><name>QuoteParams</name><operator>::</operator><name>rapid</name></name></expr>, <expr><literal type="boolean">true</literal></expr>, <expr><name>SC_CP_UTF8</name></expr>, <expr><name>L_TEXT</name></expr>, <macro><name>TEXT</name><argument_list>(<argument><literal type="string">"Measuring programming progress by lines of code is like measuring aircraft building progress by weight."</literal></argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"Christopher Thompson"</literal></expr></argument>)</argument_list></call></expr>, <expr><name><name>QuoteParams</name><operator>::</operator><name>rapid</name></name></expr>, <expr><literal type="boolean">true</literal></expr>, <expr><name>SC_CP_UTF8</name></expr>, <expr><name>L_TEXT</name></expr>, <macro><name>TEXT</name><argument_list>(<argument><literal type="string">"Sometimes it pays to stay in bed on Monday, rather than spending the rest of the week debugging Monday's code."</literal></argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"Vidiu Platon"</literal></expr></argument>)</argument_list></call></expr>, <expr><name><name>QuoteParams</name><operator>::</operator><name>rapid</name></name></expr>, <expr><literal type="boolean">true</literal></expr>, <expr><name>SC_CP_UTF8</name></expr>, <expr><name>L_TEXT</name></expr>, <macro><name>TEXT</name><argument_list>(<argument><literal type="string">"I don't care if it works on your machine! We are not shipping your machine!"</literal></argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"Edward V Berard"</literal></expr></argument>)</argument_list></call></expr>, <expr><name><name>QuoteParams</name><operator>::</operator><name>rapid</name></name></expr>, <expr><literal type="boolean">true</literal></expr>, <expr><name>SC_CP_UTF8</name></expr>, <expr><name>L_TEXT</name></expr>, <macro><name>TEXT</name><argument_list>(<argument><literal type="string">"Walking on water and developing software from a specification are easy if both are frozen."</literal></argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"pixadel"</literal></expr></argument>)</argument_list></call></expr>, <expr><name><name>QuoteParams</name><operator>::</operator><name>rapid</name></name></expr>, <expr><literal type="boolean">true</literal></expr>, <expr><name>SC_CP_UTF8</name></expr>, <expr><name>L_TEXT</name></expr>, <macro><name>TEXT</name><argument_list>(<argument><literal type="string">"Fine, Java MIGHT be a good example of what a programming language should be like.\nBut Java applications are good examples of what applications SHOULDN'T be like."</literal></argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"Oktal"</literal></expr></argument>)</argument_list></call></expr>, <expr><name><name>QuoteParams</name><operator>::</operator><name>rapid</name></name></expr>, <expr><literal type="boolean">true</literal></expr>, <expr><name>SC_CP_UTF8</name></expr>, <expr><name>L_TEXT</name></expr>, <macro><name>TEXT</name><argument_list>(<argument><literal type="string">"I think Microsoft named .Net so it wouldn't show up in a Unix directory listing."</literal></argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"Bjarne Stroustrup"</literal></expr></argument>)</argument_list></call></expr>, <expr><name><name>QuoteParams</name><operator>::</operator><name>rapid</name></name></expr>, <expr><literal type="boolean">true</literal></expr>, <expr><name>SC_CP_UTF8</name></expr>, <expr><name>L_TEXT</name></expr>, <macro><name>TEXT</name><argument_list>(<argument><literal type="string">"In C++ it's harder to shoot yourself in the foot, but when you do, you blow off your whole leg."</literal></argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"Mosher's Law of Software Engineering"</literal></expr></argument>)</argument_list></call></expr>, <expr><name><name>QuoteParams</name><operator>::</operator><name>rapid</name></name></expr>, <expr><literal type="boolean">true</literal></expr>, <expr><name>SC_CP_UTF8</name></expr>, <expr><name>L_TEXT</name></expr>, <macro><name>TEXT</name><argument_list>(<argument><literal type="string">"Don't worry if it doesn't work right. If everything did, you'd be out of a job."</literal></argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"Bob Gray"</literal></expr></argument>)</argument_list></call></expr>, <expr><name><name>QuoteParams</name><operator>::</operator><name>rapid</name></name></expr>, <expr><literal type="boolean">true</literal></expr>, <expr><name>SC_CP_UTF8</name></expr>, <expr><name>L_TEXT</name></expr>, <macro><name>TEXT</name><argument_list>(<argument><literal type="string">"Writing in C or C++ is like running a chain saw with all the safety guards removed."</literal></argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"Roberto Waltman"</literal></expr></argument>)</argument_list></call></expr>, <expr><name><name>QuoteParams</name><operator>::</operator><name>rapid</name></name></expr>, <expr><literal type="boolean">true</literal></expr>, <expr><name>SC_CP_UTF8</name></expr>, <expr><name>L_TEXT</name></expr>, <macro><name>TEXT</name><argument_list>(<argument><literal type="string">"In the one and only true way. The object-oriented version of \"Spaghetti code\" is, of course, \"Lasagna code\". (Too many layers)"</literal></argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"Gavin Russell Baker"</literal></expr></argument>)</argument_list></call></expr>, <expr><name><name>QuoteParams</name><operator>::</operator><name>rapid</name></name></expr>, <expr><literal type="boolean">false</literal></expr>, <expr><name>SC_CP_UTF8</name></expr>, <expr><name>L_TEXT</name></expr>, <macro><name>TEXT</name><argument_list>(<argument><literal type="string">"C++ : Where friends have access to your private members."</literal></argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"Linus Torvalds"</literal></expr></argument>)</argument_list></call></expr>, <expr><name><name>QuoteParams</name><operator>::</operator><name>slow</name></name></expr>, <expr><literal type="boolean">false</literal></expr>, <expr><name>SC_CP_UTF8</name></expr>, <expr><name>L_TEXT</name></expr>, <macro><name>TEXT</name><argument_list>(<argument><literal type="string">"Software is like sex: It's better when it's free."</literal></argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"Cult of vi"</literal></expr></argument>)</argument_list></call></expr>, <expr><name><name>QuoteParams</name><operator>::</operator><name>rapid</name></name></expr>, <expr><literal type="boolean">true</literal></expr>, <expr><name>SC_CP_UTF8</name></expr>, <expr><name>L_TEXT</name></expr>, <macro><name>TEXT</name><argument_list>(<argument><literal type="string">"Emacs is a great operating system, lacking only a decent editor."</literal></argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"Church of Emacs"</literal></expr></argument>)</argument_list></call></expr>, <expr><name><name>QuoteParams</name><operator>::</operator><name>rapid</name></name></expr>, <expr><literal type="boolean">true</literal></expr>, <expr><name>SC_CP_UTF8</name></expr>, <expr><name>L_TEXT</name></expr>, <macro><name>TEXT</name><argument_list>(<argument><literal type="string">"vi has two modes - \"beep repeatedly\" and \"break everything\"."</literal></argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"Steve Jobs"</literal></expr></argument>)</argument_list></call></expr>, <expr><name><name>QuoteParams</name><operator>::</operator><name>rapid</name></name></expr>, <expr><literal type="boolean">true</literal></expr>, <expr><name>SC_CP_UTF8</name></expr>, <expr><name>L_TEXT</name></expr>, <macro><name>TEXT</name><argument_list>(<argument><literal type="string">"Picasso had a saying: \"Good artists copy, great artists steal.\".\nWe have always been shameless about stealing great ideas."</literal></argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"brotips #1001"</literal></expr></argument>)</argument_list></call></expr>, <expr><name><name>QuoteParams</name><operator>::</operator><name>rapid</name></name></expr>, <expr><literal type="boolean">true</literal></expr>, <expr><name>SC_CP_UTF8</name></expr>, <expr><name>L_TEXT</name></expr>, <macro><name>TEXT</name><argument_list>(<argument><literal type="string">"Do everything for greatness, not money. Money follows greatness."</literal></argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"Robin Williams"</literal></expr></argument>)</argument_list></call></expr>, <expr><name><name>QuoteParams</name><operator>::</operator><name>rapid</name></name></expr>, <expr><literal type="boolean">true</literal></expr>, <expr><name>SC_CP_UTF8</name></expr>, <expr><name>L_TEXT</name></expr>, <macro><name>TEXT</name><argument_list>(<argument><literal type="string">"God gave men both a penis and a brain, but unfortunately not enough blood supply to run both at the same time."</literal></argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"Darth Vader"</literal></expr></argument>)</argument_list></call></expr>, <expr><name><name>QuoteParams</name><operator>::</operator><name>rapid</name></name></expr>, <expr><literal type="boolean">true</literal></expr>, <expr><name>SC_CP_UTF8</name></expr>, <expr><name>L_TEXT</name></expr>, <macro><name>TEXT</name><argument_list>(<argument><literal type="string">"Strong people don't put others down.\nThey lift them up."</literal></argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"Darth Vader #2"</literal></expr></argument>)</argument_list></call></expr>, <expr><name><name>QuoteParams</name><operator>::</operator><name>rapid</name></name></expr>, <expr><literal type="boolean">true</literal></expr>, <expr><name>SC_CP_UTF8</name></expr>, <expr><name>L_TEXT</name></expr>, <macro><name>TEXT</name><argument_list>(<argument><literal type="string">"You don't get to 500 million star systems without making a few enemies."</literal></argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"Doug Linder"</literal></expr></argument>)</argument_list></call></expr>, <expr><name><name>QuoteParams</name><operator>::</operator><name>rapid</name></name></expr>, <expr><literal type="boolean">true</literal></expr>, <expr><name>SC_CP_UTF8</name></expr>, <expr><name>L_TEXT</name></expr>, <macro><name>TEXT</name><argument_list>(<argument><literal type="string">"A good programmer is someone who always looks both ways before crossing a one-way street."</literal></argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"Jean-Claude van Damme"</literal></expr></argument>)</argument_list></call></expr>, <expr><name><name>QuoteParams</name><operator>::</operator><name>rapid</name></name></expr>, <expr><literal type="boolean">true</literal></expr>, <expr><name>SC_CP_UTF8</name></expr>, <expr><name>L_TEXT</name></expr>, <macro><name>TEXT</name><argument_list>(<argument><literal type="string">"A cookie has no soul, it's just a cookie. But before it was milk and eggs.\nAnd in eggs there's the potential for life."</literal></argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"Michael Feldman"</literal></expr></argument>)</argument_list></call></expr>, <expr><name><name>QuoteParams</name><operator>::</operator><name>slow</name></name></expr>, <expr><literal type="boolean">false</literal></expr>, <expr><name>SC_CP_UTF8</name></expr>, <expr><name>L_TEXT</name></expr>, <macro><name>TEXT</name><argument_list>(<argument><literal type="string">"Java is, in many ways, C++--."</literal></argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"Don Ho"</literal></expr></argument>)</argument_list></call></expr>, <expr><name><name>QuoteParams</name><operator>::</operator><name>slow</name></name></expr>, <expr><literal type="boolean">false</literal></expr>, <expr><name>SC_CP_UTF8</name></expr>, <expr><name>L_TEXT</name></expr>, <macro><name>TEXT</name><argument_list>(<argument><literal type="string">"Je mange donc je chie."</literal></argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"Don Ho #2"</literal></expr></argument>)</argument_list></call></expr>, <expr><name><name>QuoteParams</name><operator>::</operator><name>rapid</name></name></expr>, <expr><literal type="boolean">true</literal></expr>, <expr><name>SC_CP_UTF8</name></expr>, <expr><name>L_TEXT</name></expr>, <macro><name>TEXT</name><argument_list>(<argument><literal type="string">"RTFM is the true path of every developer.\nBut it would happen only if there's no way out."</literal></argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"Don Ho #3"</literal></expr></argument>)</argument_list></call></expr>, <expr><name><name>QuoteParams</name><operator>::</operator><name>rapid</name></name></expr>, <expr><literal type="boolean">true</literal></expr>, <expr><name>SC_CP_UTF8</name></expr>, <expr><name>L_TEXT</name></expr>, <macro><name>TEXT</name><argument_list>(<argument><literal type="string">"Smartphone is the best invention of 21st century for avoiding the eyes contact while crossing people you know on the street."</literal></argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"Don Ho #4"</literal></expr></argument>)</argument_list></call></expr>, <expr><name><name>QuoteParams</name><operator>::</operator><name>rapid</name></name></expr>, <expr><literal type="boolean">false</literal></expr>, <expr><name>SC_CP_UTF8</name></expr>, <expr><name>L_TEXT</name></expr>, <macro><name>TEXT</name><argument_list>(<argument><literal type="string">"Poor countries' museums vs. rich countries' museums:\nThe first show what they have left.\nThe second show what they have stolen."</literal></argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"Anonymous #1"</literal></expr></argument>)</argument_list></call></expr>, <expr><name><name>QuoteParams</name><operator>::</operator><name>slow</name></name></expr>, <expr><literal type="boolean">false</literal></expr>, <expr><name>SC_CP_UTF8</name></expr>, <expr><name>L_TEXT</name></expr>, <macro><name>TEXT</name><argument_list>(<argument><literal type="string">"An opinion without 3.14 is just an onion."</literal></argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"Anonymous #2"</literal></expr></argument>)</argument_list></call></expr>, <expr><name><name>QuoteParams</name><operator>::</operator><name>rapid</name></name></expr>, <expr><literal type="boolean">true</literal></expr>, <expr><name>SC_CP_UTF8</name></expr>, <expr><name>L_TEXT</name></expr>, <macro><name>TEXT</name><argument_list>(<argument><literal type="string">"Before sex, you help each other get naked, after sex you only dress yourself.\nMoral of the story: in life no one helps you once you're fucked."</literal></argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"Anonymous #3"</literal></expr></argument>)</argument_list></call></expr>, <expr><name><name>QuoteParams</name><operator>::</operator><name>rapid</name></name></expr>, <expr><literal type="boolean">false</literal></expr>, <expr><name>SC_CP_UTF8</name></expr>, <expr><name>L_TEXT</name></expr>, <macro><name>TEXT</name><argument_list>(<argument><literal type="string">"I'm not totally useless. I can be used as a bad example."</literal></argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"Anonymous #4"</literal></expr></argument>)</argument_list></call></expr>, <expr><name><name>QuoteParams</name><operator>::</operator><name>rapid</name></name></expr>, <expr><literal type="boolean">false</literal></expr>, <expr><name>SC_CP_UTF8</name></expr>, <expr><name>L_TEXT</name></expr>, <macro><name>TEXT</name><argument_list>(<argument><literal type="string">"Life is too short to remove USB safely."</literal></argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"Anonymous #5"</literal></expr></argument>)</argument_list></call></expr>, <expr><name><name>QuoteParams</name><operator>::</operator><name>rapid</name></name></expr>, <expr><literal type="boolean">true</literal></expr>, <expr><name>SC_CP_UTF8</name></expr>, <expr><name>L_TEXT</name></expr>, <macro><name>TEXT</name><argument_list>(<argument><literal type="string">"\"SEX\" is not the answer.\nSex is the question, \"YES\" is the answer."</literal></argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"Anonymous #6"</literal></expr></argument>)</argument_list></call></expr>, <expr><name><name>QuoteParams</name><operator>::</operator><name>rapid</name></name></expr>, <expr><literal type="boolean">true</literal></expr>, <expr><name>SC_CP_UTF8</name></expr>, <expr><name>L_TEXT</name></expr>, <macro><name>TEXT</name><argument_list>(<argument><literal type="string">"Going to McDonald's for a salad is like going to a whore for a hug."</literal></argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"Anonymous #7"</literal></expr></argument>)</argument_list></call></expr>, <expr><name><name>QuoteParams</name><operator>::</operator><name>slow</name></name></expr>, <expr><literal type="boolean">false</literal></expr>, <expr><name>SC_CP_UTF8</name></expr>, <expr><name>L_TEXT</name></expr>, <macro><name>TEXT</name><argument_list>(<argument><literal type="string">"I need a six month holiday, TWICE A YEAR!"</literal></argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"Anonymous #8"</literal></expr></argument>)</argument_list></call></expr>, <expr><name><name>QuoteParams</name><operator>::</operator><name>slow</name></name></expr>, <expr><literal type="boolean">false</literal></expr>, <expr><name>SC_CP_UTF8</name></expr>, <expr><name>L_TEXT</name></expr>, <macro><name>TEXT</name><argument_list>(<argument><literal type="string">"Everything is a knife if you're strong enough."</literal></argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"Anonymous #9"</literal></expr></argument>)</argument_list></call></expr>, <expr><name><name>QuoteParams</name><operator>::</operator><name>rapid</name></name></expr>, <expr><literal type="boolean">true</literal></expr>, <expr><name>SC_CP_UTF8</name></expr>, <expr><name>L_TEXT</name></expr>, <macro><name>TEXT</name><argument_list>(<argument><literal type="string">"I'M A FUCKING ANIMAL IN BED.\nMore specifically a koala."</literal></argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"Anonymous #10"</literal></expr></argument>)</argument_list></call></expr>, <expr><name><name>QuoteParams</name><operator>::</operator><name>slow</name></name></expr>, <expr><literal type="boolean">true</literal></expr>, <expr><name>SC_CP_UTF8</name></expr>, <expr><name>L_TEXT</name></expr>, <macro><name>TEXT</name><argument_list>(<argument><literal type="string">"Etc.\n\n(Abb.) End of Thinking Capacity.\n"</literal></argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"Anonymous #11"</literal></expr></argument>)</argument_list></call></expr>, <expr><name><name>QuoteParams</name><operator>::</operator><name>rapid</name></name></expr>, <expr><literal type="boolean">true</literal></expr>, <expr><name>SC_CP_UTF8</name></expr>, <expr><name>L_TEXT</name></expr>, <macro><name>TEXT</name><argument_list>(<argument><literal type="string">"We stopped checking for monsters under our bed, when we realized they were inside us."</literal></argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"Anonymous #12"</literal></expr></argument>)</argument_list></call></expr>, <expr><name><name>QuoteParams</name><operator>::</operator><name>rapid</name></name></expr>, <expr><literal type="boolean">true</literal></expr>, <expr><name>SC_CP_UTF8</name></expr>, <expr><name>L_TEXT</name></expr>, <macro><name>TEXT</name><argument_list>(<argument><literal type="string">"I would rather check my facebook than face my checkbook."</literal></argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"Anonymous #13"</literal></expr></argument>)</argument_list></call></expr>, <expr><name><name>QuoteParams</name><operator>::</operator><name>rapid</name></name></expr>, <expr><literal type="boolean">true</literal></expr>, <expr><name>SC_CP_UTF8</name></expr>, <expr><name>L_TEXT</name></expr>, <macro><name>TEXT</name><argument_list>(<argument><literal type="string">"Whoever says Paper beats Rock is an idiot. Next time I see someone say that I will throw a rock at them while they hold up a sheet of paper."</literal></argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"Anonymous #14"</literal></expr></argument>)</argument_list></call></expr>, <expr><name><name>QuoteParams</name><operator>::</operator><name>rapid</name></name></expr>, <expr><literal type="boolean">true</literal></expr>, <expr><name>SC_CP_UTF8</name></expr>, <expr><name>L_TEXT</name></expr>, <macro><name>TEXT</name><argument_list>(<argument><literal type="string">"A better world is where chickens can cross the road without having their motives questioned."</literal></argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"Anonymous #15"</literal></expr></argument>)</argument_list></call></expr>, <expr><name><name>QuoteParams</name><operator>::</operator><name>rapid</name></name></expr>, <expr><literal type="boolean">true</literal></expr>, <expr><name>SC_CP_UTF8</name></expr>, <expr><name>L_TEXT</name></expr>, <macro><name>TEXT</name><argument_list>(<argument><literal type="string">"If I didn't drink, how would my friends know I love them at 2 AM?"</literal></argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"Anonymous #16"</literal></expr></argument>)</argument_list></call></expr>, <expr><name><name>QuoteParams</name><operator>::</operator><name>rapid</name></name></expr>, <expr><literal type="boolean">true</literal></expr>, <expr><name>SC_CP_UTF8</name></expr>, <expr><name>L_TEXT</name></expr>, <macro><name>TEXT</name><argument_list>(<argument><literal type="string">"Q: How do you generate a random string?\nA: Put a Windows user in front of vi, and tell him to exit."</literal></argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"Anonymous #17"</literal></expr></argument>)</argument_list></call></expr>, <expr><name><name>QuoteParams</name><operator>::</operator><name>rapid</name></name></expr>, <expr><literal type="boolean">true</literal></expr>, <expr><name>SC_CP_UTF8</name></expr>, <expr><name>L_TEXT</name></expr>, <macro><name>TEXT</name><argument_list>(<argument><literal type="string">"Pros and cons of making food.\nPros: food\nCons : making\n"</literal></argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"Anonymous #18"</literal></expr></argument>)</argument_list></call></expr>, <expr><name><name>QuoteParams</name><operator>::</operator><name>rapid</name></name></expr>, <expr><literal type="boolean">true</literal></expr>, <expr><name>SC_CP_UTF8</name></expr>, <expr><name>L_TEXT</name></expr>, <macro><name>TEXT</name><argument_list>(<argument><literal type="string">"Never get into fights with ugly people, they have nothing to lose."</literal></argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"Anonymous #19"</literal></expr></argument>)</argument_list></call></expr>, <expr><name><name>QuoteParams</name><operator>::</operator><name>rapid</name></name></expr>, <expr><literal type="boolean">true</literal></expr>, <expr><name>SC_CP_UTF8</name></expr>, <expr><name>L_TEXT</name></expr>, <macro><name>TEXT</name><argument_list>(<argument><literal type="string">"People who say they give 110%\ndon't really understand how percentages work."</literal></argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"Anonymous #20"</literal></expr></argument>)</argument_list></call></expr>, <expr><name><name>QuoteParams</name><operator>::</operator><name>slow</name></name></expr>, <expr><literal type="boolean">false</literal></expr>, <expr><name>SC_CP_UTF8</name></expr>, <expr><name>L_TEXT</name></expr>, <macro><name>TEXT</name><argument_list>(<argument><literal type="string">"Never make eye contact while eating a banana."</literal></argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"Anonymous #21"</literal></expr></argument>)</argument_list></call></expr>, <expr><name><name>QuoteParams</name><operator>::</operator><name>rapid</name></name></expr>, <expr><literal type="boolean">true</literal></expr>, <expr><name>SC_CP_UTF8</name></expr>, <expr><name>L_TEXT</name></expr>, <macro><name>TEXT</name><argument_list>(<argument><literal type="string">"I love my sixpack so much, I protect it with a layer of fat."</literal></argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"Anonymous #22"</literal></expr></argument>)</argument_list></call></expr>, <expr><name><name>QuoteParams</name><operator>::</operator><name>rapid</name></name></expr>, <expr><literal type="boolean">true</literal></expr>, <expr><name>SC_CP_UTF8</name></expr>, <expr><name>L_TEXT</name></expr>, <macro><name>TEXT</name><argument_list>(<argument><literal type="string">"\"It's impossible.\" said pride.\n\"It's risky.\" said experience.\n\"It's pointless.\" said reason.\n\"Give it a try.\" whispered the heart.\n...\n\"What the hell was that?!?!?!?!?!\" shouted the anus two minutes later."</literal></argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"Anonymous #23"</literal></expr></argument>)</argument_list></call></expr>, <expr><name><name>QuoteParams</name><operator>::</operator><name>rapid</name></name></expr>, <expr><literal type="boolean">false</literal></expr>, <expr><name>SC_CP_UTF8</name></expr>, <expr><name>L_TEXT</name></expr>, <macro><name>TEXT</name><argument_list>(<argument><literal type="string">"A programmer is told to \"go to hell\".\nHe finds the worst part of that statement is the \"go to\"."</literal></argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"Anonymous #24"</literal></expr></argument>)</argument_list></call></expr>, <expr><name><name>QuoteParams</name><operator>::</operator><name>slow</name></name></expr>, <expr><literal type="boolean">false</literal></expr>, <expr><name>SC_CP_UTF8</name></expr>, <expr><name>L_TEXT</name></expr>, <macro><name>TEXT</name><argument_list>(<argument><literal type="string">"An Architect's dream is an Engineer's nightmare."</literal></argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"Anonymous #25"</literal></expr></argument>)</argument_list></call></expr>, <expr><name><name>QuoteParams</name><operator>::</operator><name>rapid</name></name></expr>, <expr><literal type="boolean">true</literal></expr>, <expr><name>SC_CP_UTF8</name></expr>, <expr><name>L_TEXT</name></expr>, <macro><name>TEXT</name><argument_list>(<argument><literal type="string">"In a way, I feel sorry for the kids of this generation.\nThey'll have parents who know how to check browser history."</literal></argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"Anonymous #26"</literal></expr></argument>)</argument_list></call></expr>, <expr><name><name>QuoteParams</name><operator>::</operator><name>rapid</name></name></expr>, <expr><literal type="boolean">true</literal></expr>, <expr><name>SC_CP_UTF8</name></expr>, <expr><name>L_TEXT</name></expr>, <macro><name>TEXT</name><argument_list>(<argument><literal type="string">"Q: What's the difference between git and github?\nA: It's the difference between porn and pornhub.\n"</literal></argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"Anonymous #27"</literal></expr></argument>)</argument_list></call></expr>, <expr><name><name>QuoteParams</name><operator>::</operator><name>rapid</name></name></expr>, <expr><literal type="boolean">true</literal></expr>, <expr><name>SC_CP_UTF8</name></expr>, <expr><name>L_TEXT</name></expr>, <macro><name>TEXT</name><argument_list>(<argument><literal type="string">"I don't have a problem with caffeine.\nI have a problem without caffeine."</literal></argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"Anonymous #28"</literal></expr></argument>)</argument_list></call></expr>, <expr><name><name>QuoteParams</name><operator>::</operator><name>rapid</name></name></expr>, <expr><literal type="boolean">true</literal></expr>, <expr><name>SC_CP_UTF8</name></expr>, <expr><name>L_TEXT</name></expr>, <macro><name>TEXT</name><argument_list>(<argument><literal type="string">"Why 6 afraid of 7?\nBecause 7 8 9 while 6 and 9 were flirting."</literal></argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"Anonymous #29"</literal></expr></argument>)</argument_list></call></expr>, <expr><name><name>QuoteParams</name><operator>::</operator><name>rapid</name></name></expr>, <expr><literal type="boolean">false</literal></expr>, <expr><name>SC_CP_UTF8</name></expr>, <expr><name>L_TEXT</name></expr>, <macro><name>TEXT</name><argument_list>(<argument><literal type="string">"How do you comfort a JavaScript bug?\nYou console it."</literal></argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"Anonymous #30"</literal></expr></argument>)</argument_list></call></expr>, <expr><name><name>QuoteParams</name><operator>::</operator><name>rapid</name></name></expr>, <expr><literal type="boolean">true</literal></expr>, <expr><name>SC_CP_UTF8</name></expr>, <expr><name>L_TEXT</name></expr>, <macro><name>TEXT</name><argument_list>(<argument><literal type="string">"Why do Java developers wear glasses?\nBecause they don't C#."</literal></argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"Anonymous #31"</literal></expr></argument>)</argument_list></call></expr>, <expr><name><name>QuoteParams</name><operator>::</operator><name>rapid</name></name></expr>, <expr><literal type="boolean">true</literal></expr>, <expr><name>SC_CP_UTF8</name></expr>, <expr><name>L_TEXT</name></expr>, <macro><name>TEXT</name><argument_list>(<argument><literal type="string">"A baby's laughter is one of the most beautiful sounds you will ever hear. Unless it's 3 AM. And you're home alone. And you don't have a baby."</literal></argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"Anonymous #32"</literal></expr></argument>)</argument_list></call></expr>, <expr><name><name>QuoteParams</name><operator>::</operator><name>rapid</name></name></expr>, <expr><literal type="boolean">true</literal></expr>, <expr><name>SC_CP_UTF8</name></expr>, <expr><name>L_TEXT</name></expr>, <macro><name>TEXT</name><argument_list>(<argument><literal type="string">"Two bytes meet. The first byte asks, \"You look terrible. Are you OK?\"\nThe second byte replies, \"No, just feeling a bit off.\""</literal></argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"Anonymous #33"</literal></expr></argument>)</argument_list></call></expr>, <expr><name><name>QuoteParams</name><operator>::</operator><name>rapid</name></name></expr>, <expr><literal type="boolean">true</literal></expr>, <expr><name>SC_CP_UTF8</name></expr>, <expr><name>L_TEXT</name></expr>, <macro><name>TEXT</name><argument_list>(<argument><literal type="string">"Programmer - an organism that turns coffee into software."</literal></argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"Anonymous #34"</literal></expr></argument>)</argument_list></call></expr>, <expr><name><name>QuoteParams</name><operator>::</operator><name>slow</name></name></expr>, <expr><literal type="boolean">false</literal></expr>, <expr><name>SC_CP_UTF8</name></expr>, <expr><name>L_TEXT</name></expr>, <macro><name>TEXT</name><argument_list>(<argument><literal type="string">"It's not a bug - it's an undocumented feature."</literal></argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"Anonymous #35"</literal></expr></argument>)</argument_list></call></expr>, <expr><name><name>QuoteParams</name><operator>::</operator><name>rapid</name></name></expr>, <expr><literal type="boolean">true</literal></expr>, <expr><name>SC_CP_UTF8</name></expr>, <expr><name>L_TEXT</name></expr>, <macro><name>TEXT</name><argument_list>(<argument><literal type="string">"Should array index start at 0 or 1?\nMy compromised solution is 0.5"</literal></argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"Anonymous #36"</literal></expr></argument>)</argument_list></call></expr>, <expr><name><name>QuoteParams</name><operator>::</operator><name>rapid</name></name></expr>, <expr><literal type="boolean">true</literal></expr>, <expr><name>SC_CP_UTF8</name></expr>, <expr><name>L_TEXT</name></expr>, <macro><name>TEXT</name><argument_list>(<argument><literal type="string">"Every single time when I'm about to hug someone extremely sexy, I hit the mirror."</literal></argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"Anonymous #37"</literal></expr></argument>)</argument_list></call></expr>, <expr><name><name>QuoteParams</name><operator>::</operator><name>rapid</name></name></expr>, <expr><literal type="boolean">true</literal></expr>, <expr><name>SC_CP_UTF8</name></expr>, <expr><name>L_TEXT</name></expr>, <macro><name>TEXT</name><argument_list>(<argument><literal type="string">"My software never has bugs. It just develops random features."</literal></argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"Anonymous #38"</literal></expr></argument>)</argument_list></call></expr>, <expr><name><name>QuoteParams</name><operator>::</operator><name>slow</name></name></expr>, <expr><literal type="boolean">false</literal></expr>, <expr><name>SC_CP_UTF8</name></expr>, <expr><name>L_TEXT</name></expr>, <macro><name>TEXT</name><argument_list>(<argument><literal type="string">"LISP = Lots of Irritating Silly Parentheses."</literal></argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"Anonymous #39"</literal></expr></argument>)</argument_list></call></expr>, <expr><name><name>QuoteParams</name><operator>::</operator><name>rapid</name></name></expr>, <expr><literal type="boolean">true</literal></expr>, <expr><name>SC_CP_UTF8</name></expr>, <expr><name>L_TEXT</name></expr>, <macro><name>TEXT</name><argument_list>(<argument><literal type="string">"Perl, the only language that looks the same before and after RSA encryption."</literal></argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"Anonymous #40"</literal></expr></argument>)</argument_list></call></expr>, <expr><name><name>QuoteParams</name><operator>::</operator><name>rapid</name></name></expr>, <expr><literal type="boolean">true</literal></expr>, <expr><name>SC_CP_UTF8</name></expr>, <expr><name>L_TEXT</name></expr>, <macro><name>TEXT</name><argument_list>(<argument><literal type="string">"People ask me why, as an atheist, I still say: OH MY GOD.\nIt makes perfect sense: We say \"Oh my God\" when something is UNBELIEVABLE."</literal></argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"Anonymous #41"</literal></expr></argument>)</argument_list></call></expr>, <expr><name><name>QuoteParams</name><operator>::</operator><name>rapid</name></name></expr>, <expr><literal type="boolean">true</literal></expr>, <expr><name>SC_CP_UTF8</name></expr>, <expr><name>L_TEXT</name></expr>, <macro><name>TEXT</name><argument_list>(<argument><literal type="string">"1. Dig a hole.\n2. Name it love.\n3. Watch people falling in love.\n"</literal></argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"Anonymous #42"</literal></expr></argument>)</argument_list></call></expr>, <expr><name><name>QuoteParams</name><operator>::</operator><name>rapid</name></name></expr>, <expr><literal type="boolean">true</literal></expr>, <expr><name>SC_CP_UTF8</name></expr>, <expr><name>L_TEXT</name></expr>, <macro><name>TEXT</name><argument_list>(<argument><literal type="string">"Don't think of yourself as an ugly person.\nThink of yourself as a beautiful monkey."</literal></argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"Anonymous #43"</literal></expr></argument>)</argument_list></call></expr>, <expr><name><name>QuoteParams</name><operator>::</operator><name>rapid</name></name></expr>, <expr><literal type="boolean">false</literal></expr>, <expr><name>SC_CP_UTF8</name></expr>, <expr><name>L_TEXT</name></expr>, <macro><name>TEXT</name><argument_list>(<argument><literal type="string">"Afraid to die alone?\nBecome a bus driver."</literal></argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"Anonymous #44"</literal></expr></argument>)</argument_list></call></expr>, <expr><name><name>QuoteParams</name><operator>::</operator><name>rapid</name></name></expr>, <expr><literal type="boolean">true</literal></expr>, <expr><name>SC_CP_UTF8</name></expr>, <expr><name>L_TEXT</name></expr>, <macro><name>TEXT</name><argument_list>(<argument><literal type="string">"The first 5 days after the weekend are always the hardest."</literal></argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"Anonymous #45"</literal></expr></argument>)</argument_list></call></expr>, <expr><name><name>QuoteParams</name><operator>::</operator><name>slow</name></name></expr>, <expr><literal type="boolean">false</literal></expr>, <expr><name>SC_CP_UTF8</name></expr>, <expr><name>L_TEXT</name></expr>, <macro><name>TEXT</name><argument_list>(<argument><literal type="string">"Rhinos are just fat unicorns."</literal></argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"Anonymous #46"</literal></expr></argument>)</argument_list></call></expr>, <expr><name><name>QuoteParams</name><operator>::</operator><name>rapid</name></name></expr>, <expr><literal type="boolean">true</literal></expr>, <expr><name>SC_CP_UTF8</name></expr>, <expr><name>L_TEXT</name></expr>, <macro><name>TEXT</name><argument_list>(<argument><literal type="string">"Sometimes when I'm writing Javascript I want to throw up my hands and say \"this is bullshit!\"\nbut I can never remember what \"this\" refers to."</literal></argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"Anonymous #47"</literal></expr></argument>)</argument_list></call></expr>, <expr><name><name>QuoteParams</name><operator>::</operator><name>rapid</name></name></expr>, <expr><literal type="boolean">false</literal></expr>, <expr><name>SC_CP_UTF8</name></expr>, <expr><name>L_TEXT</name></expr>, <macro><name>TEXT</name><argument_list>(<argument><literal type="string">"Kids are like farts.\nYou can only stand yours."</literal></argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"Anonymous #48"</literal></expr></argument>)</argument_list></call></expr>, <expr><name><name>QuoteParams</name><operator>::</operator><name>rapid</name></name></expr>, <expr><literal type="boolean">false</literal></expr>, <expr><name>SC_CP_UTF8</name></expr>, <expr><name>L_TEXT</name></expr>, <macro><name>TEXT</name><argument_list>(<argument><literal type="string">"If you were born in Israel, you'd probably be Jewish.\nIf you were born in Saudi Arabia, you'd probably be Muslim.\nIf you were born in India, you'd probably be Hindu.\nBut because you were born in North America, you're Christian.\nYour faith is not inspired by some divine, constant truth.\nIt's simply geography."</literal></argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"Anonymous #49"</literal></expr></argument>)</argument_list></call></expr>, <expr><name><name>QuoteParams</name><operator>::</operator><name>rapid</name></name></expr>, <expr><literal type="boolean">true</literal></expr>, <expr><name>SC_CP_UTF8</name></expr>, <expr><name>L_TEXT</name></expr>, <macro><name>TEXT</name><argument_list>(<argument><literal type="string">"There are 2 types of people in this world:\nPeople who say they pee in the shower, and the dirty fucking liars."</literal></argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"Anonymous #50"</literal></expr></argument>)</argument_list></call></expr>, <expr><name><name>QuoteParams</name><operator>::</operator><name>rapid</name></name></expr>, <expr><literal type="boolean">true</literal></expr>, <expr><name>SC_CP_UTF8</name></expr>, <expr><name>L_TEXT</name></expr>, <macro><name>TEXT</name><argument_list>(<argument><literal type="string">"London 2012 Olympic Games - A bunch of countries coming across the ocean to put their flags in Britain and try to get a bunch of gold... it's like history but opposite."</literal></argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"Anonymous #51"</literal></expr></argument>)</argument_list></call></expr>, <expr><name><name>QuoteParams</name><operator>::</operator><name>rapid</name></name></expr>, <expr><literal type="boolean">true</literal></expr>, <expr><name>SC_CP_UTF8</name></expr>, <expr><name>L_TEXT</name></expr>, <macro><name>TEXT</name><argument_list>(<argument><literal type="string">"I don't need a stable relationship,\nI just need a stable Internet connection."</literal></argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"Anonymous #52"</literal></expr></argument>)</argument_list></call></expr>, <expr><name><name>QuoteParams</name><operator>::</operator><name>rapid</name></name></expr>, <expr><literal type="boolean">true</literal></expr>, <expr><name>SC_CP_UTF8</name></expr>, <expr><name>L_TEXT</name></expr>, <macro><name>TEXT</name><argument_list>(<argument><literal type="string">"What's the difference between religion and bullshit?\nThe bull."</literal></argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"Anonymous #53"</literal></expr></argument>)</argument_list></call></expr>, <expr><name><name>QuoteParams</name><operator>::</operator><name>rapid</name></name></expr>, <expr><literal type="boolean">true</literal></expr>, <expr><name>SC_CP_UTF8</name></expr>, <expr><name>L_TEXT</name></expr>, <macro><name>TEXT</name><argument_list>(<argument><literal type="string">"Today, as I was waiting for my girlfriend in the street, I saw a woman who looked a lot like her. I ran towards her, my arms in the air ready to give her a hug, only to realise it wasn't her. I then had to pass the woman, my arms in the air, still running. FML"</literal></argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"Anonymous #54"</literal></expr></argument>)</argument_list></call></expr>, <expr><name><name>QuoteParams</name><operator>::</operator><name>rapid</name></name></expr>, <expr><literal type="boolean">false</literal></expr>, <expr><name>SC_CP_UTF8</name></expr>, <expr><name>L_TEXT</name></expr>, <macro><name>TEXT</name><argument_list>(<argument><literal type="string">"Decimal: 1 + 1 = 2\nBinary:  1 + 1 = 10\nBoolean: 1 + 1 = 1\nJavaScript(hold my beer) : 1 + 1 = 11\n"</literal></argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"Anonymous #55"</literal></expr></argument>)</argument_list></call></expr>, <expr><name><name>QuoteParams</name><operator>::</operator><name>rapid</name></name></expr>, <expr><literal type="boolean">true</literal></expr>, <expr><name>SC_CP_UTF8</name></expr>, <expr><name>L_TEXT</name></expr>, <macro><name>TEXT</name><argument_list>(<argument><literal type="string">"Don't be ashamed of who you are.\nThat's your parents job."</literal></argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"Anonymous #56"</literal></expr></argument>)</argument_list></call></expr>, <expr><name><name>QuoteParams</name><operator>::</operator><name>rapid</name></name></expr>, <expr><literal type="boolean">true</literal></expr>, <expr><name>SC_CP_UTF8</name></expr>, <expr><name>L_TEXT</name></expr>, <macro><name>TEXT</name><argument_list>(<argument><literal type="string">"Religion is like circumcision.\nIf you wait until someone is 21 to tell them about it they probably won't be interested."</literal></argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"Anonymous #57"</literal></expr></argument>)</argument_list></call></expr>, <expr><name><name>QuoteParams</name><operator>::</operator><name>rapid</name></name></expr>, <expr><literal type="boolean">true</literal></expr>, <expr><name>SC_CP_UTF8</name></expr>, <expr><name>L_TEXT</name></expr>, <macro><name>TEXT</name><argument_list>(<argument><literal type="string">"No, no, no, I'm not insulting you.\nI'm describing you."</literal></argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"Anonymous #58"</literal></expr></argument>)</argument_list></call></expr>, <expr><name><name>QuoteParams</name><operator>::</operator><name>rapid</name></name></expr>, <expr><literal type="boolean">true</literal></expr>, <expr><name>SC_CP_UTF8</name></expr>, <expr><name>L_TEXT</name></expr>, <macro><name>TEXT</name><argument_list>(<argument><literal type="string">"I bought a dog once. Named him \"Stay\".\n\"Come here, Stay.\"\nHe's insane now."</literal></argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"Anonymous #59"</literal></expr></argument>)</argument_list></call></expr>, <expr><name><name>QuoteParams</name><operator>::</operator><name>rapid</name></name></expr>, <expr><literal type="boolean">false</literal></expr>, <expr><name>SC_CP_UTF8</name></expr>, <expr><name>L_TEXT</name></expr>, <macro><name>TEXT</name><argument_list>(<argument><literal type="string">"Law of Software Quality:\n	errors = (more code)²\ne = mc²"</literal></argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"Anonymous #60"</literal></expr></argument>)</argument_list></call></expr>, <expr><name><name>QuoteParams</name><operator>::</operator><name>rapid</name></name></expr>, <expr><literal type="boolean">true</literal></expr>, <expr><name>SC_CP_UTF8</name></expr>, <expr><name>L_TEXT</name></expr>, <macro><name>TEXT</name><argument_list>(<argument><literal type="string">"Yesterday I named my Wifi network \"hack me if you can\"\nToday when I woke up it was changed to \"challenge accepted\"."</literal></argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"Anonymous #61"</literal></expr></argument>)</argument_list></call></expr>, <expr><name><name>QuoteParams</name><operator>::</operator><name>rapid</name></name></expr>, <expr><literal type="boolean">true</literal></expr>, <expr><name>SC_CP_UTF8</name></expr>, <expr><name>L_TEXT</name></expr>, <macro><name>TEXT</name><argument_list>(<argument><literal type="string">"Your mother is so fat,\nthe recursive function computing her mass causes a stack overflow."</literal></argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"Anonymous #62"</literal></expr></argument>)</argument_list></call></expr>, <expr><name><name>QuoteParams</name><operator>::</operator><name>slow</name></name></expr>, <expr><literal type="boolean">false</literal></expr>, <expr><name>SC_CP_UTF8</name></expr>, <expr><name>L_TEXT</name></expr>, <macro><name>TEXT</name><argument_list>(<argument><literal type="string">"Oral sex makes my day, but anal sex makes my hole weak."</literal></argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"Anonymous #63"</literal></expr></argument>)</argument_list></call></expr>, <expr><name><name>QuoteParams</name><operator>::</operator><name>rapid</name></name></expr>, <expr><literal type="boolean">true</literal></expr>, <expr><name>SC_CP_UTF8</name></expr>, <expr><name>L_TEXT</name></expr>, <macro><name>TEXT</name><argument_list>(<argument><literal type="string">"I'm not saying I am Batman, I am just saying no one has ever seen me and Batman in the same room together."</literal></argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"Anonymous #64"</literal></expr></argument>)</argument_list></call></expr>, <expr><name><name>QuoteParams</name><operator>::</operator><name>rapid</name></name></expr>, <expr><literal type="boolean">true</literal></expr>, <expr><name>SC_CP_UTF8</name></expr>, <expr><name>L_TEXT</name></expr>, <macro><name>TEXT</name><argument_list>(<argument><literal type="string">"I took a taxi today.\nThe driver told me \"I love my job, I own this car, I've got my own business, I'm my own boss, NO ONE tells me what to do!\"\nI said \"TURN LEFT HERE\".\n"</literal></argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"Anonymous #65"</literal></expr></argument>)</argument_list></call></expr>, <expr><name><name>QuoteParams</name><operator>::</operator><name>slow</name></name></expr>, <expr><literal type="boolean">false</literal></expr>, <expr><name>SC_CP_UTF8</name></expr>, <expr><name>L_TEXT</name></expr>, <macro><name>TEXT</name><argument_list>(<argument><literal type="string">"A man without God is like a fish without a bicycle."</literal></argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"Anonymous #66"</literal></expr></argument>)</argument_list></call></expr>, <expr><name><name>QuoteParams</name><operator>::</operator><name>rapid</name></name></expr>, <expr><literal type="boolean">true</literal></expr>, <expr><name>SC_CP_UTF8</name></expr>, <expr><name>L_TEXT</name></expr>, <macro><name>TEXT</name><argument_list>(<argument><literal type="string">"I hate how spiders just sit there on the walls and act like they pay rent!"</literal></argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"Anonymous #67"</literal></expr></argument>)</argument_list></call></expr>, <expr><name><name>QuoteParams</name><operator>::</operator><name>rapid</name></name></expr>, <expr><literal type="boolean">false</literal></expr>, <expr><name>SC_CP_UTF8</name></expr>, <expr><name>L_TEXT</name></expr>, <macro><name>TEXT</name><argument_list>(<argument><literal type="string">"Whenever someone starts a sentence by saying \"I'm not racist...\"),they are about to say something super racist."</literal></argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"Anonymous #68"</literal></expr></argument>)</argument_list></call></expr>, <expr><name><name>QuoteParams</name><operator>::</operator><name>rapid</name></name></expr>, <expr><literal type="boolean">true</literal></expr>, <expr><name>SC_CP_UTF8</name></expr>, <expr><name>L_TEXT</name></expr>, <macro><name>TEXT</name><argument_list>(<argument><literal type="string">"I'm not laughing at you, I'm laughing with you, you're just not laughing.\n"</literal></argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"Anonymous #69"</literal></expr></argument>)</argument_list></call></expr>, <expr><name><name>QuoteParams</name><operator>::</operator><name>slow</name></name></expr>, <expr><literal type="boolean">false</literal></expr>, <expr><name>SC_CP_UTF8</name></expr>, <expr><name>L_TEXT</name></expr>, <macro><name>TEXT</name><argument_list>(<argument><literal type="string">"Women need a reason to have sex. Men just need a place."</literal></argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"Anonymous #70"</literal></expr></argument>)</argument_list></call></expr>, <expr><name><name>QuoteParams</name><operator>::</operator><name>slow</name></name></expr>, <expr><literal type="boolean">false</literal></expr>, <expr><name>SC_CP_UTF8</name></expr>, <expr><name>L_TEXT</name></expr>, <macro><name>TEXT</name><argument_list>(<argument><literal type="string">"If abortion is murder then are condoms kidnapping?"</literal></argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"Anonymous #71"</literal></expr></argument>)</argument_list></call></expr>, <expr><name><name>QuoteParams</name><operator>::</operator><name>rapid</name></name></expr>, <expr><literal type="boolean">true</literal></expr>, <expr><name>SC_CP_UTF8</name></expr>, <expr><name>L_TEXT</name></expr>, <macro><name>TEXT</name><argument_list>(<argument><literal type="string">"Men also have feelings.\nFor example, they can feel hungry."</literal></argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"Anonymous #72"</literal></expr></argument>)</argument_list></call></expr>, <expr><name><name>QuoteParams</name><operator>::</operator><name>rapid</name></name></expr>, <expr><literal type="boolean">true</literal></expr>, <expr><name>SC_CP_UTF8</name></expr>, <expr><name>L_TEXT</name></expr>, <macro><name>TEXT</name><argument_list>(<argument><literal type="string">"Project Manager:\nA person who thinks 9 women can deliver a baby in 1 month."</literal></argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"Anonymous #73"</literal></expr></argument>)</argument_list></call></expr>, <expr><name><name>QuoteParams</name><operator>::</operator><name>rapid</name></name></expr>, <expr><literal type="boolean">true</literal></expr>, <expr><name>SC_CP_UTF8</name></expr>, <expr><name>L_TEXT</name></expr>, <macro><name>TEXT</name><argument_list>(<argument><literal type="string">"If you try and don't succeed, cheat. Repeat until caught. Then lie."</literal></argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"Anonymous #74"</literal></expr></argument>)</argument_list></call></expr>, <expr><name><name>QuoteParams</name><operator>::</operator><name>rapid</name></name></expr>, <expr><literal type="boolean">false</literal></expr>, <expr><name>SC_CP_UTF8</name></expr>, <expr><name>L_TEXT</name></expr>, <macro><name>TEXT</name><argument_list>(<argument><literal type="string">"Olympics is the stupidest thing.\nPeople are so proud to be competing for their country.\nThey play their stupid song and raise some dumb flags.\nI'd love to see no flags raised, no song, no mention of country.\nOnly people."</literal></argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"Anonymous #75"</literal></expr></argument>)</argument_list></call></expr>, <expr><name><name>QuoteParams</name><operator>::</operator><name>slow</name></name></expr>, <expr><literal type="boolean">false</literal></expr>, <expr><name>SC_CP_UTF8</name></expr>, <expr><name>L_TEXT</name></expr>, <macro><name>TEXT</name><argument_list>(<argument><literal type="string">"I think therefore I am\nnot religious."</literal></argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"Anonymous #76"</literal></expr></argument>)</argument_list></call></expr>, <expr><name><name>QuoteParams</name><operator>::</operator><name>rapid</name></name></expr>, <expr><literal type="boolean">true</literal></expr>, <expr><name>SC_CP_UTF8</name></expr>, <expr><name>L_TEXT</name></expr>, <macro><name>TEXT</name><argument_list>(<argument><literal type="string">"Even if being gay were a choice, so what?\nPeople choose to be assholes and they can get married."</literal></argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"Anonymous #77"</literal></expr></argument>)</argument_list></call></expr>, <expr><name><name>QuoteParams</name><operator>::</operator><name>rapid</name></name></expr>, <expr><literal type="boolean">true</literal></expr>, <expr><name>SC_CP_UTF8</name></expr>, <expr><name>L_TEXT</name></expr>, <macro><name>TEXT</name><argument_list>(<argument><literal type="string">"Governments are like diapers.\nThey should be changed often, and for the same reason."</literal></argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"Anonymous #78"</literal></expr></argument>)</argument_list></call></expr>, <expr><name><name>QuoteParams</name><operator>::</operator><name>slow</name></name></expr>, <expr><literal type="boolean">true</literal></expr>, <expr><name>SC_CP_UTF8</name></expr>, <expr><name>L_TEXT</name></expr>, <macro><name>TEXT</name><argument_list>(<argument><literal type="string">"Mathématiquement, un cocu est un entier qui partage sa moitié avec un tiers.\n"</literal></argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"Anonymous #79"</literal></expr></argument>)</argument_list></call></expr>, <expr><name><name>QuoteParams</name><operator>::</operator><name>slow</name></name></expr>, <expr><literal type="boolean">false</literal></expr>, <expr><name>SC_CP_UTF8</name></expr>, <expr><name>L_TEXT</name></expr>, <macro><name>TEXT</name><argument_list>(<argument><literal type="string">"I'm a creationist.\nI believe man created God.\n"</literal></argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"Anonymous #80"</literal></expr></argument>)</argument_list></call></expr>, <expr><name><name>QuoteParams</name><operator>::</operator><name>slow</name></name></expr>, <expr><literal type="boolean">true</literal></expr>, <expr><name>SC_CP_UTF8</name></expr>, <expr><name>L_TEXT</name></expr>, <macro><name>TEXT</name><argument_list>(<argument><literal type="string">"Let's eat kids.\nLet's eat, kids.\n\nUse a comma.\nSave lives.\n"</literal></argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"Anonymous #81"</literal></expr></argument>)</argument_list></call></expr>, <expr><name><name>QuoteParams</name><operator>::</operator><name>rapid</name></name></expr>, <expr><literal type="boolean">true</literal></expr>, <expr><name>SC_CP_UTF8</name></expr>, <expr><name>L_TEXT</name></expr>, <macro><name>TEXT</name><argument_list>(<argument><literal type="string">"A male engineering student was crossing a road one day when a frog called out to him and said, \"If you kiss me, I'll turn into a beautiful princess.\" He bent over, picked up the frog, and put it in his pocket.\n\nThe frog spoke up again and said, \"If you kiss me and turn me back into a beautiful princess, I will stay with you for one week.\" The engineering student took the frog out of his pocket, smiled at it; and returned it to his pocket.\n\nThe frog then cried out, \"If you kiss me and turn me back into a princess, I'll stay with you and do ANYTHING you want.\" Again the boy took the frog out, smiled at it, and put it back into his pocket.\n\nFinally, the frog asked, \"What is the matter? I've told you I'm a beautiful princess, that I'll stay with you for a week and do anything you want. Why won't you kiss me?\" The boy said, \"Look I'm an engineer. I don't have time for a girlfriend, but a talking frog is cool.\"\n"</literal></argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"Anonymous #82"</literal></expr></argument>)</argument_list></call></expr>, <expr><name><name>QuoteParams</name><operator>::</operator><name>rapid</name></name></expr>, <expr><literal type="boolean">true</literal></expr>, <expr><name>SC_CP_UTF8</name></expr>, <expr><name>L_TEXT</name></expr>, <macro><name>TEXT</name><argument_list>(<argument><literal type="string">"Gamers never die.\nThey just go offline.\n"</literal></argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"Anonymous #83"</literal></expr></argument>)</argument_list></call></expr>, <expr><name><name>QuoteParams</name><operator>::</operator><name>rapid</name></name></expr>, <expr><literal type="boolean">true</literal></expr>, <expr><name>SC_CP_UTF8</name></expr>, <expr><name>L_TEXT</name></expr>, <macro><name>TEXT</name><argument_list>(<argument><literal type="string">"Copy from one, it's plagiarism.\nCopy from two, it's research.\n"</literal></argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"Anonymous #84"</literal></expr></argument>)</argument_list></call></expr>, <expr><name><name>QuoteParams</name><operator>::</operator><name>rapid</name></name></expr>, <expr><literal type="boolean">true</literal></expr>, <expr><name>SC_CP_UTF8</name></expr>, <expr><name>L_TEXT</name></expr>, <macro><name>TEXT</name><argument_list>(<argument><literal type="string">"Saying that Java is nice because it works on all OSes is like saying that anal sex is nice because it works on all genders."</literal></argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"Anonymous #85"</literal></expr></argument>)</argument_list></call></expr>, <expr><name><name>QuoteParams</name><operator>::</operator><name>rapid</name></name></expr>, <expr><literal type="boolean">false</literal></expr>, <expr><name>SC_CP_UTF8</name></expr>, <expr><name>L_TEXT</name></expr>, <macro><name>TEXT</name><argument_list>(<argument><literal type="string">"Race, religion, ethnic pride and nationalism etc... does nothing but teach you how to hate people that you've never met."</literal></argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"Anonymous #86"</literal></expr></argument>)</argument_list></call></expr>, <expr><name><name>QuoteParams</name><operator>::</operator><name>rapid</name></name></expr>, <expr><literal type="boolean">true</literal></expr>, <expr><name>SC_CP_UTF8</name></expr>, <expr><name>L_TEXT</name></expr>, <macro><name>TEXT</name><argument_list>(<argument><literal type="string">"Farts are just the ghosts of the things we eat."</literal></argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"Anonymous #87"</literal></expr></argument>)</argument_list></call></expr>, <expr><name><name>QuoteParams</name><operator>::</operator><name>rapid</name></name></expr>, <expr><literal type="boolean">true</literal></expr>, <expr><name>SC_CP_UTF8</name></expr>, <expr><name>L_TEXT</name></expr>, <macro><name>TEXT</name><argument_list>(<argument><literal type="string">"I promised I would never kill someone who had my blood.\nBut that mosquito made me break my word."</literal></argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"Anonymous #88"</literal></expr></argument>)</argument_list></call></expr>, <expr><name><name>QuoteParams</name><operator>::</operator><name>rapid</name></name></expr>, <expr><literal type="boolean">true</literal></expr>, <expr><name>SC_CP_UTF8</name></expr>, <expr><name>L_TEXT</name></expr>, <macro><name>TEXT</name><argument_list>(<argument><literal type="string">"Si un jour une chaise te dit que t'as un joli cul, tu trouveras ça bizarre mais c'est juste un compliment d'objet direct."</literal></argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"Anonymous #89"</literal></expr></argument>)</argument_list></call></expr>, <expr><name><name>QuoteParams</name><operator>::</operator><name>rapid</name></name></expr>, <expr><literal type="boolean">false</literal></expr>, <expr><name>SC_CP_UTF8</name></expr>, <expr><name>L_TEXT</name></expr>, <macro><name>TEXT</name><argument_list>(<argument><literal type="string">"The biggest step in any relationship isn't the first kiss.\nIt's the first fart."</literal></argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"Anonymous #90"</literal></expr></argument>)</argument_list></call></expr>, <expr><name><name>QuoteParams</name><operator>::</operator><name>rapid</name></name></expr>, <expr><literal type="boolean">true</literal></expr>, <expr><name>SC_CP_UTF8</name></expr>, <expr><name>L_TEXT</name></expr>, <macro><name>TEXT</name><argument_list>(<argument><literal type="string">"Clapping:\n(verb)\nRepeatedly high-fiving yourself for someone else's accomplishments."</literal></argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"Anonymous #91"</literal></expr></argument>)</argument_list></call></expr>, <expr><name><name>QuoteParams</name><operator>::</operator><name>slow</name></name></expr>, <expr><literal type="boolean">false</literal></expr>, <expr><name>SC_CP_UTF8</name></expr>, <expr><name>L_TEXT</name></expr>, <macro><name>TEXT</name><argument_list>(<argument><literal type="string">"CV: ctrl-C, ctrl-V"</literal></argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"Anonymous #92"</literal></expr></argument>)</argument_list></call></expr>, <expr><name><name>QuoteParams</name><operator>::</operator><name>rapid</name></name></expr>, <expr><literal type="boolean">true</literal></expr>, <expr><name>SC_CP_UTF8</name></expr>, <expr><name>L_TEXT</name></expr>, <macro><name>TEXT</name><argument_list>(<argument><literal type="string">"Mondays are not so bad.\nIt's your job that sucks."</literal></argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"Anonymous #93"</literal></expr></argument>)</argument_list></call></expr>, <expr><name><name>QuoteParams</name><operator>::</operator><name>rapid</name></name></expr>, <expr><literal type="boolean">true</literal></expr>, <expr><name>SC_CP_UTF8</name></expr>, <expr><name>L_TEXT</name></expr>, <macro><name>TEXT</name><argument_list>(<argument><literal type="string">"[In a job interview]\nInterviewer: What's your greatest weakness?\nCandidate: Honesty.\nInterviewer: I don't think honesty is a weakness.\nCandidate: I don't give a fuck what you think."</literal></argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"Anonymous #94"</literal></expr></argument>)</argument_list></call></expr>, <expr><name><name>QuoteParams</name><operator>::</operator><name>rapid</name></name></expr>, <expr><literal type="boolean">true</literal></expr>, <expr><name>SC_CP_UTF8</name></expr>, <expr><name>L_TEXT</name></expr>, <macro><name>TEXT</name><argument_list>(<argument><literal type="string">"Hey, I just met you\nAnd this is crazy\nHere's my number 127.0.0.1\nPing me maybe?"</literal></argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"Anonymous #95"</literal></expr></argument>)</argument_list></call></expr>, <expr><name><name>QuoteParams</name><operator>::</operator><name>rapid</name></name></expr>, <expr><literal type="boolean">true</literal></expr>, <expr><name>SC_CP_UTF8</name></expr>, <expr><name>L_TEXT</name></expr>, <macro><name>TEXT</name><argument_list>(<argument><literal type="string">"What if the spider you killed in your house had spent his entire life thinking you were his roommate?\nEver think about that?\nNo. You only think about yourself.\n"</literal></argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"Anonymous #96"</literal></expr></argument>)</argument_list></call></expr>, <expr><name><name>QuoteParams</name><operator>::</operator><name>slow</name></name></expr>, <expr><literal type="boolean">false</literal></expr>, <expr><name>SC_CP_UTF8</name></expr>, <expr><name>L_TEXT</name></expr>, <macro><name>TEXT</name><argument_list>(<argument><literal type="string">"Code for 6 minutes, debug for 6 hours."</literal></argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"Anonymous #97"</literal></expr></argument>)</argument_list></call></expr>, <expr><name><name>QuoteParams</name><operator>::</operator><name>rapid</name></name></expr>, <expr><literal type="boolean">true</literal></expr>, <expr><name>SC_CP_UTF8</name></expr>, <expr><name>L_TEXT</name></expr>, <macro><name>TEXT</name><argument_list>(<argument><literal type="string">"Real Programmers don't comment their code.\nIf it was hard to write, it should be hard to read."</literal></argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"Anonymous #98"</literal></expr></argument>)</argument_list></call></expr>, <expr><name><name>QuoteParams</name><operator>::</operator><name>rapid</name></name></expr>, <expr><literal type="boolean">true</literal></expr>, <expr><name>SC_CP_UTF8</name></expr>, <expr><name>L_TEXT</name></expr>, <macro><name>TEXT</name><argument_list>(<argument><literal type="string">"My neighbours listen to good music.\nWhether they like it or not."</literal></argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"Anonymous #99"</literal></expr></argument>)</argument_list></call></expr>, <expr><name><name>QuoteParams</name><operator>::</operator><name>rapid</name></name></expr>, <expr><literal type="boolean">true</literal></expr>, <expr><name>SC_CP_UTF8</name></expr>, <expr><name>L_TEXT</name></expr>, <macro><name>TEXT</name><argument_list>(<argument><literal type="string">"I've been using Vim for about 2 years now,\nmostly because I can't figure out how to exit it."</literal></argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"Anonymous #100"</literal></expr></argument>)</argument_list></call></expr>, <expr><name><name>QuoteParams</name><operator>::</operator><name>rapid</name></name></expr>, <expr><literal type="boolean">true</literal></expr>, <expr><name>SC_CP_UTF8</name></expr>, <expr><name>L_TEXT</name></expr>, <macro><name>TEXT</name><argument_list>(<argument><literal type="string">"Dear YouTube,\nI can deal with Ads.\nI can deal with Buffer.\nBut when Ads buffer, I suffer."</literal></argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"Anonymous #101"</literal></expr></argument>)</argument_list></call></expr>, <expr><name><name>QuoteParams</name><operator>::</operator><name>rapid</name></name></expr>, <expr><literal type="boolean">true</literal></expr>, <expr><name>SC_CP_UTF8</name></expr>, <expr><name>L_TEXT</name></expr>, <macro><name>TEXT</name><argument_list>(<argument><literal type="string">"It's always sad when a man and his dick share only one brain...\nand it turns out to be the dick's."</literal></argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"Anonymous #102"</literal></expr></argument>)</argument_list></call></expr>, <expr><name><name>QuoteParams</name><operator>::</operator><name>rapid</name></name></expr>, <expr><literal type="boolean">true</literal></expr>, <expr><name>SC_CP_UTF8</name></expr>, <expr><name>L_TEXT</name></expr>, <macro><name>TEXT</name><argument_list>(<argument><literal type="string">"If IE is brave enough to ask you to set it as your default browser,\ndon't tell me you dare not ask a girl out."</literal></argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"Anonymous #104"</literal></expr></argument>)</argument_list></call></expr>, <expr><name><name>QuoteParams</name><operator>::</operator><name>rapid</name></name></expr>, <expr><literal type="boolean">true</literal></expr>, <expr><name>SC_CP_UTF8</name></expr>, <expr><name>L_TEXT</name></expr>, <macro><name>TEXT</name><argument_list>(<argument><literal type="string">"The main idea of \"Inception\":\nif you run a VM inside a VM inside a VM inside a VM inside a VM,\neverything will be very slow."</literal></argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"Anonymous #105"</literal></expr></argument>)</argument_list></call></expr>, <expr><name><name>QuoteParams</name><operator>::</operator><name>slow</name></name></expr>, <expr><literal type="boolean">false</literal></expr>, <expr><name>SC_CP_UTF8</name></expr>, <expr><name>L_TEXT</name></expr>, <macro><name>TEXT</name><argument_list>(<argument><literal type="string">"The best antivirus is common sense."</literal></argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"Anonymous #106"</literal></expr></argument>)</argument_list></call></expr>, <expr><name><name>QuoteParams</name><operator>::</operator><name>rapid</name></name></expr>, <expr><literal type="boolean">true</literal></expr>, <expr><name>SC_CP_UTF8</name></expr>, <expr><name>L_TEXT</name></expr>, <macro><name>TEXT</name><argument_list>(<argument><literal type="string">"When I die, I want to go peacefully like my grandfather did, in his sleep\n- not screaming, like the passengers in his car."</literal></argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"Anonymous #107"</literal></expr></argument>)</argument_list></call></expr>, <expr><name><name>QuoteParams</name><operator>::</operator><name>rapid</name></name></expr>, <expr><literal type="boolean">true</literal></expr>, <expr><name>SC_CP_UTF8</name></expr>, <expr><name>L_TEXT</name></expr>, <macro><name>TEXT</name><argument_list>(<argument><literal type="string">"Remember, YOUR God is real.\nAll those other Gods are ridiculous, made-up nonsense.\nBut not yours.\nYour God is real. Whichever one that is."</literal></argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"Anonymous #108"</literal></expr></argument>)</argument_list></call></expr>, <expr><name><name>QuoteParams</name><operator>::</operator><name>rapid</name></name></expr>, <expr><literal type="boolean">true</literal></expr>, <expr><name>SC_CP_UTF8</name></expr>, <expr><name>L_CSS</name></expr>, <macro><name>TEXT</name><argument_list>(<argument><literal type="string">"#your-mom {\n	width: 100000000000000000000px;\n	float: nope;\n}\n"</literal></argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"Anonymous #109"</literal></expr></argument>)</argument_list></call></expr>, <expr><name><name>QuoteParams</name><operator>::</operator><name>rapid</name></name></expr>, <expr><literal type="boolean">true</literal></expr>, <expr><name>SC_CP_UTF8</name></expr>, <expr><name>L_TEXT</name></expr>, <macro><name>TEXT</name><argument_list>(<argument><literal type="string">"What's the best thing about UDP jokes?\nI don't care if you get them."</literal></argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"Anonymous #110"</literal></expr></argument>)</argument_list></call></expr>, <expr><name><name>QuoteParams</name><operator>::</operator><name>rapid</name></name></expr>, <expr><literal type="boolean">true</literal></expr>, <expr><name>SC_CP_UTF8</name></expr>, <expr><name>L_TEXT</name></expr>, <macro><name>TEXT</name><argument_list>(<argument><literal type="string">"A programmer had a problem, so he decided to use threads.\nNow 2 has. He problems"</literal></argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"Anonymous #111"</literal></expr></argument>)</argument_list></call></expr>, <expr><name><name>QuoteParams</name><operator>::</operator><name>rapid</name></name></expr>, <expr><literal type="boolean">true</literal></expr>, <expr><name>SC_CP_UTF8</name></expr>, <expr><name>L_TEXT</name></expr>, <macro><name>TEXT</name><argument_list>(<argument><literal type="string">"I'VE NEVER BEEN VERY GOOD AT GEOGRAPHY.\nBUT I CAN NAME AT LEAST ONE CITY IN FRANCE, WHICH IS NICE."</literal></argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"Anonymous #112"</literal></expr></argument>)</argument_list></call></expr>, <expr><name><name>QuoteParams</name><operator>::</operator><name>rapid</name></name></expr>, <expr><literal type="boolean">true</literal></expr>, <expr><name>SC_CP_UTF8</name></expr>, <expr><name>L_CSS</name></expr>, <macro><name>TEXT</name><argument_list>(<argument><literal type="string">"#hulk {\n    height: 200%;\n    width: 200%;\n    color: green;\n}\n"</literal></argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"Anonymous #113"</literal></expr></argument>)</argument_list></call></expr>, <expr><name><name>QuoteParams</name><operator>::</operator><name>rapid</name></name></expr>, <expr><literal type="boolean">false</literal></expr>, <expr><name>SC_CP_UTF8</name></expr>, <expr><name>L_TEXT</name></expr>, <macro><name>TEXT</name><argument_list>(<argument><literal type="string">"A colon can completely change the meaning of a sentence. For example:\n- Jane ate her friend's sandwich.\n- Jane ate her friend's colon."</literal></argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"Anonymous #114"</literal></expr></argument>)</argument_list></call></expr>, <expr><name><name>QuoteParams</name><operator>::</operator><name>rapid</name></name></expr>, <expr><literal type="boolean">true</literal></expr>, <expr><name>SC_CP_UTF8</name></expr>, <expr><name>L_TEXT</name></expr>, <macro><name>TEXT</name><argument_list>(<argument><literal type="string">"How can you face your problem if your problem is your face?"</literal></argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"Anonymous #115"</literal></expr></argument>)</argument_list></call></expr>, <expr><name><name>QuoteParams</name><operator>::</operator><name>slow</name></name></expr>, <expr><literal type="boolean">false</literal></expr>, <expr><name>SC_CP_UTF8</name></expr>, <expr><name>L_TEXT</name></expr>, <macro><name>TEXT</name><argument_list>(<argument><literal type="string">"YOLOLO:\nYou Only LOL Once."</literal></argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"Anonymous #116"</literal></expr></argument>)</argument_list></call></expr>, <expr><name><name>QuoteParams</name><operator>::</operator><name>rapid</name></name></expr>, <expr><literal type="boolean">true</literal></expr>, <expr><name>SC_CP_UTF8</name></expr>, <expr><name>L_TEXT</name></expr>, <macro><name>TEXT</name><argument_list>(<argument><literal type="string">"Every exit is an entrance to new experiences."</literal></argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"Anonymous #117"</literal></expr></argument>)</argument_list></call></expr>, <expr><name><name>QuoteParams</name><operator>::</operator><name>rapid</name></name></expr>, <expr><literal type="boolean">false</literal></expr>, <expr><name>SC_CP_UTF8</name></expr>, <expr><name>L_TEXT</name></expr>, <macro><name>TEXT</name><argument_list>(<argument><literal type="string">"A Native American was asked:\n\"Do you celebrate Columbus day?\"\nHe replied:\n\"I don't know, do Jews celebrate Hitler's birthday?\""</literal></argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"Anonymous #118"</literal></expr></argument>)</argument_list></call></expr>, <expr><name><name>QuoteParams</name><operator>::</operator><name>rapid</name></name></expr>, <expr><literal type="boolean">true</literal></expr>, <expr><name>SC_CP_UTF8</name></expr>, <expr><name>L_TEXT</name></expr>, <macro><name>TEXT</name><argument_list>(<argument><literal type="string">"I love necrophilia, but i can't stand the awkward silences."</literal></argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"Anonymous #119"</literal></expr></argument>)</argument_list></call></expr>, <expr><name><name>QuoteParams</name><operator>::</operator><name>rapid</name></name></expr>, <expr><literal type="boolean">true</literal></expr>, <expr><name>SC_CP_UTF8</name></expr>, <expr><name>L_TEXT</name></expr>, <macro><name>TEXT</name><argument_list>(<argument><literal type="string">"\"I'm gonna Google that. BING that, Bing that, sorry.\"\n- The CEO of Bing (many times per day still)"</literal></argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"Anonymous #120"</literal></expr></argument>)</argument_list></call></expr>, <expr><name><name>QuoteParams</name><operator>::</operator><name>rapid</name></name></expr>, <expr><literal type="boolean">false</literal></expr>, <expr><name>SC_CP_UTF8</name></expr>, <expr><name>L_TEXT</name></expr>, <macro><name>TEXT</name><argument_list>(<argument><literal type="string">"GRAMMAR\nThe difference between knowing your shit and knowing you're shit."</literal></argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"Anonymous #121"</literal></expr></argument>)</argument_list></call></expr>, <expr><name><name>QuoteParams</name><operator>::</operator><name>rapid</name></name></expr>, <expr><literal type="boolean">false</literal></expr>, <expr><name>SC_CP_UTF8</name></expr>, <expr><name>L_TEXT</name></expr>, <macro><name>TEXT</name><argument_list>(<argument><literal type="string">"5 out of 6 people agree that Russian roulette is completely safe."</literal></argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"Anonymous #122"</literal></expr></argument>)</argument_list></call></expr>, <expr><name><name>QuoteParams</name><operator>::</operator><name>slow</name></name></expr>, <expr><literal type="boolean">false</literal></expr>, <expr><name>SC_CP_UTF8</name></expr>, <expr><name>L_TEXT</name></expr>, <macro><name>TEXT</name><argument_list>(<argument><literal type="string">"Nerd?\nI prefer the term \"Intellectual badass\"."</literal></argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"Anonymous #123"</literal></expr></argument>)</argument_list></call></expr>, <expr><name><name>QuoteParams</name><operator>::</operator><name>rapid</name></name></expr>, <expr><literal type="boolean">false</literal></expr>, <expr><name>SC_CP_UTF8</name></expr>, <expr><name>L_TEXT</name></expr>, <macro><name>TEXT</name><argument_list>(<argument><literal type="string">"I know every digit of π,\njust not in the right order."</literal></argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"Anonymous #124"</literal></expr></argument>)</argument_list></call></expr>, <expr><name><name>QuoteParams</name><operator>::</operator><name>rapid</name></name></expr>, <expr><literal type="boolean">false</literal></expr>, <expr><name>SC_CP_UTF8</name></expr>, <expr><name>L_TEXT</name></expr>, <macro><name>TEXT</name><argument_list>(<argument><literal type="string">"You don't need religion to have morals.\nIf you can't determine right from wrong then you lack empathy, not religion."</literal></argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"Anonymous #125"</literal></expr></argument>)</argument_list></call></expr>, <expr><name><name>QuoteParams</name><operator>::</operator><name>rapid</name></name></expr>, <expr><literal type="boolean">true</literal></expr>, <expr><name>SC_CP_UTF8</name></expr>, <expr><name>L_TEXT</name></expr>, <macro><name>TEXT</name><argument_list>(<argument><literal type="string">"Pooping with the door opened is the meaning of true freedom."</literal></argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"Anonymous #126"</literal></expr></argument>)</argument_list></call></expr>, <expr><name><name>QuoteParams</name><operator>::</operator><name>rapid</name></name></expr>, <expr><literal type="boolean">true</literal></expr>, <expr><name>SC_CP_UTF8</name></expr>, <expr><name>L_TEXT</name></expr>, <macro><name>TEXT</name><argument_list>(<argument><literal type="string">"Social media does not make people stupid.\nIt just makes stupid people more visible."</literal></argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"Anonymous #127"</literal></expr></argument>)</argument_list></call></expr>, <expr><name><name>QuoteParams</name><operator>::</operator><name>rapid</name></name></expr>, <expr><literal type="boolean">false</literal></expr>, <expr><name>SC_CP_UTF8</name></expr>, <expr><name>L_SQL</name></expr>, <macro><name>TEXT</name><argument_list>(<argument><literal type="string">"SELECT finger\nFROM hand\nWHERE id = 2 ;\n"</literal></argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"Anonymous #128"</literal></expr></argument>)</argument_list></call></expr>, <expr><name><name>QuoteParams</name><operator>::</operator><name>rapid</name></name></expr>, <expr><literal type="boolean">true</literal></expr>, <expr><name>SC_CP_UTF8</name></expr>, <expr><name>L_TEXT</name></expr>, <macro><name>TEXT</name><argument_list>(<argument><literal type="string">"3 men are on a boat. They have 4 cigarettes, but nothing to light them with.\nSo they throw a cigarette overboard and the whole boat becomes a cigarette lighter."</literal></argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"Anonymous #129"</literal></expr></argument>)</argument_list></call></expr>, <expr><name><name>QuoteParams</name><operator>::</operator><name>rapid</name></name></expr>, <expr><literal type="boolean">false</literal></expr>, <expr><name>SC_CP_UTF8</name></expr>, <expr><name>L_TEXT</name></expr>, <macro><name>TEXT</name><argument_list>(<argument><literal type="string">"What is the most used language in programming?\n\nProfanity\n"</literal></argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"Anonymous #130"</literal></expr></argument>)</argument_list></call></expr>, <expr><name><name>QuoteParams</name><operator>::</operator><name>rapid</name></name></expr>, <expr><literal type="boolean">false</literal></expr>, <expr><name>SC_CP_UTF8</name></expr>, <expr><name>L_TEXT</name></expr>, <macro><name>TEXT</name><argument_list>(<argument><literal type="string">"Common sense is so rare, it's kinda like a superpower..."</literal></argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"Anonymous #131"</literal></expr></argument>)</argument_list></call></expr>, <expr><name><name>QuoteParams</name><operator>::</operator><name>rapid</name></name></expr>, <expr><literal type="boolean">true</literal></expr>, <expr><name>SC_CP_UTF8</name></expr>, <expr><name>L_TEXT</name></expr>, <macro><name>TEXT</name><argument_list>(<argument><literal type="string">"The best thing about a boolean is even if you are wrong, you are only off by a bit."</literal></argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"Anonymous #132"</literal></expr></argument>)</argument_list></call></expr>, <expr><name><name>QuoteParams</name><operator>::</operator><name>rapid</name></name></expr>, <expr><literal type="boolean">false</literal></expr>, <expr><name>SC_CP_UTF8</name></expr>, <expr><name>L_TEXT</name></expr>, <macro><name>TEXT</name><argument_list>(<argument><literal type="string">"Benchmarks don't lie, but liars do benchmarks."</literal></argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"Anonymous #133"</literal></expr></argument>)</argument_list></call></expr>, <expr><name><name>QuoteParams</name><operator>::</operator><name>rapid</name></name></expr>, <expr><literal type="boolean">false</literal></expr>, <expr><name>SC_CP_UTF8</name></expr>, <expr><name>L_TEXT</name></expr>, <macro><name>TEXT</name><argument_list>(<argument><literal type="string">"Multitasking: Screwing up several things at once."</literal></argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"Anonymous #134"</literal></expr></argument>)</argument_list></call></expr>, <expr><name><name>QuoteParams</name><operator>::</operator><name>rapid</name></name></expr>, <expr><literal type="boolean">true</literal></expr>, <expr><name>SC_CP_UTF8</name></expr>, <expr><name>L_TEXT</name></expr>, <macro><name>TEXT</name><argument_list>(<argument><literal type="string">"Linux is user friendly.\nIt's just picky about its friends."</literal></argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"Anonymous #135"</literal></expr></argument>)</argument_list></call></expr>, <expr><name><name>QuoteParams</name><operator>::</operator><name>rapid</name></name></expr>, <expr><literal type="boolean">true</literal></expr>, <expr><name>SC_CP_UTF8</name></expr>, <expr><name>L_TEXT</name></expr>, <macro><name>TEXT</name><argument_list>(<argument><literal type="string">"Theory is when you know something, but it doesn't work.\nPractice is when something works, but you don't know why.\nProgrammers combine theory and practice: nothing works and they don't know why."</literal></argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"Anonymous #136"</literal></expr></argument>)</argument_list></call></expr>, <expr><name><name>QuoteParams</name><operator>::</operator><name>rapid</name></name></expr>, <expr><literal type="boolean">true</literal></expr>, <expr><name>SC_CP_UTF8</name></expr>, <expr><name>L_TEXT</name></expr>, <macro><name>TEXT</name><argument_list>(<argument><literal type="string">"Documentation is like sex:\nwhen it's good, it's very, very good;\nwhen it's bad, it's better than nothing."</literal></argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"Anonymous #137"</literal></expr></argument>)</argument_list></call></expr>, <expr><name><name>QuoteParams</name><operator>::</operator><name>slow</name></name></expr>, <expr><literal type="boolean">false</literal></expr>, <expr><name>SC_CP_UTF8</name></expr>, <expr><name>L_TEXT</name></expr>, <macro><name>TEXT</name><argument_list>(<argument><literal type="string">"Home is where you poop most comfortably."</literal></argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"Anonymous #138"</literal></expr></argument>)</argument_list></call></expr>, <expr><name><name>QuoteParams</name><operator>::</operator><name>rapid</name></name></expr>, <expr><literal type="boolean">true</literal></expr>, <expr><name>SC_CP_UTF8</name></expr>, <expr><name>L_TEXT</name></expr>, <macro><name>TEXT</name><argument_list>(<argument><literal type="string">"Laptop Speakers problem: too quiet for music, too loud for porn."</literal></argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"Anonymous #139"</literal></expr></argument>)</argument_list></call></expr>, <expr><name><name>QuoteParams</name><operator>::</operator><name>rapid</name></name></expr>, <expr><literal type="boolean">true</literal></expr>, <expr><name>SC_CP_UTF8</name></expr>, <expr><name>L_TEXT</name></expr>, <macro><name>TEXT</name><argument_list>(<argument><literal type="string">"Chinese food to go: $16\nGas to go get the food: $2\nDrove home just to realize they forgot one of your containers: RICELESS"</literal></argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"Anonymous #140"</literal></expr></argument>)</argument_list></call></expr>, <expr><name><name>QuoteParams</name><operator>::</operator><name>rapid</name></name></expr>, <expr><literal type="boolean">true</literal></expr>, <expr><name>SC_CP_UTF8</name></expr>, <expr><name>L_TEXT</name></expr>, <macro><name>TEXT</name><argument_list>(<argument><literal type="string">"MS Windows is like religion to most people: they are born into it, accept it as default, never consider switching to another."</literal></argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"Anonymous #141"</literal></expr></argument>)</argument_list></call></expr>, <expr><name><name>QuoteParams</name><operator>::</operator><name>rapid</name></name></expr>, <expr><literal type="boolean">true</literal></expr>, <expr><name>SC_CP_UTF8</name></expr>, <expr><name>L_TEXT</name></expr>, <macro><name>TEXT</name><argument_list>(<argument><literal type="string">"To most religious people, the holy books are like a software license (EULA).\nNobody actually reads it. They just scroll to the bottom and click \"I agree\"."</literal></argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"Anonymous #142"</literal></expr></argument>)</argument_list></call></expr>, <expr><name><name>QuoteParams</name><operator>::</operator><name>rapid</name></name></expr>, <expr><literal type="boolean">true</literal></expr>, <expr><name>SC_CP_UTF8</name></expr>, <expr><name>L_TEXT</name></expr>, <macro><name>TEXT</name><argument_list>(<argument><literal type="string">"You are nothing but a number of days,\nwhenever each day passes then part of you has gone."</literal></argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"Anonymous #143"</literal></expr></argument>)</argument_list></call></expr>, <expr><name><name>QuoteParams</name><operator>::</operator><name>rapid</name></name></expr>, <expr><literal type="boolean">true</literal></expr>, <expr><name>SC_CP_UTF8</name></expr>, <expr><name>L_TEXT</name></expr>, <macro><name>TEXT</name><argument_list>(<argument><literal type="string">"If 666 is evil, does that make 25.8069758011 the root of all evil?"</literal></argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"Anonymous #144"</literal></expr></argument>)</argument_list></call></expr>, <expr><name><name>QuoteParams</name><operator>::</operator><name>rapid</name></name></expr>, <expr><literal type="boolean">true</literal></expr>, <expr><name>SC_CP_UTF8</name></expr>, <expr><name>L_TEXT</name></expr>, <macro><name>TEXT</name><argument_list>(<argument><literal type="string">"I don't want to sound like a badass but\nI eject my USB drive without removing it safely."</literal></argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"Anonymous #145"</literal></expr></argument>)</argument_list></call></expr>, <expr><name><name>QuoteParams</name><operator>::</operator><name>rapid</name></name></expr>, <expr><literal type="boolean">false</literal></expr>, <expr><name>SC_CP_UTF8</name></expr>, <expr><name>L_TEXT</name></expr>, <macro><name>TEXT</name><argument_list>(<argument><literal type="string">"feet  (noun)\na device used for finding legos in the dark"</literal></argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"Anonymous #146"</literal></expr></argument>)</argument_list></call></expr>, <expr><name><name>QuoteParams</name><operator>::</operator><name>rapid</name></name></expr>, <expr><literal type="boolean">true</literal></expr>, <expr><name>SC_CP_UTF8</name></expr>, <expr><name>L_TEXT</name></expr>, <macro><name>TEXT</name><argument_list>(<argument><literal type="string">"Buy a sheep\nName it \"Relation\"\nNow you have a Relationsheep\n"</literal></argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"Anonymous #147"</literal></expr></argument>)</argument_list></call></expr>, <expr><name><name>QuoteParams</name><operator>::</operator><name>rapid</name></name></expr>, <expr><literal type="boolean">true</literal></expr>, <expr><name>SC_CP_UTF8</name></expr>, <expr><name>L_TEXT</name></expr>, <macro><name>TEXT</name><argument_list>(<argument><literal type="string">"I dig, you dig, we dig,\nhe dig, she dig, they dig...\n\nIt's not a beautiful poem,\nbut it's very deep."</literal></argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"Anonymous #148"</literal></expr></argument>)</argument_list></call></expr>, <expr><name><name>QuoteParams</name><operator>::</operator><name>rapid</name></name></expr>, <expr><literal type="boolean">false</literal></expr>, <expr><name>SC_CP_UTF8</name></expr>, <expr><name>L_BASH</name></expr>, <macro><name>TEXT</name><argument_list>(<argument><literal type="string">"# UNIX command line Russian roulette:\n[ $[ $RANDOM % 6 ] == 0 ] &amp;&amp; rm -rf /* || echo *Click*\n"</literal></argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"Anonymous #149"</literal></expr></argument>)</argument_list></call></expr>, <expr><name><name>QuoteParams</name><operator>::</operator><name>rapid</name></name></expr>, <expr><literal type="boolean">false</literal></expr>, <expr><name>SC_CP_UTF8</name></expr>, <expr><name>L_TEXT</name></expr>, <macro><name>TEXT</name><argument_list>(<argument><literal type="string">"unzip, strip, top, less, touch, finger, grep, mount, fsck, more, yes, fsck, fsck, fsck, umount, sleep.\n\nNo, it's not porn. It's Unix."</literal></argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"Anonymous #150"</literal></expr></argument>)</argument_list></call></expr>, <expr><name><name>QuoteParams</name><operator>::</operator><name>rapid</name></name></expr>, <expr><literal type="boolean">true</literal></expr>, <expr><name>SC_CP_UTF8</name></expr>, <expr><name>L_TEXT</name></expr>, <macro><name>TEXT</name><argument_list>(<argument><literal type="string">"To understand what recursion is, you must first understand recursion."</literal></argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"Anonymous #151"</literal></expr></argument>)</argument_list></call></expr>, <expr><name><name>QuoteParams</name><operator>::</operator><name>rapid</name></name></expr>, <expr><literal type="boolean">true</literal></expr>, <expr><name>SC_CP_UTF8</name></expr>, <expr><name>L_TEXT</name></expr>, <macro><name>TEXT</name><argument_list>(<argument><literal type="string">"Q: What's the object-oriented way to become wealthy?\nA: Inheritance."</literal></argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"Anonymous #152"</literal></expr></argument>)</argument_list></call></expr>, <expr><name><name>QuoteParams</name><operator>::</operator><name>rapid</name></name></expr>, <expr><literal type="boolean">true</literal></expr>, <expr><name>SC_CP_UTF8</name></expr>, <expr><name>L_TEXT</name></expr>, <macro><name>TEXT</name><argument_list>(<argument><literal type="string">"A SQL query goes into a bar, walks up to two tables and asks, \"Can I join you?\""</literal></argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"Anonymous #153"</literal></expr></argument>)</argument_list></call></expr>, <expr><name><name>QuoteParams</name><operator>::</operator><name>rapid</name></name></expr>, <expr><literal type="boolean">true</literal></expr>, <expr><name>SC_CP_UTF8</name></expr>, <expr><name>L_TEXT</name></expr>, <macro><name>TEXT</name><argument_list>(<argument><literal type="string">"You are not fat, you are just more visible."</literal></argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"Anonymous #154"</literal></expr></argument>)</argument_list></call></expr>, <expr><name><name>QuoteParams</name><operator>::</operator><name>rapid</name></name></expr>, <expr><literal type="boolean">true</literal></expr>, <expr><name>SC_CP_UTF8</name></expr>, <expr><name>L_TEXT</name></expr>, <macro><name>TEXT</name><argument_list>(<argument><literal type="string">"Minimalist\n (.   .)\n  )   (\n (  Y  )\nASCII Art"</literal></argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"Anonymous #155"</literal></expr></argument>)</argument_list></call></expr>, <expr><name><name>QuoteParams</name><operator>::</operator><name>rapid</name></name></expr>, <expr><literal type="boolean">true</literal></expr>, <expr><name>SC_CP_UTF8</name></expr>, <expr><name>L_TEXT</name></expr>, <macro><name>TEXT</name><argument_list>(<argument><literal type="string">"Parallel lines have so much in common...\nIt's a shame that they'll never meet."</literal></argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"Anonymous #156"</literal></expr></argument>)</argument_list></call></expr>, <expr><name><name>QuoteParams</name><operator>::</operator><name>rapid</name></name></expr>, <expr><literal type="boolean">true</literal></expr>, <expr><name>SC_CP_UTF8</name></expr>, <expr><name>L_TEXT</name></expr>, <macro><name>TEXT</name><argument_list>(<argument><literal type="string">"Declare variables, not war.\nExecute programs, not people."</literal></argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"Anonymous #157"</literal></expr></argument>)</argument_list></call></expr>, <expr><name><name>QuoteParams</name><operator>::</operator><name>rapid</name></name></expr>, <expr><literal type="boolean">true</literal></expr>, <expr><name>SC_CP_UTF8</name></expr>, <expr><name>L_TEXT</name></expr>, <macro><name>TEXT</name><argument_list>(<argument><literal type="string">"I can't see an end. I have no control and I don't think there's any escape. I don't even have a home anymore.\nI think it's time for a new keyboard."</literal></argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"Anonymous #158"</literal></expr></argument>)</argument_list></call></expr>, <expr><name><name>QuoteParams</name><operator>::</operator><name>slow</name></name></expr>, <expr><literal type="boolean">false</literal></expr>, <expr><name>SC_CP_UTF8</name></expr>, <expr><name>L_TEXT</name></expr>, <macro><name>TEXT</name><argument_list>(<argument><literal type="string">"6.9\nA little fun interrupted by a period."</literal></argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"Anonymous #159"</literal></expr></argument>)</argument_list></call></expr>, <expr><name><name>QuoteParams</name><operator>::</operator><name>slow</name></name></expr>, <expr><literal type="boolean">false</literal></expr>, <expr><name>SC_CP_UTF8</name></expr>, <expr><name>L_TEXT</name></expr>, <macro><name>TEXT</name><argument_list>(<argument><literal type="string">"I love anal\n-yzing all data before making assumptions."</literal></argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"Anonymous #160"</literal></expr></argument>)</argument_list></call></expr>, <expr><name><name>QuoteParams</name><operator>::</operator><name>rapid</name></name></expr>, <expr><literal type="boolean">false</literal></expr>, <expr><name>SC_CP_UTF8</name></expr>, <expr><name>L_TEXT</name></expr>, <macro><name>TEXT</name><argument_list>(<argument><literal type="string">"So my wife said\n\"take off my shirt\".\nI did as she said and take off her shirt.\nThen she said,\n\"Take off my skirt.\"\nI took off her skirt.\n\"Take off my shoes.\"\nI took off her shoes.\n\"Now take off my bra and panties.\"\nand so I took them off.\nThen she looked at me and said\n\"I don't want to catch you wearing my things ever again.\""</literal></argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"Anonymous #161"</literal></expr></argument>)</argument_list></call></expr>, <expr><name><name>QuoteParams</name><operator>::</operator><name>rapid</name></name></expr>, <expr><literal type="boolean">false</literal></expr>, <expr><name>SC_CP_UTF8</name></expr>, <expr><name>L_TEXT</name></expr>, <macro><name>TEXT</name><argument_list>(<argument><literal type="string">"Do you know:\nSpiders are the only web developers in the world that enjoy finding bugs."</literal></argument>)</argument_list></macro> }</block></expr>,
	<expr><block>{<expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"Anonymous #162"</literal></expr></argument>)</argument_list></call></expr>, <expr><name><name>QuoteParams</name><operator>::</operator><name>rapid</name></name></expr>, <expr><literal type="boolean">false</literal></expr>, <expr><name>SC_CP_UTF8</name></expr>, <expr><name>L_TEXT</name></expr>, <macro><name>TEXT</name><argument_list>(<argument><literal type="string">"Psychologist: Lie down please.\n8: No, thank you. If I do, this session will never reach the end."</literal></argument>)</argument_list></macro> }</block></expr>,
	<expr><block>{<expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"Anonymous #163"</literal></expr></argument>)</argument_list></call></expr>, <expr><name><name>QuoteParams</name><operator>::</operator><name>slow</name></name></expr>, <expr><literal type="boolean">false</literal></expr>, <expr><name>SC_CP_UTF8</name></expr>, <expr><name>L_TEXT</name></expr>, <macro><name>TEXT</name><argument_list>(<argument><literal type="string">"I love the way the earth rotates,\nit really makes my day."</literal></argument>)</argument_list></macro> }</block></expr>,
	<expr><block>{<expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"Anonymous #164"</literal></expr></argument>)</argument_list></call></expr>, <expr><name><name>QuoteParams</name><operator>::</operator><name>slow</name></name></expr>, <expr><literal type="boolean">false</literal></expr>, <expr><name>SC_CP_UTF8</name></expr>, <expr><name>L_TEXT</name></expr>, <macro><name>TEXT</name><argument_list>(<argument><literal type="string">"Homonyms are a waist of thyme."</literal></argument>)</argument_list></macro> }</block></expr>,
	<expr><block>{<expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"Anonymous #165"</literal></expr></argument>)</argument_list></call></expr>, <expr><name><name>QuoteParams</name><operator>::</operator><name>rapid</name></name></expr>, <expr><literal type="boolean">false</literal></expr>, <expr><name>SC_CP_UTF8</name></expr>, <expr><name>L_TEXT</name></expr>, <macro><name>TEXT</name><argument_list>(<argument><literal type="string">"What's the difference between a police officer and a bullet?\nWhen a bullet kills someone else, you know it's been fired."</literal></argument>)</argument_list></macro> }</block></expr>,
	<expr><block>{<expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"Anonymous #166"</literal></expr></argument>)</argument_list></call></expr>, <expr><name><name>QuoteParams</name><operator>::</operator><name>rapid</name></name></expr>, <expr><literal type="boolean">false</literal></expr>, <expr><name>SC_CP_UTF8</name></expr>, <expr><name>L_TEXT</name></expr>, <macro><name>TEXT</name><argument_list>(<argument><literal type="string">"What has 4 letters\nsometimes 9 letters\nbut never has 5 letters"</literal></argument>)</argument_list></macro> }</block></expr>,
	<expr><block>{<expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"Anonymous #167"</literal></expr></argument>)</argument_list></call></expr>, <expr><name><name>QuoteParams</name><operator>::</operator><name>slow</name></name></expr>, <expr><literal type="boolean">false</literal></expr>, <expr><name>SC_CP_UTF8</name></expr>, <expr><name>L_TEXT</name></expr>, <macro><name>TEXT</name><argument_list>(<argument><literal type="string">"The 'h' in \"software development\" stands for \"happiness\"."</literal></argument>)</argument_list></macro> }</block></expr>,
	<expr><block>{<expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"Anonymous #168"</literal></expr></argument>)</argument_list></call></expr>, <expr><name><name>QuoteParams</name><operator>::</operator><name>rapid</name></name></expr>, <expr><literal type="boolean">false</literal></expr>, <expr><name>SC_CP_UTF8</name></expr>, <expr><name>L_TEXT</name></expr>, <macro><name>TEXT</name><argument_list>(<argument><literal type="string">"Never let your computer know that you are in a hurry.\nComputers can smell fear.\nThey slow down if they know that you are running out of time."</literal></argument>)</argument_list></macro> }</block></expr>,
	<expr><block>{<expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"Anonymous #169"</literal></expr></argument>)</argument_list></call></expr>, <expr><name><name>QuoteParams</name><operator>::</operator><name>slow</name></name></expr>, <expr><literal type="boolean">false</literal></expr>, <expr><name>SC_CP_UTF8</name></expr>, <expr><name>L_TEXT</name></expr>, <macro><name>TEXT</name><argument_list>(<argument><literal type="string">"JavaScript is not a language.\nIt's a programming jokes generator."</literal></argument>)</argument_list></macro> }</block></expr>,
	<expr><block>{<expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"Anonymous #170"</literal></expr></argument>)</argument_list></call></expr>, <expr><name><name>QuoteParams</name><operator>::</operator><name>slow</name></name></expr>, <expr><literal type="boolean">false</literal></expr>, <expr><name>SC_CP_UTF8</name></expr>, <expr><name>L_TEXT</name></expr>, <macro><name>TEXT</name><argument_list>(<argument><literal type="string">"A journalist asked Linus Torvalds what makes code bad.\nHe replied : No comment."</literal></argument>)</argument_list></macro> }</block></expr>,
	<expr><block>{<expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"Anonymous #171"</literal></expr></argument>)</argument_list></call></expr>, <expr><name><name>QuoteParams</name><operator>::</operator><name>rapid</name></name></expr>, <expr><literal type="boolean">true</literal></expr>, <expr><name>SC_CP_UTF8</name></expr>, <expr><name>L_TEXT</name></expr>, <macro><name>TEXT</name><argument_list>(<argument><literal type="string">"If you spell \"Nothing\" backwards, it becomes \"Gnihton\" which also means nothing."</literal></argument>)</argument_list></macro> }</block></expr>,
	<expr><block>{<expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"Anonymous #172"</literal></expr></argument>)</argument_list></call></expr>, <expr><name><name>QuoteParams</name><operator>::</operator><name>rapid</name></name></expr>, <expr><literal type="boolean">true</literal></expr>, <expr><name>SC_CP_UTF8</name></expr>, <expr><name>L_TEXT</name></expr>, <macro><name>TEXT</name><argument_list>(<argument><literal type="string">"Programming in Javascript is like looking both ways before you cross the street, and then getting hit by an airplane."</literal></argument>)</argument_list></macro> }</block></expr>,
	<expr><block>{<expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"Anonymous #173"</literal></expr></argument>)</argument_list></call></expr>, <expr><name><name>QuoteParams</name><operator>::</operator><name>rapid</name></name></expr>, <expr><literal type="boolean">true</literal></expr>, <expr><name>SC_CP_UTF8</name></expr>, <expr><name>L_TEXT</name></expr>, <macro><name>TEXT</name><argument_list>(<argument><literal type="string">"Q: Why do we need a backend, why not just connect front end to database???\n\nA: Yeah! And why do we eat and go to the bathroom while we can throw the food directly in the toilet? Because stuff needs to get processed. ;)\n"</literal></argument>)</argument_list></macro> }</block></expr>,
	<expr><block>{<expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"Anonymous #174"</literal></expr></argument>)</argument_list></call></expr>, <expr><name><name>QuoteParams</name><operator>::</operator><name>rapid</name></name></expr>, <expr><literal type="boolean">true</literal></expr>, <expr><name>SC_CP_UTF8</name></expr>, <expr><name>L_TEXT</name></expr>, <macro><name>TEXT</name><argument_list>(<argument><literal type="string">"Someday, once humans are extinct from covid-19. I hope whatever species rules Earth makes chicken nuggets in the shape of us, like we did for dinosaurs."</literal></argument>)</argument_list></macro> }</block></expr>,
	<expr><block>{<expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"Anonymous #175"</literal></expr></argument>)</argument_list></call></expr>, <expr><name><name>QuoteParams</name><operator>::</operator><name>rapid</name></name></expr>, <expr><literal type="boolean">true</literal></expr>, <expr><name>SC_CP_UTF8</name></expr>, <expr><name>L_TEXT</name></expr>, <macro><name>TEXT</name><argument_list>(<argument><literal type="string">"Linkedin is basically a reversed Tinder.\nHot girls write to nerd guys and they didn't reply."</literal></argument>)</argument_list></macro> }</block></expr>,
	<expr><block>{<expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"Anonymous #176"</literal></expr></argument>)</argument_list></call></expr>, <expr><name><name>QuoteParams</name><operator>::</operator><name>rapid</name></name></expr>, <expr><literal type="boolean">true</literal></expr>, <expr><name>SC_CP_UTF8</name></expr>, <expr><name>L_TEXT</name></expr>, <macro><name>TEXT</name><argument_list>(<argument><literal type="string">"A vegan said to me, \"people who sell meat are gross!\"\nI said, \"people who sell fruits and vegetables are grocer.\"\n"</literal></argument>)</argument_list></macro> }</block></expr>,
	<expr><block>{<expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"Anonymous #177"</literal></expr></argument>)</argument_list></call></expr>, <expr><name><name>QuoteParams</name><operator>::</operator><name>rapid</name></name></expr>, <expr><literal type="boolean">false</literal></expr>, <expr><name>SC_CP_UTF8</name></expr>, <expr><name>L_TEXT</name></expr>, <macro><name>TEXT</name><argument_list>(<argument><literal type="string">"Documentation is a love letter that you write to your future self.\n"</literal></argument>)</argument_list></macro> }</block></expr>,
	<expr><block>{<expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"Anonymous #178"</literal></expr></argument>)</argument_list></call></expr>, <expr><name><name>QuoteParams</name><operator>::</operator><name>rapid</name></name></expr>, <expr><literal type="boolean">false</literal></expr>, <expr><name>SC_CP_UTF8</name></expr>, <expr><name>L_TEXT</name></expr>, <macro><name>TEXT</name><argument_list>(<argument><literal type="string">"When I die, I hope it's early in the morning so I don't have to go to work that day for no reason.\n"</literal></argument>)</argument_list></macro> }</block></expr>,
	<expr><block>{<expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"Anonymous #179"</literal></expr></argument>)</argument_list></call></expr>, <expr><name><name>QuoteParams</name><operator>::</operator><name>rapid</name></name></expr>, <expr><literal type="boolean">false</literal></expr>, <expr><name>SC_CP_UTF8</name></expr>, <expr><name>L_TEXT</name></expr>, <macro><name>TEXT</name><argument_list>(<argument><literal type="string">"Workers play football\nManagers play tennis\nCEOs play golf\n\nHigher the function, smaller the balls.\n"</literal></argument>)</argument_list></macro> }</block></expr>,
	<expr><block>{<expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"Anonymous #180"</literal></expr></argument>)</argument_list></call></expr>, <expr><name><name>QuoteParams</name><operator>::</operator><name>rapid</name></name></expr>, <expr><literal type="boolean">false</literal></expr>, <expr><name>SC_CP_UTF8</name></expr>, <expr><name>L_TEXT</name></expr>, <macro><name>TEXT</name><argument_list>(<argument><literal type="string">"Friends are just like trees.\nThey fall down when you hit them multiple times with an axe.\n"</literal></argument>)</argument_list></macro> }</block></expr>,
	<expr><block>{<expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"Anonymous #181"</literal></expr></argument>)</argument_list></call></expr>, <expr><name><name>QuoteParams</name><operator>::</operator><name>rapid</name></name></expr>, <expr><literal type="boolean">false</literal></expr>, <expr><name>SC_CP_UTF8</name></expr>, <expr><name>L_TEXT</name></expr>, <macro><name>TEXT</name><argument_list>(<argument><literal type="string">"I met a magical Genie. He gave me one wish.\nI said: \"I wish I could be you.\"\nThe Genue saud: \"Weurd wush but U wull grant ut.\"\n"</literal></argument>)</argument_list></macro> }</block></expr>,
	<expr><block>{<expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"Anonymous #182"</literal></expr></argument>)</argument_list></call></expr>, <expr><name><name>QuoteParams</name><operator>::</operator><name>slow</name></name></expr>, <expr><literal type="boolean">false</literal></expr>, <expr><name>SC_CP_UTF8</name></expr>, <expr><name>L_CPP</name></expr>, <macro><name>TEXT</name><argument_list>(<argument><literal type="string">"printf(\"%s%s\", \"\\\\o/\\n| |\\n| |8=\", \"=D\\n/ \\\\\\n\");\n"</literal></argument>)</argument_list></macro> }</block></expr>,
	<expr><block>{<expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"Anonymous #183"</literal></expr></argument>)</argument_list></call></expr>, <expr><name><name>QuoteParams</name><operator>::</operator><name>rapid</name></name></expr>, <expr><literal type="boolean">false</literal></expr>, <expr><name>SC_CP_UTF8</name></expr>, <expr><name>L_TEXT</name></expr>, <macro><name>TEXT</name><argument_list>(<argument><literal type="string">"Dear Optimist, Pessimist and Realist,\n\nWhile you guys were busy arguing about\nthe glass of water, I drank it!\n\n\n					Sincerely,\n					The Opportunist\n"</literal></argument>)</argument_list></macro> }</block></expr>,
	<expr><block>{<expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"Anonymous #184"</literal></expr></argument>)</argument_list></call></expr>, <expr><name><name>QuoteParams</name><operator>::</operator><name>slow</name></name></expr>, <expr><literal type="boolean">false</literal></expr>, <expr><name>SC_CP_UTF8</name></expr>, <expr><name>L_TEXT</name></expr>, <macro><name>TEXT</name><argument_list>(<argument><literal type="string">"Dance like nobody's watching.\nEncrypt like everyone is.\n"</literal></argument>)</argument_list></macro> }</block></expr>,
	<expr><block>{<expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"Anonymous #185"</literal></expr></argument>)</argument_list></call></expr>, <expr><name><name>QuoteParams</name><operator>::</operator><name>rapid</name></name></expr>, <expr><literal type="boolean">false</literal></expr>, <expr><name>SC_CP_UTF8</name></expr>, <expr><name>L_TEXT</name></expr>, <macro><name>TEXT</name><argument_list>(<argument><literal type="string">"Me: \"I'm 45 years old but I've got a 19 year-old young man's body\"\nHer: \"Show me\"\nI opened the freezer to show her the body.\nShe screamed.\nMe too.\n"</literal></argument>)</argument_list></macro> }</block></expr>,
	<expr><block>{<expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"Anonymous #186"</literal></expr></argument>)</argument_list></call></expr>, <expr><name><name>QuoteParams</name><operator>::</operator><name>slow</name></name></expr>, <expr><literal type="boolean">false</literal></expr>, <expr><name>SC_CP_UTF8</name></expr>, <expr><name>L_TEXT</name></expr>, <macro><name>TEXT</name><argument_list>(<argument><literal type="string">"Everyone complains about the weather,\nbut no one wants to sacrifice a virgin to change it.\n"</literal></argument>)</argument_list></macro> }</block></expr>,
	<expr><block>{<expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"Anonymous #187"</literal></expr></argument>)</argument_list></call></expr>, <expr><name><name>QuoteParams</name><operator>::</operator><name>rapid</name></name></expr>, <expr><literal type="boolean">false</literal></expr>, <expr><name>SC_CP_UTF8</name></expr>, <expr><name>L_TEXT</name></expr>, <macro><name>TEXT</name><argument_list>(<argument><literal type="string">"If you are alone at home and feel lonely:\nTurn off the lights, turn on the TV and watch a horror movie.\nThen you will have feeling that there are someone hidden in the kitchen, in the toilet\nand even under your bed.\n"</literal></argument>)</argument_list></macro> }</block></expr>,
	<expr><block>{<expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"Anonymous #188"</literal></expr></argument>)</argument_list></call></expr>, <expr><name><name>QuoteParams</name><operator>::</operator><name>slow</name></name></expr>, <expr><literal type="boolean">false</literal></expr>, <expr><name>SC_CP_UTF8</name></expr>, <expr><name>L_TEXT</name></expr>, <macro><name>TEXT</name><argument_list>(<argument><literal type="string">"*Knock knock*\n\"Race condition\"\n\"Who's there?\"\n"</literal></argument>)</argument_list></macro> }</block></expr>,
	<expr><block>{<expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"Anonymous #189"</literal></expr></argument>)</argument_list></call></expr>, <expr><name><name>QuoteParams</name><operator>::</operator><name>rapid</name></name></expr>, <expr><literal type="boolean">false</literal></expr>, <expr><name>SC_CP_UTF8</name></expr>, <expr><name>L_TEXT</name></expr>, <macro><name>TEXT</name><argument_list>(<argument><literal type="string">"The two most difficult programming challenges are naming things, cache invalidation, and off-by-one errors.\n"</literal></argument>)</argument_list></macro> }</block></expr>,
	<expr><block>{<expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"Anonymous #190"</literal></expr></argument>)</argument_list></call></expr>, <expr><name><name>QuoteParams</name><operator>::</operator><name>slow</name></name></expr>, <expr><literal type="boolean">false</literal></expr>, <expr><name>SC_CP_UTF8</name></expr>, <expr><name>L_TEXT</name></expr>, <macro><name>TEXT</name><argument_list>(<argument><literal type="string">"The greatest security vulnerability in any computer system is located between the keyboard and the chair.\n"</literal></argument>)</argument_list></macro> }</block></expr>,
	<expr><block>{<expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"Anonymous #191"</literal></expr></argument>)</argument_list></call></expr>, <expr><name><name>QuoteParams</name><operator>::</operator><name>slow</name></name></expr>, <expr><literal type="boolean">false</literal></expr>, <expr><name>SC_CP_UTF8</name></expr>, <expr><name>L_TEXT</name></expr>, <macro><name>TEXT</name><argument_list>(<argument><literal type="string">"My biggest talent is always being able to tell what's in a wrapped present.\n\nIt's a gift.\n"</literal></argument>)</argument_list></macro> }</block></expr>,
	<expr><block>{<expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"Anonymous #192"</literal></expr></argument>)</argument_list></call></expr>, <expr><name><name>QuoteParams</name><operator>::</operator><name>rapid</name></name></expr>, <expr><literal type="boolean">false</literal></expr>, <expr><name>SC_CP_UTF8</name></expr>, <expr><name>L_TEXT</name></expr>, <macro><name>TEXT</name><argument_list>(<argument><literal type="string">"You can't force someone to love you.\nBut you can lock this person in the basement and wait for him/her to develop Stockholm syndrome.\n"</literal></argument>)</argument_list></macro> }</block></expr>,
	<expr><block>{<expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"Anonymous #193"</literal></expr></argument>)</argument_list></call></expr>, <expr><name><name>QuoteParams</name><operator>::</operator><name>rapid</name></name></expr>, <expr><literal type="boolean">false</literal></expr>, <expr><name>SC_CP_UTF8</name></expr>, <expr><name>L_TEXT</name></expr>, <macro><name>TEXT</name><argument_list>(<argument><literal type="string">"Do you know:\nthere are more airplanes in the oceans, than submarines in the sky?\n"</literal></argument>)</argument_list></macro> }</block></expr>,
	<expr><block>{<expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"Anonymous #194"</literal></expr></argument>)</argument_list></call></expr>, <expr><name><name>QuoteParams</name><operator>::</operator><name>rapid</name></name></expr>, <expr><literal type="boolean">false</literal></expr>, <expr><name>SC_CP_UTF8</name></expr>, <expr><name>L_TEXT</name></expr>, <macro><name>TEXT</name><argument_list>(<argument><literal type="string">"If you hold a Unix shell up to your ear,\nyou might just be able to hear the C.\n"</literal></argument>)</argument_list></macro> }</block></expr>,
	<expr><block>{<expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"Anonymous #195"</literal></expr></argument>)</argument_list></call></expr>, <expr><name><name>QuoteParams</name><operator>::</operator><name>rapid</name></name></expr>, <expr><literal type="boolean">false</literal></expr>, <expr><name>SC_CP_UTF8</name></expr>, <expr><name>L_TEXT</name></expr>, <macro><name>TEXT</name><argument_list>(<argument><literal type="string">"Why do programmers always mix up Halloween and Christmas?\nBecause Oct 31 == Dec 25\n"</literal></argument>)</argument_list></macro> }</block></expr>,
	<expr><block>{<expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"Anonymous #196"</literal></expr></argument>)</argument_list></call></expr>, <expr><name><name>QuoteParams</name><operator>::</operator><name>rapid</name></name></expr>, <expr><literal type="boolean">false</literal></expr>, <expr><name>SC_CP_UTF8</name></expr>, <expr><name>L_TEXT</name></expr>, <macro><name>TEXT</name><argument_list>(<argument><literal type="string">"What happened to the function that ran away?\nIt never returned.\n"</literal></argument>)</argument_list></macro> }</block></expr>,
	<expr><block>{<expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"Anonymous #197"</literal></expr></argument>)</argument_list></call></expr>, <expr><name><name>QuoteParams</name><operator>::</operator><name>rapid</name></name></expr>, <expr><literal type="boolean">false</literal></expr>, <expr><name>SC_CP_UTF8</name></expr>, <expr><name>L_TEXT</name></expr>, <macro><name>TEXT</name><argument_list>(<argument><literal type="string">"When I am tasked with sorting through a stack of résumés, I throw about half of them in the garbage.\nI do not want unlucky people working in our company.\n"</literal></argument>)</argument_list></macro> }</block></expr>,
	<expr><block>{<expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"Anonymous #198"</literal></expr></argument>)</argument_list></call></expr>, <expr><name><name>QuoteParams</name><operator>::</operator><name>rapid</name></name></expr>, <expr><literal type="boolean">false</literal></expr>, <expr><name>SC_CP_UTF8</name></expr>, <expr><name>L_TEXT</name></expr>, <macro><name>TEXT</name><argument_list>(<argument><literal type="string">"The reason why we write SQL commands all in CAPITAL letters is because it stands for Screaming Query Language.\n"</literal></argument>)</argument_list></macro> }</block></expr>,
	<expr><block>{<expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"Anonymous #199"</literal></expr></argument>)</argument_list></call></expr>, <expr><name><name>QuoteParams</name><operator>::</operator><name>rapid</name></name></expr>, <expr><literal type="boolean">false</literal></expr>, <expr><name>SC_CP_UTF8</name></expr>, <expr><name>L_TEXT</name></expr>, <macro><name>TEXT</name><argument_list>(<argument><literal type="string">"Fly: Hey, bug on my back, are you a mite?\nMite: I mite be.\nFly: Stupidest pun I ever heard.\nMite: What do you expect? I just made it up on the fly.\n\n"</literal></argument>)</argument_list></macro> }</block></expr>,
	<expr><block>{<expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"Anonymous #200"</literal></expr></argument>)</argument_list></call></expr>, <expr><name><name>QuoteParams</name><operator>::</operator><name>rapid</name></name></expr>, <expr><literal type="boolean">false</literal></expr>, <expr><name>SC_CP_UTF8</name></expr>, <expr><name>L_TEXT</name></expr>, <macro><name>TEXT</name><argument_list>(<argument><literal type="string">"Me: What's the wifi password?\nBartender: You need to buy a drink first.\nMe: OK, I'll have a coke.\nBartender: Is Pepsi OK?\nMe: Sure. How much is that?\nBartender: $3.\nMe: There you go. So what's the wifi password?\nBartender: You need to buy a drink first. No spaces, all lowercase.\n\n"</literal></argument>)</argument_list></macro> }</block></expr>,
	<expr><block>{<expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"Anonymous #201"</literal></expr></argument>)</argument_list></call></expr>, <expr><name><name>QuoteParams</name><operator>::</operator><name>rapid</name></name></expr>, <expr><literal type="boolean">false</literal></expr>, <expr><name>SC_CP_UTF8</name></expr>, <expr><name>L_TEXT</name></expr>, <macro><name>TEXT</name><argument_list>(<argument><literal type="string">"People always say software engineers are useless without computers.\nIt's not true.\nSome of them are useless even with computers.\n\n"</literal></argument>)</argument_list></macro> }</block></expr>,
	<expr><block>{<expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"Anonymous #202"</literal></expr></argument>)</argument_list></call></expr>, <expr><name><name>QuoteParams</name><operator>::</operator><name>slow</name></name></expr> , <expr><literal type="boolean">false</literal></expr>, <expr><name>SC_CP_UTF8</name></expr>, <expr><name>L_TEXT</name></expr>, <macro><name>TEXT</name><argument_list>(<argument><literal type="string">"The plural of regex is regrets.\n\n"</literal></argument>)</argument_list></macro> }</block></expr>,
	<expr><block>{<expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"Anonymous #203"</literal></expr></argument>)</argument_list></call></expr>, <expr><name><name>QuoteParams</name><operator>::</operator><name>rapid</name></name></expr> , <expr><literal type="boolean">false</literal></expr>, <expr><name>SC_CP_UTF8</name></expr>, <expr><name>L_TEXT</name></expr>, <macro><name>TEXT</name><argument_list>(<argument><literal type="string">"My gynecologist follows me on Instagram, I really do not know what else he want to see.\n\n"</literal></argument>)</argument_list></macro> }</block></expr>,
	<expr><block>{<expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"Anonymous #204"</literal></expr></argument>)</argument_list></call></expr>, <expr><name><name>QuoteParams</name><operator>::</operator><name>slow</name></name></expr> , <expr><literal type="boolean">false</literal></expr>, <expr><name>SC_CP_UTF8</name></expr>, <expr><name>L_TEXT</name></expr>, <macro><name>TEXT</name><argument_list>(<argument><literal type="string">"The greatest security vulnerability in any computer system is located between the keyboard and the chair.\n\n"</literal></argument>)</argument_list></macro> }</block></expr>,
	<expr><block>{<expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"Anonymous #205"</literal></expr></argument>)</argument_list></call></expr>, <expr><name><name>QuoteParams</name><operator>::</operator><name>slow</name></name></expr> , <expr><literal type="boolean">false</literal></expr>, <expr><name>SC_CP_UTF8</name></expr>, <expr><name>L_TEXT</name></expr>, <macro><name>TEXT</name><argument_list>(<argument><literal type="string">"Courage is knowing it might hurt, and doing it anyway.\nStupidity is the same.\nAnd that's why life is hard.\n\n"</literal></argument>)</argument_list></macro> }</block></expr>,
	<expr><block>{<expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"xkcd"</literal></expr></argument>)</argument_list></call></expr>, <expr><name><name>QuoteParams</name><operator>::</operator><name>rapid</name></name></expr>, <expr><literal type="boolean">false</literal></expr>, <expr><name>SC_CP_UTF8</name></expr>, <expr><name>L_TEXT</name></expr>, <macro><name>TEXT</name><argument_list>(<argument><literal type="string">"Never have I felt so close to another soul\nAnd yet so helplessly alone\nAs when I Google an error\nAnd there's one result\nA thread by someone with the same problem\nAnd no answer\nLast posted to in 2003\n\n\"Who were you, DenverCoder9?\"\n\"What did you see?!\"\n\n(ref: https://xkcd.com/979/)"</literal></argument>)</argument_list></macro> }</block></expr>,
	<expr><block>{<expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"A developer"</literal></expr></argument>)</argument_list></call></expr>, <expr><name><name>QuoteParams</name><operator>::</operator><name>slow</name></name></expr>, <expr><literal type="boolean">false</literal></expr>, <expr><name>SC_CP_UTF8</name></expr>, <expr><name>L_TEXT</name></expr>, <macro><name>TEXT</name><argument_list>(<argument><literal type="string">"No hugs &amp; kisses.\nOnly bugs &amp; fixes."</literal></argument>)</argument_list></macro> }</block></expr>,
	<expr><block>{<expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"Elon Musk"</literal></expr></argument>)</argument_list></call></expr>, <expr><name><name>QuoteParams</name><operator>::</operator><name>rapid</name></name></expr>, <expr><literal type="boolean">false</literal></expr>, <expr><name>SC_CP_UTF8</name></expr>, <expr><name>L_TEXT</name></expr>, <macro><name>TEXT</name><argument_list>(<argument><literal type="string">"Don't set your password as your child's name.\nName your child after your password."</literal></argument>)</argument_list></macro> }</block></expr>,
	<expr><block>{<expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"OOP"</literal></expr></argument>)</argument_list></call></expr>, <expr><name><name>QuoteParams</name><operator>::</operator><name>slow</name></name></expr>, <expr><literal type="boolean">false</literal></expr>, <expr><name>SC_CP_UTF8</name></expr>, <expr><name>L_TEXT</name></expr>, <macro><name>TEXT</name><argument_list>(<argument><literal type="string">"If you want to treat women as objects,\ndo it with class."</literal></argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"Internet #404"</literal></expr></argument>)</argument_list></call></expr>, <expr><name><name>QuoteParams</name><operator>::</operator><name>rapid</name></name></expr>, <expr><literal type="boolean">true</literal></expr>, <expr><name>SC_CP_UTF8</name></expr>, <expr><name>L_TEXT</name></expr>, <macro><name>TEXT</name><argument_list>(<argument><literal type="string">"Quote not Found"</literal></argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"Mary Oliver"</literal></expr></argument>)</argument_list></call></expr>, <expr><name><name>QuoteParams</name><operator>::</operator><name>rapid</name></name></expr>, <expr><literal type="boolean">false</literal></expr>, <expr><name>SC_CP_UTF8</name></expr>, <expr><name>L_TEXT</name></expr>, <macro><name>TEXT</name><argument_list>(<argument><literal type="string">"Someone I loved once gave me a box full of darkness.\nIt took me years to understand that this, too, was a gift."</literal></argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"Floor"</literal></expr></argument>)</argument_list></call></expr>, <expr><name><name>QuoteParams</name><operator>::</operator><name>slow</name></name></expr>, <expr><literal type="boolean">true</literal></expr>, <expr><name>SC_CP_UTF8</name></expr>, <expr><name>L_TEXT</name></expr>, <macro><name>TEXT</name><argument_list>(<argument><literal type="string">"If you fall, I will be there."</literal></argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"Simon Amstell"</literal></expr></argument>)</argument_list></call></expr>, <expr><name><name>QuoteParams</name><operator>::</operator><name>rapid</name></name></expr>, <expr><literal type="boolean">true</literal></expr>, <expr><name>SC_CP_UTF8</name></expr>, <expr><name>L_TEXT</name></expr>, <macro><name>TEXT</name><argument_list>(<argument><literal type="string">"If you have some problem in your life and need to deal with it, then use religion, that's fine.\nI use Google."</literal></argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"Albert Einstein"</literal></expr></argument>)</argument_list></call></expr>, <expr><name><name>QuoteParams</name><operator>::</operator><name>rapid</name></name></expr>, <expr><literal type="boolean">true</literal></expr>, <expr><name>SC_CP_UTF8</name></expr>, <expr><name>L_TEXT</name></expr>, <macro><name>TEXT</name><argument_list>(<argument><literal type="string">"Only 3 things are infinite:\n1. Universe.\n2. Human Stupidity.\n3. Winrar's free trial."</literal></argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"Terry Pratchett"</literal></expr></argument>)</argument_list></call></expr>, <expr><name><name>QuoteParams</name><operator>::</operator><name>rapid</name></name></expr>, <expr><literal type="boolean">true</literal></expr>, <expr><name>SC_CP_UTF8</name></expr>, <expr><name>L_TEXT</name></expr>, <macro><name>TEXT</name><argument_list>(<argument><literal type="string">"Artificial Intelligence is no match for natural stupidity."</literal></argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"Stewart Brand"</literal></expr></argument>)</argument_list></call></expr>, <expr><name><name>QuoteParams</name><operator>::</operator><name>rapid</name></name></expr>, <expr><literal type="boolean">true</literal></expr>, <expr><name>SC_CP_UTF8</name></expr>, <expr><name>L_TEXT</name></expr>, <macro><name>TEXT</name><argument_list>(<argument><literal type="string">"Once a new technology starts rolling, if you're not part of the steamroller,\nyou're part of the road."</literal></argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"Sam Redwine"</literal></expr></argument>)</argument_list></call></expr>, <expr><name><name>QuoteParams</name><operator>::</operator><name>rapid</name></name></expr>, <expr><literal type="boolean">true</literal></expr>, <expr><name>SC_CP_UTF8</name></expr>, <expr><name>L_TEXT</name></expr>, <macro><name>TEXT</name><argument_list>(<argument><literal type="string">"Software and cathedrals are much the same - first we build them, then we pray."</literal></argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"Jan L. A. van de Snepscheut"</literal></expr></argument>)</argument_list></call></expr>,  <expr><name><name>QuoteParams</name><operator>::</operator><name>rapid</name></name></expr>, <expr><literal type="boolean">true</literal></expr>, <expr><name>SC_CP_UTF8</name></expr>, <expr><name>L_TEXT</name></expr>, <macro><name>TEXT</name><argument_list>(<argument><literal type="string">"In theory, there is no difference between theory and practice. But, in practice, there is."</literal></argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"Jessica Gaston"</literal></expr></argument>)</argument_list></call></expr>, <expr><name><name>QuoteParams</name><operator>::</operator><name>rapid</name></name></expr>, <expr><literal type="boolean">true</literal></expr>, <expr><name>SC_CP_UTF8</name></expr>, <expr><name>L_TEXT</name></expr>, <macro><name>TEXT</name><argument_list>(<argument><literal type="string">"One man's crappy software is another man's full time job."</literal></argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"Raymond Devos"</literal></expr></argument>)</argument_list></call></expr>, <expr><name><name>QuoteParams</name><operator>::</operator><name>rapid</name></name></expr>, <expr><literal type="boolean">false</literal></expr>, <expr><name>SC_CP_UTF8</name></expr>, <expr><name>L_TEXT</name></expr>, <macro><name>TEXT</name><argument_list>(<argument><literal type="string">"Mon pied droit est jaloux de mon pied gauche. Quand l'un avance, l'autre veut le dépasser.\nEt moi, comme un imbécile, je marche !"</literal></argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"xkcd.com"</literal></expr></argument>)</argument_list></call></expr>, <expr><name><name>QuoteParams</name><operator>::</operator><name>rapid</name></name></expr>, <expr><literal type="boolean">false</literal></expr>, <expr><name>SC_CP_UTF8</name></expr>, <expr><name>L_C</name></expr>, <macro><name>TEXT</name><argument_list>(<argument><literal type="string">"int getRandomNumber()\n{\n    return 4; //chosen by fair dice roll, guaranteed to be random.\n}\n"</literal></argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"Gandhi"</literal></expr></argument>)</argument_list></call></expr>, <expr><name><name>QuoteParams</name><operator>::</operator><name>rapid</name></name></expr>, <expr><literal type="boolean">false</literal></expr>, <expr><name>SC_CP_UTF8</name></expr>, <expr><name>L_TEXT</name></expr>, <macro><name>TEXT</name><argument_list>(<argument><literal type="string">"Earth provides enough to satisfy every man's need, but not every man's greed."</literal></argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"R. D. Laing"</literal></expr></argument>)</argument_list></call></expr>, <expr><name><name>QuoteParams</name><operator>::</operator><name>rapid</name></name></expr>, <expr><literal type="boolean">true</literal></expr>, <expr><name>SC_CP_UTF8</name></expr>, <expr><name>L_TEXT</name></expr>, <macro><name>TEXT</name><argument_list>(<argument><literal type="string">"Life is a sexually transmitted disease and the mortality rate is one hundred percent."</literal></argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"Hustle Man"</literal></expr></argument>)</argument_list></call></expr>, <expr><name><name>QuoteParams</name><operator>::</operator><name>rapid</name></name></expr>, <expr><literal type="boolean">true</literal></expr>, <expr><name>SC_CP_UTF8</name></expr>, <expr><name>L_TEXT</name></expr>, <macro><name>TEXT</name><argument_list>(<argument><literal type="string">"Politicians are like sperm.\nOne in a million turn out to be an actual human being."</literal></argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"Mark Twain"</literal></expr></argument>)</argument_list></call></expr>, <expr><name><name>QuoteParams</name><operator>::</operator><name>rapid</name></name></expr>, <expr><literal type="boolean">true</literal></expr>, <expr><name>SC_CP_UTF8</name></expr>, <expr><name>L_TEXT</name></expr>, <macro><name>TEXT</name><argument_list>(<argument><literal type="string">"Censorship is telling a man he can't have a steak just because a baby can't chew it."</literal></argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"Friedrich Nietzsche"</literal></expr></argument>)</argument_list></call></expr>, <expr><name><name>QuoteParams</name><operator>::</operator><name>rapid</name></name></expr>, <expr><literal type="boolean">false</literal></expr>, <expr><name>SC_CP_UTF8</name></expr>, <expr><name>L_TEXT</name></expr>, <macro><name>TEXT</name><argument_list>(<argument><literal type="string">"There is not enough love and goodness in the world to permit giving any of it away to imaginary beings."</literal></argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"Dhalsim"</literal></expr></argument>)</argument_list></call></expr>, <expr><name><name>QuoteParams</name><operator>::</operator><name>rapid</name></name></expr>, <expr><literal type="boolean">false</literal></expr>, <expr><name>SC_CP_UTF8</name></expr>, <expr><name>L_TEXT</name></expr>, <macro><name>TEXT</name><argument_list>(<argument><literal type="string">"Pain is a state of mind and I don't mind your pain."</literal></argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"Elie Wiesel"</literal></expr></argument>)</argument_list></call></expr>, <expr><name><name>QuoteParams</name><operator>::</operator><name>rapid</name></name></expr>, <expr><literal type="boolean">false</literal></expr>, <expr><name>SC_CP_UTF8</name></expr>, <expr><name>L_TEXT</name></expr>, <macro><name>TEXT</name><argument_list>(<argument><literal type="string">"Human beings can be beautiful or more beautiful,\nthey can be fat or skinny, they can be right or wrong,\nbut illegal? How can a human being be illegal?"</literal></argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"Dennis Ritchie"</literal></expr></argument>)</argument_list></call></expr>, <expr><name><name>QuoteParams</name><operator>::</operator><name>rapid</name></name></expr>, <expr><literal type="boolean">true</literal></expr>, <expr><name>SC_CP_UTF8</name></expr>, <expr><name>L_TEXT</name></expr>, <macro><name>TEXT</name><argument_list>(<argument><literal type="string">"Empty your memory, with a free(), like a pointer.\nIf you cast a pointer to a integer, it becomes the integer.\nIf you cast a pointer to a struct, it becomes the struct.\nThe pointer can crash, and can overflow.\nBe a pointer my friend."</literal></argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"Chewbacca"</literal></expr></argument>)</argument_list></call></expr>, <expr><name><name>QuoteParams</name><operator>::</operator><name>slow</name></name></expr>, <expr><literal type="boolean">false</literal></expr>, <expr><name>SC_CP_UTF8</name></expr>, <expr><name>L_TEXT</name></expr>, <macro><name>TEXT</name><argument_list>(<argument><literal type="string">"Uuuuuuuuuur Ahhhhrrrrrr\nUhrrrr Ahhhhrrrrrr\nAaaarhg..."</literal></argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"Alexandria Ocasio-Cortez"</literal></expr></argument>)</argument_list></call></expr>, <expr><name><name>QuoteParams</name><operator>::</operator><name>slow</name></name></expr>, <expr><literal type="boolean">false</literal></expr>, <expr><name>SC_CP_UTF8</name></expr>, <expr><name>L_TEXT</name></expr>, <macro><name>TEXT</name><argument_list>(<argument><literal type="string">"No one ever makes a billion dollars.\nYou TAKE a billion dollars."</literal></argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"Freddy Krueger"</literal></expr></argument>)</argument_list></call></expr>, <expr><name><name>QuoteParams</name><operator>::</operator><name>slow</name></name></expr>, <expr><literal type="boolean">false</literal></expr>, <expr><name>SC_CP_UTF8</name></expr>, <expr><name>L_TEXT</name></expr>, <macro><name>TEXT</name><argument_list>(<argument><literal type="string">"Never stop dreaming.\n"</literal></argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"Word of the Day"</literal></expr></argument>)</argument_list></call></expr>, <expr><name><name>QuoteParams</name><operator>::</operator><name>rapid</name></name></expr>, <expr><literal type="boolean">false</literal></expr>, <expr><name>SC_CP_UTF8</name></expr>, <expr><name>L_TEXT</name></expr>, <macro><name>TEXT</name><argument_list>(<argument><literal type="string">"DEBUGGING\n\n/diːˈbʌɡɪŋ/ noun\n\nThe classic mystery game where you are the detective, the victim and the murderer.\n\n"</literal></argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"Ricky Gervais"</literal></expr></argument>)</argument_list></call></expr>, <expr><name><name>QuoteParams</name><operator>::</operator><name>rapid</name></name></expr>, <expr><literal type="boolean">false</literal></expr>, <expr><name>SC_CP_UTF8</name></expr>, <expr><name>L_TEXT</name></expr>, <macro><name>TEXT</name><argument_list>(<argument><literal type="string">"Feel free to mock my lack of belief in any Gods.\nIt won't hurt my feelings.\nIt won't damage my faith in reason.\nAnd I won't kill you for it."</literal></argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"Francis bacon"</literal></expr></argument>)</argument_list></call></expr>, <expr><name><name>QuoteParams</name><operator>::</operator><name>rapid</name></name></expr>, <expr><literal type="boolean">false</literal></expr>, <expr><name>SC_CP_UTF8</name></expr>, <expr><name>L_TEXT</name></expr>, <macro><name>TEXT</name><argument_list>(<argument><literal type="string">"Knowledge is power. France is bacon.\n\nWhen I was young my father said to me: \"Knowledge is power, Francis Bacon.\" I understood it as \"Knowledge is power, France is bacon.\"\n\nFor more than a decade I wondered over the meaning of the second part and what was the surreal linkage between the two. If I said the quote to someone, \"Knowledge is power, France is Bacon\", they nodded knowingly. Or someone might say, \"Knowledge is power\" and I'd finish the quote \"France is Bacon\" and they wouldn't look at me like I'd said something very odd, but thoughtfully agree. I did ask a teacher what did \"Knowledge is power, France is bacon\" mean and got a full 10-minute explanation of the \"knowledge is power\" bit but nothing on \"France is bacon\". When I prompted further explanation by saying \"France is bacon?\" in a questioning tone I just got a \"yes\". At 12 I didn't have the confidence to press it further. I just accepted it as something I'd never understand.\n\nIt wasn't until years later I saw it written down that the penny dropped.\n"</literal></argument>)</argument_list></macro>}</block></expr>,
	<expr><block>{<expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"Space Invaders"</literal></expr></argument>)</argument_list></call></expr>, <expr><name><name>QuoteParams</name><operator>::</operator><name>speedOfLight</name></name></expr>, <expr><literal type="boolean">false</literal></expr>, <expr><name>SC_CP_UTF8</name></expr>, <expr><name>L_TEXT</name></expr>, <macro><name>TEXT</name><argument_list>(<argument><literal type="string">"\n\n       ▄██▄\n     ▄██████▄           █   █  █▀▀▀\n     ██▄██▄██           █   █  █▄▄\n      ▄▀▄▄▀▄            █ █ █  █\n     ▀ ▀  ▀ ▀           ▀▀ ▀▀  ▀▀▀▀\n\n      ▀▄   ▄▀           ▄█▀▀▀  ▄█▀▀█▄  █▀▄▀█  █▀▀▀\n     ▄█▀███▀█▄          █      █    █  █ ▀ █  █▄▄\n    █ █▀▀▀▀▀█ █         █▄     █▄  ▄█  █   █  █\n       ▀▀ ▀▀             ▀▀▀▀   ▀▀▀▀   ▀   ▀  ▀▀▀▀\n\n     ▄▄█████▄▄          ▀█▀  █▀▄  █\n    ██▀▀███▀▀██          █   █ ▀▄ █\n    ▀▀██▀▀▀██▀▀          █   █  ▀▄█\n    ▄█▀ ▀▀▀ ▀█▄         ▀▀▀  ▀   ▀▀\n\n      ▄▄████▄▄          █▀▀█  █▀▀▀  ▄▀▀▄  ▄█▀▀▀  █▀▀▀\n    ▄██████████▄        █▄▄█  █▄▄   █▄▄█  █      █▄▄ \n  ▄██▄██▄██▄██▄██▄      █     █     █  █  █▄     █   \n    ▀█▀  ▀▀  ▀█▀        ▀     ▀▀▀▀  ▀  ▀   ▀▀▀▀  ▀▀▀▀\n\n"</literal></argument>)</argument_list></macro> }</block></expr>,
	<expr><block>{<expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"#JeSuisCharlie"</literal></expr></argument>)</argument_list></call></expr>, <expr><name><name>QuoteParams</name><operator>::</operator><name>rapid</name></name></expr>, <expr><literal type="boolean">false</literal></expr>, <expr><name>SC_CP_UTF8</name></expr>, <expr><name>L_TEXT</name></expr>, <macro><name>TEXT</name><argument_list>(<argument><literal type="string">"Freedom of expression is like the air we breathe, we don't feel it, until people take it away from us.\n\nFor this reason, Je suis Charlie, not because I endorse everything they published, but because I cherish the right to speak out freely without risk even when it offends others.\nAnd no, you cannot just take someone's life for whatever he/she expressed.\n\nHence this \"Je suis Charlie\" edition.\n"</literal></argument>)</argument_list></macro>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>



<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>nbWtf</name> <init>= <expr><literal type="number">5</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>wchar_t</name><modifier>*</modifier></type> <name><name>wtf</name><index>[<expr><name>nbWtf</name></expr>]</index></name> <init>=
<expr><block>{
	<expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"WTF?!"</literal></expr></argument>)</argument_list></call></expr>,
	<expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"lol"</literal></expr></argument>)</argument_list></call></expr>,
	<expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"ROFL"</literal></expr></argument>)</argument_list></call></expr>,
	<expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"OMFG"</literal></expr></argument>)</argument_list></call></expr>,
	<macro><name>TEXT</name><argument_list>(<argument><literal type="string">"Husband is not an ATM machine!!!"</literal></argument>)</argument_list></macro>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>nbIntervalTime</name> <init>= <expr><literal type="number">5</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>intervalTimeArray</name><index>[<expr><name>nbIntervalTime</name></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">30</literal></expr>,<expr><literal type="number">30</literal></expr>,<expr><literal type="number">30</literal></expr>,<expr><literal type="number">30</literal></expr>,<expr><literal type="number">200</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>nbPauseTime</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>pauseTimeArray</name><index>[<expr><name>nbPauseTime</name></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">200</literal></expr>,<expr><literal type="number">400</literal></expr>,<expr><literal type="number">600</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>act_doNothing</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>act_trolling</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>nbAct</name> <init>= <expr><literal type="number">30</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>actionArray</name><index>[<expr><name>nbAct</name></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>maxRange</name> <init>= <expr><literal type="number">200</literal></expr></init></decl>;</decl_stmt>


<function><type><name>int</name></type> <name><name>Notepad_plus</name><operator>::</operator><name>getRandomAction</name></name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>ranNum</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><name><name>actionArray</name><index>[<expr><name>ranNum</name> <operator>%</operator> <name>nbAct</name></expr>]</index></name></expr>;</return>
</block_content>}</block></function>


<function><type><name>bool</name></type> <name>isInList</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>elem</name></decl></parameter>, <parameter><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>elemList</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>len</name> <init>= <expr><call><name><name>elemList</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>elem</name> <operator>==</operator> <name><name>elemList</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><literal type="boolean">true</literal></expr>;</return></block_content></block></if></if_stmt>
	</block_content>}</block></for>
	<return>return <expr><literal type="boolean">false</literal></expr>;</return>
</block_content>}</block></function>


<function><type><name>DWORD</name> <name>WINAPI</name></type> <name><name>Notepad_plus</name><operator>::</operator><name>threadTextPlayer</name></name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>params</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="line">// random seed generation needs only one time.</comment>
	<expr_stmt><expr><call><name>srand</name><argument_list>(<argument><expr><cast type="static">static_cast<argument_list type="generic">&lt;<argument><expr><name>UINT</name></expr></argument>&gt;</argument_list><argument_list>(<argument><expr><call><name>time</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></cast></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>TextPlayerParams</name><modifier>*</modifier></type> <name>textPlayerParams</name> <init>= <expr><cast type="static">static_cast<argument_list type="generic">&lt;<argument><expr><name>TextPlayerParams</name><operator>*</operator></expr></argument>&gt;</argument_list><argument_list>(<argument><expr><name>params</name></expr></argument>)</argument_list></cast></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>HWND</name></type> <name>hNpp</name> <init>= <expr><name><name>textPlayerParams</name><operator>-&gt;</operator><name>_nppHandle</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ScintillaEditView</name> <modifier>*</modifier></type><name>pCurrentView</name> <init>= <expr><name><name>textPlayerParams</name><operator>-&gt;</operator><name>_pCurrentView</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>QuoteParams</name><modifier>*</modifier></type> <name>qParams</name> <init>= <expr><name><name>textPlayerParams</name><operator>-&gt;</operator><name>_quotParams</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>wchar_t</name><modifier>*</modifier></type> <name>text2display</name> <init>= <expr><name><name>qParams</name><operator>-&gt;</operator><name>_quote</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name>shouldBeTrolling</name> <init>= <expr><name><name>qParams</name><operator>-&gt;</operator><name>_shouldBeTrolling</name></name></expr></init></decl>;</decl_stmt>

	<comment type="line">// Open a new document</comment>
    <expr_stmt><expr><call><name><operator>::</operator><name>SendMessage</name></name><argument_list>(<argument><expr><name>hNpp</name></expr></argument>, <argument><expr><name>NPPM_MENUCOMMAND</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>IDM_FILE_NEW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>qParams</name><operator>-&gt;</operator><name>_encoding</name></name> <operator>==</operator> <name>SC_CP_UTF8</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name><operator>::</operator><name>SendMessage</name></name><argument_list>(<argument><expr><name>hNpp</name></expr></argument>, <argument><expr><name>NPPM_MENUCOMMAND</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>IDM_FORMAT_AS_UTF_8</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><name><name>qParams</name><operator>-&gt;</operator><name>_encoding</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name><name>pCurrentView</name><operator>-&gt;</operator><name>execute</name></name><argument_list>(<argument><expr><name>SCI_SETCODEPAGE</name></expr></argument>, <argument><expr><name><name>qParams</name><operator>-&gt;</operator><name>_encoding</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<decl_stmt><decl><type><name>int</name></type> <name>langMenuId</name> <init>= <expr><operator>(</operator><call><name><name>NppParameters</name><operator>::</operator><name>getInstance</name></name><argument_list>()</argument_list></call><operator>)</operator><operator>.</operator><call><name>langTypeToCommandID</name><argument_list>(<argument><expr><name><name>qParams</name><operator>-&gt;</operator><name>_lang</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name><operator>::</operator><name>SendMessage</name></name><argument_list>(<argument><expr><name>hNpp</name></expr></argument>, <argument><expr><name>NPPM_MENUCOMMAND</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>langMenuId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>int</name></type> <name>x</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>, <decl><type ref="prev"/><name>y</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>qParams</name><operator>-&gt;</operator><name>_speed</name></name> <operator>==</operator> <name><name>QuoteParams</name><operator>::</operator><name>slow</name></name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>x</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>y</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	</block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><name><name>qParams</name><operator>-&gt;</operator><name>_speed</name></name> <operator>==</operator> <name><name>QuoteParams</name><operator>::</operator><name>rapid</name></name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>x</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>y</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	</block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><name><name>qParams</name><operator>-&gt;</operator><name>_speed</name></name> <operator>==</operator> <name><name>QuoteParams</name><operator>::</operator><name>speedOfLight</name></name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>x</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<decl_stmt><decl><type><specifier>static</specifier> <name>TextTrollerParams</name></type> <name>trollerParams</name></decl>;</decl_stmt>
	<expr_stmt><expr><name><name>trollerParams</name><operator>.</operator><name>_pCurrentView</name></name> <operator>=</operator> <name>pCurrentView</name></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>BufferID</name></type> <name>targetBufID</name> <init>= <expr><call><name><name>pCurrentView</name><operator>-&gt;</operator><name>getCurrentBufferID</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name><name>trollerParams</name><operator>.</operator><name>_targetBufID</name></name> <operator>=</operator> <name>targetBufID</name></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>HANDLE</name></type> <name>mutex</name> <init>= <expr><call><name><operator>::</operator><name>CreateMutex</name></name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"nppTextWriter"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name><name>trollerParams</name><operator>.</operator><name>_mutex</name></name> <operator>=</operator> <name>mutex</name></expr>;</expr_stmt>

    <comment type="line">// Get the current scintilla</comment>
    <decl_stmt><decl><type><name>HWND</name></type> <name>curScintilla</name> <init>= <expr><call><name><name>pCurrentView</name><operator>-&gt;</operator><name>getHSelf</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>nbMaxTrolling</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>nbTrolling</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>generatedRans</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>wchar_t</name></type> <name>previousChar</name> <init>= <expr><literal type="char">'\0'</literal></expr></init></decl>;</decl_stmt>

	<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>len</name> <init>= <expr><call><name>lstrlen</name><argument_list>(<argument><expr><name>text2display</name></expr></argument>)</argument_list></call></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr> ;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
    <block>{<block_content>
		<decl_stmt><decl><type><name>int</name></type> <name>ranNum</name> <init>= <expr><call><name>getRandomNumber</name><argument_list>(<argument><expr><name>maxRange</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>action</name> <init>= <expr><name>act_doNothing</name></expr></init></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><name>shouldBeTrolling</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>i</name> <operator>&gt;</operator> <literal type="number">20</literal> <operator>&amp;&amp;</operator> <name>previousChar</name> <operator>==</operator> <literal type="char">' '</literal><operator>)</operator> <operator>&amp;&amp;</operator> <name>nbTrolling</name> <operator>&lt;</operator> <name>nbMaxTrolling</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name>action</name> <operator>=</operator> <call><name>getRandomAction</name><argument_list>(<argument><expr><name>ranNum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<comment type="line">//char toto[64];</comment>
			<comment type="line">//sprintf(toto, "i == %d    action : %d    current char == %c", i, action, text2display[i]);</comment>
			<comment type="line">//writeLog(TEXT("c:\\tmp\\log.txt"), toto);</comment>
		</block_content>}</block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><name>action</name> <operator>==</operator> <name>act_trolling</name></expr>)</condition>
		<block>{<block_content>
			<decl_stmt><decl><type><name>int</name></type> <name>wtfIndex</name> <init>= <expr><call><name>getRandomNumber</name><argument_list>()</argument_list></call> <operator>%</operator> <name>nbWtf</name></expr></init></decl>;</decl_stmt>
			<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>isInList</name><argument_list>(<argument><expr><name>wtfIndex</name></expr></argument>, <argument><expr><name>generatedRans</name></expr></argument>)</argument_list></call></expr>)</condition>
			<block>{<block_content>
				<comment type="line">//writeLog(TEXT("c:\\tmp\\log.txt"), "trolling begin");</comment>
				<expr_stmt><expr><call><name><name>generatedRans</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>wtfIndex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><operator>++</operator><name>nbTrolling</name></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>trollerParams</name><operator>.</operator><name>_text2display</name></name> <operator>=</operator> <name><name>wtf</name><index>[<expr><name>wtfIndex</name></expr>]</index></name></expr>;</expr_stmt>

				<expr_stmt><expr><call><name>ReleaseMutex</name><argument_list>(<argument><expr><name>mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<decl_stmt><decl><type><name>HANDLE</name></type> <name>hThread</name> <init>= <expr><call><name><operator>::</operator><name>CreateThread</name></name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>threadTextTroller</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>trollerParams</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

				<decl_stmt><decl><type><name>int</name></type> <name>sleepTime</name> <init>= <expr><literal type="number">1000</literal> <operator>/</operator> <name>x</name> <operator>*</operator> <name>y</name></expr></init></decl>;</decl_stmt>
				<expr_stmt><expr><call><name><operator>::</operator><name>Sleep</name></name><argument_list>(<argument><expr><name>sleepTime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<expr_stmt><expr><call><name>WaitForSingleObject</name><argument_list>(<argument><expr><name>mutex</name></expr></argument>, <argument><expr><name>INFINITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<expr_stmt><expr><call><name><operator>::</operator><name>CloseHandle</name></name><argument_list>(<argument><expr><name>hThread</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<comment type="line">//writeLog(TEXT("c:\\tmp\\log.txt"), "trolling end");</comment>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></if></if_stmt>


		<if_stmt><if>if <condition>(<expr><name><name>text2display</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">' '</literal> <operator>||</operator> <name><name>text2display</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'.'</literal></expr>)</condition>
		<block>{<block_content>
			<decl_stmt><decl><type><name>int</name></type> <name>sleepTime</name> <init>= <expr><operator>(</operator><name>ranNum</name> <operator>+</operator> <name><name>pauseTimeArray</name><index>[<expr><name>ranNum</name><operator>%</operator><name>nbPauseTime</name></expr>]</index></name><operator>)</operator> <operator>/</operator> <name>x</name> <operator>*</operator> <name>y</name></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name>Sleep</name><argument_list>(<argument><expr><name>sleepTime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if>
		<else>else
		<block>{<block_content>
			<decl_stmt><decl><type><name>int</name></type> <name>sleepTime</name> <init>= <expr><operator>(</operator><name>ranNum</name> <operator>+</operator> <name><name>intervalTimeArray</name><index>[<expr><name>ranNum</name><operator>%</operator><name>nbIntervalTime</name></expr>]</index></name><operator>)</operator> <operator>/</operator> <name>x</name> <operator>*</operator> <name>y</name></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name>Sleep</name><argument_list>(<argument><expr><name>sleepTime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>

		<decl_stmt><decl><type><name>BufferID</name></type> <name>currentBufID</name> <init>= <expr><call><name><name>pCurrentView</name><operator>-&gt;</operator><name>getCurrentBufferID</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if <condition>(<expr><name>currentBufID</name> <operator>!=</operator> <name>targetBufID</name></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><name>TRUE</name></expr>;</return></block_content></block></if></if_stmt>

		<decl_stmt><decl><type><name>char</name></type> <name><name>charToShow</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="char">'\0'</literal></expr> }</block></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><operator>::</operator><name>WideCharToMultiByte</name></name><argument_list>(<argument><expr><name>CP_UTF8</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>text2display</name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>charToShow</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>charToShow</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><operator>::</operator><name>SendMessage</name></name><argument_list>(<argument><expr><name>curScintilla</name></expr></argument>, <argument><expr><name>SCI_APPENDTEXT</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>charToShow</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><cast type="reinterpret">reinterpret_cast<argument_list type="generic">&lt;<argument><expr><name>LPARAM</name></expr></argument>&gt;</argument_list><argument_list>(<argument><expr><name>charToShow</name></expr></argument>)</argument_list></cast></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><operator>::</operator><name>SendMessage</name></name><argument_list>(<argument><expr><name>curScintilla</name></expr></argument>, <argument><expr><name>SCI_GOTOPOS</name></expr></argument>, <argument><expr><call><name><operator>::</operator><name>SendMessage</name></name><argument_list>(<argument><expr><name>curScintilla</name></expr></argument>, <argument><expr><name>SCI_GETLENGTH</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name>previousChar</name> <operator>=</operator> <name><name>text2display</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
		<comment type="line">//char ch[64];</comment>
		<comment type="line">//sprintf(ch, "writing char == %c", text2display[i]);</comment>
		<comment type="line">//writeLog(TEXT("c:\\tmp\\log.txt"), ch);</comment>
    </block_content>}</block></for>

	<comment type="line">//writeLog(TEXT("c:\\tmp\\log.txt"), "\n\n\n\n");</comment>
	<decl_stmt><decl><type><specifier>const</specifier> <name>wchar_t</name><modifier>*</modifier></type> <name>quoter</name> <init>= <expr><name><name>qParams</name><operator>-&gt;</operator><name>_quoter</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>wstring</name></type> <name>quoter_str</name> <init>= <expr><name>quoter</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>pos</name> <init>= <expr><call><name><name>quoter_str</name><operator>.</operator><name>find</name></name><argument_list>(<argument><expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"Anonymous"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><name>pos</name> <operator>==</operator> <name><name>string</name><operator>::</operator><name>npos</name></name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name><operator>::</operator><name>SendMessage</name></name><argument_list>(<argument><expr><name>curScintilla</name></expr></argument>, <argument><expr><name>SCI_APPENDTEXT</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><cast type="reinterpret">reinterpret_cast<argument_list type="generic">&lt;<argument><expr><name>LPARAM</name></expr></argument>&gt;</argument_list><argument_list>(<argument><expr><literal type="string">"\n- "</literal></expr></argument>)</argument_list></cast></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><operator>::</operator><name>SendMessage</name></name><argument_list>(<argument><expr><name>curScintilla</name></expr></argument>, <argument><expr><name>SCI_GOTOPOS</name></expr></argument>, <argument><expr><call><name><operator>::</operator><name>SendMessage</name></name><argument_list>(<argument><expr><name>curScintilla</name></expr></argument>, <argument><expr><name>SCI_GETLENGTH</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="line">// Display quoter</comment>
		<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>len</name> <init>= <expr><call><name>lstrlen</name><argument_list>(<argument><expr><name>quoter</name></expr></argument>)</argument_list></call></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
		<block>{<block_content>
			<decl_stmt><decl><type><name>int</name></type> <name>ranNum</name> <init>= <expr><call><name>getRandomNumber</name><argument_list>(<argument><expr><name>maxRange</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

			<decl_stmt><decl><type><name>int</name></type> <name>sleepTime</name> <init>= <expr><operator>(</operator><name>ranNum</name> <operator>+</operator> <name><name>intervalTimeArray</name><index>[<expr><name>ranNum</name><operator>%</operator><name>nbIntervalTime</name></expr>]</index></name><operator>)</operator> <operator>/</operator> <name>x</name> <operator>*</operator> <name>y</name></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name>Sleep</name><argument_list>(<argument><expr><name>sleepTime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<decl_stmt><decl><type><name>BufferID</name></type> <name>currentBufID</name> <init>= <expr><call><name><name>pCurrentView</name><operator>-&gt;</operator><name>getCurrentBufferID</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
			<if_stmt><if>if <condition>(<expr><name>currentBufID</name> <operator>!=</operator> <name>targetBufID</name></expr>)</condition><block type="pseudo"><block_content>
				<return>return <expr><name>TRUE</name></expr>;</return></block_content></block></if></if_stmt>

			<decl_stmt><decl><type><name>char</name></type> <name><name>charToShow</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="char">'\0'</literal></expr> }</block></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name><operator>::</operator><name>WideCharToMultiByte</name></name><argument_list>(<argument><expr><name>CP_UTF8</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>quoter</name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>charToShow</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>charToShow</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<expr_stmt><expr><call><name><operator>::</operator><name>SendMessage</name></name><argument_list>(<argument><expr><name>curScintilla</name></expr></argument>, <argument><expr><name>SCI_APPENDTEXT</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><cast type="reinterpret">reinterpret_cast<argument_list type="generic">&lt;<argument><expr><name>LPARAM</name></expr></argument>&gt;</argument_list><argument_list>(<argument><expr><name>charToShow</name></expr></argument>)</argument_list></cast></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><operator>::</operator><name>SendMessage</name></name><argument_list>(<argument><expr><name>curScintilla</name></expr></argument>, <argument><expr><name>SCI_GOTOPOS</name></expr></argument>, <argument><expr><call><name><operator>::</operator><name>SendMessage</name></name><argument_list>(<argument><expr><name>curScintilla</name></expr></argument>, <argument><expr><name>SCI_GETLENGTH</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		</block_content>}</block></for>
	</block_content>}</block></if></if_stmt>

    <return>return <expr><name>TRUE</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>DWORD</name> <name>WINAPI</name></type> <name><name>Notepad_plus</name><operator>::</operator><name>threadTextTroller</name></name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>params</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>TextTrollerParams</name> <modifier>*</modifier></type><name>textTrollerParams</name> <init>= <expr><cast type="static">static_cast<argument_list type="generic">&lt;<argument><expr><name>TextTrollerParams</name> <operator>*</operator></expr></argument>&gt;</argument_list><argument_list>(<argument><expr><name>params</name></expr></argument>)</argument_list></cast></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>WaitForSingleObject</name><argument_list>(<argument><expr><name><name>textTrollerParams</name><operator>-&gt;</operator><name>_mutex</name></name></expr></argument>, <argument><expr><name>INFINITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// random seed generation needs only one time.</comment>
	<expr_stmt><expr><call><name>srand</name><argument_list>(<argument><expr><cast type="static">static_cast<argument_list type="generic">&lt;<argument><expr><name>UINT</name></expr></argument>&gt;</argument_list><argument_list>(<argument><expr><call><name>time</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></cast></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>ScintillaEditView</name> <modifier>*</modifier></type><name>pCurrentView</name> <init>= <expr><name><name>textTrollerParams</name><operator>-&gt;</operator><name>_pCurrentView</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>wchar_t</name><modifier>*</modifier></type> <name>text2display</name> <init>= <expr><name><name>textTrollerParams</name><operator>-&gt;</operator><name>_text2display</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>HWND</name></type> <name>curScintilla</name> <init>= <expr><call><name><name>pCurrentView</name><operator>-&gt;</operator><name>getHSelf</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>BufferID</name></type> <name>targetBufID</name> <init>= <expr><name><name>textTrollerParams</name><operator>-&gt;</operator><name>_targetBufID</name></name></expr></init></decl>;</decl_stmt>

	<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>len</name> <init>= <expr><call><name>lstrlen</name><argument_list>(<argument><expr><name>text2display</name></expr></argument>)</argument_list></call></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
    <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>ranNum</name> <init>= <expr><call><name>getRandomNumber</name><argument_list>(<argument><expr><name>maxRange</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>text2display</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">' '</literal> <operator>||</operator> <name><name>text2display</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'.'</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>Sleep</name><argument_list>(<argument><expr><name>ranNum</name> <operator>+</operator> <name><name>pauseTimeArray</name><index>[<expr><name>ranNum</name><operator>%</operator><name>nbPauseTime</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>Sleep</name><argument_list>(<argument><expr><name>ranNum</name> <operator>+</operator> <name><name>intervalTimeArray</name><index>[<expr><name>ranNum</name><operator>%</operator><name>nbIntervalTime</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

		<decl_stmt><decl><type><name>BufferID</name></type> <name>currentBufID</name> <init>= <expr><call><name><name>pCurrentView</name><operator>-&gt;</operator><name>getCurrentBufferID</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if <condition>(<expr><name>currentBufID</name> <operator>!=</operator> <name>targetBufID</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>ReleaseMutex</name><argument_list>(<argument><expr><name><name>textTrollerParams</name><operator>-&gt;</operator><name>_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><name>TRUE</name></expr>;</return>
		</block_content>}</block></if></if_stmt>

		<decl_stmt><decl><type><name>char</name></type> <name><name>charToShow</name><index>[<expr><literal type="number">64</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="char">'\0'</literal></expr> }</block></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><operator>::</operator><name>WideCharToMultiByte</name></name><argument_list>(<argument><expr><name>CP_UTF8</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>text2display</name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>charToShow</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>charToShow</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><operator>::</operator><name>SendMessage</name></name><argument_list>(<argument><expr><name>curScintilla</name></expr></argument>, <argument><expr><name>SCI_APPENDTEXT</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><cast type="reinterpret">reinterpret_cast<argument_list type="generic">&lt;<argument><expr><name>LPARAM</name></expr></argument>&gt;</argument_list><argument_list>(<argument><expr><name>charToShow</name></expr></argument>)</argument_list></cast></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><operator>::</operator><name>SendMessage</name></name><argument_list>(<argument><expr><name>curScintilla</name></expr></argument>, <argument><expr><name>SCI_GOTOPOS</name></expr></argument>, <argument><expr><call><name><operator>::</operator><name>SendMessage</name></name><argument_list>(<argument><expr><name>curScintilla</name></expr></argument>, <argument><expr><name>SCI_GETLENGTH</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
	<comment type="line">//writeLog(TEXT("c:\\tmp\\log.txt"), text2display);</comment>
	<decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><call><name>getRandomNumber</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>delMethod</name> <init>= <expr><name>n</name><operator>%</operator><literal type="number">4</literal></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><name>delMethod</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>size_t</name></type> <name>len</name> <init>= <expr><call><name>lstrlen</name><argument_list>(<argument><expr><name>text2display</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<for>for <control>(<init><decl><type><name>size_t</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control>
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>deleteBack</name><argument_list>(<argument><expr><name>pCurrentView</name></expr></argument>, <argument><expr><name>targetBufID</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
				<break>break;</break></block_content></block></if></if_stmt>
		</block_content>}</block></for>
	</block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><name>delMethod</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>size_t</name></type> <name>len</name> <init>= <expr><call><name>lstrlen</name><argument_list>(<argument><expr><name>text2display</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><operator>::</operator><name>SendMessage</name></name><argument_list>(<argument><expr><name>curScintilla</name></expr></argument>, <argument><expr><name>SCI_GOTOPOS</name></expr></argument>, <argument><expr><call><name><operator>::</operator><name>SendMessage</name></name><argument_list>(<argument><expr><name>curScintilla</name></expr></argument>, <argument><expr><name>SCI_GETLENGTH</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>-</operator> <name>len</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<for>for <control>(<init><decl><type><name>size_t</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control>
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>deleteForward</name><argument_list>(<argument><expr><name>pCurrentView</name></expr></argument>, <argument><expr><name>targetBufID</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
				<break>break;</break></block_content></block></if></if_stmt>
		</block_content>}</block></for>
	</block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><name>delMethod</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition>
	<block>{<block_content>
		<for>for <control>(<init><decl><type><name>size_t</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>len</name> <init>= <expr><call><name>lstrlen</name><argument_list>(<argument><expr><name>text2display</name></expr></argument>)</argument_list></call></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control>
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>selectBack</name><argument_list>(<argument><expr><name>pCurrentView</name></expr></argument>, <argument><expr><name>targetBufID</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
				<break>break;</break></block_content></block></if></if_stmt>
		</block_content>}</block></for>
		<decl_stmt><decl><type><name>int</name></type> <name>ranNum</name> <init>= <expr><call><name>getRandomNumber</name><argument_list>(<argument><expr><name>maxRange</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><operator>::</operator><name>Sleep</name></name><argument_list>(<argument><expr><name>ranNum</name> <operator>+</operator> <name><name>pauseTimeArray</name><index>[<expr><name>ranNum</name><operator>%</operator><name>nbPauseTime</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><operator>::</operator><name>SendMessage</name></name><argument_list>(<argument><expr><call><name><name>pCurrentView</name><operator>-&gt;</operator><name>getHSelf</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>SCI_DELETEBACK</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<decl_stmt><decl><type><name>auto</name></type> <name>currentPos</name> <init>= <expr><call><name><operator>::</operator><name>SendMessage</name></name><argument_list>(<argument><expr><call><name><name>pCurrentView</name><operator>-&gt;</operator><name>getHSelf</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>SCI_GETSELECTIONSTART</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><operator>::</operator><name>SendMessage</name></name><argument_list>(<argument><expr><call><name><name>pCurrentView</name><operator>-&gt;</operator><name>getHSelf</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>SCI_SETSELECTION</name></expr></argument>, <argument><expr><name>currentPos</name></expr></argument>, <argument><expr><name>currentPos</name> <operator>-</operator> <call><name>lstrlen</name><argument_list>(<argument><expr><name>text2display</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<decl_stmt><decl><type><name>BufferID</name></type> <name>currentBufID</name> <init>= <expr><call><name><name>pCurrentView</name><operator>-&gt;</operator><name>getCurrentBufferID</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if <condition>(<expr><name>currentBufID</name> <operator>!=</operator> <name>targetBufID</name></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><name>TRUE</name></expr>;</return></block_content></block></if></if_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>ranNum</name> <init>= <expr><call><name>getRandomNumber</name><argument_list>(<argument><expr><name>maxRange</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><operator>::</operator><name>Sleep</name></name><argument_list>(<argument><expr><name>ranNum</name> <operator>+</operator> <name><name>pauseTimeArray</name><index>[<expr><name>ranNum</name><operator>%</operator><name>nbPauseTime</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><operator>::</operator><name>SendMessage</name></name><argument_list>(<argument><expr><call><name><name>pCurrentView</name><operator>-&gt;</operator><name>getHSelf</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>SCI_DELETEBACK</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<expr_stmt><expr><call><name>ReleaseMutex</name><argument_list>(<argument><expr><name><name>textTrollerParams</name><operator>-&gt;</operator><name>_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>TRUE</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>bool</name></type> <name><name>Notepad_plus</name><operator>::</operator><name>deleteBack</name></name><parameter_list>(<parameter><decl><type><name>ScintillaEditView</name> <modifier>*</modifier></type><name>pCurrentView</name></decl></parameter>, <parameter><decl><type><name>BufferID</name></type> <name>targetBufID</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>ranNum</name> <init>= <expr><call><name>getRandomNumber</name><argument_list>(<argument><expr><name>maxRange</name> <operator>-</operator> <literal type="number">100</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>BufferID</name></type> <name>currentBufID</name> <init>= <expr><call><name><name>pCurrentView</name><operator>-&gt;</operator><name>getCurrentBufferID</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>Sleep</name><argument_list>(<argument><expr><name>ranNum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>currentBufID</name> <operator>!=</operator> <name>targetBufID</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>
	<expr_stmt><expr><call><name><operator>::</operator><name>SendMessage</name></name><argument_list>(<argument><expr><call><name><name>pCurrentView</name><operator>-&gt;</operator><name>getHSelf</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>SCI_DELETEBACK</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><literal type="boolean">true</literal></expr>;</return>
</block_content>}</block></function>


<function><type><name>bool</name></type> <name><name>Notepad_plus</name><operator>::</operator><name>deleteForward</name></name><parameter_list>(<parameter><decl><type><name>ScintillaEditView</name> <modifier>*</modifier></type><name>pCurrentView</name></decl></parameter>, <parameter><decl><type><name>BufferID</name></type> <name>targetBufID</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>ranNum</name> <init>= <expr><call><name>getRandomNumber</name><argument_list>(<argument><expr><name>maxRange</name> <operator>-</operator> <literal type="number">100</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>BufferID</name></type> <name>currentBufID</name> <init>= <expr><call><name><name>pCurrentView</name><operator>-&gt;</operator><name>getCurrentBufferID</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>Sleep</name><argument_list>(<argument><expr><name>ranNum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>currentBufID</name> <operator>!=</operator> <name>targetBufID</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>
	<expr_stmt><expr><call><name><operator>::</operator><name>SendMessage</name></name><argument_list>(<argument><expr><call><name><name>pCurrentView</name><operator>-&gt;</operator><name>getHSelf</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>SCI_GOTOPOS</name></expr></argument>, <argument><expr><call><name><operator>::</operator><name>SendMessage</name></name><argument_list>(<argument><expr><call><name><name>pCurrentView</name><operator>-&gt;</operator><name>getHSelf</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>SCI_GETCURRENTPOS</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><operator>::</operator><name>SendMessage</name></name><argument_list>(<argument><expr><call><name><name>pCurrentView</name><operator>-&gt;</operator><name>getHSelf</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>SCI_DELETEBACK</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><literal type="boolean">true</literal></expr>;</return>
</block_content>}</block></function>


<function><type><name>bool</name></type> <name><name>Notepad_plus</name><operator>::</operator><name>selectBack</name></name><parameter_list>(<parameter><decl><type><name>ScintillaEditView</name> <modifier>*</modifier></type><name>pCurrentView</name></decl></parameter>, <parameter><decl><type><name>BufferID</name></type> <name>targetBufID</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>ranNum</name> <init>= <expr><call><name>getRandomNumber</name><argument_list>(<argument><expr><name>maxRange</name> <operator>-</operator> <literal type="number">100</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>BufferID</name></type> <name>currentBufID</name> <init>= <expr><call><name><name>pCurrentView</name><operator>-&gt;</operator><name>getCurrentBufferID</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>auto</name></type> <name>currentPos</name> <init>= <expr><call><name><operator>::</operator><name>SendMessage</name></name><argument_list>(<argument><expr><call><name><name>pCurrentView</name><operator>-&gt;</operator><name>getHSelf</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>SCI_GETSELECTIONSTART</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>auto</name></type> <name>currentAnchor</name> <init>= <expr><call><name><operator>::</operator><name>SendMessage</name></name><argument_list>(<argument><expr><call><name><name>pCurrentView</name><operator>-&gt;</operator><name>getHSelf</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>SCI_GETSELECTIONEND</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>Sleep</name><argument_list>(<argument><expr><name>ranNum</name> <operator>+</operator> <name><name>intervalTimeArray</name><index>[<expr><name>ranNum</name><operator>%</operator><name>nbIntervalTime</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>currentBufID</name> <operator>!=</operator> <name>targetBufID</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name><operator>::</operator><name>SendMessage</name></name><argument_list>(<argument><expr><call><name><name>pCurrentView</name><operator>-&gt;</operator><name>getHSelf</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>SCI_SETSELECTION</name></expr></argument>, <argument><expr><name>currentAnchor</name></expr></argument>, <argument><expr><operator>--</operator><name>currentPos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><literal type="boolean">true</literal></expr>;</return>
</block_content>}</block></function>


<function><type><name>int</name></type> <name><name>Notepad_plus</name><operator>::</operator><name>getQuoteIndexFrom</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>wchar_t</name><modifier>*</modifier></type> <name>quoter</name></decl></parameter>)</parameter_list> <specifier>const</specifier>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>quoter</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>wcsicmp</name><argument_list>(<argument><expr><name>quoter</name></expr></argument>, <argument><expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"Get them all!!!"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><operator>-</operator><literal type="number">2</literal></expr>;</return></block_content></block></if></if_stmt>

	<decl_stmt><decl><type><name>int</name></type> <name>nbQuote</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>quotes</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>QuoteParams</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><call><name>wcsicmp</name><argument_list>(<argument><expr><name>quoter</name></expr></argument>, <argument><expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"random"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>srand</name><argument_list>(<argument><expr><cast type="static">static_cast<argument_list type="generic">&lt;<argument><expr><name>UINT</name></expr></argument>&gt;</argument_list><argument_list>(<argument><expr><call><name>time</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></cast></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><call><name>getRandomNumber</name><argument_list>(<argument><expr><name>nbQuote</name></expr></argument>)</argument_list></call></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nbQuote</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><call><name>wcsicmp</name><argument_list>(<argument><expr><name><name>quotes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>_quoter</name></expr></argument>, <argument><expr><name>quoter</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><name>i</name></expr>;</return></block_content></block></if></if_stmt>
	</block_content>}</block></for>
	<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>


<function><type><name>void</name></type> <name><name>Notepad_plus</name><operator>::</operator><name>showAllQuotes</name></name><parameter_list>()</parameter_list> <specifier>const</specifier>
<block>{<block_content>
</block_content>}</block></function>


<function><type><name>void</name></type> <name><name>Notepad_plus</name><operator>::</operator><name>showQuoteFromIndex</name></name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>index</name></decl></parameter>)</parameter_list> <specifier>const</specifier>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>nbQuote</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>quotes</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>QuoteParams</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><name>index</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>index</name> <operator>&gt;=</operator> <name>nbQuote</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
	<expr_stmt><expr><call><name>showQuote</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>quotes</name><index>[<expr><name>index</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name><name>Notepad_plus</name><operator>::</operator><name>showQuote</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>QuoteParams</name><modifier>*</modifier></type> <name>quote</name></decl></parameter>)</parameter_list> <specifier>const</specifier>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>static</specifier> <name>TextPlayerParams</name></type> <name>params</name></decl>;</decl_stmt>
	<expr_stmt><expr><name><name>params</name><operator>.</operator><name>_quotParams</name></name> <operator>=</operator> <cast type="const">const_cast<argument_list type="generic">&lt;<argument><expr><name>QuoteParams</name><operator>*</operator></expr></argument>&gt;</argument_list><argument_list>(<argument><expr><name>quote</name></expr></argument>)</argument_list></cast></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>params</name><operator>.</operator><name>_nppHandle</name></name> <operator>=</operator> <call><name><name>Notepad_plus</name><operator>::</operator><name>_pPublicInterface</name><operator>-&gt;</operator><name>getHSelf</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>params</name><operator>.</operator><name>_pCurrentView</name></name> <operator>=</operator> <name>_pEditView</name></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>HANDLE</name></type> <name>hThread</name> <init>= <expr><call><name><operator>::</operator><name>CreateThread</name></name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>threadTextPlayer</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>params</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><name>hThread</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name><operator>::</operator><name>CloseHandle</name></name><argument_list>(<argument><expr><name>hThread</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name><name>Notepad_plus</name><operator>::</operator><name>minimizeDialogs</name></name><parameter_list>()</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>static</specifier> <name>StaticDialog</name><modifier>*</modifier></type> <name><name>modelessDlgs</name><index>[]</index></name> <init>= <expr><block>{<expr><operator>&amp;</operator><name>_findReplaceDlg</name></expr>, <expr><operator>&amp;</operator><name>_aboutDlg</name></expr>, <expr><operator>&amp;</operator><name>_debugInfoDlg</name></expr>, <expr><operator>&amp;</operator><name>_runDlg</name></expr>, <expr><operator>&amp;</operator><name>_goToLineDlg</name></expr>, <expr><operator>&amp;</operator><name>_colEditorDlg</name></expr>, <expr><operator>&amp;</operator><name>_configStyleDlg</name></expr>,\
		<expr><operator>&amp;</operator><name>_preference</name></expr>, <expr><operator>&amp;</operator><name>_pluginsAdminDlg</name></expr>, <expr><operator>&amp;</operator><name>_findCharsInRangeDlg</name></expr>, <expr><operator>&amp;</operator><name>_md5FromFilesDlg</name></expr>, <expr><operator>&amp;</operator><name>_md5FromTextDlg</name></expr>, <expr><operator>&amp;</operator><name>_sha2FromFilesDlg</name></expr>, <expr><operator>&amp;</operator><name>_sha2FromTextDlg</name></expr>, <expr><operator>&amp;</operator><name>_runMacroDlg</name></expr>}</block></expr></init></decl>;</decl_stmt>
	
	<decl_stmt><decl><type><specifier>static</specifier> <name>size_t</name></type> <name>nbModelessDlg</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>modelessDlgs</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>StaticDialog</name><operator>*</operator></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>

	<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nbModelessDlg</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
	<block>{<block_content>
		<decl_stmt><decl><type><name>StaticDialog</name><modifier>*</modifier></type> <name>pDlg</name> <init>= <expr><name><name>modelessDlgs</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if <condition>(<expr><call><name><name>pDlg</name><operator>-&gt;</operator><name>isCreated</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>pDlg</name><operator>-&gt;</operator><name>isVisible</name></name><argument_list>()</argument_list></call></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name><name>pDlg</name><operator>-&gt;</operator><name>display</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>_sysTrayHiddenHwnd</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><call><name><name>pDlg</name><operator>-&gt;</operator><name>getHSelf</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>
</block_content>}</block></function>

<function><type><name>void</name></type> <name><name>Notepad_plus</name><operator>::</operator><name>restoreMinimizeDialogs</name></name><parameter_list>()</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>size_t</name></type> <name>nbDialogs</name> <init>= <expr><call><name><name>_sysTrayHiddenHwnd</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><operator>(</operator><cast type="static">static_cast<argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list><argument_list>(<argument><expr><name>nbDialogs</name></expr></argument>)</argument_list></cast> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control>
	<block>{<block_content>
		<expr_stmt><expr><call><name><operator>::</operator><name>ShowWindow</name></name><argument_list>(<argument><expr><name><name>_sysTrayHiddenHwnd</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>SW_SHOW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>_sysTrayHiddenHwnd</name><operator>.</operator><name>erase</name></name><argument_list>(<argument><expr><call><name><name>_sysTrayHiddenHwnd</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call> <operator>+</operator> <name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>
</block_content>}</block></function>

<function><type><name>void</name></type> <name><name>Notepad_plus</name><operator>::</operator><name>refreshDarkMode</name></name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>resetStyle</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>resetStyle</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>NppParameters</name><modifier>&amp;</modifier></type> <name>nppParams</name> <init>= <expr><call><name><name>NppParameters</name><operator>::</operator><name>getInstance</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><call><name><operator>::</operator><name>SendMessage</name></name><argument_list>(<argument><expr><call><name><name>_pPublicInterface</name><operator>-&gt;</operator><name>getHSelf</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>NPPM_SETEDITORBORDEREDGE</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name><name>nppParams</name><operator>.</operator><name>getSVP</name></name><argument_list>()</argument_list></call><operator>.</operator><name>_showBorderEdge</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name><operator>::</operator><name>SendMessage</name></name><argument_list>(<argument><expr><call><name><name>_subEditView</name><operator>.</operator><name>getHSelf</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>NPPM_INTERNAL_REFRESHDARKMODE</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><operator>::</operator><name>SendMessage</name></name><argument_list>(<argument><expr><call><name><name>_mainEditView</name><operator>.</operator><name>getHSelf</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>NPPM_INTERNAL_REFRESHDARKMODE</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name><operator>::</operator><name>SendMessage</name></name><argument_list>(<argument><expr><call><name><name>_mainDocTab</name><operator>.</operator><name>getHSelf</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>NPPM_INTERNAL_REFRESHDARKMODE</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><operator>::</operator><name>SendMessage</name></name><argument_list>(<argument><expr><call><name><name>_subDocTab</name><operator>.</operator><name>getHSelf</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>NPPM_INTERNAL_REFRESHDARKMODE</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name><operator>::</operator><name>SendMessage</name></name><argument_list>(<argument><expr><call><name><name>_findInFinderDlg</name><operator>.</operator><name>getHSelf</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>NPPM_INTERNAL_REFRESHDARKMODE</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><operator>::</operator><name>RedrawWindow</name></name><argument_list>(<argument><expr><call><name><name>_findInFinderDlg</name><operator>.</operator><name>getHSelf</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="null">nullptr</literal></expr></argument>, <argument><expr><literal type="null">nullptr</literal></expr></argument>, <argument><expr><name>RDW_INVALIDATE</name> <operator>|</operator> <name>RDW_ERASE</name> <operator>|</operator> <name>RDW_FRAME</name> <operator>|</operator> <name>RDW_ALLCHILDREN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name><operator>::</operator><name>SendMessage</name></name><argument_list>(<argument><expr><call><name><name>_incrementFindDlg</name><operator>.</operator><name>getHSelf</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>NPPM_INTERNAL_REFRESHDARKMODE</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><operator>::</operator><name>RedrawWindow</name></name><argument_list>(<argument><expr><call><name><name>_pPublicInterface</name><operator>-&gt;</operator><name>getHSelf</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="null">nullptr</literal></expr></argument>, <argument><expr><literal type="null">nullptr</literal></expr></argument>, <argument><expr><name>RDW_INVALIDATE</name> <operator>|</operator> <name>RDW_ERASE</name> <operator>|</operator> <name>RDW_FRAME</name> <operator>|</operator> <name>RDW_ALLCHILDREN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name>_pProjectPanel_1</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name><operator>::</operator><name>SendMessage</name></name><argument_list>(<argument><expr><call><name><name>_pProjectPanel_1</name><operator>-&gt;</operator><name>getHSelf</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>NPPM_INTERNAL_REFRESHDARKMODE</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><name>_pProjectPanel_2</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name><operator>::</operator><name>SendMessage</name></name><argument_list>(<argument><expr><call><name><name>_pProjectPanel_2</name><operator>-&gt;</operator><name>getHSelf</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>NPPM_INTERNAL_REFRESHDARKMODE</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><name>_pProjectPanel_3</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name><operator>::</operator><name>SendMessage</name></name><argument_list>(<argument><expr><call><name><name>_pProjectPanel_3</name><operator>-&gt;</operator><name>getHSelf</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>NPPM_INTERNAL_REFRESHDARKMODE</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><name>_pFuncList</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name><operator>::</operator><name>SendMessage</name></name><argument_list>(<argument><expr><call><name><name>_pFuncList</name><operator>-&gt;</operator><name>getHSelf</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>NPPM_INTERNAL_REFRESHDARKMODE</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><name>_pFileBrowser</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name><operator>::</operator><name>SendMessage</name></name><argument_list>(<argument><expr><call><name><name>_pFileBrowser</name><operator>-&gt;</operator><name>getHSelf</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>NPPM_INTERNAL_REFRESHDARKMODE</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><name>_pAnsiCharPanel</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name><operator>::</operator><name>SendMessage</name></name><argument_list>(<argument><expr><call><name><name>_pAnsiCharPanel</name><operator>-&gt;</operator><name>getHSelf</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>NPPM_INTERNAL_REFRESHDARKMODE</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><name>_pDocumentListPanel</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name><operator>::</operator><name>SendMessage</name></name><argument_list>(<argument><expr><call><name><name>_pDocumentListPanel</name><operator>-&gt;</operator><name>getHSelf</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>NPPM_INTERNAL_REFRESHDARKMODE</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><name>_pClipboardHistoryPanel</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name><operator>::</operator><name>SendMessage</name></name><argument_list>(<argument><expr><call><name><name>_pClipboardHistoryPanel</name><operator>-&gt;</operator><name>getHSelf</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>NPPM_INTERNAL_REFRESHDARKMODE</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>tabIconSet</name> <init>= <expr><call><name><name>NppDarkMode</name><operator>::</operator><name>getTabIconSet</name></name><argument_list>(<argument><expr><call><name><name>NppDarkMode</name><operator>::</operator><name>isEnabled</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if <condition>(<expr><name>tabIconSet</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name><name>_preference</name><operator>.</operator><name>_generalSubDlg</name><operator>.</operator><name>setTabbarAlternateIcons</name></name><argument_list>(<argument><expr><name>tabIconSet</name> <operator>==</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><operator>::</operator><name>SendMessage</name></name><argument_list>(<argument><expr><call><name><name>_pPublicInterface</name><operator>-&gt;</operator><name>getHSelf</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>NPPM_INTERNAL_CHANGETABBAEICONS</name></expr></argument>, <argument><expr><cast type="static">static_cast<argument_list type="generic">&lt;<argument><expr><name>WPARAM</name></expr></argument>&gt;</argument_list><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></cast></expr></argument>, <argument><expr><name>tabIconSet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if>
		<else>else
		<block>{<block_content>
			<decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>isChecked</name> <init>= <expr><call><name><name>_preference</name><operator>.</operator><name>_generalSubDlg</name><operator>.</operator><name>isCheckedOrNot</name></name><argument_list>(<argument><expr><name>IDC_CHECK_TAB_ALTICONS</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<if_stmt><if>if <condition>(<expr><operator>!</operator><name>isChecked</name></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><call><name><operator>::</operator><name>SendMessage</name></name><argument_list>(<argument><expr><call><name><name>_pPublicInterface</name><operator>-&gt;</operator><name>getHSelf</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>NPPM_INTERNAL_CHANGETABBAEICONS</name></expr></argument>, <argument><expr><cast type="static">static_cast<argument_list type="generic">&lt;<argument><expr><name>WPARAM</name></expr></argument>&gt;</argument_list><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></cast></expr></argument>, <argument><expr><ternary><condition><expr><call><name><name>NppDarkMode</name><operator>::</operator><name>isEnabled</name></name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><literal type="number">2</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></else></if_stmt>

		<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>iconState</name> <init>= <expr><call><name><name>NppDarkMode</name><operator>::</operator><name>getToolBarIconSet</name></name><argument_list>(<argument><expr><call><name><name>NppDarkMode</name><operator>::</operator><name>isEnabled</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>toolBarStatusType</name></type> <name>state</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>iconState</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal><operator>)</operator></expr> ?</condition><then> <expr><call><name><name>_toolBar</name><operator>.</operator><name>getState</name></name><argument_list>()</argument_list></call></expr> </then><else>: <expr><cast type="static">static_cast<argument_list type="generic">&lt;<argument><expr><name>toolBarStatusType</name></expr></argument>&gt;</argument_list><argument_list>(<argument><expr><name>iconState</name></expr></argument>)</argument_list></cast></expr></else></ternary></expr></init></decl>;</decl_stmt>
		<switch>switch <condition>(<expr><name>state</name></expr>)</condition>
		<block>{<block_content>
			<case>case <expr><name>TB_SMALL</name></expr>:</case>
				<expr_stmt><expr><call><name><name>_toolBar</name><operator>.</operator><name>reduce</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>

			<case>case <expr><name>TB_LARGE</name></expr>:</case>
				<expr_stmt><expr><call><name><name>_toolBar</name><operator>.</operator><name>enlarge</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>

			<case>case <expr><name>TB_SMALL2</name></expr>:</case>
				<expr_stmt><expr><call><name><name>_toolBar</name><operator>.</operator><name>reduceToSet2</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>

			<case>case <expr><name>TB_LARGE2</name></expr>:</case>
				<expr_stmt><expr><call><name><name>_toolBar</name><operator>.</operator><name>enlargeToSet2</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>

			<case>case <expr><name>TB_STANDARD</name></expr>:</case>
				<expr_stmt><expr><call><name><name>_toolBar</name><operator>.</operator><name>setToBmpIcons</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
		</block_content>}</block></switch>

		<decl_stmt><decl><type><name>ThemeSwitcher</name><modifier>&amp;</modifier></type> <name>themeSwitcher</name> <init>= <expr><call><name><name>nppParams</name><operator>.</operator><name>getThemeSwitcher</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>generic_string</name></type> <name>themePath</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>generic_string</name></type> <name>themeName</name></decl>;</decl_stmt>

		<decl_stmt><decl><type><name>generic_string</name></type> <name>xmlFileName</name> <init>= <expr><call><name><name>NppDarkMode</name><operator>::</operator><name>getThemeName</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>xmlFileName</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>)</condition>
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>nppParams</name><operator>.</operator><name>isLocal</name></name><argument_list>()</argument_list></call> <operator>||</operator> <call><name><name>nppParams</name><operator>.</operator><name>isCloud</name></name><argument_list>()</argument_list></call></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><name>themePath</name> <operator>=</operator> <call><name><name>nppParams</name><operator>.</operator><name>getUserPath</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>pathAppend</name><argument_list>(<argument><expr><name>themePath</name></expr></argument>, <argument><expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"themes\\"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>pathAppend</name><argument_list>(<argument><expr><name>themePath</name></expr></argument>, <argument><expr><name>xmlFileName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>

			<if_stmt><if>if <condition>(<expr><call><name><operator>::</operator><name>PathFileExists</name></name><argument_list>(<argument><expr><call><name><name>themePath</name><operator>.</operator><name>c_str</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <name>FALSE</name> <operator>||</operator> <call><name><name>themePath</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><name>themePath</name> <operator>=</operator> <call><name><name>themeSwitcher</name><operator>.</operator><name>getThemeDirPath</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>pathAppend</name><argument_list>(<argument><expr><name>themePath</name></expr></argument>, <argument><expr><name>xmlFileName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>

			<expr_stmt><expr><name>themeName</name> <operator>=</operator> <call><name><name>themeSwitcher</name><operator>.</operator><name>getThemeFromXmlFileName</name></name><argument_list>(<argument><expr><call><name><name>themePath</name><operator>.</operator><name>c_str</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if>
		<else>else
		<block>{<block_content>
			<comment type="line">//use _stylerPath;</comment>

			<decl_stmt><decl><type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>generic_string</name></expr></argument>, <argument><expr><name>generic_string</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>themeInfo</name> <init>= <expr><call><name><name>themeSwitcher</name><operator>.</operator><name>getElementFromIndex</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><name>themePath</name> <operator>=</operator> <name><name>themeInfo</name><operator>.</operator><name>second</name></name></expr>;</expr_stmt>
			<expr_stmt><expr><name>themeName</name> <operator>=</operator> <call><name><name>themeSwitcher</name><operator>.</operator><name>getDefaultThemeLabel</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>

		<if_stmt><if>if <condition>(<expr><call><name><operator>::</operator><name>PathFileExists</name></name><argument_list>(<argument><expr><call><name><name>themePath</name><operator>.</operator><name>c_str</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name><name>nppParams</name><operator>.</operator><name>getNppGUI</name></name><argument_list>()</argument_list></call><operator>.</operator><name>_themeName</name> <operator>=</operator> <name>themePath</name></expr>;</expr_stmt>

			<if_stmt><if>if <condition>(<expr><call><name><name>_configStyleDlg</name><operator>.</operator><name>isCreated</name></name><argument_list>()</argument_list></call></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><call><name><name>_configStyleDlg</name><operator>.</operator><name>selectThemeByName</name></name><argument_list>(<argument><expr><call><name><name>themeName</name><operator>.</operator><name>c_str</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if>
			<else>else
			<block>{<block_content>
				<expr_stmt><expr><call><name><name>nppParams</name><operator>.</operator><name>reloadStylers</name></name><argument_list>(<argument><expr><call><name><name>themePath</name><operator>.</operator><name>c_str</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><operator>::</operator><name>SendMessage</name></name><argument_list>(<argument><expr><call><name><name>_pPublicInterface</name><operator>-&gt;</operator><name>getHSelf</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>WM_UPDATESCINTILLAS</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></else></if_stmt>
		</block_content>}</block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><call><name><name>NppDarkMode</name><operator>::</operator><name>isExperimentalSupported</name></name><argument_list>()</argument_list></call></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name><name>NppDarkMode</name><operator>::</operator><name>allowDarkModeForApp</name></name><argument_list>(<argument><expr><call><name><name>NppDarkMode</name><operator>::</operator><name>isEnabled</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<expr_stmt><expr><call><name><name>NppDarkMode</name><operator>::</operator><name>setDarkTitleBar</name></name><argument_list>(<argument><expr><call><name><name>_pPublicInterface</name><operator>-&gt;</operator><name>getHSelf</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><operator>::</operator><name>SetWindowPos</name></name><argument_list>(<argument><expr><call><name><name>_pPublicInterface</name><operator>-&gt;</operator><name>getHSelf</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="null">nullptr</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>SWP_NOMOVE</name> <operator>|</operator> <name>SWP_NOSIZE</name> <operator>|</operator> <name>SWP_NOZORDER</name> <operator>|</operator> <name>SWP_FRAMECHANGED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<for>for <control>(<init><expr><name>auto</name><operator>&amp;</operator> <name>docCont</name> <operator>:</operator> <call><name><name>_dockingManager</name><operator>.</operator><name>getContainerInfo</name></name><argument_list>()</argument_list></call></expr></init>)</control>
			<block>{<block_content>
				<decl_stmt><decl><type><name>auto</name></type> <name>hwndDocCont</name> <init>= <expr><call><name><name>docCont</name><operator>-&gt;</operator><name>getCaptionWnd</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
				<expr_stmt><expr><call><name><name>NppDarkMode</name><operator>::</operator><name>setDarkTitleBar</name></name><argument_list>(<argument><expr><name>hwndDocCont</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><operator>::</operator><name>SetWindowPos</name></name><argument_list>(<argument><expr><name>hwndDocCont</name></expr></argument>, <argument><expr><literal type="null">nullptr</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>SWP_NOMOVE</name> <operator>|</operator> <name>SWP_NOSIZE</name> <operator>|</operator> <name>SWP_NOZORDER</name> <operator>|</operator> <name>SWP_FRAMECHANGED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></for>

			<for>for <control>(<init><expr><name>auto</name><operator>&amp;</operator> <name>hwndDlg</name> <operator>:</operator> <name>_hModelessDlgs</name></expr></init>)</control>
			<block>{<block_content>
				<expr_stmt><expr><call><name><name>NppDarkMode</name><operator>::</operator><name>setDarkTitleBar</name></name><argument_list>(<argument><expr><name>hwndDlg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><operator>::</operator><name>SendMessage</name></name><argument_list>(<argument><expr><name>hwndDlg</name></expr></argument>, <argument><expr><name>NPPM_INTERNAL_REFRESHDARKMODE</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><operator>::</operator><name>RedrawWindow</name></name><argument_list>(<argument><expr><name>hwndDlg</name></expr></argument>, <argument><expr><literal type="null">nullptr</literal></expr></argument>, <argument><expr><literal type="null">nullptr</literal></expr></argument>, <argument><expr><name>RDW_INVALIDATE</name> <operator>|</operator> <name>RDW_ERASE</name> <operator>|</operator> <name>RDW_FRAME</name> <operator>|</operator> <name>RDW_ALLCHILDREN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><operator>::</operator><name>SetWindowPos</name></name><argument_list>(<argument><expr><name>hwndDlg</name></expr></argument>, <argument><expr><literal type="null">nullptr</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>SWP_NOMOVE</name> <operator>|</operator> <name>SWP_NOSIZE</name> <operator>|</operator> <name>SWP_NOZORDER</name> <operator>|</operator> <name>SWP_FRAMECHANGED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></for>

			<expr_stmt><expr><call><name><name>NppDarkMode</name><operator>::</operator><name>setDarkTitleBar</name></name><argument_list>(<argument><expr><call><name><name>_findInFinderDlg</name><operator>.</operator><name>getHSelf</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><operator>::</operator><name>SetWindowPos</name></name><argument_list>(<argument><expr><call><name><name>_findInFinderDlg</name><operator>.</operator><name>getHSelf</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="null">nullptr</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>SWP_NOMOVE</name> <operator>|</operator> <name>SWP_NOSIZE</name> <operator>|</operator> <name>SWP_NOZORDER</name> <operator>|</operator> <name>SWP_FRAMECHANGED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<for>for <control>(<init><expr><name>auto</name><operator>&amp;</operator> <name>docCont</name> <operator>:</operator> <call><name><name>_dockingManager</name><operator>.</operator><name>getContainerInfo</name></name><argument_list>()</argument_list></call></expr></init>)</control>
		<block>{<block_content>
			<decl_stmt><decl><type><name>auto</name></type> <name>hwndDocCont</name> <init>= <expr><call><name><name>docCont</name><operator>-&gt;</operator><name>getCaptionWnd</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name><operator>::</operator><name>RedrawWindow</name></name><argument_list>(<argument><expr><name>hwndDocCont</name></expr></argument>, <argument><expr><literal type="null">nullptr</literal></expr></argument>, <argument><expr><literal type="null">nullptr</literal></expr></argument>, <argument><expr><name>RDW_INVALIDATE</name> <operator>|</operator> <name>RDW_ERASE</name> <operator>|</operator> <name>RDW_FRAME</name> <operator>|</operator> <name>RDW_ALLCHILDREN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></for>

		<for>for <control>(<init><expr><name>auto</name><operator>&amp;</operator> <name>hwndDlg</name> <operator>:</operator> <name>_hModelessDlgs</name></expr></init>)</control>
		<block>{<block_content>
			<comment type="line">//::SendMessage(hwndDlg, NPPM_INTERNAL_REFRESHDARKMODE, 0, 0);</comment>
			<expr_stmt><expr><call><name><operator>::</operator><name>RedrawWindow</name></name><argument_list>(<argument><expr><name>hwndDlg</name></expr></argument>, <argument><expr><literal type="null">nullptr</literal></expr></argument>, <argument><expr><literal type="null">nullptr</literal></expr></argument>, <argument><expr><name>RDW_INVALIDATE</name> <operator>|</operator> <name>RDW_ERASE</name> <operator>|</operator> <name>RDW_FRAME</name> <operator>|</operator> <name>RDW_ALLCHILDREN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></for>

		<expr_stmt><expr><call><name><operator>::</operator><name>RedrawWindow</name></name><argument_list>(<argument><expr><call><name><name>_findInFinderDlg</name><operator>.</operator><name>getHSelf</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="null">nullptr</literal></expr></argument>, <argument><expr><literal type="null">nullptr</literal></expr></argument>, <argument><expr><name>RDW_INVALIDATE</name> <operator>|</operator> <name>RDW_ERASE</name> <operator>|</operator> <name>RDW_FRAME</name> <operator>|</operator> <name>RDW_ALLCHILDREN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><operator>::</operator><name>RedrawWindow</name></name><argument_list>(<argument><expr><call><name><name>_pPublicInterface</name><operator>-&gt;</operator><name>getHSelf</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="null">nullptr</literal></expr></argument>, <argument><expr><literal type="null">nullptr</literal></expr></argument>, <argument><expr><name>RDW_INVALIDATE</name> <operator>|</operator> <name>RDW_ERASE</name> <operator>|</operator> <name>RDW_FRAME</name> <operator>|</operator> <name>RDW_ALLCHILDREN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name><name>Notepad_plus</name><operator>::</operator><name>launchDocumentBackupTask</name></name><parameter_list>()</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>HANDLE</name></type> <name>hThread</name> <init>= <expr><call><name><operator>::</operator><name>CreateThread</name></name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>backupDocument</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><name>hThread</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name><operator>::</operator><name>CloseHandle</name></name><argument_list>(<argument><expr><name>hThread</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>


<function><type><name>DWORD</name> <name>WINAPI</name></type> <name><name>Notepad_plus</name><operator>::</operator><name>backupDocument</name></name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter> <comment type="block">/*param*/</comment>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>bool</name></type> <name>isSnapshotMode</name> <init>= <expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt>
	<while>while <condition>(<expr><name>isSnapshotMode</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>NppParameters</name><modifier>&amp;</modifier></type> <name>nppParam</name> <init>= <expr><call><name><name>NppParameters</name><operator>::</operator><name>getInstance</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

		<decl_stmt><decl><type><name>size_t</name></type> <name>timer</name> <init>= <expr><call><name><name>nppParam</name><operator>.</operator><name>getNppGUI</name></name><argument_list>()</argument_list></call><operator>.</operator><name>_snapshotBackupTiming</name></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if <condition>(<expr><name>timer</name> <operator>&lt;</operator> <literal type="number">1000</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>timer</name> <operator>=</operator> <literal type="number">1000</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<expr_stmt><expr><call><name><operator>::</operator><name>Sleep</name></name><argument_list>(<argument><expr><call><name>DWORD</name><argument_list>(<argument><expr><name>timer</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name>isSnapshotMode</name> <operator>=</operator> <call><name><name>nppParam</name><operator>.</operator><name>getNppGUI</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>isSnapshotMode</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><name>isSnapshotMode</name></expr>)</condition><block type="pseudo"><block_content>
			<break>break;</break></block_content></block></if></if_stmt>

		<expr_stmt><expr><call><name><operator>::</operator><name>PostMessage</name></name><argument_list>(<argument><expr><name><name>Notepad_plus_Window</name><operator>::</operator><name>gNppHWND</name></name></expr></argument>, <argument><expr><name>NPPM_INTERNAL_SAVEBACKUP</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></while>
	<return>return <expr><name>TRUE</name></expr>;</return>
</block_content>}</block></function>


<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>_MSC_VER</name></cpp:ifdef>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>warning</name><name>(</name> <name>disable</name> <name>:</name> <name>4127</name> <name>)</name></cpp:pragma>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<comment type="line">//-- undoStreamComment: New function to undo stream comment around or within selection end-points.</comment>
<function><type><name>bool</name></type> <name><name>Notepad_plus</name><operator>::</operator><name>undoStreamComment</name></name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>tryBlockComment</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>TCHAR</name> <modifier>*</modifier></type><name>commentStart</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>TCHAR</name> <modifier>*</modifier></type><name>commentEnd</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>TCHAR</name> <modifier>*</modifier></type><name>commentLineSymbol</name></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>generic_string</name></type> <name>symbolStart</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>generic_string</name></type> <name>symbolEnd</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>generic_string</name></type> <name>symbol</name></decl>;</decl_stmt>

	<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>charbufLen</name> <init>= <expr><literal type="number">10</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>TCHAR</name></type> <name><name>charbuf</name><index>[<expr><name>charbufLen</name></expr>]</index></name></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>bool</name></type> <name>retVal</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>Buffer</name> <modifier>*</modifier></type> <name>buf</name> <init>= <expr><call><name><name>_pEditView</name><operator>-&gt;</operator><name>getCurrentBuffer</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<comment type="line">//-- Avoid side-effects (e.g. cursor moves number of comment-characters) when file is read-only.</comment>
	<if_stmt><if>if <condition>(<expr><call><name><name>buf</name><operator>-&gt;</operator><name>isReadOnly</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><call><name><name>buf</name><operator>-&gt;</operator><name>getLangType</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name>L_USER</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>UserLangContainer</name> <modifier>*</modifier></type> <name>userLangContainer</name> <init>= <expr><call><name><name>NppParameters</name><operator>::</operator><name>getInstance</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getULCFromName</name><argument_list>(<argument><expr><call><name><name>buf</name><operator>-&gt;</operator><name>getUserDefineLangName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><name>userLangContainer</name></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>

		<expr_stmt><expr><name>symbol</name> <operator>=</operator> <call><name>extractSymbol</name><argument_list>(<argument><expr><literal type="char">'0'</literal></expr></argument>, <argument><expr><literal type="char">'0'</literal></expr></argument>, <argument><expr><name><name>userLangContainer</name><operator>-&gt;</operator><name>_keywordLists</name><index>[<expr><name>SCE_USER_KWLIST_COMMENTS</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>commentLineSymbol</name> <operator>=</operator> <call><name><name>symbol</name><operator>.</operator><name>c_str</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>symbolStart</name> <operator>=</operator> <call><name>extractSymbol</name><argument_list>(<argument><expr><literal type="char">'0'</literal></expr></argument>, <argument><expr><literal type="char">'3'</literal></expr></argument>, <argument><expr><name><name>userLangContainer</name><operator>-&gt;</operator><name>_keywordLists</name><index>[<expr><name>SCE_USER_KWLIST_COMMENTS</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>commentStart</name> <operator>=</operator> <call><name><name>symbolStart</name><operator>.</operator><name>c_str</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>symbolEnd</name> <operator>=</operator> <call><name>extractSymbol</name><argument_list>(<argument><expr><literal type="char">'0'</literal></expr></argument>, <argument><expr><literal type="char">'4'</literal></expr></argument>, <argument><expr><name><name>userLangContainer</name><operator>-&gt;</operator><name>_keywordLists</name><index>[<expr><name>SCE_USER_KWLIST_COMMENTS</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>commentEnd</name> <operator>=</operator> <call><name><name>symbolEnd</name><operator>.</operator><name>c_str</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<expr_stmt><expr><name>commentLineSymbol</name> <operator>=</operator> <call><name><name>buf</name><operator>-&gt;</operator><name>getCommentLineSymbol</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>commentStart</name> <operator>=</operator> <call><name><name>buf</name><operator>-&gt;</operator><name>getCommentStart</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>commentEnd</name> <operator>=</operator> <call><name><name>buf</name><operator>-&gt;</operator><name>getCommentEnd</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>


	<comment type="line">// BlockToStreamComment: If there is no stream-comment symbol and we came not from doBlockComment, try the block comment:</comment>
	<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>!</operator><name>commentStart</name><operator>)</operator> <operator>||</operator> <operator>(</operator><operator>!</operator><name><name>commentStart</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>commentStart</name> <operator>==</operator> <name>NULL</name><operator>)</operator> <operator>||</operator> <operator>(</operator><operator>!</operator><name>commentEnd</name><operator>)</operator> <operator>||</operator> <operator>(</operator><operator>!</operator><name><name>commentEnd</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>commentEnd</name> <operator>==</operator> <name>NULL</name><operator>)</operator></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><operator>!</operator><name>commentLineSymbol</name> <operator>||</operator> <operator>!</operator><name><name>commentLineSymbol</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>||</operator> <name>commentLineSymbol</name> <operator>==</operator> <name>NULL</name><operator>)</operator> <operator>&amp;&amp;</operator> <name>tryBlockComment</name></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><call><name>doBlockComment</name><argument_list>(<argument><expr><name>cm_uncomment</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>
		<else>else<block type="pseudo"><block_content>
			<return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></else></if_stmt>
	</block_content>}</block></if></if_stmt>

	<decl_stmt><decl><type><name>generic_string</name></type> <name>start_comment</name><argument_list>(<argument><expr><name>commentStart</name></expr></argument>)</argument_list></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>generic_string</name></type> <name>end_comment</name><argument_list>(<argument><expr><name>commentEnd</name></expr></argument>)</argument_list></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>generic_string</name></type> <name>white_space</name><argument_list>(<argument><expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">" "</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>start_comment_length</name> <init>= <expr><call><name><name>start_comment</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>end_comment_length</name> <init>= <expr><call><name><name>end_comment</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name><name>_pEditView</name><operator>-&gt;</operator><name>execute</name></name><argument_list>(<argument><expr><name>SCI_BEGINUNDOACTION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// do as long as stream-comments are within selection</comment>
	<do>do
	<block>{<block_content>
		<decl_stmt><decl><type><name>auto</name></type> <name>selectionStart</name> <init>= <expr><call><name><name>_pEditView</name><operator>-&gt;</operator><name>execute</name></name><argument_list>(<argument><expr><name>SCI_GETSELECTIONSTART</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>auto</name></type> <name>selectionEnd</name> <init>= <expr><call><name><name>_pEditView</name><operator>-&gt;</operator><name>execute</name></name><argument_list>(<argument><expr><name>SCI_GETSELECTIONEND</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>auto</name></type> <name>caretPosition</name> <init>= <expr><call><name><name>_pEditView</name><operator>-&gt;</operator><name>execute</name></name><argument_list>(<argument><expr><name>SCI_GETCURRENTPOS</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>auto</name></type> <name>docLength</name> <init>= <expr><call><name><name>_pEditView</name><operator>-&gt;</operator><name>execute</name></name><argument_list>(<argument><expr><name>SCI_GETLENGTH</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<comment type="line">// checking if caret is located in _beginning_ of selected block</comment>
		<decl_stmt><decl><type><name>bool</name></type> <name>move_caret</name> <init>= <expr><name>caretPosition</name> <operator>&lt;</operator> <name>selectionEnd</name></expr></init></decl>;</decl_stmt>

		<comment type="line">//-- Note: The caretPosition is either at selectionEnd or at selectionStart!! selectionStart is always before (smaller) than selectionEnd!!</comment>

		<comment type="line">//-- First, search all start_comment and end_comment before and after the selectionStart and selectionEnd position.</comment>
		<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>iSelStart</name><init>=<expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>iSelEnd</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>N_CMNT</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>intptr_t</name></type> <name><name>posStartCommentBefore</name><index>[<expr><name>N_CMNT</name></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>posEndCommentBefore</name><index>[<expr><name>N_CMNT</name></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>posStartCommentAfter</name><index>[<expr><name>N_CMNT</name></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>posEndCommentAfter</name><index>[<expr><name>N_CMNT</name></expr>]</index></name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>bool</name></type> <name><name>blnStartCommentBefore</name><index>[<expr><name>N_CMNT</name></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>blnEndCommentBefore</name><index>[<expr><name>N_CMNT</name></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>blnStartCommentAfter</name><index>[<expr><name>N_CMNT</name></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>blnEndCommentAfter</name><index>[<expr><name>N_CMNT</name></expr>]</index></name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>intptr_t</name></type> <name>posStartComment</name></decl>, <decl><type ref="prev"/><name>posEndComment</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>intptr_t</name></type> <name>selectionStartMove</name></decl>, <decl><type ref="prev"/><name>selectionEndMove</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>flags</name></decl>;</decl_stmt>

		<comment type="line">//-- Directly use Scintilla-Functions</comment>
		<comment type="line">//   rather than _findReplaceDlg.processFindNext()which does not return the find-position and is not quiet!</comment>
		<expr_stmt><expr><name>flags</name> <operator>=</operator> <name>SCFIND_WORDSTART</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>_pEditView</name><operator>-&gt;</operator><name>execute</name></name><argument_list>(<argument><expr><name>SCI_SETSEARCHFLAGS</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="line">//-- Find all start- and end-comments before and after the selectionStart position.</comment>
		<comment type="line">//-- When searching upwards the start-position for searching must be moved one after the current position</comment>
		<comment type="line">//   to find a search-string just starting before the current position!</comment>
		<comment type="line">//-- Direction DIR_UP ---</comment>
		<expr_stmt><expr><name><name>posStartCommentBefore</name><index>[<expr><name>iSelStart</name></expr>]</index></name> <operator>=</operator> <call><name><name>_pEditView</name><operator>-&gt;</operator><name>searchInTarget</name></name><argument_list>(<argument><expr><call><name><name>start_comment</name><operator>.</operator><name>c_str</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>start_comment_length</name></expr></argument>, <argument><expr><name>selectionStart</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><operator>(</operator><ternary><condition><expr><name><name>posStartCommentBefore</name><index>[<expr><name>iSelStart</name></expr>]</index></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr> ?</condition><then> <expr><name><name>blnStartCommentBefore</name><index>[<expr><name>iSelStart</name></expr>]</index></name> <operator>=</operator> <literal type="boolean">false</literal></expr> </then><else>: <expr><name><name>blnStartCommentBefore</name><index>[<expr><name>iSelStart</name></expr>]</index></name> <operator>=</operator> <literal type="boolean">true</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>posEndCommentBefore</name><index>[<expr><name>iSelStart</name></expr>]</index></name> <operator>=</operator> <call><name><name>_pEditView</name><operator>-&gt;</operator><name>searchInTarget</name></name><argument_list>(<argument><expr><call><name><name>end_comment</name><operator>.</operator><name>c_str</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>end_comment_length</name></expr></argument>, <argument><expr><name>selectionStart</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><operator>(</operator><ternary><condition><expr><name><name>posEndCommentBefore</name><index>[<expr><name>iSelStart</name></expr>]</index></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr> ?</condition><then> <expr><name><name>blnEndCommentBefore</name><index>[<expr><name>iSelStart</name></expr>]</index></name> <operator>=</operator> <literal type="boolean">false</literal></expr> </then><else>: <expr><name><name>blnEndCommentBefore</name><index>[<expr><name>iSelStart</name></expr>]</index></name> <operator>=</operator> <literal type="boolean">true</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
		<comment type="line">//-- Direction DIR_DOWN ---</comment>
		<expr_stmt><expr><name><name>posStartCommentAfter</name><index>[<expr><name>iSelStart</name></expr>]</index></name> <operator>=</operator> <call><name><name>_pEditView</name><operator>-&gt;</operator><name>searchInTarget</name></name><argument_list>(<argument><expr><call><name><name>start_comment</name><operator>.</operator><name>c_str</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>start_comment_length</name></expr></argument>, <argument><expr><name>selectionStart</name></expr></argument>, <argument><expr><name>docLength</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><operator>(</operator><ternary><condition><expr><name><name>posStartCommentAfter</name><index>[<expr><name>iSelStart</name></expr>]</index></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr> ?</condition><then> <expr><name><name>blnStartCommentAfter</name><index>[<expr><name>iSelStart</name></expr>]</index></name> <operator>=</operator> <literal type="boolean">false</literal></expr> </then><else>: <expr><name><name>blnStartCommentAfter</name><index>[<expr><name>iSelStart</name></expr>]</index></name> <operator>=</operator> <literal type="boolean">true</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>posEndCommentAfter</name><index>[<expr><name>iSelStart</name></expr>]</index></name> <operator>=</operator> <call><name><name>_pEditView</name><operator>-&gt;</operator><name>searchInTarget</name></name><argument_list>(<argument><expr><call><name><name>end_comment</name><operator>.</operator><name>c_str</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>end_comment_length</name></expr></argument>, <argument><expr><name>selectionStart</name></expr></argument>, <argument><expr><name>docLength</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><operator>(</operator><ternary><condition><expr><name><name>posEndCommentAfter</name><index>[<expr><name>iSelStart</name></expr>]</index></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr> ?</condition><then> <expr><name><name>blnEndCommentAfter</name><index>[<expr><name>iSelStart</name></expr>]</index></name> <operator>=</operator> <literal type="boolean">false</literal></expr> </then><else>: <expr><name><name>blnEndCommentAfter</name><index>[<expr><name>iSelStart</name></expr>]</index></name> <operator>=</operator> <literal type="boolean">true</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>

		<comment type="line">//-- Check, if selectionStart or selectionEnd is within a stream comment -----</comment>
		<comment type="line">//   or if the selection includes a complete stream-comment!! ----------------</comment>

		<comment type="line">//-- First, check if there is a stream-comment around the selectionStart position:</comment>
		<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>blnStartCommentBefore</name><index>[<expr><name>iSelStart</name></expr>]</index></name> <operator>&amp;&amp;</operator> <name><name>blnEndCommentAfter</name><index>[<expr><name>iSelStart</name></expr>]</index></name><operator>)</operator>
			<operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><name><name>blnEndCommentBefore</name><index>[<expr><name>iSelStart</name></expr>]</index></name> <operator>||</operator> <operator>(</operator><name><name>posStartCommentBefore</name><index>[<expr><name>iSelStart</name></expr>]</index></name> <operator>&gt;=</operator> <name><name>posEndCommentBefore</name><index>[<expr><name>iSelStart</name></expr>]</index></name><operator>)</operator><operator>)</operator>
			<operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><name><name>blnStartCommentAfter</name><index>[<expr><name>iSelStart</name></expr>]</index></name> <operator>||</operator> <operator>(</operator><name><name>posEndCommentAfter</name><index>[<expr><name>iSelStart</name></expr>]</index></name> <operator>&lt;=</operator> <name><name>posStartCommentAfter</name><index>[<expr><name>iSelStart</name></expr>]</index></name><operator>)</operator><operator>)</operator></expr>)</condition>
		<block>{<block_content>
				<expr_stmt><expr><name>posStartComment</name> <operator>=</operator> <name><name>posStartCommentBefore</name><index>[<expr><name>iSelStart</name></expr>]</index></name></expr>;</expr_stmt>
				<expr_stmt><expr><name>posEndComment</name>   <operator>=</operator> <name><name>posEndCommentAfter</name><index>[<expr><name>iSelStart</name></expr>]</index></name></expr>;</expr_stmt>
		</block_content>}</block></if>
		<else>else <comment type="line">//-- Second, check if there is a stream-comment around the selectionEnd position:</comment>
		<block>{<block_content>
			<comment type="line">//-- Find all start- and end-comments before and after the selectionEnd position.</comment>
			<comment type="line">//-- Direction DIR_UP ---</comment>
			<expr_stmt><expr><name><name>posStartCommentBefore</name><index>[<expr><name>iSelEnd</name></expr>]</index></name> <operator>=</operator> <call><name><name>_pEditView</name><operator>-&gt;</operator><name>searchInTarget</name></name><argument_list>(<argument><expr><call><name><name>start_comment</name><operator>.</operator><name>c_str</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>start_comment_length</name></expr></argument>, <argument><expr><name>selectionEnd</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><operator>(</operator><ternary><condition><expr><name><name>posStartCommentBefore</name><index>[<expr><name>iSelEnd</name></expr>]</index></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr> ?</condition><then> <expr><name><name>blnStartCommentBefore</name><index>[<expr><name>iSelEnd</name></expr>]</index></name> <operator>=</operator> <literal type="boolean">false</literal></expr> </then><else>: <expr><name><name>blnStartCommentBefore</name><index>[<expr><name>iSelEnd</name></expr>]</index></name> <operator>=</operator> <literal type="boolean">true</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>posEndCommentBefore</name><index>[<expr><name>iSelEnd</name></expr>]</index></name> <operator>=</operator> <call><name><name>_pEditView</name><operator>-&gt;</operator><name>searchInTarget</name></name><argument_list>(<argument><expr><call><name><name>end_comment</name><operator>.</operator><name>c_str</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>end_comment_length</name></expr></argument>, <argument><expr><name>selectionEnd</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><operator>(</operator><ternary><condition><expr><name><name>posEndCommentBefore</name><index>[<expr><name>iSelEnd</name></expr>]</index></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr> ?</condition><then> <expr><name><name>blnEndCommentBefore</name><index>[<expr><name>iSelEnd</name></expr>]</index></name> <operator>=</operator> <literal type="boolean">false</literal></expr> </then><else>: <expr><name><name>blnEndCommentBefore</name><index>[<expr><name>iSelEnd</name></expr>]</index></name> <operator>=</operator> <literal type="boolean">true</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
			<comment type="line">//-- Direction DIR_DOWN ---</comment>
			<expr_stmt><expr><name><name>posStartCommentAfter</name><index>[<expr><name>iSelEnd</name></expr>]</index></name> <operator>=</operator> <call><name><name>_pEditView</name><operator>-&gt;</operator><name>searchInTarget</name></name><argument_list>(<argument><expr><call><name><name>start_comment</name><operator>.</operator><name>c_str</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>start_comment_length</name></expr></argument>, <argument><expr><name>selectionEnd</name></expr></argument>, <argument><expr><name>docLength</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><operator>(</operator><ternary><condition><expr><name><name>posStartCommentAfter</name><index>[<expr><name>iSelEnd</name></expr>]</index></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr> ?</condition><then> <expr><name><name>blnStartCommentAfter</name><index>[<expr><name>iSelEnd</name></expr>]</index></name> <operator>=</operator> <literal type="boolean">false</literal></expr> </then><else>: <expr><name><name>blnStartCommentAfter</name><index>[<expr><name>iSelEnd</name></expr>]</index></name> <operator>=</operator> <literal type="boolean">true</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>posEndCommentAfter</name><index>[<expr><name>iSelEnd</name></expr>]</index></name> <operator>=</operator> <call><name><name>_pEditView</name><operator>-&gt;</operator><name>searchInTarget</name></name><argument_list>(<argument><expr><call><name><name>end_comment</name><operator>.</operator><name>c_str</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>end_comment_length</name></expr></argument>, <argument><expr><name>selectionEnd</name></expr></argument>, <argument><expr><name>docLength</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><operator>(</operator><ternary><condition><expr><name><name>posEndCommentAfter</name><index>[<expr><name>iSelEnd</name></expr>]</index></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr> ?</condition><then> <expr><name><name>blnEndCommentAfter</name><index>[<expr><name>iSelEnd</name></expr>]</index></name> <operator>=</operator> <literal type="boolean">false</literal></expr> </then><else>: <expr><name><name>blnEndCommentAfter</name><index>[<expr><name>iSelEnd</name></expr>]</index></name> <operator>=</operator> <literal type="boolean">true</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>

			<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>blnStartCommentBefore</name><index>[<expr><name>iSelEnd</name></expr>]</index></name> <operator>&amp;&amp;</operator> <name><name>blnEndCommentAfter</name><index>[<expr><name>iSelEnd</name></expr>]</index></name><operator>)</operator>
				<operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><name><name>blnEndCommentBefore</name><index>[<expr><name>iSelEnd</name></expr>]</index></name> <operator>||</operator> <operator>(</operator><name><name>posStartCommentBefore</name><index>[<expr><name>iSelEnd</name></expr>]</index></name> <operator>&gt;=</operator> <name><name>posEndCommentBefore</name><index>[<expr><name>iSelEnd</name></expr>]</index></name><operator>)</operator><operator>)</operator>
				<operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><name><name>blnStartCommentAfter</name><index>[<expr><name>iSelEnd</name></expr>]</index></name> <operator>||</operator> <operator>(</operator><name><name>posEndCommentAfter</name><index>[<expr><name>iSelEnd</name></expr>]</index></name> <operator>&lt;=</operator> <name><name>posStartCommentAfter</name><index>[<expr><name>iSelEnd</name></expr>]</index></name><operator>)</operator><operator>)</operator></expr>)</condition>
			<block>{<block_content>
					<expr_stmt><expr><name>posStartComment</name> <operator>=</operator> <name><name>posStartCommentBefore</name><index>[<expr><name>iSelEnd</name></expr>]</index></name></expr>;</expr_stmt>
					<expr_stmt><expr><name>posEndComment</name>   <operator>=</operator> <name><name>posEndCommentAfter</name><index>[<expr><name>iSelEnd</name></expr>]</index></name></expr>;</expr_stmt>
			</block_content>}</block></if>
			<comment type="line">//-- Third, check if there is a stream-comment within the selected area:</comment>
			<if type="elseif">else if <condition>( <expr><operator>(</operator><name><name>blnStartCommentAfter</name><index>[<expr><name>iSelStart</name></expr>]</index></name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>posStartCommentAfter</name><index>[<expr><name>iSelStart</name></expr>]</index></name> <operator>&lt;</operator> <name>selectionEnd</name><operator>)</operator><operator>)</operator>
				<operator>&amp;&amp;</operator> <operator>(</operator><name><name>blnEndCommentBefore</name><index>[<expr><name>iSelEnd</name></expr>]</index></name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>posEndCommentBefore</name><index>[<expr><name>iSelEnd</name></expr>]</index></name> <operator>&gt;</operator>  <name>selectionStart</name><operator>)</operator><operator>)</operator></expr>)</condition>
			<block>{<block_content>
					<comment type="line">//-- If there are more than one stream-comment within the selection, take the first one after selectionStart!!</comment>
					<expr_stmt><expr><name>posStartComment</name> <operator>=</operator> <name><name>posStartCommentAfter</name><index>[<expr><name>iSelStart</name></expr>]</index></name></expr>;</expr_stmt>
					<expr_stmt><expr><name>posEndComment</name>   <operator>=</operator> <name><name>posEndCommentAfter</name><index>[<expr><name>iSelStart</name></expr>]</index></name></expr>;</expr_stmt>
			</block_content>}</block></if>
			<comment type="line">//-- Finally, if there is no stream-comment, return</comment>
			<else>else
			<block>{<block_content>
				<expr_stmt><expr><call><name><name>_pEditView</name><operator>-&gt;</operator><name>execute</name></name><argument_list>(<argument><expr><name>SCI_ENDUNDOACTION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<return>return <expr><name>retVal</name></expr>;</return>
			</block_content>}</block></else></if_stmt>
		</block_content>}</block></else></if_stmt>

		<comment type="line">//-- Ok, there are valid start-comment and valid end-comment around the caret-position.</comment>
		<comment type="line">//   Now, un-comment stream-comment:</comment>
		<expr_stmt><expr><name>retVal</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
		<decl_stmt><decl><type><name>intptr_t</name></type> <name>startCommentLength</name> <init>= <expr><name>start_comment_length</name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>intptr_t</name></type> <name>endCommentLength</name> <init>= <expr><name>end_comment_length</name></expr></init></decl>;</decl_stmt>

		<comment type="line">//-- First delete end-comment, so that posStartCommentBefore does not change!</comment>
		<comment type="line">//-- Get character before end-comment to decide, if there is a white character before the end-comment, which will be removed too!</comment>
		<expr_stmt><expr><call><name><name>_pEditView</name><operator>-&gt;</operator><name>getGenericText</name></name><argument_list>(<argument><expr><name>charbuf</name></expr></argument>, <argument><expr><name>charbufLen</name></expr></argument>, <argument><expr><name>posEndComment</name><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>posEndComment</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><call><name>wcsncmp</name><argument_list>(<argument><expr><name>charbuf</name></expr></argument>, <argument><expr><call><name><name>white_space</name><operator>.</operator><name>c_str</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>white_space</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name>endCommentLength</name> <operator>+=</operator><literal type="number">1</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name>posEndComment</name><operator>-=</operator><literal type="number">1</literal></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<comment type="line">//-- Delete end stream-comment string ---------</comment>
		<expr_stmt><expr><call><name><name>_pEditView</name><operator>-&gt;</operator><name>execute</name></name><argument_list>(<argument><expr><name>SCI_BEGINUNDOACTION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>_pEditView</name><operator>-&gt;</operator><name>execute</name></name><argument_list>(<argument><expr><name>SCI_SETSEL</name></expr></argument>, <argument><expr><name>posEndComment</name></expr></argument>, <argument><expr><name>posEndComment</name> <operator>+</operator> <name>endCommentLength</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>_pEditView</name><operator>-&gt;</operator><name>execute</name></name><argument_list>(<argument><expr><name>SCI_REPLACESEL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><cast type="reinterpret">reinterpret_cast<argument_list type="generic">&lt;<argument><expr><name>LPARAM</name></expr></argument>&gt;</argument_list><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></cast></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="line">//-- Get character after start-comment to decide, if there is a white character after the start-comment, which will be removed too!</comment>
		<expr_stmt><expr><call><name><name>_pEditView</name><operator>-&gt;</operator><name>getGenericText</name></name><argument_list>(<argument><expr><name>charbuf</name></expr></argument>, <argument><expr><name>charbufLen</name></expr></argument>, <argument><expr><name>posStartComment</name><operator>+</operator><name>startCommentLength</name></expr></argument>, <argument><expr><name>posStartComment</name><operator>+</operator><name>startCommentLength</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><call><name>wcsncmp</name><argument_list>(<argument><expr><name>charbuf</name></expr></argument>, <argument><expr><call><name><name>white_space</name><operator>.</operator><name>c_str</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>white_space</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>startCommentLength</name> <operator>+=</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<comment type="line">//-- Delete starting stream-comment string ---------</comment>
		<expr_stmt><expr><call><name><name>_pEditView</name><operator>-&gt;</operator><name>execute</name></name><argument_list>(<argument><expr><name>SCI_SETSEL</name></expr></argument>, <argument><expr><name>posStartComment</name></expr></argument>, <argument><expr><name>posStartComment</name> <operator>+</operator> <name>startCommentLength</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>_pEditView</name><operator>-&gt;</operator><name>execute</name></name><argument_list>(<argument><expr><name>SCI_REPLACESEL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><cast type="reinterpret">reinterpret_cast<argument_list type="generic">&lt;<argument><expr><name>LPARAM</name></expr></argument>&gt;</argument_list><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></cast></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>_pEditView</name><operator>-&gt;</operator><name>execute</name></name><argument_list>(<argument><expr><name>SCI_ENDUNDOACTION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="line">//-- Reset selection before calling the routine</comment>
		<comment type="line">//-- Determine selection movement</comment>
		<comment type="line">//   selectionStart</comment>
		<if_stmt><if>if <condition>(<expr><name>selectionStart</name> <operator>&gt;</operator> <name>posStartComment</name></expr>)</condition>
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name>selectionStart</name> <operator>&gt;=</operator> <name>posStartComment</name><operator>+</operator><name>startCommentLength</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name>selectionStartMove</name> <operator>=</operator> <operator>-</operator><name>startCommentLength</name></expr>;</expr_stmt></block_content></block></if>
			<else>else<block type="pseudo"><block_content>
				<expr_stmt><expr><name>selectionStartMove</name> <operator>=</operator> <operator>-</operator><name>selectionStart</name> <operator>-</operator> <name>posStartComment</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
		</block_content>}</block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><name>selectionStartMove</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

		<comment type="line">//   selectionEnd</comment>
		<if_stmt><if>if <condition>(<expr><name>selectionEnd</name> <operator>&gt;=</operator> <name>posEndComment</name><operator>+</operator><name>endCommentLength</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>selectionEndMove</name> <operator>=</operator> <operator>-</operator><name>startCommentLength</name><operator>+</operator><name>endCommentLength</name></expr>;</expr_stmt></block_content></block></if>
		<if type="elseif">else if <condition>(<expr><name>selectionEnd</name> <operator>&lt;=</operator> <name>posEndComment</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>selectionEndMove</name> <operator>=</operator> <operator>-</operator><name>startCommentLength</name></expr>;</expr_stmt></block_content></block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><name>selectionEndMove</name> <operator>=</operator> <operator>-</operator><name>startCommentLength</name> <operator>+</operator> <operator>(</operator><name>selectionEnd</name> <operator>-</operator> <name>posEndComment</name><operator>)</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>

		<comment type="line">//-- Reset selection of text without deleted stream-comment-string</comment>
		<if_stmt><if>if <condition>(<expr><name>move_caret</name></expr>)</condition>
		<block>{<block_content>
			<comment type="line">// moving caret to the beginning of selected block</comment>
			<expr_stmt><expr><call><name><name>_pEditView</name><operator>-&gt;</operator><name>execute</name></name><argument_list>(<argument><expr><name>SCI_GOTOPOS</name></expr></argument>, <argument><expr><name>selectionEnd</name><operator>+</operator><name>selectionEndMove</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>_pEditView</name><operator>-&gt;</operator><name>execute</name></name><argument_list>(<argument><expr><name>SCI_SETCURRENTPOS</name></expr></argument>, <argument><expr><name>selectionStart</name><operator>+</operator><name>selectionStartMove</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if>
		<else>else
		<block>{<block_content>
			<expr_stmt><expr><call><name><name>_pEditView</name><operator>-&gt;</operator><name>execute</name></name><argument_list>(<argument><expr><name>SCI_SETSEL</name></expr></argument>, <argument><expr><name>selectionStart</name><operator>+</operator><name>selectionStartMove</name></expr></argument>, <argument><expr><name>selectionEnd</name><operator>+</operator><name>selectionEndMove</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block>
	while <condition>(<expr><literal type="number">1</literal></expr>)</condition>;</do> <comment type="line">//do as long as stream-comments are within selection</comment>

</block_content>}</block></function>

<function><type><name>void</name></type> <name><name>Notepad_plus</name><operator>::</operator><name>monitoringStartOrStopAndUpdateUI</name></name><parameter_list>(<parameter><decl><type><name>Buffer</name><modifier>*</modifier></type> <name>pBuf</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>isStarting</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>pBuf</name></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>isStarting</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name><name>pBuf</name><operator>-&gt;</operator><name>startMonitoring</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><call><name><name>pBuf</name><operator>-&gt;</operator><name>stopMonitoring</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

		<expr_stmt><expr><call><name>checkMenuItem</name><argument_list>(<argument><expr><name>IDM_VIEW_MONITORING</name></expr></argument>, <argument><expr><name>isStarting</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>_toolBar</name><operator>.</operator><name>setCheck</name></name><argument_list>(<argument><expr><name>IDM_VIEW_MONITORING</name></expr></argument>, <argument><expr><name>isStarting</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>pBuf</name><operator>-&gt;</operator><name>setUserReadOnly</name></name><argument_list>(<argument><expr><name>isStarting</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name><name>Notepad_plus</name><operator>::</operator><name>createMonitoringThread</name></name><parameter_list>(<parameter><decl><type><name>Buffer</name><modifier>*</modifier></type> <name>pBuf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>MonitorInfo</name> <modifier>*</modifier></type><name>monitorInfo</name> <init>= <expr><operator>new</operator> <call><name><name>Notepad_plus</name><operator>::</operator><name>MonitorInfo</name></name><argument_list>(<argument><expr><name>pBuf</name></expr></argument>, <argument><expr><call><name><name>_pPublicInterface</name><operator>-&gt;</operator><name>getHSelf</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>HANDLE</name></type> <name>hThread</name> <init>= <expr><call><name><operator>::</operator><name>CreateThread</name></name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>monitorFileOnChange</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>monitorInfo</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="line">// will be deallocated while quitting thread</comment>
	<if_stmt><if>if <condition>(<expr><name>hThread</name> <operator>!=</operator> <literal type="null">nullptr</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name><operator>::</operator><name>CloseHandle</name></name><argument_list>(<argument><expr><name>hThread</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<comment type="line">// Fill names into the shortcut list.</comment>
<comment type="line">// Each command shortcut has two names:</comment>
<comment type="line">// - The menu name, to be displayed in the menu</comment>
<comment type="line">// - The shortcut name, to be displayed in the shortcut list</comment>
<comment type="line">//</comment>
<comment type="line">// The names are filled in with the following priorities:</comment>
<comment type="line">// * Menu name</comment>
<comment type="line">//   1. From xml Menu/Main/Commands section</comment>
<comment type="line">//   2. From menu resource in Notepad_plus.rc</comment>
<comment type="line">//   3. From winKeyDefs[] table in Parameter.cpp</comment>
<comment type="line">//   We don't use xml ShortCutMapper/MainCommandNames here</comment>
<comment type="line">//</comment>
<comment type="line">// * Shortcut name</comment>
<comment type="line">//   1. From xml ShortCutMapper/MainCommandNames section</comment>
<comment type="line">//   2. From xml file Menu/Main/Commands section</comment>
<comment type="line">//   3. From the winKeyDefs[] table in Parameter.cpp</comment>
<comment type="line">//   4. From the menu resource in Notepad_plus.rc</comment>

<function><type><name>void</name></type> <name><name>Notepad_plus</name><operator>::</operator><name>updateCommandShortcuts</name></name><parameter_list>()</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>NppParameters</name><modifier>&amp;</modifier></type> <name>nppParam</name> <init>= <expr><call><name><name>NppParameters</name><operator>::</operator><name>getInstance</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>CommandShortcut</name></expr></argument>&gt;</argument_list></name> <modifier>&amp;</modifier></type> <name>shortcuts</name> <init>= <expr><call><name><name>nppParam</name><operator>.</operator><name>getUserShortcuts</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>len</name> <init>= <expr><call><name><name>shortcuts</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

	<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
	<block>{<block_content>
		<decl_stmt><decl><type><name>CommandShortcut</name> <modifier>&amp;</modifier></type> <name>csc</name> <init>= <expr><name><name>shortcuts</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>id</name> <init>= <expr><call><name><name>csc</name><operator>.</operator><name>getID</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>generic_string</name></type> <name>localizedMenuName</name> <init>= <expr><call><name><name>_nativeLangSpeaker</name><operator>.</operator><name>getNativeLangMenuString</name></name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>generic_string</name></type> <name>menuName</name> <init>= <expr><name>localizedMenuName</name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>generic_string</name></type> <name>shortcutName</name> <init>= <expr><call><name><name>_nativeLangSpeaker</name><operator>.</operator><name>getShortcutNameString</name></name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><call><name><name>menuName</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
		<block>{<block_content>
			<decl_stmt><decl><type><name>TCHAR</name></type> <name><name>szMenuName</name><index>[<expr><name>menuItemStrLenMax</name></expr>]</index></name></decl>;</decl_stmt>
			<if_stmt><if>if <condition>(<expr><call><name><operator>::</operator><name>GetMenuString</name></name><argument_list>(<argument><expr><name>_mainMenuHandle</name></expr></argument>, <argument><expr><call><name><name>csc</name><operator>.</operator><name>getID</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>szMenuName</name></expr></argument>, <argument><expr><name>menuItemStrLenMax</name></expr></argument>, <argument><expr><name>MF_BYCOMMAND</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name>menuName</name> <operator>=</operator> <call><name>purgeMenuItemString</name><argument_list>(<argument><expr><name>szMenuName</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
			<else>else<block type="pseudo"><block_content>
				<expr_stmt><expr><name>menuName</name> <operator>=</operator> <call><name><name>csc</name><operator>.</operator><name>getShortcutName</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
		</block_content>}</block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><call><name><name>shortcutName</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><call><name><name>localizedMenuName</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name>shortcutName</name> <operator>=</operator> <name>localizedMenuName</name></expr>;</expr_stmt></block_content></block></if>
			<if type="elseif">else if <condition>(<expr><call><name><name>csc</name><operator>.</operator><name>getShortcutName</name></name><argument_list>()</argument_list></call><index>[<expr><literal type="number">0</literal></expr>]</index></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name>shortcutName</name> <operator>=</operator> <call><name><name>csc</name><operator>.</operator><name>getShortcutName</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if>
			<else>else<block type="pseudo"><block_content>
				<expr_stmt><expr><name>shortcutName</name> <operator>=</operator> <name>menuName</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><call><name><name>csc</name><operator>.</operator><name>setName</name></name><argument_list>(<argument><expr><call><name>wstring2string</name><argument_list>(<argument><expr><name>menuName</name></expr></argument>, <argument><expr><name>CP_UTF8</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>c_str</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>wstring2string</name><argument_list>(<argument><expr><name>shortcutName</name></expr></argument>, <argument><expr><name>CP_UTF8</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>c_str</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>
</block_content>}</block></function>

<function><type><name>HBITMAP</name></type> <name><name>Notepad_plus</name><operator>::</operator><name>generateSolidColourMenuItemIcon</name></name><parameter_list>(<parameter><decl><type><name>COLORREF</name></type> <name>colour</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>HDC</name></type> <name>hDC</name> <init>= <expr><call><name>GetDC</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>bitmapXYsize</name> <init>= <expr><literal type="number">16</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>HBITMAP</name></type> <name>hNewBitmap</name> <init>= <expr><call><name>CreateCompatibleBitmap</name><argument_list>(<argument><expr><name>hDC</name></expr></argument>, <argument><expr><name>bitmapXYsize</name></expr></argument>, <argument><expr><name>bitmapXYsize</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>HDC</name></type> <name>hDCn</name> <init>= <expr><call><name>CreateCompatibleDC</name><argument_list>(<argument><expr><name>hDC</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>HBITMAP</name></type> <name>hOldBitmap</name> <init>= <expr><cast type="static">static_cast<argument_list type="generic">&lt;<argument><expr><name>HBITMAP</name></expr></argument>&gt;</argument_list><argument_list>(<argument><expr><call><name>SelectObject</name><argument_list>(<argument><expr><name>hDCn</name></expr></argument>, <argument><expr><name>hNewBitmap</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></cast></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>RECT</name></type> <name>rc</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>bitmapXYsize</name></expr>, <expr><name>bitmapXYsize</name></expr> }</block></expr></init></decl>;</decl_stmt>

	<comment type="line">// paint full-size black square</comment>
	<decl_stmt><decl><type><name>HBRUSH</name></type> <name>hBlackBrush</name> <init>= <expr><call><name>CreateSolidBrush</name><argument_list>(<argument><expr><call><name>RGB</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>FillRect</name><argument_list>(<argument><expr><name>hDCn</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rc</name></expr></argument>, <argument><expr><name>hBlackBrush</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>DeleteObject</name><argument_list>(<argument><expr><name>hBlackBrush</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// overpaint a slightly smaller colored square</comment>
	<expr_stmt><expr><name><name>rc</name><operator>.</operator><name>left</name></name> <operator>=</operator> <name><name>rc</name><operator>.</operator><name>top</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>rc</name><operator>.</operator><name>right</name></name> <operator>=</operator> <name><name>rc</name><operator>.</operator><name>bottom</name></name> <operator>=</operator> <name>bitmapXYsize</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>HBRUSH</name></type> <name>hColorBrush</name> <init>= <expr><call><name>CreateSolidBrush</name><argument_list>(<argument><expr><name>colour</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>FillRect</name><argument_list>(<argument><expr><name>hDCn</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rc</name></expr></argument>, <argument><expr><name>hColorBrush</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>DeleteObject</name><argument_list>(<argument><expr><name>hColorBrush</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// restore old bitmap so we can delete it to avoid leak</comment>
	<expr_stmt><expr><call><name>SelectObject</name><argument_list>(<argument><expr><name>hDCn</name></expr></argument>, <argument><expr><name>hOldBitmap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>DeleteDC</name><argument_list>(<argument><expr><name>hDCn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>hNewBitmap</name></expr>;</return>
</block_content>}</block></function>
</unit>

</unit>
