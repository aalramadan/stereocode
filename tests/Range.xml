<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0">

<unit xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C++" filename="Range.hpp" hash="511a2614cb946425c6ff33fd9b3e5070c4eb2045"><comment type="block">/* -*- mode: c++ -*- */</comment>

<comment type="block" format="doxygen">/** @file

Range class interface

Copyright (C) 2000-2004   The Board of Trustees of The Leland
Stanford Junior University.  All Rights Reserved.

$Id: Range.h,v 1.47 2004/05/23 23:34:01 pfkeb Exp $

*/</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>_RANGE_H_</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_RANGE_H_</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pattern/libhippo.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iosfwd&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cfloat&gt;</cpp:file></cpp:include> <comment type="line">// for DBL_MAX</comment>

<comment type="block" format="doxygen">/** Expresses a range of values.

    @author Stephane Bonneaud &lt;gandalf@slac.stanford.edu&gt;
    @author Paul F. Kunz &lt;Paul_Kunz@slac.stanford.edu&gt;
    @author Sanket Malde &lt;sanket@stanford.edu&gt;
    @author Oded Wurman &lt;owurman@stanford.edu&gt;
*/</comment>

<class>class <macro><name>MDL_HIPPOPLOT_API</name></macro> <name>Range</name> <block>{<private type="default">

</private><private>private:

  <comment type="block" format="doxygen">/** The minimum in the range. 
   */</comment>
  <decl_stmt><decl><type><name>double</name></type> <name>m_min</name></decl>;</decl_stmt>

  <comment type="block" format="doxygen">/** The maximum in the range. 
   */</comment>
  <decl_stmt><decl><type><name>double</name></type> <name>m_max</name></decl>;</decl_stmt>

  <comment type="block" format="doxygen">/** The minimum positive value in the range, for log scale.
   */</comment>
  <decl_stmt><decl><type><name>double</name></type> <name>m_pos</name></decl>;</decl_stmt>

  <comment type="block" format="doxygen">/** A flag indicating that the range is empty.  An empty range is
      one that has not yet been set to a value.
  */</comment>
  <decl_stmt><decl><type><name>bool</name></type> <name>m_empty</name></decl>;</decl_stmt>
  
 </private><public>public:

  <comment type="block" format="doxygen">/** The following constructors sets the range to {0.0, 0.0} but sets
      m_empty to true.
  */</comment>
  <constructor_decl><name>Range</name> <parameter_list>( )</parameter_list>;</constructor_decl>

  <comment type="block" format="doxygen">/** A constructor that sets the range to {x, y}, with a pos
      argument of p if it is supplied, otherwise DBL_MAX. 
  */</comment>
  <constructor_decl><name>Range</name> <parameter_list>( <parameter><decl><type><name>double</name></type> <name>x</name></decl></parameter>,
	  <parameter><decl><type><name>double</name></type> <name>y</name></decl></parameter>,
	  <parameter><decl><type><name>double</name></type> <name>p</name> <init>= <expr><name>DBL_MAX</name></expr></init></decl></parameter> )</parameter_list>;</constructor_decl>

  <comment type="block" format="doxygen">/** A constructor taking its range from the range of data in the
      vector @a array. 
  */</comment>
  <constructor_decl><name>Range</name> <parameter_list>( <parameter><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>vector</name> <argument_list type="generic">&lt; <argument><expr><name>double</name></expr></argument> &gt;</argument_list></name> <modifier>&amp;</modifier></type> <name>array</name></decl></parameter> )</parameter_list>;</constructor_decl>

  <comment type="block" format="doxygen">/** Returns the minimum of the range object.
   */</comment>
  <function_decl><type><name>double</name></type> <name>low</name><parameter_list>()</parameter_list> <specifier>const</specifier>;</function_decl>

  <comment type="block" format="doxygen">/** Sets the minimum of the range object.
   */</comment>
  <function_decl><type><name>void</name></type> <name>setLow</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>x</name></decl></parameter>)</parameter_list>;</function_decl>

  <comment type="block" format="doxygen">/** Returns the maximum of the range object.
   */</comment>
  <function_decl><type><name>double</name></type> <name>high</name><parameter_list>()</parameter_list> <specifier>const</specifier>;</function_decl>

  <comment type="block" format="doxygen">/** Sets the maximum of the range object.
   */</comment>
  <function_decl><type><name>void</name></type> <name>setHigh</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>x</name></decl></parameter>)</parameter_list>;</function_decl>

  <comment type="block" format="doxygen">/** Returns the first positive element in range.
   */</comment>
  <function_decl><type><name>double</name></type> <name>pos</name><parameter_list>()</parameter_list> <specifier>const</specifier>;</function_decl>

  <comment type="block" format="doxygen">/** Sets the first positive element in range.
   */</comment>
  <function_decl><type><name>void</name></type> <name>setPos</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>x</name></decl></parameter>)</parameter_list>;</function_decl>

  <comment type="block" format="doxygen">/** Changes the current Range.
   */</comment>
  <function_decl><type><name>void</name></type> <name>setRange</name> <parameter_list>( <parameter><decl><type><name>double</name></type> <name>low</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>high</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>pos</name></decl></parameter> )</parameter_list>;</function_decl>

  <comment type="block" format="doxygen">/** Sets the range from the data sequence. 
   */</comment>
  <function_decl><template>template <parameter_list>&lt; <parameter><type><name>class</name></type> <name>Iterator</name></parameter> &gt;</parameter_list></template>
  <type><name>void</name></type> <name>setRange</name> <parameter_list>( <parameter><decl><type><name>Iterator</name></type> <name>first</name></decl></parameter>, <parameter><decl><type><name>Iterator</name></type> <name>end</name></decl></parameter> )</parameter_list>;</function_decl>

  <comment type="block" format="doxygen">/** Returns the length of the range object.
   */</comment>
  <function_decl><type><specifier>inline</specifier> <name>double</name></type> <name>length</name><parameter_list>()</parameter_list> <specifier>const</specifier>;</function_decl>

  <comment type="block" format="doxygen">/** Sets the length of the range.  The boolean high_hold determines
      which end is held fixed and which one is modified.
  */</comment>
  <function_decl><type><name>void</name></type> <name>setLength</name> <parameter_list>( <parameter><decl><type><name>double</name></type> <name>val</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>high_hold</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl></parameter> )</parameter_list>;</function_decl>
  
  <comment type="block" format="doxygen">/** Returns @c true if the argument value is inside the range. Returns
      @c true if the @a value is greater than or equal to the lower bound
      and less than or equal to the upper bound.
  */</comment>
  <function_decl><type><name>bool</name></type> <name>includes</name> <parameter_list>( <parameter><decl><type><name>double</name></type> <name>value</name></decl></parameter> )</parameter_list> <specifier>const</specifier>;</function_decl>

  <comment type="block" format="doxygen">/** Returns @c true if the argument value is outside the range. Returns
      @c true if the @a value is stricly less than the lower bound or
      strictly  greater than the upper bound.
  */</comment>
  <function_decl><type><name>bool</name></type> <name>excludes</name> <parameter_list>( <parameter><decl><type><name>double</name></type> <name>value</name></decl></parameter> )</parameter_list> <specifier>const</specifier>;</function_decl>

  <comment type="block" format="doxygen">/** Returns the fraction of the range that @a value represents. 
   */</comment>
  <function_decl><type><name>double</name></type> <name>fraction</name> <parameter_list>( <parameter><decl><type><name>double</name></type> <name>value</name></decl></parameter> )</parameter_list> <specifier>const</specifier>;</function_decl>

  <comment type="block" format="doxygen">/** Forms the intersect with the range in the argument.
   */</comment>
  <function_decl><type><name>void</name></type> <name>setIntersect</name> <parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>Range</name> <modifier>&amp;</modifier></type> <name>range</name></decl></parameter> )</parameter_list>;</function_decl>

  <comment type="block" format="doxygen">/** Forms the union with the range @a range.  The resulting range of
      the object extends from the lower range of the two objects to
      the upper range of the two. If the range was empty (@sa
      m_empty), then the result is the range @a range.
  */</comment>
  <function_decl><type><name>void</name></type> <name>setUnion</name> <parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>Range</name> <modifier>&amp;</modifier></type> <name>range</name></decl></parameter> )</parameter_list>;</function_decl>

  <comment type="block" format="doxygen">/** Sets the range to empty. @sa m_empty.
   */</comment>
  <function_decl><type><name>void</name></type> <name>setEmpty</name> <parameter_list>( <parameter><decl><type><name>bool</name></type> <name>yes</name> <init>= <expr><literal type="boolean">true</literal></expr></init></decl></parameter> )</parameter_list>;</function_decl>

  <comment type="block" format="doxygen">/** Returns the number of bins of width @c width required to fill
      the range.
  */</comment>
  <function_decl><type><name>int</name></type> <name>numberOfBins</name> <parameter_list>( <parameter><decl><type><name>double</name></type> <name>width</name></decl></parameter> )</parameter_list> <specifier>const</specifier>;</function_decl>

  <comment type="block" format="doxygen">/** Displays the state of the Range object.
   */</comment>
  <friend>friend <function_decl type="operator"><type><name><name>std</name><operator>::</operator><name>ostream</name></name> <modifier>&amp;</modifier></type> <name>operator <name>&lt;&lt;</name></name> <parameter_list>( <parameter><decl><type><name><name>std</name><operator>::</operator><name>ostream</name></name> <modifier>&amp;</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>Range</name> <modifier>&amp;</modifier></type></decl></parameter> )</parameter_list>;</function_decl></friend>

</public>}</block>;</class>

<function><type><specifier>inline</specifier>
<name>double</name></type>
<name><name>Range</name><operator>::</operator>
<name>length</name></name> <parameter_list>()</parameter_list> <specifier>const</specifier>
<block>{<block_content>
  <return>return <expr><operator>(</operator><name>m_max</name> <operator>-</operator> <name>m_min</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>


<function><template>template <parameter_list>&lt; <parameter><type><name>class</name></type> <name>Iterator</name></parameter> &gt;</parameter_list></template>
<type><name>void</name></type>
<name><name>Range</name><operator>::</operator>
<name>setRange</name></name> <parameter_list>( <parameter><decl><type><name>Iterator</name></type> <name>first</name></decl></parameter>, <parameter><decl><type><name>Iterator</name></type> <name>end</name></decl></parameter> )</parameter_list>
<block>{<block_content>
  <expr_stmt><expr><name>m_min</name> <operator>=</operator> <name>DBL_MAX</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>m_max</name> <operator>=</operator> <operator>-</operator><name>DBL_MAX</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>m_pos</name> <operator>=</operator> <name>DBL_MAX</name></expr>;</expr_stmt>

  <while>while <condition>( <expr><name>first</name> <operator>!=</operator> <name>end</name></expr> )</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>double</name></type> <name>test</name> <init>= <expr><operator>*</operator><name>first</name></expr></init></decl>;</decl_stmt> <comment type="line">// input might be pointer to float.</comment>
    <expr_stmt><expr><name>m_min</name> <operator>=</operator> <call><name><name>std</name><operator>::</operator><name>min</name></name> <argument_list>( <argument><expr><name>m_min</name></expr></argument>, <argument><expr><name>test</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>m_max</name> <operator>=</operator> <call><name><name>std</name><operator>::</operator><name>max</name></name> <argument_list>( <argument><expr><name>m_max</name></expr></argument>, <argument><expr><name>test</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>( <expr><name>test</name> <operator>&gt;</operator> <literal type="number">0.0</literal></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>m_pos</name> <operator>=</operator> <call><name><name>std</name><operator>::</operator><name>min</name></name> <argument_list>( <argument><expr><name>m_pos</name></expr></argument>, <argument><expr><name>test</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><operator>++</operator><name>first</name></expr>;</expr_stmt>
  </block_content>}</block></while>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="line">// _RANGE_H_</comment>
</unit>

<unit xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C++" filename="Range.cxx" hash="290b57266b92934ce6af87e4aa4970eb0188d00b"><comment type="block" format="doxygen">/** @file

Range class implementation

Copyright (C) 2000-2004   The Board of Trustees of The Leland
Stanford Junior University.  All Rights Reserved.

$Id: Range.cxx,v 1.51 2004/05/23 23:34:01 pfkeb Exp $

*/</comment>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>_MSC_VER</name></cpp:ifdef>
<comment type="line">// Include max() and min() missing from MicroSoft Visual C++.</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"msdevstudio/MSconfig.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"Range.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;algorithm&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iostream&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cassert&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cmath&gt;</cpp:file></cpp:include>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>_MSC_VER</name></cpp:ifndef>
<using>using <name><name>std</name><operator>::</operator><name>floor</name></name>;</using>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<using>using <name><name>std</name><operator>::</operator><name>ostream</name></name>;</using>
<using>using <name><name>std</name><operator>::</operator><name>max</name></name>;</using>
<using>using <name><name>std</name><operator>::</operator><name>min</name></name>;</using>
<using>using <name><name>std</name><operator>::</operator><name>vector</name></name>;</using>

<constructor><name><name>Range</name><operator>::</operator><name>Range</name></name> <parameter_list>( )</parameter_list>
  <member_init_list>: <call><name>m_min</name><argument_list>( <argument><expr><literal type="number">0.0</literal></expr></argument> )</argument_list></call>,
    <call><name>m_max</name><argument_list>( <argument><expr><literal type="number">0.0</literal></expr></argument> )</argument_list></call>,
    <call><name>m_pos</name><argument_list>( <argument><expr><name>DBL_MAX</name></expr></argument> )</argument_list></call>,
    <call><name>m_empty</name><argument_list>( <argument><expr><literal type="boolean">true</literal></expr></argument> )</argument_list></call>
</member_init_list><block>{<block_content>
</block_content>}</block></constructor>

<constructor><name><name>Range</name><operator>::</operator><name>Range</name></name> <parameter_list>( <parameter><decl><type><name>double</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>p</name></decl></parameter> )</parameter_list>
<block>{<block_content>

  <comment type="line">// x and y are being passed as 'nan' in some cases, leading to failure</comment>
  <comment type="line">// of assertion below. I dont know why they are being passed as nan and</comment>
  <comment type="line">// from where.</comment>

  <if_stmt><if>if <condition>( <expr><name>x</name> <operator>&gt;</operator> <name>y</name></expr> )</condition> <block>{<block_content>
    <expr_stmt><expr><name>m_min</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 
    <expr_stmt><expr><name>m_max</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>m_pos</name> <operator>=</operator> <name>DBL_MAX</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>m_empty</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
  </block_content>}</block></if>
  <else>else<block>{<block_content>
    <expr_stmt><expr><name>m_min</name> <operator>=</operator> <name>x</name></expr>;</expr_stmt> 
    <expr_stmt><expr><name>m_max</name> <operator>=</operator> <name>y</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>m_pos</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>m_empty</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <comment type="line">// This assertion is failing.</comment>
  <comment type="line">//assert ( m_min &lt;= m_max );</comment>

  <comment type="line">//This is a dirty fix:</comment>
  <if_stmt><if>if <condition>( <expr><operator>!</operator> <operator>(</operator> <name>m_min</name> <operator>&lt;=</operator> <name>m_max</name> <operator>)</operator></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name>m_min</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 
    <expr_stmt><expr><name>m_max</name> <operator>=</operator> <literal type="number">0.1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>m_pos</name> <operator>=</operator> <name>DBL_MAX</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>m_empty</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>assert</name> <argument_list>( <argument><expr><name>m_min</name> <operator>&lt;=</operator> <name>m_max</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></constructor>

<constructor><name><name>Range</name><operator>::</operator>
<name>Range</name></name> <parameter_list>( <parameter><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>vector</name> <argument_list type="generic">&lt; <argument><expr><name>double</name></expr></argument> &gt;</argument_list></name> <modifier>&amp;</modifier></type> <name>array</name></decl></parameter> )</parameter_list>
<comment type="line">//   : m_min ( DBL_MAX ),</comment>
<comment type="line">//     m_max ( -DBL_MAX ),</comment>
<comment type="line">//     m_pos ( DBL_MAX )</comment>
<block>{<block_content>
  <expr_stmt><expr><call><name>setRange</name> <argument_list>( <argument><expr><call><name><name>array</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>array</name><operator>.</operator><name>end</name></name> <argument_list>()</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></constructor>

<function><type><name>double</name></type>
<name><name>Range</name><operator>::</operator><name>low</name></name><parameter_list>()</parameter_list> <specifier>const</specifier>
<block>{<block_content>
  <return>return <expr><name>m_min</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name><name>Range</name><operator>::</operator><name>setLow</name></name> <parameter_list>( <parameter><decl><type><name>double</name></type> <name>x</name></decl></parameter> )</parameter_list>
<block>{<block_content>
  <expr_stmt><expr><name>m_min</name> <operator>=</operator> <name>x</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert</name> <argument_list>( <argument><expr><name>m_min</name> <operator>&lt;=</operator> <name>m_max</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>double</name></type>
<name><name>Range</name><operator>::</operator><name>high</name></name><parameter_list>()</parameter_list> <specifier>const</specifier>
<block>{<block_content>
  <return>return <expr><name>m_max</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name><name>Range</name><operator>::</operator><name>setHigh</name></name> <parameter_list>( <parameter><decl><type><name>double</name></type> <name>x</name></decl></parameter> )</parameter_list>
<block>{<block_content>
  <expr_stmt><expr><name>m_max</name> <operator>=</operator> <name>x</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert</name> <argument_list>( <argument><expr><name>m_min</name> <operator>&lt;=</operator> <name>m_max</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>double</name></type>
<name><name>Range</name><operator>::</operator><name>pos</name></name><parameter_list>()</parameter_list> <specifier>const</specifier>
<block>{<block_content>
  <return>return <expr><name>m_pos</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name><name>Range</name><operator>::</operator><name>setPos</name></name> <parameter_list>(<parameter><decl><type><name>double</name></type> <name>x</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <expr_stmt><expr><name>m_pos</name> <operator>=</operator> <name>x</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert</name> <argument_list>( <argument><expr><name>m_min</name> <operator>&lt;=</operator> <name>m_max</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> 
<name><name>Range</name><operator>::</operator><name>setRange</name></name> <parameter_list>( <parameter><decl><type><name>double</name></type> <name>low</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>high</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>pos</name></decl></parameter> )</parameter_list>
<block>{<block_content>
  <expr_stmt><expr><name>m_min</name> <operator>=</operator> <name>low</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>m_max</name> <operator>=</operator> <name>high</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>m_pos</name> <operator>=</operator> <name>pos</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert</name> <argument_list>( <argument><expr><name>m_min</name> <operator>&lt;=</operator> <name>m_max</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="line">// double</comment>
<comment type="line">// Range::length() const</comment>
<comment type="line">// {</comment>
<comment type="line">//   return (m_max - m_min);</comment>
<comment type="line">// }</comment>

<function><type><name>void</name></type>
<name><name>Range</name><operator>::</operator><name>setLength</name></name> <parameter_list>( <parameter><decl><type><name>double</name></type> <name>val</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>high_hold</name></decl></parameter> )</parameter_list>
<block>{<block_content>
  <if_stmt><if>if<condition>( <expr><name>high_hold</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name>m_min</name> <operator>=</operator> <name>m_max</name> <operator>-</operator> <name>val</name></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name>m_max</name> <operator>=</operator> <name>m_min</name> <operator>+</operator> <name>val</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <expr_stmt><expr><call><name>assert</name> <argument_list>( <argument><expr><name>m_min</name> <operator>&lt;=</operator> <name>m_max</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>bool</name></type>
<name><name>Range</name><operator>::</operator><name>includes</name></name> <parameter_list>( <parameter><decl><type><name>double</name></type> <name>val</name></decl></parameter> )</parameter_list> <specifier>const</specifier>
<block>{<block_content>
  <return>return <expr><name>val</name> <operator>&gt;=</operator> <name>m_min</name> <operator>&amp;&amp;</operator> <name>val</name> <operator>&lt;=</operator> <name>m_max</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type>
<name><name>Range</name><operator>::</operator>
<name>excludes</name></name> <parameter_list>( <parameter><decl><type><name>double</name></type> <name>value</name></decl></parameter> )</parameter_list> <specifier>const</specifier>
<block>{<block_content>
  <return>return <expr><name><name>value</name> <argument_list type="generic">&lt; <argument><expr><name>m_min</name> <operator>||</operator> <name>value</name></expr></argument> &gt;</argument_list></name> <name>m_max</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>double</name></type>
<name><name>Range</name><operator>::</operator>
<name>fraction</name></name> <parameter_list>( <parameter><decl><type><name>double</name></type> <name>value</name></decl></parameter> )</parameter_list> <specifier>const</specifier>
<block>{<block_content>
  <return>return <expr><operator>(</operator> <name>value</name> <operator>-</operator> <name>m_min</name> <operator>)</operator> <operator>/</operator> <operator>(</operator> <name>m_max</name> <operator>-</operator> <name>m_min</name> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name><name>Range</name><operator>::</operator><name>setEmpty</name></name> <parameter_list>( <parameter><decl><type><name>bool</name></type> <name>yes</name></decl></parameter> )</parameter_list>
<block>{<block_content>
  <expr_stmt><expr><name>m_empty</name> <operator>=</operator> <name>yes</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name><name>Range</name><operator>::</operator><name>setUnion</name></name> <parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>Range</name> <modifier>&amp;</modifier></type> <name>range</name></decl></parameter> )</parameter_list>
<block>{<block_content>
  <if_stmt><if>if <condition>( <expr><name>m_empty</name></expr> )</condition> <block>{<block_content>
    <expr_stmt><expr><name>m_min</name> <operator>=</operator> <name><name>range</name><operator>.</operator><name>m_min</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>m_max</name> <operator>=</operator> <name><name>range</name><operator>.</operator><name>m_max</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>m_pos</name> <operator>=</operator> <name><name>range</name><operator>.</operator><name>m_pos</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>m_empty</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
  </block_content>}</block></if>
  <else>else <block>{<block_content>
    <expr_stmt><expr><name>m_min</name> <operator>=</operator> <call><name>min</name> <argument_list>( <argument><expr><name>m_min</name></expr></argument>, <argument><expr><name><name>range</name><operator>.</operator><name>m_min</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>m_max</name> <operator>=</operator> <call><name>max</name> <argument_list>( <argument><expr><name>m_max</name></expr></argument>, <argument><expr><name><name>range</name><operator>.</operator><name>m_max</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>m_pos</name> <operator>=</operator> <call><name>min</name> <argument_list>( <argument><expr><name>m_pos</name></expr></argument>, <argument><expr><name><name>range</name><operator>.</operator><name>m_pos</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <expr_stmt><expr><call><name>assert</name> <argument_list>( <argument><expr><name>m_min</name> <operator>&lt;=</operator> <name>m_max</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name><name>Range</name><operator>::</operator><name>setIntersect</name></name> <parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>Range</name> <modifier>&amp;</modifier></type> <name>range</name></decl></parameter> )</parameter_list>
<block>{<block_content>
  <if_stmt><if>if <condition>( <expr><name>m_min</name> <operator>&gt;</operator> <name><name>range</name><operator>.</operator><name>m_max</name></name> <operator>||</operator> <name>m_max</name> <operator>&lt;</operator> <name><name>range</name><operator>.</operator><name>m_min</name></name></expr> )</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
  <expr_stmt><expr><name>m_min</name> <operator>=</operator> <call><name>max</name> <argument_list>( <argument><expr><name>m_min</name></expr></argument>, <argument><expr><name><name>range</name><operator>.</operator><name>m_min</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>m_max</name> <operator>=</operator> <call><name>min</name> <argument_list>( <argument><expr><name>m_max</name></expr></argument>, <argument><expr><name><name>range</name><operator>.</operator><name>m_max</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>m_pos</name> <operator>=</operator> <call><name>max</name> <argument_list>( <argument><expr><name>m_pos</name></expr></argument>, <argument><expr><name><name>range</name><operator>.</operator><name>m_min</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  
  <expr_stmt><expr><call><name>assert</name> <argument_list>( <argument><expr><name>m_min</name> <operator>&lt;=</operator> <name>m_max</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name><name>Range</name><operator>::</operator><name>numberOfBins</name></name> <parameter_list>( <parameter><decl><type><name>double</name></type> <name>width</name></decl></parameter> )</parameter_list> <specifier>const</specifier>
<block>{<block_content>
  <expr_stmt><expr><call><name>assert</name> <argument_list>( <argument><expr><name>m_max</name> <operator>&gt;</operator> <name>m_min</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><cast type="static">static_cast<argument_list type="generic">&lt; <argument><expr><name>int</name></expr></argument> &gt;</argument_list> <argument_list>( <argument><expr><call><name>floor</name> <argument_list>( <argument><expr><operator>(</operator><name>m_max</name> <operator>-</operator> <name>m_min</name><operator>)</operator> <operator>/</operator> <name>width</name> <operator>+</operator> <literal type="number">0.5</literal></expr></argument> )</argument_list></call></expr></argument> )</argument_list></cast></expr>;</return>
</block_content>}</block></function>

<function type="operator"><type><name>ostream</name> <modifier>&amp;</modifier></type> <name>operator <name>&lt;&lt;</name></name> <parameter_list>( <parameter><decl><type><name>ostream</name> <modifier>&amp;</modifier></type> <name>o</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>Range</name> <modifier>&amp;</modifier></type> <name>range</name></decl></parameter> )</parameter_list>
<block>{<block_content>
  <expr_stmt><expr><name>o</name> <operator>&lt;&lt;</operator> <literal type="string">"range = {"</literal>
    <operator>&lt;&lt;</operator> <name><name>range</name><operator>.</operator><name>m_min</name></name> <operator>&lt;&lt;</operator> <literal type="string">", "</literal>
    <operator>&lt;&lt;</operator> <name><name>range</name><operator>.</operator><name>m_max</name></name> <operator>&lt;&lt;</operator> <literal type="string">"; "</literal>
    <operator>&lt;&lt;</operator> <name><name>range</name><operator>.</operator><name>m_pos</name></name> <operator>&lt;&lt;</operator> <literal type="string">"}"</literal></expr>;</expr_stmt>
  <return>return <expr><name>o</name></expr>;</return>
</block_content>}</block></function>
</unit>

</unit>
